---
root: true
rules:
  lines-between-class-members:
  - error
  - always
  - exceptAfterSingleLine: true
  quotes:
    - error
    - double
    - avoidEscape: true
  semi: warn

  eslint-comments/no-unused-disable: error
  eslint-comments/no-unused-enable: error

  prettier/prettier: error

  "@typescript-eslint/await-thenable": error
  "@typescript-eslint/ban-types": error

  # Turn this off because it fails on existing noop methods.
  class-methods-use-this: off
  # Allow console.log because official docs seem say this is the
  # recommended way to have logging from your extension
  no-console: off
  # This is not useful since prettier inserts semicolons everywhere.
  no-plusplus: off
  # This rule generates false positives with TypeScript enums
  no-shadow: off
  # Turn this off because eslint gets this wrong for instance variables
  # and the TypeScript compiler already checks for possibly undefined
  # variables
  no-undef: off
  # Turn this off because eslint can't seem to figure out imports
  # and class names used in type declarations, and the TypeScript
  # compiler already checks for unused vars
  no-unused-vars: off

  # ----- rules from stripe-internal/eslint-config-stripe ---------------------

  # ----- rules/best-practices.js ------
  # Functions can sometimes return values or sometimes not
  consistent-return: off
  # If/else blocks must use curly braces.
  curly: error
  # Switch statements must have a default case.
  default-case: error
  # Require dot notation for property access unless they are snake_cased.
  dot-notation: [error, {allowPattern: '^_*[A-Za-z0-9]+(_[A-Za-z0-9]+)+$'}]
  # Disallow == and != in favor of === and !==
  eqeqeq: error
  # Allow case declarations
  no-case-declarations: off
  # Allow else after a return in an if/else block
  no-else-return: off
  # Disallow reassignment of function parameters. Prop assignment is okay.
  no-param-reassign: [error, {props: false}]
  # Disallow unused expressions
  no-unused-expressions: [error, {allowShortCircuit: true}]
  # Disallow unnecessary .call() and .apply()
  no-useless-call: error

  # ----- rules/errors.js -----
  # Allow empty catch blocks
  no-empty: [error, {allowEmptyCatch: true}]
  no-mixed-operators: off
  no-prototype-builtins: off

  # ----- rules/es6.js -----
  arrow-parens: [error, 'always']
  # Allow any usage of braces with arrow functions
  arrow-body-style: off
  # Require spaces around arrow functions
  arrow-spacing: error
  # Require object and property shorthand
  object-shorthand: [error, 'always']
  # Don't require arrow functions for callbacks
  prefer-arrow-callback: off
  # Require consts if there is no reassignment
  prefer-const: error

  # ----- rules/imports.js -----
  import/extensions: off
  # Require imports before everything else
  import/imports-first: error
  # Ensure named imports correspond to a named export in the remote file
  import/named: error
  import/no-extraneous-dependencies: off
  import/no-restricted-paths: off
  import/no-unresolved: off
  import/prefer-default-export: off

  # ----- rules/node.js -----
  global-require: off

  # ----- rules/style.js -----
  # Allow function expressions to not have names
  func-names: off
  # Require two spaces for indent
  indent: [error, 2, {SwitchCase: 1}]
  # Maximum line length
  max-len: [error, 150]
  # Don't require a capital letter for constructors
  new-cap: off
  # Allow chains up to five deep
  newline-per-chained-call: [error, {ignoreChainWithDepth: 5}]
  # Disallow multiple empty lines
  no-multiple-empty-lines: error
  # Disallow dangling underscores
  no-underscore-dangle: [error, {enforceInMethodNames: true}]
  # Allow useless computed keys.
  # We disable useless computed _string_ keys in a forked version of this
  # rule, no-useless-computed-string-key. We allow computed number keys
  # because Flow doesn’t support number keys unless they’re declared using
  # bracket syntax. Adjusting the rule allows us to use numbers as keys in
  # Flow’s indexer types.
  no-useless-computed-key: off
  # Disallow padding inside curly braces
  # 'object-curly-spacing: [error, 'never']
  # Diallow unnecessary quotes around property names
  quote-props: [error, 'as-needed']
  # Disallow spaces before function parens
  # 'space-before-function-paren: [error, 'never']
  # Require spaces immediately following a comment
  spaced-comment: [error, 'always']
  # Disallow spacing in template strings
  template-curly-spacing: [error, 'never']

  # ----- rules/variables.js -----
  # Disallow global event and fdescribe
  no-restricted-globals: [error, 'event', 'fdescribe']
  # Disallow use before definition
  no-use-before-define: [error, {functions: false, classes: false}]

extends:
  - eslint-config-airbnb/rules/react
  - eslint-config-airbnb-base
  - prettier
plugins:
  - "@typescript-eslint"
  - eslint-comments
  - prettier
  - import
parser: "@typescript-eslint/parser"
overrides:
  - files: '*.ts'
    parserOptions:
      project: './tsconfig.json'
env:
  es6: true
parserOptions:
  ecmaVersion: 6
  ecmaFeatures:
    jsx: true
  sourceType: 'module'
settings:
  import/ignore:
    - node_modules
