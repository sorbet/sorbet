# typed: true

# DO NOT EDIT!
# This file is autogenerated. Regenerate with:
#     bazel run //rbi:update_procs_rbi

class Proc0 < Proc
  Return = type_member(:out)

  sig {returns(Return)}
  def call(); end

  alias_method :[], :call
end

class Proc1 < Proc
  Return = type_member(:out)
  Arg0 = type_member(:in)

  sig do
    params(
      arg0: Arg0,
    )
    .returns(Return)
  end
  def call(arg0); end

  alias_method :[], :call
end

class Proc2 < Proc
  Return = type_member(:out)
  Arg0 = type_member(:in)
  Arg1 = type_member(:in)

  sig do
    params(
      arg0: Arg0,
      arg1: Arg1,
    )
    .returns(Return)
  end
  def call(arg0, arg1); end

  alias_method :[], :call
end

class Proc3 < Proc
  Return = type_member(:out)
  Arg0 = type_member(:in)
  Arg1 = type_member(:in)
  Arg2 = type_member(:in)

  sig do
    params(
      arg0: Arg0,
      arg1: Arg1,
      arg2: Arg2,
    )
    .returns(Return)
  end
  def call(arg0, arg1, arg2); end

  alias_method :[], :call
end

class Proc4 < Proc
  Return = type_member(:out)
  Arg0 = type_member(:in)
  Arg1 = type_member(:in)
  Arg2 = type_member(:in)
  Arg3 = type_member(:in)

  sig do
    params(
      arg0: Arg0,
      arg1: Arg1,
      arg2: Arg2,
      arg3: Arg3,
    )
    .returns(Return)
  end
  def call(arg0, arg1, arg2, arg3); end

  alias_method :[], :call
end

class Proc5 < Proc
  Return = type_member(:out)
  Arg0 = type_member(:in)
  Arg1 = type_member(:in)
  Arg2 = type_member(:in)
  Arg3 = type_member(:in)
  Arg4 = type_member(:in)

  sig do
    params(
      arg0: Arg0,
      arg1: Arg1,
      arg2: Arg2,
      arg3: Arg3,
      arg4: Arg4,
    )
    .returns(Return)
  end
  def call(arg0, arg1, arg2, arg3, arg4); end

  alias_method :[], :call
end

class Proc6 < Proc
  Return = type_member(:out)
  Arg0 = type_member(:in)
  Arg1 = type_member(:in)
  Arg2 = type_member(:in)
  Arg3 = type_member(:in)
  Arg4 = type_member(:in)
  Arg5 = type_member(:in)

  sig do
    params(
      arg0: Arg0,
      arg1: Arg1,
      arg2: Arg2,
      arg3: Arg3,
      arg4: Arg4,
      arg5: Arg5,
    )
    .returns(Return)
  end
  def call(arg0, arg1, arg2, arg3, arg4, arg5); end

  alias_method :[], :call
end

class Proc7 < Proc
  Return = type_member(:out)
  Arg0 = type_member(:in)
  Arg1 = type_member(:in)
  Arg2 = type_member(:in)
  Arg3 = type_member(:in)
  Arg4 = type_member(:in)
  Arg5 = type_member(:in)
  Arg6 = type_member(:in)

  sig do
    params(
      arg0: Arg0,
      arg1: Arg1,
      arg2: Arg2,
      arg3: Arg3,
      arg4: Arg4,
      arg5: Arg5,
      arg6: Arg6,
    )
    .returns(Return)
  end
  def call(arg0, arg1, arg2, arg3, arg4, arg5, arg6); end

  alias_method :[], :call
end

class Proc8 < Proc
  Return = type_member(:out)
  Arg0 = type_member(:in)
  Arg1 = type_member(:in)
  Arg2 = type_member(:in)
  Arg3 = type_member(:in)
  Arg4 = type_member(:in)
  Arg5 = type_member(:in)
  Arg6 = type_member(:in)
  Arg7 = type_member(:in)

  sig do
    params(
      arg0: Arg0,
      arg1: Arg1,
      arg2: Arg2,
      arg3: Arg3,
      arg4: Arg4,
      arg5: Arg5,
      arg6: Arg6,
      arg7: Arg7,
    )
    .returns(Return)
  end
  def call(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); end

  alias_method :[], :call
end

class Proc9 < Proc
  Return = type_member(:out)
  Arg0 = type_member(:in)
  Arg1 = type_member(:in)
  Arg2 = type_member(:in)
  Arg3 = type_member(:in)
  Arg4 = type_member(:in)
  Arg5 = type_member(:in)
  Arg6 = type_member(:in)
  Arg7 = type_member(:in)
  Arg8 = type_member(:in)

  sig do
    params(
      arg0: Arg0,
      arg1: Arg1,
      arg2: Arg2,
      arg3: Arg3,
      arg4: Arg4,
      arg5: Arg5,
      arg6: Arg6,
      arg7: Arg7,
      arg8: Arg8,
    )
    .returns(Return)
  end
  def call(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); end

  alias_method :[], :call
end

class Proc10 < Proc
  Return = type_member(:out)
  Arg0 = type_member(:in)
  Arg1 = type_member(:in)
  Arg2 = type_member(:in)
  Arg3 = type_member(:in)
  Arg4 = type_member(:in)
  Arg5 = type_member(:in)
  Arg6 = type_member(:in)
  Arg7 = type_member(:in)
  Arg8 = type_member(:in)
  Arg9 = type_member(:in)

  sig do
    params(
      arg0: Arg0,
      arg1: Arg1,
      arg2: Arg2,
      arg3: Arg3,
      arg4: Arg4,
      arg5: Arg5,
      arg6: Arg6,
      arg7: Arg7,
      arg8: Arg8,
      arg9: Arg9,
    )
    .returns(Return)
  end
  def call(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); end

  alias_method :[], :call
end

