The srb rbi command is in maintenance mode, please use Tapioca instead.

To switch, add Tapioca to your Gemfile then run bundle install to install it:

    gem "tapioca", require: false, :group => :development

Once Tapioca is installed, simply run tapioca init to initialize your project with Sorbet and generate the necessary RBI files:

    bundle exec tapioca init

For more information, please see https://github.com/Shopify/tapioca.


Hey there!

This script will get this project ready to use with Sorbet by creating a
sorbet/ folder for your project. It will contain:

- a config file
- a bunch of 'RBI files'

RBI stands for 'Ruby Interface'; these files define classes, methods, and
constants that exist, but which Sorbet doesn't always know about.

Heads up:

To set up your project, this script will take two potentially destructive
actions:

1.  It will require every file in your project. Specifically, every script in
    your project will be run, unless that script checks if __FILE__ == $PROGRAM_NAME
    before running any code, or has the magic comment # typed: ignore in it.

2.  It will add a comment to the top of every file (like # typed: false or
    # typed: true, depending on how many errors were found in that file.)

SRB_YES set, continuing
Generating: sorbet/config
Generating: sorbet/rbi/sorbet-typed/
Generating: sorbet/rbi/gems/
Generating: sorbet/rbi/hidden-definitions/
Requiring all of your code
Naming all Modules
Got LoadError when trying to get nested name Bundler::Thor::RakeCompat
Generating <tmp>/reflection.rbi with X modules and Y aliases
Printing your code's symbol table into <tmp>/from-source.json
Printing <tmp>/reflection.rbi's symbol table into <tmp>/reflection.json
Reading <tmp>/from-source.json
Reading <tmp>/reflection.json
Building rbi id to symbol map
Building source id to symbol map
Writing <tmp>/hidden.rbi.tmp
Generating split RBIs into sorbet/rbi/hidden-definitions/
Generating: sorbet/rbi/todo.rbi

Done!

This project is now set up for use with Sorbet. The sorbet/ folder should exist
and look something like this:

    sorbet/
     config                      # Default options to be passed to sorbet on every run
     rbi/
         sorbet-typed/           # Community written type definition files for your gems
         gems/                   # Autogenerated type definitions for your gems (from reflection)
         hidden-definitions/     # All definitions that exist at runtime, but Sorbet couldn't see statically
         todo.rbi                # Constants which were still missing, even after the three steps above.

Please check this whole folder into version control.

What's next?

Up to you! First things first, you'll probably want to typecheck your project:

    srb tc

Other than that, it's up to you!
We recommend skimming these docs to get a feel for how to use Sorbet:

- Gradual Type Checking (https://sorbet.org/docs/gradual)
- Enabling Static Checks (https://sorbet.org/docs/static)
- RBI Files (https://sorbet.org/docs/rbi)

If instead you want to explore your files locally, here are some things to try:

- Upgrade a file marked # typed: false to # typed: true.
  Then, run srb tc and try to fix any errors.
- Add signatures to your methods with `sig`.
  For how, read: https://sorbet.org/docs/sigs
- Check whether things that show up in the TODO RBI file actually exist in your project.
  It's possible some of these constants are typos.
- Upgrade a file marked # typed: ignore to # typed: false.
  Then, run srb rbi hidden-definitions && srb tc and try to fix any errors.

Please don't hesitate to give us your feedback!
    
