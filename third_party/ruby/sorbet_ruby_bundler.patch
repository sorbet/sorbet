From 074be8ed31b9f5df253ca07dd9cc9a12443bcfd9 Mon Sep 17 00:00:00 2001
From: Adam Procter <aprocter@stripe.com>
Date: Mon, 18 Oct 2021 14:23:48 -0700
Subject: [PATCH] Patch bundler to avoid loading "set" too early

---
 lib/bundler/definition.rb                        |  5 +++--
 lib/bundler/index.rb                             | 16 +++++++++++-----
 lib/bundler/resolver.rb                          |  6 ++++--
 lib/bundler/source_list.rb                       | 12 ++++++++----
 lib/bundler/spec_set.rb                          | 10 +++++++---
 .../molinillo/lib/molinillo/dependency_graph.rb  |  5 +++--
 .../lib/molinillo/dependency_graph/vertex.rb     | 12 +++++++++---
 lib/bundler/vendor/thor/lib/thor.rb              | 15 +++++++++------
 8 files changed, 54 insertions(+), 27 deletions(-)

diff --git a/lib/ruby/site_ruby/2.7.0/bundler/definition.rb b/lib/ruby/site_ruby/2.7.0/bundler/definition.rb
index d6fbb0b5b7d..abd66cae638 100644
--- a/lib/ruby/site_ruby/2.7.0/bundler/definition.rb
+++ b/lib/ruby/site_ruby/2.7.0/bundler/definition.rb
@@ -1,7 +1,6 @@
 # frozen_string_literal: true
 
 require_relative "lockfile_parser"
-require "set"
 
 module Bundler
   class Definition
@@ -589,7 +588,9 @@ def dependencies_for_source_changed?(source, locked_source = source)
       deps_for_source = @dependencies.select {|s| s.source == source }
       locked_deps_for_source = @locked_deps.values.select {|dep| dep.source == locked_source }
 
-      Set.new(deps_for_source) != Set.new(locked_deps_for_source)
+      deps_h = deps_for_source.each_with_object(Hash.new(false)) { |v, h| h[v] = true }
+      locked_deps_h = locked_deps_for_source.each_with_object(Hash.new(false)) { |v, h| h[v] = true }
+      deps_h != locked_deps_h
     end
 
     def specs_for_source_changed?(source)
diff --git a/lib/ruby/site_ruby/2.7.0/bundler/index.rb b/lib/ruby/site_ruby/2.7.0/bundler/index.rb
index 9166a927388..b853fa754f5 100644
--- a/lib/ruby/site_ruby/2.7.0/bundler/index.rb
+++ b/lib/ruby/site_ruby/2.7.0/bundler/index.rb
@@ -1,7 +1,5 @@
 # frozen_string_literal: true
 
-require "set"
-
 module Bundler
   class Index
     include Enumerable
@@ -65,11 +63,16 @@ def search(query, base = nil)
     def unsorted_search(query, base)
       results = local_search(query, base)
 
-      seen = results.map(&:full_name).to_set unless @sources.empty?
+      if !@sources.empty?
+        seen = results.map(&:full_name).each_with_object(Hash.new(false)) { |v, h| h[v] = true }
+      end
 
       @sources.each do |source|
         source.unsorted_search(query, base).each do |spec|
-          results << spec if seen.add?(spec.full_name)
+          if not seen[spec.full_name]
+            seen[spec.full_name] = true
+            results << spec
+          end
         end
       end
 
@@ -170,7 +173,10 @@ def ==(other)
     def dependencies_eql?(spec, other_spec)
       deps       = spec.dependencies.select {|d| d.type != :development }
       other_deps = other_spec.dependencies.select {|d| d.type != :development }
-      Set.new(deps) == Set.new(other_deps)
+
+      deps_h = deps.each_with_object(Hash.new(false)) { |v, h| h[v] = true }
+      other_h = other_deps.each_with_object(Hash.new(false)) { |v, h| h[v] = true }
+      deps_h == other_h
     end
 
     def add_source(index)
diff --git a/lib/ruby/site_ruby/2.7.0/bundler/resolver.rb b/lib/ruby/site_ruby/2.7.0/bundler/resolver.rb
index c7caf01c7d3..134234ccf78 100644
--- a/lib/ruby/site_ruby/2.7.0/bundler/resolver.rb
+++ b/lib/ruby/site_ruby/2.7.0/bundler/resolver.rb
@@ -16,7 +16,9 @@ class Resolver
     # <GemBundle>,nil:: If the list of dependencies can be resolved, a
     #   collection of gemspecs is returned. Otherwise, nil is returned.
     def self.resolve(requirements, index, source_requirements = {}, base = [], gem_version_promoter = GemVersionPromoter.new, additional_base_requirements = [], platforms = nil)
-      platforms = Set.new(platforms) if platforms
+      if platforms
+        platforms = platforms.each_with_object(Hash.new(false)) { |v, h| h[v] = true }
+      end
       base = SpecSet.new(base) unless base.is_a?(SpecSet)
       resolver = new(index, source_requirements, base, gem_version_promoter, additional_base_requirements, platforms)
       result = resolver.start(requirements)
@@ -184,7 +186,7 @@ def name_for_locking_dependency_source
 
     def requirement_satisfied_by?(requirement, activated, spec)
       return false unless requirement.matches_spec?(spec) || spec.source.is_a?(Source::Gemspec)
-      spec.activate_platform!(requirement.__platform) if !@platforms || @platforms.include?(requirement.__platform)
+      spec.activate_platform!(requirement.__platform) if !@platforms || @platforms[requirement.__platform]
       true
     end
 
diff --git a/lib/ruby/site_ruby/2.7.0/bundler/source_list.rb b/lib/ruby/site_ruby/2.7.0/bundler/source_list.rb
index d3f649a12c3..058fee8120c 100644
--- a/lib/ruby/site_ruby/2.7.0/bundler/source_list.rb
+++ b/lib/ruby/site_ruby/2.7.0/bundler/source_list.rb
@@ -1,7 +1,5 @@
 # frozen_string_literal: true
 
-require "set"
-
 module Bundler
   class SourceList
     attr_reader :path_sources,
@@ -99,7 +97,10 @@ def replace_sources!(replacement_sources)
       @rubygems_aggregate = replacement_rubygems if replacement_rubygems
 
       return true if !equal_sources?(lock_sources, replacement_sources) && !equivalent_sources?(lock_sources, replacement_sources)
-      return true if replacement_rubygems && rubygems_remotes.to_set != replacement_rubygems.remotes.to_set
+      return false if !replacement_rubygems
+      rubygems_h = rubygems_remotes.each_with_object(Hash.new(false)) { |v, h| h[v] = true }
+      replacement_h = replacement_rubygems.remotes.each_with_object(Hash.new(false)) { |v, h| h[v] = true }
+      return true if rubygems_h != replacement_h
 
       false
     end
@@ -153,7 +154,10 @@ def warn_on_git_protocol(source)
     end
 
     def equal_sources?(lock_sources, replacement_sources)
-      lock_sources.to_set == replacement_sources.to_set
+      # lock_sources.to_set == replacement_sources.to_set
+      lock_sources_h = lock_sources.each_with_object(Hash.new(false)) { |v, h| h[v] = true }
+      replacement_sources_h = replacement_sources.each_with_object(Hash.new(false)) { |v, h| h[v] = true }
+      lock_sources_h == replacement_sources_h
     end
 
     def equal_source?(source, other_source)
diff --git a/lib/ruby/site_ruby/2.7.0/bundler/spec_set.rb b/lib/ruby/site_ruby/2.7.0/bundler/spec_set.rb
index 463113ef8e0..f0e933b24a9 100644
--- a/lib/ruby/site_ruby/2.7.0/bundler/spec_set.rb
+++ b/lib/ruby/site_ruby/2.7.0/bundler/spec_set.rb
@@ -1,7 +1,6 @@
 # frozen_string_literal: true
 
 require "tsort"
-require "set"
 
 module Bundler
   class SpecSet
@@ -13,14 +12,19 @@ def initialize(specs)
     end
 
     def for(dependencies, skip = [], check = false, match_current_platform = false, raise_on_missing = true)
-      handled = Set.new
+      handled = Hash.new(false)
       deps = dependencies.dup
       specs = []
       skip += ["bundler"]
 
       loop do
         break unless dep = deps.shift
-        next if !handled.add?(dep) || skip.include?(dep.name)
+        if handled[dep]
+          next
+        else
+          handled[dep] = true
+          next if skip.include?(dep.name)
+        end
 
         if spec = spec_for_dependency(dep, match_current_platform)
           specs << spec
diff --git a/lib/ruby/site_ruby/2.7.0/bundler/vendor/molinillo/lib/molinillo/dependency_graph.rb b/lib/ruby/site_ruby/2.7.0/bundler/vendor/molinillo/lib/molinillo/dependency_graph.rb
index 31578bb5bf9..9690b1143c5 100644
--- a/lib/ruby/site_ruby/2.7.0/bundler/vendor/molinillo/lib/molinillo/dependency_graph.rb
+++ b/lib/ruby/site_ruby/2.7.0/bundler/vendor/molinillo/lib/molinillo/dependency_graph.rb
@@ -1,6 +1,5 @@
 # frozen_string_literal: true
 
-require 'set'
 require 'tsort'
 
 require_relative 'dependency_graph/log'
@@ -134,7 +133,9 @@ def ==(other)
         other_vertex = other.vertex_named(name)
         return false unless other_vertex
         return false unless vertex.payload == other_vertex.payload
-        return false unless other_vertex.successors.to_set == vertex.successors.to_set
+        succs = vertex.successors.each_with_object(Hash.new(false)) { |v, h| h[v] = true }
+        other_succs = other_vertex.successors.each_with_object(Hash.new(false)) { |v, h| h[v] = true }
+        return false unless succs == other_succs
       end
     end
 
diff --git a/lib/ruby/site_ruby/2.7.0/bundler/vendor/molinillo/lib/molinillo/dependency_graph/vertex.rb b/lib/ruby/site_ruby/2.7.0/bundler/vendor/molinillo/lib/molinillo/dependency_graph/vertex.rb
index 41bc013143c..7d91f2fdb3a 100644
--- a/lib/ruby/site_ruby/2.7.0/bundler/vendor/molinillo/lib/molinillo/dependency_graph/vertex.rb
+++ b/lib/ruby/site_ruby/2.7.0/bundler/vendor/molinillo/lib/molinillo/dependency_graph/vertex.rb
@@ -59,7 +59,9 @@ def recursive_predecessors
       # @param [Set<Vertex>] vertices the set to add the predecessors to
       # @return [Set<Vertex>] the vertices of {#graph} where `self` is a
       #   {#descendent?}
-      def _recursive_predecessors(vertices = Set.new)
+      def _recursive_predecessors(vertices = nil)
+        require 'set'
+        vertices ||= Set.new
         incoming_edges.each do |edge|
           vertex = edge.origin
           next unless vertices.add?(vertex)
@@ -85,7 +87,9 @@ def recursive_successors
       # @param [Set<Vertex>] vertices the set to add the successors to
       # @return [Set<Vertex>] the vertices of {#graph} where `self` is an
       #   {#ancestor?}
-      def _recursive_successors(vertices = Set.new)
+      def _recursive_successors(vertices = nil)
+        require 'set'
+        vertices ||= Set.new
         outgoing_edges.each do |edge|
           vertex = edge.destination
           next unless vertices.add?(vertex)
@@ -138,7 +142,9 @@ def path_to?(other)
       # @param [Vertex] other the vertex to check if there's a path to
       # @param [Set<Vertex>] visited the vertices of {#graph} that have been visited
       # @return [Boolean] whether there is a path to `other` from `self`
-      def _path_to?(other, visited = Set.new)
+      def _path_to?(other, visited = nil)
+        require 'set'
+        visited ||= Set.new
         return false unless visited.add?(self)
         return true if equal?(other)
         successors.any? { |v| v._path_to?(other, visited) }
diff --git a/lib/ruby/site_ruby/2.7.0/bundler/vendor/thor/lib/thor.rb b/lib/ruby/site_ruby/2.7.0/bundler/vendor/thor/lib/thor.rb
index 01c0b2f83c8..11332d04262 100644
--- a/lib/ruby/site_ruby/2.7.0/bundler/vendor/thor/lib/thor.rb
+++ b/lib/ruby/site_ruby/2.7.0/bundler/vendor/thor/lib/thor.rb
@@ -1,4 +1,3 @@
-require "set"
 require_relative "thor/base"
 
 class Bundler::Thor
@@ -323,7 +322,7 @@ def check_unknown_options?(config) #:nodoc:
     # ==== Parameters
     # Symbol ...:: A list of commands that should be affected.
     def stop_on_unknown_option!(*command_names)
-      stop_on_unknown_option.merge(command_names)
+      command_names.each { |k| stop_on_unknown_option[k] = true }
     end
 
     def stop_on_unknown_option?(command) #:nodoc:
@@ -337,11 +336,11 @@ def stop_on_unknown_option?(command) #:nodoc:
     # ==== Parameters
     # Symbol ...:: A list of commands that should be affected.
     def disable_required_check!(*command_names)
-      disable_required_check.merge(command_names)
+      command_names.each { |k| disable_required_check[k] = true }
     end
 
     def disable_required_check?(command) #:nodoc:
-      command && disable_required_check.include?(command.name.to_sym)
+      command && disable_required_check[command.name.to_sym]
     end
 
     def deprecation_warning(message) #:nodoc:
@@ -354,12 +353,16 @@ def deprecation_warning(message) #:nodoc:
   protected
 
     def stop_on_unknown_option #:nodoc:
-      @stop_on_unknown_option ||= Set.new
+      @stop_on_unknown_option ||= Hash.new(false)
     end
 
     # help command has the required check disabled by default.
     def disable_required_check #:nodoc:
-      @disable_required_check ||= Set.new([:help])
+      if not @disable_required_check
+        @disable_required_check = Hash.new(false)
+        @disable_required_check[:help] = true
+      end
+      @disable_required_check
     end
 
     # The method responsible for dispatching given the args.
