ClassDef{
  kind = class
  name = EmptyTree
  symbol = <C <U <root>>>
  ancestors = [ConstantLit{
      symbol = (class ::<todo sym>)
      orig = nullptr
    }]
  rhs = [
    MethodDef{
      flags = {}
      name = <U has_named_rest_args><<U <todo method>>>
      args = [RestArg{ expr = UnresolvedIdent{
          kind = Local
          name = <U args>
        } }, BlockArg{ expr = UnresolvedIdent{
          kind = Local
          name = <U <blk>>
        } }]
      rhs = Send{
        flags = {privateOk}
        recv = ConstantLit{
          symbol = (class ::<Magic>)
          orig = nullptr
        }
        fun = <U <call-with-splat>>
        block = nullptr
        pos_args = 4
        args = [
          Self
          Literal{ value = :delegate }
          Send{
            flags = {}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <splat>>
            block = nullptr
            pos_args = 1
            args = [
              UnresolvedIdent{
                kind = Local
                name = <U args>
              }
            ]
          }
          Literal{ value = nil }
        ]
      }
    }

    MethodDef{
      flags = {}
      name = <U has_anonymous_rest_args><<U <todo method>>>
      args = [RestArg{ expr = UnresolvedIdent{
          kind = Local
          name = <U *>
        } }, BlockArg{ expr = UnresolvedIdent{
          kind = Local
          name = <U <blk>>
        } }]
      rhs = Send{
        flags = {privateOk}
        recv = ConstantLit{
          symbol = (class ::<Magic>)
          orig = nullptr
        }
        fun = <U <call-with-splat>>
        block = nullptr
        pos_args = 4
        args = [
          Self
          Literal{ value = :delegate }
          Send{
            flags = {}
            recv = Array{
              elems = [
              ]
            }
            fun = <U concat>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    flags = {}
                    recv = UnresolvedIdent{
                      kind = Local
                      name = <U <fwd-args>>
                    }
                    fun = <U to_a>
                    block = nullptr
                    pos_args = 0
                    args = [
                    ]
                  }
                ]
              }
            ]
          }
          Literal{ value = nil }
        ]
      }
    }
  ]
}
