Begin {
  stmts = [
    Assign {
      lhs = LVarLhs {
        name = <U regular>
      }
      rhs = Integer {
        val = "1"
      }
    }
    OpAsgn {
      left = LVarLhs {
        name = <U bitwise_and>
      }
      op = <U &>
      right = Integer {
        val = "2"
      }
    }
    OpAsgn {
      left = LVarLhs {
        name = <U bitwise_or>
      }
      op = <U |>
      right = Integer {
        val = "3"
      }
    }
    OpAsgn {
      left = LVarLhs {
        name = <U bitwise_xor>
      }
      op = <U ^>
      right = Integer {
        val = "4"
      }
    }
    OpAsgn {
      left = LVarLhs {
        name = <U shift_right>
      }
      op = <U >>>
      right = Integer {
        val = "5"
      }
    }
    OpAsgn {
      left = LVarLhs {
        name = <U shift_left>
      }
      op = <U <<>
      right = Integer {
        val = "6"
      }
    }
    OpAsgn {
      left = LVarLhs {
        name = <U add_assign>
      }
      op = <U +>
      right = Integer {
        val = "7"
      }
    }
    OpAsgn {
      left = LVarLhs {
        name = <U subtract_assign>
      }
      op = <U ->
      right = Integer {
        val = "8"
      }
    }
    OpAsgn {
      left = LVarLhs {
        name = <U modulo_assign>
      }
      op = <U %>
      right = Integer {
        val = "9"
      }
    }
    OpAsgn {
      left = LVarLhs {
        name = <U divide_assign>
      }
      op = <U />
      right = Integer {
        val = "10"
      }
    }
    OpAsgn {
      left = LVarLhs {
        name = <U multiply_assign>
      }
      op = <U *>
      right = Integer {
        val = "11"
      }
    }
    OpAsgn {
      left = LVarLhs {
        name = <U exponentiate_assign>
      }
      op = <U **>
      right = Integer {
        val = "12"
      }
    }
    AndAsgn {
      left = LVarLhs {
        name = <U lazy_and_assign>
      }
      right = Integer {
        val = "13"
      }
    }
    OrAsgn {
      left = LVarLhs {
        name = <U lazy_or_assgin>
      }
      right = Integer {
        val = "14"
      }
    }
    Masgn {
      lhs = Mlhs {
        exprs = [
          LVarLhs {
            name = <U target1>
          }
          LVarLhs {
            name = <U target2>
          }
        ]
      }
      rhs = Array {
        elts = [
          Integer {
            val = "15"
          }
          Integer {
            val = "16"
          }
        ]
      }
    }
  ]
}
