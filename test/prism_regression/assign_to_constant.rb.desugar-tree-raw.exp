ClassDef{
  kind = class
  name = EmptyTree
  symbol = <C <U <root>>>
  ancestors = [ConstantLit{
      symbol = (class ::<todo sym>)
      orig = nullptr
    }]
  rhs = [
    Assign{
      lhs = UnresolvedConstantLit{
        cnst = <C <U REGULAR>>
        scope = EmptyTree
      }
      rhs = Literal{ value = 1 }
    }

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    InsSeq{
      stats = [
        Assign{
          lhs = UnresolvedIdent{
            kind = Local
            name = <D <U <assignTemp>> $2>
          }
          rhs = Array{
            elems = [
              Literal{ value = 15 }
              Literal{ value = 16 }
            ]
          }
        }
        Assign{
          lhs = UnresolvedIdent{
            kind = Local
            name = <D <U <assignTemp>> $3>
          }
          rhs = Send{
            flags = {}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <expand-splat>>
            block = nullptr
            pos_args = 3
            args = [
              UnresolvedIdent{
                kind = Local
                name = <D <U <assignTemp>> $2>
              }
              Literal{ value = 2 }
              Literal{ value = 0 }
            ]
          }
        }
        Assign{
          lhs = UnresolvedConstantLit{
            cnst = <C <U TARGET1>>
            scope = EmptyTree
          }
          rhs = Send{
            flags = {}
            recv = UnresolvedIdent{
              kind = Local
              name = <D <U <assignTemp>> $3>
            }
            fun = <U []>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = 0 }
            ]
          }
        }
        Assign{
          lhs = UnresolvedConstantLit{
            cnst = <C <U TARGET2>>
            scope = EmptyTree
          }
          rhs = Send{
            flags = {}
            recv = UnresolvedIdent{
              kind = Local
              name = <D <U <assignTemp>> $3>
            }
            fun = <U []>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = 1 }
            ]
          }
        }
      ],
      expr = UnresolvedIdent{
        kind = Local
        name = <D <U <assignTemp>> $2>
      }
    }

    Assign{
      lhs = UnresolvedConstantLit{
        cnst = <C <U REGULAR>>
        scope = UnresolvedConstantLit{
          cnst = <C <U ConstantPath>>
          scope = EmptyTree
        }
      }
      rhs = Literal{ value = 101 }
    }

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    InsSeq{
      stats = [
        Assign{
          lhs = UnresolvedIdent{
            kind = Local
            name = <D <U <assignTemp>> $4>
          }
          rhs = Array{
            elems = [
              Literal{ value = 115 }
              Literal{ value = 116 }
            ]
          }
        }
        Assign{
          lhs = UnresolvedIdent{
            kind = Local
            name = <D <U <assignTemp>> $5>
          }
          rhs = Send{
            flags = {}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <expand-splat>>
            block = nullptr
            pos_args = 3
            args = [
              UnresolvedIdent{
                kind = Local
                name = <D <U <assignTemp>> $4>
              }
              Literal{ value = 2 }
              Literal{ value = 0 }
            ]
          }
        }
        Assign{
          lhs = UnresolvedConstantLit{
            cnst = <C <U TARGET1>>
            scope = UnresolvedConstantLit{
              cnst = <C <U ConstantPath>>
              scope = EmptyTree
            }
          }
          rhs = Send{
            flags = {}
            recv = UnresolvedIdent{
              kind = Local
              name = <D <U <assignTemp>> $5>
            }
            fun = <U []>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = 0 }
            ]
          }
        }
        Assign{
          lhs = UnresolvedConstantLit{
            cnst = <C <U TARGET2>>
            scope = UnresolvedConstantLit{
              cnst = <C <U ConstantPath>>
              scope = EmptyTree
            }
          }
          rhs = Send{
            flags = {}
            recv = UnresolvedIdent{
              kind = Local
              name = <D <U <assignTemp>> $5>
            }
            fun = <U []>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = 1 }
            ]
          }
        }
      ],
      expr = UnresolvedIdent{
        kind = Local
        name = <D <U <assignTemp>> $4>
      }
    }

    Assign{
      lhs = UnresolvedConstantLit{
        cnst = <C <U REGULAR>>
        scope = UnresolvedConstantLit{
          cnst = <C <U ConstantPath>>
          scope = UnresolvedConstantLit{
            cnst = <C <U FullyQualified>>
            scope = ConstantLit{
              symbol = (class ::<root>)
              orig = nullptr
            }
          }
        }
      }
      rhs = Literal{ value = 201 }
    }

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    EmptyTree

    InsSeq{
      stats = [
        Assign{
          lhs = UnresolvedIdent{
            kind = Local
            name = <D <U <assignTemp>> $6>
          }
          rhs = Array{
            elems = [
              Literal{ value = 315 }
              Literal{ value = 316 }
            ]
          }
        }
        Assign{
          lhs = UnresolvedIdent{
            kind = Local
            name = <D <U <assignTemp>> $7>
          }
          rhs = Send{
            flags = {}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <expand-splat>>
            block = nullptr
            pos_args = 3
            args = [
              UnresolvedIdent{
                kind = Local
                name = <D <U <assignTemp>> $6>
              }
              Literal{ value = 2 }
              Literal{ value = 0 }
            ]
          }
        }
        Assign{
          lhs = UnresolvedConstantLit{
            cnst = <C <U TARGET1>>
            scope = UnresolvedConstantLit{
              cnst = <C <U ConstantPath>>
              scope = UnresolvedConstantLit{
                cnst = <C <U FullyQualified>>
                scope = ConstantLit{
                  symbol = (class ::<root>)
                  orig = nullptr
                }
              }
            }
          }
          rhs = Send{
            flags = {}
            recv = UnresolvedIdent{
              kind = Local
              name = <D <U <assignTemp>> $7>
            }
            fun = <U []>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = 0 }
            ]
          }
        }
        Assign{
          lhs = UnresolvedConstantLit{
            cnst = <C <U TARGET2>>
            scope = UnresolvedConstantLit{
              cnst = <C <U ConstantPath>>
              scope = UnresolvedConstantLit{
                cnst = <C <U FullyQualified>>
                scope = ConstantLit{
                  symbol = (class ::<root>)
                  orig = nullptr
                }
              }
            }
          }
          rhs = Send{
            flags = {}
            recv = UnresolvedIdent{
              kind = Local
              name = <D <U <assignTemp>> $7>
            }
            fun = <U []>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = 1 }
            ]
          }
        }
      ],
      expr = UnresolvedIdent{
        kind = Local
        name = <D <U <assignTemp>> $6>
      }
    }

    MethodDef{
      flags = {}
      name = <U method1><<U <todo method>>>
      params = [BlockArg{ expr = UnresolvedIdent{
          kind = Local
          name = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Assign{
            lhs = UnresolvedIdent{
              kind = Local
              name = <U <dynamic-const-assign>>
            }
            rhs = Literal{ value = 1 }
          }
          Assign{
            lhs = UnresolvedIdent{
              kind = Local
              name = <U <dynamic-const-assign>>
            }
            rhs = Send{
              flags = {}
              recv = UnresolvedIdent{
                kind = Local
                name = <U <dynamic-const-assign>>
              }
              fun = <U &>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = 2 }
              ]
            }
          }
          Assign{
            lhs = UnresolvedIdent{
              kind = Local
              name = <U <dynamic-const-assign>>
            }
            rhs = Send{
              flags = {}
              recv = UnresolvedIdent{
                kind = Local
                name = <U <dynamic-const-assign>>
              }
              fun = <U |>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = 3 }
              ]
            }
          }
          Assign{
            lhs = UnresolvedIdent{
              kind = Local
              name = <U <dynamic-const-assign>>
            }
            rhs = Send{
              flags = {}
              recv = UnresolvedIdent{
                kind = Local
                name = <U <dynamic-const-assign>>
              }
              fun = <U ^>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = 4 }
              ]
            }
          }
          Assign{
            lhs = UnresolvedIdent{
              kind = Local
              name = <U <dynamic-const-assign>>
            }
            rhs = Send{
              flags = {}
              recv = UnresolvedIdent{
                kind = Local
                name = <U <dynamic-const-assign>>
              }
              fun = <U >>>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = 5 }
              ]
            }
          }
          Assign{
            lhs = UnresolvedIdent{
              kind = Local
              name = <U <dynamic-const-assign>>
            }
            rhs = Send{
              flags = {}
              recv = UnresolvedIdent{
                kind = Local
                name = <U <dynamic-const-assign>>
              }
              fun = <U <<>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = 6 }
              ]
            }
          }
          Assign{
            lhs = UnresolvedIdent{
              kind = Local
              name = <U <dynamic-const-assign>>
            }
            rhs = Send{
              flags = {}
              recv = UnresolvedIdent{
                kind = Local
                name = <U <dynamic-const-assign>>
              }
              fun = <U +>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = 7 }
              ]
            }
          }
          Assign{
            lhs = UnresolvedIdent{
              kind = Local
              name = <U <dynamic-const-assign>>
            }
            rhs = Send{
              flags = {}
              recv = UnresolvedIdent{
                kind = Local
                name = <U <dynamic-const-assign>>
              }
              fun = <U ->
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = 8 }
              ]
            }
          }
          Assign{
            lhs = UnresolvedIdent{
              kind = Local
              name = <U <dynamic-const-assign>>
            }
            rhs = Send{
              flags = {}
              recv = UnresolvedIdent{
                kind = Local
                name = <U <dynamic-const-assign>>
              }
              fun = <U %>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = 9 }
              ]
            }
          }
          Assign{
            lhs = UnresolvedIdent{
              kind = Local
              name = <U <dynamic-const-assign>>
            }
            rhs = Send{
              flags = {}
              recv = UnresolvedIdent{
                kind = Local
                name = <U <dynamic-const-assign>>
              }
              fun = <U />
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = 10 }
              ]
            }
          }
          Assign{
            lhs = UnresolvedIdent{
              kind = Local
              name = <U <dynamic-const-assign>>
            }
            rhs = Send{
              flags = {}
              recv = UnresolvedIdent{
                kind = Local
                name = <U <dynamic-const-assign>>
              }
              fun = <U *>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = 11 }
              ]
            }
          }
          Assign{
            lhs = UnresolvedIdent{
              kind = Local
              name = <U <dynamic-const-assign>>
            }
            rhs = Send{
              flags = {}
              recv = UnresolvedIdent{
                kind = Local
                name = <U <dynamic-const-assign>>
              }
              fun = <U **>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = 12 }
              ]
            }
          }
          If{
            cond = UnresolvedIdent{
              kind = Local
              name = <U <dynamic-const-assign>>
            }
            thenp = Assign{
              lhs = UnresolvedIdent{
                kind = Local
                name = <U <dynamic-const-assign>>
              }
              rhs = Literal{ value = 13 }
            }
            elsep = UnresolvedIdent{
              kind = Local
              name = <U <dynamic-const-assign>>
            }
          }
        ],
        expr = If{
          cond = UnresolvedIdent{
            kind = Local
            name = <U <dynamic-const-assign>>
          }
          thenp = UnresolvedIdent{
            kind = Local
            name = <U <dynamic-const-assign>>
          }
          elsep = Assign{
            lhs = UnresolvedIdent{
              kind = Local
              name = <U <dynamic-const-assign>>
            }
            rhs = Literal{ value = 14 }
          }
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U method2><<U <todo method>>>
      params = [BlockArg{ expr = UnresolvedIdent{
          kind = Local
          name = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Assign{
            lhs = UnresolvedIdent{
              kind = Local
              name = <U <dynamic-const-assign>>
            }
            rhs = Literal{ value = 1 }
          }
          EmptyTree
          EmptyTree
          EmptyTree
          EmptyTree
          EmptyTree
          EmptyTree
          EmptyTree
          EmptyTree
          EmptyTree
          EmptyTree
          EmptyTree
          EmptyTree
        ],
        expr = EmptyTree
      }
    }

    MethodDef{
      flags = {}
      name = <U method3><<U <todo method>>>
      params = [BlockArg{ expr = UnresolvedIdent{
          kind = Local
          name = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Assign{
            lhs = UnresolvedIdent{
              kind = Local
              name = <U <dynamic-const-assign>>
            }
            rhs = Literal{ value = 1 }
          }
          EmptyTree
          EmptyTree
          EmptyTree
          EmptyTree
          EmptyTree
          EmptyTree
          EmptyTree
          EmptyTree
          EmptyTree
          EmptyTree
          EmptyTree
          EmptyTree
        ],
        expr = EmptyTree
      }
    }
  ]
}
