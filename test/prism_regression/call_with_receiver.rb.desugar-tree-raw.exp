ClassDef{
  kind = class
  name = EmptyTree
  symbol = <C <U <root>>>
  ancestors = [ConstantLit{
      symbol = (class ::<todo sym>)
      orig = nullptr
    }]
  rhs = [
    Send{
      flags = {}
      recv = Send{
        flags = {privateOk}
        recv = Self
        fun = <U receiver>
        block = nullptr
        pos_args = 0
        args = [
        ]
      }
      fun = <U foo>
      block = nullptr
      pos_args = 0
      args = [
      ]
    }

    Send{
      flags = {}
      recv = Send{
        flags = {privateOk}
        recv = Self
        fun = <U receiver>
        block = nullptr
        pos_args = 0
        args = [
        ]
      }
      fun = <U foo>
      block = nullptr
      pos_args = 0
      args = [
      ]
    }

    InsSeq{
      stats = [
        Assign{
          lhs = UnresolvedIdent{
            kind = Local
            name = <D <U <assignTemp>> $2>
          }
          rhs = Send{
            flags = {privateOk}
            recv = Self
            fun = <U receiver>
            block = nullptr
            pos_args = 0
            args = [
            ]
          }
        }
      ],
      expr = If{
        cond = Send{
          flags = {}
          recv = ConstantLit{
            symbol = (class ::NilClass)
            orig = nullptr
          }
          fun = <U ===>
          block = nullptr
          pos_args = 1
          args = [
            UnresolvedIdent{
              kind = Local
              name = <D <U <assignTemp>> $2>
            }
          ]
        }
        thenp = Send{
          flags = {}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <nil-for-safe-navigation>>
          block = nullptr
          pos_args = 1
          args = [
            UnresolvedIdent{
              kind = Local
              name = <D <U <assignTemp>> $2>
            }
          ]
        }
        elsep = Send{
          flags = {}
          recv = UnresolvedIdent{
            kind = Local
            name = <D <U <assignTemp>> $2>
          }
          fun = <U foo>
          block = nullptr
          pos_args = 0
          args = [
          ]
        }
      }
    }

    InsSeq{
      stats = [
        Assign{
          lhs = UnresolvedIdent{
            kind = Local
            name = <D <U <assignTemp>> $3>
          }
          rhs = Send{
            flags = {privateOk}
            recv = Self
            fun = <U receiver>
            block = nullptr
            pos_args = 0
            args = [
            ]
          }
        }
      ],
      expr = If{
        cond = Send{
          flags = {}
          recv = ConstantLit{
            symbol = (class ::NilClass)
            orig = nullptr
          }
          fun = <U ===>
          block = nullptr
          pos_args = 1
          args = [
            UnresolvedIdent{
              kind = Local
              name = <D <U <assignTemp>> $3>
            }
          ]
        }
        thenp = Send{
          flags = {}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <nil-for-safe-navigation>>
          block = nullptr
          pos_args = 1
          args = [
            UnresolvedIdent{
              kind = Local
              name = <D <U <assignTemp>> $3>
            }
          ]
        }
        elsep = Send{
          flags = {}
          recv = UnresolvedIdent{
            kind = Local
            name = <D <U <assignTemp>> $3>
          }
          fun = <U foo>
          block = nullptr
          pos_args = 0
          args = [
          ]
        }
      }
    }
  ]
}
