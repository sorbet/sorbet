ClassDef{
  kind = class
  name = EmptyTree
  symbol = <C <U <root>>>
  ancestors = [ConstantLit{
      symbol = (class ::<todo sym>)
      orig = nullptr
    }]
  rhs = [
    Send{
      flags = {}
      recv = ConstantLit{
        symbol = (class ::Regexp)
        orig = nullptr
      }
      fun = <U new>
      block = nullptr
      pos_args = 2
      args = [
        Literal{ value = "" }
        Literal{ value = 0 }
      ]
    }

    Send{
      flags = {}
      recv = ConstantLit{
        symbol = (class ::Regexp)
        orig = nullptr
      }
      fun = <U new>
      block = nullptr
      pos_args = 2
      args = [
        Literal{ value = "foo" }
        Literal{ value = 0 }
      ]
    }

    Send{
      flags = {}
      recv = ConstantLit{
        symbol = (class ::Regexp)
        orig = nullptr
      }
      fun = <U new>
      block = nullptr
      pos_args = 2
      args = [
        Literal{ value = "foo" }
        Literal{ value = 1 }
      ]
    }

    Send{
      flags = {}
      recv = ConstantLit{
        symbol = (class ::Regexp)
        orig = nullptr
      }
      fun = <U new>
      block = nullptr
      pos_args = 2
      args = [
        Literal{ value = "foo" }
        Literal{ value = 5 }
      ]
    }

    Send{
      flags = {}
      recv = ConstantLit{
        symbol = (class ::Regexp)
        orig = nullptr
      }
      fun = <U new>
      block = nullptr
      pos_args = 2
      args = [
        Send{
          flags = {}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <string-interpolate>>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = "foo " }
            Send{
              flags = {}
              recv = Literal{ value = 1 }
              fun = <U +>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = 2 }
              ]
            }
          ]
        }
        Literal{ value = 0 }
      ]
    }

    Send{
      flags = {}
      recv = ConstantLit{
        symbol = (class ::Regexp)
        orig = nullptr
      }
      fun = <U new>
      block = nullptr
      pos_args = 2
      args = [
        Send{
          flags = {}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <string-interpolate>>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = "foo " }
            Send{
              flags = {}
              recv = Literal{ value = 1 }
              fun = <U +>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = 2 }
              ]
            }
          ]
        }
        Literal{ value = 5 }
      ]
    }
  ]
}
