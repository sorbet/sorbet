Begin {
  stmts = [
    Assign {
      lhs = ConstLhs {
        scope = NULL
        name = <C <U REGULAR>>
      }
      rhs = Integer {
        val = "1"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = NULL
        name = <C <U BITWISE_AND>>
      }
      op = <U &>
      right = Integer {
        val = "2"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = NULL
        name = <C <U BITWISE_OR>>
      }
      op = <U |>
      right = Integer {
        val = "3"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = NULL
        name = <C <U BITWISE_XOR>>
      }
      op = <U ^>
      right = Integer {
        val = "4"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = NULL
        name = <C <U SHIFT_RIGHT>>
      }
      op = <U >>>
      right = Integer {
        val = "5"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = NULL
        name = <C <U SHIFT_LEFT>>
      }
      op = <U <<>
      right = Integer {
        val = "6"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = NULL
        name = <C <U ADD_ASSIGN>>
      }
      op = <U +>
      right = Integer {
        val = "7"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = NULL
        name = <C <U SUBTRACT_ASSIGN>>
      }
      op = <U ->
      right = Integer {
        val = "8"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = NULL
        name = <C <U DIVIDE_ASSIGN>>
      }
      op = <U />
      right = Integer {
        val = "9"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = NULL
        name = <C <U MODULO_ASSIGN>>
      }
      op = <U %>
      right = Integer {
        val = "10"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = NULL
        name = <C <U MULTIPLY_ASSIGN>>
      }
      op = <U *>
      right = Integer {
        val = "11"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = NULL
        name = <C <U EXPONENTIATE_ASSIGN>>
      }
      op = <U **>
      right = Integer {
        val = "12"
      }
    }
    AndAsgn {
      left = ConstLhs {
        scope = NULL
        name = <C <U LAZY_AND_ASSIGN>>
      }
      right = Integer {
        val = "13"
      }
    }
    OrAsgn {
      left = ConstLhs {
        scope = NULL
        name = <C <U LAZY_OR_ASSGIN>>
      }
      right = Integer {
        val = "14"
      }
    }
    Masgn {
      lhs = Mlhs {
        exprs = [
          ConstLhs {
            scope = NULL
            name = <C <U TARGET1>>
          }
          ConstLhs {
            scope = NULL
            name = <C <U TARGET2>>
          }
        ]
      }
      rhs = Array {
        elts = [
          Integer {
            val = "15"
          }
          Integer {
            val = "16"
          }
        ]
      }
    }
    Assign {
      lhs = ConstLhs {
        scope = Const {
          scope = NULL
          name = <C <U ConstantPath>>
        }
        name = <C <U REGULAR>>
      }
      rhs = Integer {
        val = "101"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = NULL
          name = <C <U ConstantPath>>
        }
        name = <C <U BITWISE_AND>>
      }
      op = <U &>
      right = Integer {
        val = "102"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = NULL
          name = <C <U ConstantPath>>
        }
        name = <C <U BITWISE_OR>>
      }
      op = <U |>
      right = Integer {
        val = "103"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = NULL
          name = <C <U ConstantPath>>
        }
        name = <C <U BITWISE_XOR>>
      }
      op = <U ^>
      right = Integer {
        val = "104"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = NULL
          name = <C <U ConstantPath>>
        }
        name = <C <U SHIFT_RIGHT>>
      }
      op = <U >>>
      right = Integer {
        val = "105"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = NULL
          name = <C <U ConstantPath>>
        }
        name = <C <U SHIFT_LEFT>>
      }
      op = <U <<>
      right = Integer {
        val = "106"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = NULL
          name = <C <U ConstantPath>>
        }
        name = <C <U ADD_ASSIGN>>
      }
      op = <U +>
      right = Integer {
        val = "107"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = NULL
          name = <C <U ConstantPath>>
        }
        name = <C <U SUBTRACT_ASSIGN>>
      }
      op = <U ->
      right = Integer {
        val = "108"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = NULL
          name = <C <U ConstantPath>>
        }
        name = <C <U MODULO_ASSIGN>>
      }
      op = <U %>
      right = Integer {
        val = "109"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = NULL
          name = <C <U ConstantPath>>
        }
        name = <C <U DIVIDE_ASSIGN>>
      }
      op = <U />
      right = Integer {
        val = "110"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = NULL
          name = <C <U ConstantPath>>
        }
        name = <C <U MULTIPLY_ASSIGN>>
      }
      op = <U *>
      right = Integer {
        val = "111"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = NULL
          name = <C <U ConstantPath>>
        }
        name = <C <U EXPONENTIATE_ASSIGN>>
      }
      op = <U **>
      right = Integer {
        val = "112"
      }
    }
    AndAsgn {
      left = ConstLhs {
        scope = Const {
          scope = NULL
          name = <C <U ConstantPath>>
        }
        name = <C <U LAZY_AND_ASSIGN>>
      }
      right = Integer {
        val = "113"
      }
    }
    OrAsgn {
      left = ConstLhs {
        scope = Const {
          scope = NULL
          name = <C <U ConstantPath>>
        }
        name = <C <U LAZY_OR_ASSGIN>>
      }
      right = Integer {
        val = "114"
      }
    }
    Masgn {
      lhs = Mlhs {
        exprs = [
          ConstLhs {
            scope = Const {
              scope = NULL
              name = <C <U ConstantPath>>
            }
            name = <C <U TARGET1>>
          }
          ConstLhs {
            scope = Const {
              scope = NULL
              name = <C <U ConstantPath>>
            }
            name = <C <U TARGET2>>
          }
        ]
      }
      rhs = Array {
        elts = [
          Integer {
            val = "115"
          }
          Integer {
            val = "116"
          }
        ]
      }
    }
    Assign {
      lhs = ConstLhs {
        scope = Const {
          scope = Const {
            scope = Cbase {
            }
            name = <C <U FullyQualified>>
          }
          name = <C <U ConstantPath>>
        }
        name = <C <U REGULAR>>
      }
      rhs = Integer {
        val = "201"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = Const {
            scope = Cbase {
            }
            name = <C <U FullyQualified>>
          }
          name = <C <U ConstantPath>>
        }
        name = <C <U BITWISE_AND>>
      }
      op = <U &>
      right = Integer {
        val = "202"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = Const {
            scope = Cbase {
            }
            name = <C <U FullyQualified>>
          }
          name = <C <U ConstantPath>>
        }
        name = <C <U BITWISE_OR>>
      }
      op = <U |>
      right = Integer {
        val = "203"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = Const {
            scope = Cbase {
            }
            name = <C <U FullyQualified>>
          }
          name = <C <U ConstantPath>>
        }
        name = <C <U BITWISE_XOR>>
      }
      op = <U ^>
      right = Integer {
        val = "204"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = Const {
            scope = Cbase {
            }
            name = <C <U FullyQualified>>
          }
          name = <C <U ConstantPath>>
        }
        name = <C <U SHIFT_RIGHT>>
      }
      op = <U >>>
      right = Integer {
        val = "205"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = Const {
            scope = Cbase {
            }
            name = <C <U FullyQualified>>
          }
          name = <C <U ConstantPath>>
        }
        name = <C <U SHIFT_LEFT>>
      }
      op = <U <<>
      right = Integer {
        val = "206"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = Const {
            scope = Cbase {
            }
            name = <C <U FullyQualified>>
          }
          name = <C <U ConstantPath>>
        }
        name = <C <U ADD_ASSIGN>>
      }
      op = <U +>
      right = Integer {
        val = "207"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = Const {
            scope = Cbase {
            }
            name = <C <U FullyQualified>>
          }
          name = <C <U ConstantPath>>
        }
        name = <C <U SUBTRACT_ASSIGN>>
      }
      op = <U ->
      right = Integer {
        val = "208"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = Const {
            scope = Cbase {
            }
            name = <C <U FullyQualified>>
          }
          name = <C <U ConstantPath>>
        }
        name = <C <U MODULO_ASSIGN>>
      }
      op = <U %>
      right = Integer {
        val = "209"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = Const {
            scope = Cbase {
            }
            name = <C <U FullyQualified>>
          }
          name = <C <U ConstantPath>>
        }
        name = <C <U DIVIDE_ASSIGN>>
      }
      op = <U />
      right = Integer {
        val = "210"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = Const {
            scope = Cbase {
            }
            name = <C <U FullyQualified>>
          }
          name = <C <U ConstantPath>>
        }
        name = <C <U MULTIPLY_ASSIGN>>
      }
      op = <U *>
      right = Integer {
        val = "211"
      }
    }
    OpAsgn {
      left = ConstLhs {
        scope = Const {
          scope = Const {
            scope = Cbase {
            }
            name = <C <U FullyQualified>>
          }
          name = <C <U ConstantPath>>
        }
        name = <C <U EXPONENTIATE_ASSIGN>>
      }
      op = <U **>
      right = Integer {
        val = "312"
      }
    }
    AndAsgn {
      left = ConstLhs {
        scope = Const {
          scope = Const {
            scope = Cbase {
            }
            name = <C <U FullyQualified>>
          }
          name = <C <U ConstantPath>>
        }
        name = <C <U LAZY_AND_ASSIGN>>
      }
      right = Integer {
        val = "313"
      }
    }
    OrAsgn {
      left = ConstLhs {
        scope = Const {
          scope = Const {
            scope = Cbase {
            }
            name = <C <U FullyQualified>>
          }
          name = <C <U ConstantPath>>
        }
        name = <C <U LAZY_OR_ASSGIN>>
      }
      right = Integer {
        val = "314"
      }
    }
    Masgn {
      lhs = Mlhs {
        exprs = [
          ConstLhs {
            scope = Const {
              scope = Const {
                scope = Cbase {
                }
                name = <C <U FullyQualified>>
              }
              name = <C <U ConstantPath>>
            }
            name = <C <U TARGET1>>
          }
          ConstLhs {
            scope = Const {
              scope = Const {
                scope = Cbase {
                }
                name = <C <U FullyQualified>>
              }
              name = <C <U ConstantPath>>
            }
            name = <C <U TARGET2>>
          }
        ]
      }
      rhs = Array {
        elts = [
          Integer {
            val = "315"
          }
          Integer {
            val = "316"
          }
        ]
      }
    }
    DefMethod {
      name = <U method1>
      params = NULL
      body = Begin {
        stmts = [
          Assign {
            lhs = LVarLhs {
              name = <U <dynamic-const-assign>>
            }
            rhs = Integer {
              val = "1"
            }
          }
          OpAsgn {
            left = LVarLhs {
              name = <U <dynamic-const-assign>>
            }
            op = <U &>
            right = Integer {
              val = "2"
            }
          }
          OpAsgn {
            left = LVarLhs {
              name = <U <dynamic-const-assign>>
            }
            op = <U |>
            right = Integer {
              val = "3"
            }
          }
          OpAsgn {
            left = LVarLhs {
              name = <U <dynamic-const-assign>>
            }
            op = <U ^>
            right = Integer {
              val = "4"
            }
          }
          OpAsgn {
            left = LVarLhs {
              name = <U <dynamic-const-assign>>
            }
            op = <U >>>
            right = Integer {
              val = "5"
            }
          }
          OpAsgn {
            left = LVarLhs {
              name = <U <dynamic-const-assign>>
            }
            op = <U <<>
            right = Integer {
              val = "6"
            }
          }
          OpAsgn {
            left = LVarLhs {
              name = <U <dynamic-const-assign>>
            }
            op = <U +>
            right = Integer {
              val = "7"
            }
          }
          OpAsgn {
            left = LVarLhs {
              name = <U <dynamic-const-assign>>
            }
            op = <U ->
            right = Integer {
              val = "8"
            }
          }
          OpAsgn {
            left = LVarLhs {
              name = <U <dynamic-const-assign>>
            }
            op = <U %>
            right = Integer {
              val = "9"
            }
          }
          OpAsgn {
            left = LVarLhs {
              name = <U <dynamic-const-assign>>
            }
            op = <U />
            right = Integer {
              val = "10"
            }
          }
          OpAsgn {
            left = LVarLhs {
              name = <U <dynamic-const-assign>>
            }
            op = <U *>
            right = Integer {
              val = "11"
            }
          }
          OpAsgn {
            left = LVarLhs {
              name = <U <dynamic-const-assign>>
            }
            op = <U **>
            right = Integer {
              val = "12"
            }
          }
          AndAsgn {
            left = LVarLhs {
              name = <U <dynamic-const-assign>>
            }
            right = Integer {
              val = "13"
            }
          }
          OrAsgn {
            left = LVarLhs {
              name = <U <dynamic-const-assign>>
            }
            right = Integer {
              val = "14"
            }
          }
        ]
      }
    }
    DefMethod {
      name = <U method2>
      params = NULL
      body = Begin {
        stmts = [
          Assign {
            lhs = LVarLhs {
              name = <U <dynamic-const-assign>>
            }
            rhs = Integer {
              val = "1"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = NULL
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantBitwiseAnd>>
            }
            op = <U &>
            right = Integer {
              val = "2"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = NULL
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantBitwiseOr>>
            }
            op = <U |>
            right = Integer {
              val = "3"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = NULL
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantBitwiseXor>>
            }
            op = <U ^>
            right = Integer {
              val = "4"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = NULL
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantShiftRight>>
            }
            op = <U >>>
            right = Integer {
              val = "5"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = NULL
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantShiftLeft>>
            }
            op = <U <<>
            right = Integer {
              val = "6"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = NULL
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantAddAssign>>
            }
            op = <U +>
            right = Integer {
              val = "7"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = NULL
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantSubtractAssign>>
            }
            op = <U ->
            right = Integer {
              val = "8"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = NULL
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantModuloAssign>>
            }
            op = <U %>
            right = Integer {
              val = "9"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = NULL
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantDivideAssign>>
            }
            op = <U />
            right = Integer {
              val = "10"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = NULL
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantMultiplyAssign>>
            }
            op = <U *>
            right = Integer {
              val = "11"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = NULL
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantExponentiateAssign>>
            }
            op = <U **>
            right = Integer {
              val = "12"
            }
          }
          AndAsgn {
            left = ConstLhs {
              scope = Const {
                scope = NULL
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantLazyAndAssign>>
            }
            right = Integer {
              val = "13"
            }
          }
          OrAsgn {
            left = ConstLhs {
              scope = Const {
                scope = NULL
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantLazyOrAssgin>>
            }
            right = Integer {
              val = "14"
            }
          }
        ]
      }
    }
    DefMethod {
      name = <U method3>
      params = NULL
      body = Begin {
        stmts = [
          Assign {
            lhs = LVarLhs {
              name = <U <dynamic-const-assign>>
            }
            rhs = Integer {
              val = "1"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = Const {
                  scope = Cbase {
                  }
                  name = <C <U FullyQualified>>
                }
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantBitwiseAnd>>
            }
            op = <U &>
            right = Integer {
              val = "2"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = Const {
                  scope = Cbase {
                  }
                  name = <C <U FullyQualified>>
                }
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantBitwiseOr>>
            }
            op = <U |>
            right = Integer {
              val = "3"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = Const {
                  scope = Cbase {
                  }
                  name = <C <U FullyQualified>>
                }
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantBitwiseXor>>
            }
            op = <U ^>
            right = Integer {
              val = "4"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = Const {
                  scope = Cbase {
                  }
                  name = <C <U FullyQualified>>
                }
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantShiftRight>>
            }
            op = <U >>>
            right = Integer {
              val = "5"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = Const {
                  scope = Cbase {
                  }
                  name = <C <U FullyQualified>>
                }
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantShiftLeft>>
            }
            op = <U <<>
            right = Integer {
              val = "6"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = Const {
                  scope = Cbase {
                  }
                  name = <C <U FullyQualified>>
                }
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantAddAssign>>
            }
            op = <U +>
            right = Integer {
              val = "7"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = Const {
                  scope = Cbase {
                  }
                  name = <C <U FullyQualified>>
                }
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantSubtractAssign>>
            }
            op = <U ->
            right = Integer {
              val = "8"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = Const {
                  scope = Cbase {
                  }
                  name = <C <U FullyQualified>>
                }
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantModuloAssign>>
            }
            op = <U %>
            right = Integer {
              val = "9"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = Const {
                  scope = Cbase {
                  }
                  name = <C <U FullyQualified>>
                }
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantDivideAssign>>
            }
            op = <U />
            right = Integer {
              val = "10"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = Const {
                  scope = Cbase {
                  }
                  name = <C <U FullyQualified>>
                }
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantMultiplyAssign>>
            }
            op = <U *>
            right = Integer {
              val = "11"
            }
          }
          OpAsgn {
            left = ConstLhs {
              scope = Const {
                scope = Const {
                  scope = Cbase {
                  }
                  name = <C <U FullyQualified>>
                }
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantExponentiateAssign>>
            }
            op = <U **>
            right = Integer {
              val = "12"
            }
          }
          AndAsgn {
            left = ConstLhs {
              scope = Const {
                scope = Const {
                  scope = Cbase {
                  }
                  name = <C <U FullyQualified>>
                }
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantLazyAndAssign>>
            }
            right = Integer {
              val = "13"
            }
          }
          OrAsgn {
            left = ConstLhs {
              scope = Const {
                scope = Const {
                  scope = Cbase {
                  }
                  name = <C <U FullyQualified>>
                }
                name = <C <U ConstantPath>>
              }
              name = <C <U DynamicConstantLazyOrAssgin>>
            }
            right = Integer {
              val = "14"
            }
          }
        ]
      }
    }
  ]
}
