test/cli/expected-got/expected-got.rb:7: Expected `Integer` but found `NilClass` for method result type https://srb.help/7005
     7 |end
        ^^^
  Expected `Integer` for result type of method `foo`:
    test/cli/expected-got/expected-got.rb:11:
    11 |def foo
        ^^^^^^^
  Got `NilClass` originating from:
    test/cli/expected-got/expected-got.rb:11: Possibly uninitialized (`NilClass`) in:
    11 |def foo
        ^^^^^^^

test/cli/expected-got/expected-got.rb:12: Expected `Integer` but found `NilClass` for method result type https://srb.help/7005
    12 |  nil
          ^^^
  Expected `Integer` for result type of method `foo`:
    test/cli/expected-got/expected-got.rb:11:
    11 |def foo
        ^^^^^^^
  Got `NilClass` originating from:
    test/cli/expected-got/expected-got.rb:12:
    12 |  nil
          ^^^

test/cli/expected-got/expected-got.rb:27: Expected `Integer` but found `T.any(Integer, String)` for argument `x` https://srb.help/7002
    27 |  takes_integer(x)
                        ^
  Expected `Integer` for argument `x` of method `Object#takes_integer`:
    test/cli/expected-got/expected-got.rb:15:
    15 |sig {params(x: Integer).void}
                    ^
  Got `T.any(Integer, String)` originating from:
    test/cli/expected-got/expected-got.rb:22:
    22 |    x = ''
                ^^
    test/cli/expected-got/expected-got.rb:24:
    24 |    x = 1
                ^

test/cli/expected-got/expected-got.rb:42: Expected `T.proc.returns(Integer)` but found `T.proc.returns(String)` for block argument https://srb.help/7002
    42 |  takes_int_block(&blk)
          ^^^^^^^^^^^^^^^^^^^^^
  Expected `T.proc.returns(Integer)` for for block argument `blk` of method `Object#takes_int_block`:
    test/cli/expected-got/expected-got.rb:32:
    32 |sig {params(blk: T.proc.returns(Integer)).void}
                    ^^^

test/cli/expected-got/expected-got.rb:53: Control flow could reach `T.absurd` because the type `Integer` wasn't handled https://srb.help/7026
    53 |  else T.absurd(x)
               ^^^^^^^^^^^
  Got `Integer` originating from:
    test/cli/expected-got/expected-got.rb:50:
    50 |def t_absurd(x)
                     ^
    test/cli/expected-got/expected-got.rb:52:
    52 |  when String then 'string'
               ^^^^^^

test/cli/expected-got/expected-got.rb:30: `T.must` called on `Integer(0)`, which is never `nil` https://srb.help/7015
    30 |T.must(0)
               ^
  Got `Integer(0)` originating from:
    test/cli/expected-got/expected-got.rb:30:
    30 |T.must(0)
               ^
  Autocorrect: Use `-a` to autocorrect
    test/cli/expected-got/expected-got.rb:30: Replace with `0`
    30 |T.must(0)
        ^^^^^^^^^

test/cli/expected-got/expected-got.rb:37: Expected `Integer` but found `String("")` for block result type https://srb.help/7005
    37 |  ''
          ^^
  Expected `Integer` for block result type:
    test/cli/expected-got/expected-got.rb:32:
    32 |sig {params(blk: T.proc.returns(Integer)).void}
                    ^^^
  Got `String("")` originating from:
    test/cli/expected-got/expected-got.rb:37:
    37 |  ''
          ^^

test/cli/expected-got/expected-got.rb:45: Expected a type but found `T.untyped` for `T.assert_type!` https://srb.help/7007
    45 |T.assert_type!(T.unsafe(nil), String)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Got `T.untyped` originating from:
    test/cli/expected-got/expected-got.rb:45:
    45 |T.assert_type!(T.unsafe(nil), String)
                       ^^^^^^^^^^^^^
  Note:
    You may need to add additional `sig` annotations

test/cli/expected-got/expected-got.rb:47: Revealed type: `Integer(42)` https://srb.help/7014
    47 |T.reveal_type(42)
        ^^^^^^^^^^^^^^^^^
  Got `Integer(42)` originating from:
    test/cli/expected-got/expected-got.rb:47:
    47 |T.reveal_type(42)
                      ^^

test/cli/expected-got/expected-got.rb:57: Used `&.` operator on `Integer(1)`, which can never be nil https://srb.help/7034
    57 |1&.even?
         ^^
  Got `Integer(1)` originating from:
    test/cli/expected-got/expected-got.rb:57:
    57 |1&.even?
        ^
  Autocorrect: Use `-a` to autocorrect
    test/cli/expected-got/expected-got.rb:57: Replace with `.`
    57 |1&.even?
         ^^

test/cli/expected-got/expected-got.rb:59: Method `top_level_does_not_exist` does not exist on `T.class_of(<root>)` https://srb.help/7003
    59 |top_level_does_not_exist
        ^^^^^^^^^^^^^^^^^^^^^^^^

test/cli/expected-got/expected-got.rb:61: Argument does not have asserted type `Integer` https://srb.help/7007
    61 |T.let(nil, Integer)
        ^^^^^^^^^^^^^^^^^^^
  Got `NilClass` originating from:
    test/cli/expected-got/expected-got.rb:61:
    61 |T.let(nil, Integer)
              ^^^

test/cli/expected-got/expected-got.rb:63: `T.cast` is useless because `Integer(1)` is already a subtype of `Integer` https://srb.help/7015
    63 |T.cast(1, Integer)
        ^^^^^^^^^^^^^^^^^^
  Got `Integer(1)` originating from:
    test/cli/expected-got/expected-got.rb:63:
    63 |T.cast(1, Integer)
               ^
  Autocorrect: Use `-a` to autocorrect
    test/cli/expected-got/expected-got.rb:63: Replace with `1`
    63 |T.cast(1, Integer)
        ^^^^^^^^^^^^^^^^^^

test/cli/expected-got/expected-got.rb:68: Cannot call method `foo` on void type https://srb.help/7003
    68 |returns_void.foo
                     ^^^

test/cli/expected-got/expected-got.rb:73: Expected `T::Array[Integer]` but found `[Integer(1), Integer(2), T.nilable(Integer)]` for argument `xs` https://srb.help/7002
    73 |takes_int_array(xs)
                        ^^
  Expected `T::Array[Integer]` for argument `xs` of method `Object#takes_int_array`:
    test/cli/expected-got/expected-got.rb:70:
    70 |sig {params(xs: T::Array[Integer]).void}
                    ^^
  Got `[Integer(1), Integer(2), T.nilable(Integer)] (3-tuple)` originating from:
    test/cli/expected-got/expected-got.rb:72:
    72 |xs = [1, 2, T.let(3, T.nilable(Integer))]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

test/cli/expected-got/expected-got.rb:74: Argument does not have asserted type `T::Array[Integer]` https://srb.help/7007
    74 |T.let(xs, T::Array[Integer])
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Got `[Integer(1), Integer(2), T.nilable(Integer)] (3-tuple)` originating from:
    test/cli/expected-got/expected-got.rb:72:
    72 |xs = [1, 2, T.let(3, T.nilable(Integer))]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Errors: 16
