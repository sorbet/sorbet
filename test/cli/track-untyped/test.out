--- implicit everywhere ---
a.rb:6: Call to method `foo` on `T.untyped` https://srb.help/7018
     6 |  result = arg0.foo
                        ^^^
  Got `T.untyped` originating from:
    a.rb:5:
     5 |def example_untyped(arg0)
                            ^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.

a.rb:8: Conditional branch on `T.untyped` https://srb.help/7018
     8 |  if result
             ^^^^^^
  Got `T.untyped` originating from:
    a.rb:6:
     6 |  result = arg0.foo
                   ^^^^^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.

a.rb:9: Argument passed to parameter `arg0` is `T.untyped` https://srb.help/7018
     9 |    puts(result)
                 ^^^^^^
  Expected `Object` for argument `arg0` of method `Kernel#puts`:
    https://github.com/sorbet/sorbet/tree/master/rbi/core/kernel.rbi#LCENSORED:
      NN |        arg0: Object,
                  ^^^^
  Got `T.untyped` originating from:
    a.rb:6:
     6 |  result = arg0.foo
                   ^^^^^^^^
    a.rb:8:
     8 |  if result
             ^^^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.

a.rb:12: Call to method `is_a?` on `T.untyped` https://srb.help/7018
    12 |  if arg0.is_a?(Integer)
                  ^^^^^
  Got `T.untyped` originating from:
    a.rb:5:
     5 |def example_untyped(arg0)
                            ^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.
  Note:
    Use `case ... when Integer` instead of `is_a?` to check the type of an untyped value

a.rb:12: Conditional branch on `T.untyped` https://srb.help/7018
    12 |  if arg0.is_a?(Integer)
             ^^^^^^^^^^^^^^^^^^^
  Got `T.untyped` originating from:
    a.rb:12:
    12 |  if arg0.is_a?(Integer)
             ^^^^^^^^^^^^^^^^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.

a.rb:13: Revealed type: `Integer` https://srb.help/7014
    13 |    T.reveal_type(arg0)
            ^^^^^^^^^^^^^^^^^^^
  Got `Integer` originating from:
    a.rb:5:
     5 |def example_untyped(arg0)
                            ^^^^
    a.rb:12:
    12 |  if arg0.is_a?(Integer)
             ^^^^^^^^^^^^^^^^^^^

a.rb:14: Call to method `nil?` on `T.untyped` https://srb.help/7018
    14 |  elsif arg0.nil?
                     ^^^^
  Got `T.untyped` originating from:
    a.rb:5:
     5 |def example_untyped(arg0)
                            ^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.
  Note:
    Use `case ... when nil` instead of `nil?` to check whether an untyped value is nil

a.rb:14: Conditional branch on `T.untyped` https://srb.help/7018
    14 |  elsif arg0.nil?
                ^^^^^^^^^
  Got `T.untyped` originating from:
    a.rb:14:
    14 |  elsif arg0.nil?
                ^^^^^^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.

a.rb:15: Revealed type: `NilClass` https://srb.help/7014
    15 |    T.reveal_type(arg0)
            ^^^^^^^^^^^^^^^^^^^
  Got `NilClass` originating from:
    a.rb:5:
     5 |def example_untyped(arg0)
                            ^^^^
    a.rb:14:
    14 |  elsif arg0.nil?
                ^^^^^^^^^

a.rb:18: Value returned from method `example_untyped` is `T.untyped` https://srb.help/7018
    18 |  result
          ^^^^^^
  Got `T.untyped` originating from:
    a.rb:6:
     6 |  result = arg0.foo
                   ^^^^^^^^
    a.rb:8:
     8 |  if result
             ^^^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.

b.rb:4: Call to method `foo` on `T.untyped` https://srb.help/7018
     4 |T.unsafe(nil).foo
                      ^^^
  Got `T.untyped` originating from:
    b.rb:4:
     4 |T.unsafe(nil).foo
        ^^^^^^^^^^^^^
    https://github.com/sorbet/sorbet/tree/master/rbi/sorbet/t.rbi#LCENSORED: Blames to `T.unsafe`, defined here
    NN |  def self.unsafe(value); end
          ^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.
Errors: 11
{
 "files": [
  {
   "path": "test/cli/track-untyped/a.rb",
   "sigil": "Strong",
   "strict": "Strong",
   "min_error_level": "True",
   "untyped_usages": 8
  },
  {
   "path": "test/cli/track-untyped/b.rb",
   "sigil": "Strong",
   "strict": "Strong",
   "min_error_level": "Strong",
   "untyped_usages": 1
  },
  {
   "path": "test/cli/track-untyped/c.rb",
   "sigil": "Strong",
   "strict": "Strong",
   "min_error_level": "Max"
  }
 ]
}
--- explicit nowhere ---
a.rb:6: Call to method `foo` on `T.untyped` https://srb.help/7018
     6 |  result = arg0.foo
                        ^^^
  Got `T.untyped` originating from:
    a.rb:5:
     5 |def example_untyped(arg0)
                            ^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.

a.rb:8: Conditional branch on `T.untyped` https://srb.help/7018
     8 |  if result
             ^^^^^^
  Got `T.untyped` originating from:
    a.rb:6:
     6 |  result = arg0.foo
                   ^^^^^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.

a.rb:9: Argument passed to parameter `arg0` is `T.untyped` https://srb.help/7018
     9 |    puts(result)
                 ^^^^^^
  Expected `Object` for argument `arg0` of method `Kernel#puts`:
    https://github.com/sorbet/sorbet/tree/master/rbi/core/kernel.rbi#LCENSORED:
      NN |        arg0: Object,
                  ^^^^
  Got `T.untyped` originating from:
    a.rb:6:
     6 |  result = arg0.foo
                   ^^^^^^^^
    a.rb:8:
     8 |  if result
             ^^^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.

a.rb:12: Call to method `is_a?` on `T.untyped` https://srb.help/7018
    12 |  if arg0.is_a?(Integer)
                  ^^^^^
  Got `T.untyped` originating from:
    a.rb:5:
     5 |def example_untyped(arg0)
                            ^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.
  Note:
    Use `case ... when Integer` instead of `is_a?` to check the type of an untyped value

a.rb:12: Conditional branch on `T.untyped` https://srb.help/7018
    12 |  if arg0.is_a?(Integer)
             ^^^^^^^^^^^^^^^^^^^
  Got `T.untyped` originating from:
    a.rb:12:
    12 |  if arg0.is_a?(Integer)
             ^^^^^^^^^^^^^^^^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.

a.rb:13: Revealed type: `Integer` https://srb.help/7014
    13 |    T.reveal_type(arg0)
            ^^^^^^^^^^^^^^^^^^^
  Got `Integer` originating from:
    a.rb:5:
     5 |def example_untyped(arg0)
                            ^^^^
    a.rb:12:
    12 |  if arg0.is_a?(Integer)
             ^^^^^^^^^^^^^^^^^^^

a.rb:14: Call to method `nil?` on `T.untyped` https://srb.help/7018
    14 |  elsif arg0.nil?
                     ^^^^
  Got `T.untyped` originating from:
    a.rb:5:
     5 |def example_untyped(arg0)
                            ^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.
  Note:
    Use `case ... when nil` instead of `nil?` to check whether an untyped value is nil

a.rb:14: Conditional branch on `T.untyped` https://srb.help/7018
    14 |  elsif arg0.nil?
                ^^^^^^^^^
  Got `T.untyped` originating from:
    a.rb:14:
    14 |  elsif arg0.nil?
                ^^^^^^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.

a.rb:15: Revealed type: `NilClass` https://srb.help/7014
    15 |    T.reveal_type(arg0)
            ^^^^^^^^^^^^^^^^^^^
  Got `NilClass` originating from:
    a.rb:5:
     5 |def example_untyped(arg0)
                            ^^^^
    a.rb:14:
    14 |  elsif arg0.nil?
                ^^^^^^^^^

a.rb:18: Value returned from method `example_untyped` is `T.untyped` https://srb.help/7018
    18 |  result
          ^^^^^^
  Got `T.untyped` originating from:
    a.rb:6:
     6 |  result = arg0.foo
                   ^^^^^^^^
    a.rb:8:
     8 |  if result
             ^^^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.

b.rb:4: Call to method `foo` on `T.untyped` https://srb.help/7018
     4 |T.unsafe(nil).foo
                      ^^^
  Got `T.untyped` originating from:
    b.rb:4:
     4 |T.unsafe(nil).foo
        ^^^^^^^^^^^^^
    https://github.com/sorbet/sorbet/tree/master/rbi/sorbet/t.rbi#LCENSORED: Blames to `T.unsafe`, defined here
    NN |  def self.unsafe(value); end
          ^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.
Errors: 11
{
 "files": [
  {
   "path": "test/cli/track-untyped/a.rb",
   "sigil": "Strong",
   "strict": "Strong",
   "min_error_level": "True"
  },
  {
   "path": "test/cli/track-untyped/b.rb",
   "sigil": "Strong",
   "strict": "Strong",
   "min_error_level": "Strong"
  },
  {
   "path": "test/cli/track-untyped/c.rb",
   "sigil": "Strong",
   "strict": "Strong",
   "min_error_level": "Max"
  }
 ]
}
--- explicit everywhere ---
a.rb:6: Call to method `foo` on `T.untyped` https://srb.help/7018
     6 |  result = arg0.foo
                        ^^^
  Got `T.untyped` originating from:
    a.rb:5:
     5 |def example_untyped(arg0)
                            ^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.

a.rb:8: Conditional branch on `T.untyped` https://srb.help/7018
     8 |  if result
             ^^^^^^
  Got `T.untyped` originating from:
    a.rb:6:
     6 |  result = arg0.foo
                   ^^^^^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.

a.rb:9: Argument passed to parameter `arg0` is `T.untyped` https://srb.help/7018
     9 |    puts(result)
                 ^^^^^^
  Expected `Object` for argument `arg0` of method `Kernel#puts`:
    https://github.com/sorbet/sorbet/tree/master/rbi/core/kernel.rbi#LCENSORED:
      NN |        arg0: Object,
                  ^^^^
  Got `T.untyped` originating from:
    a.rb:6:
     6 |  result = arg0.foo
                   ^^^^^^^^
    a.rb:8:
     8 |  if result
             ^^^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.

a.rb:12: Call to method `is_a?` on `T.untyped` https://srb.help/7018
    12 |  if arg0.is_a?(Integer)
                  ^^^^^
  Got `T.untyped` originating from:
    a.rb:5:
     5 |def example_untyped(arg0)
                            ^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.
  Note:
    Use `case ... when Integer` instead of `is_a?` to check the type of an untyped value

a.rb:12: Conditional branch on `T.untyped` https://srb.help/7018
    12 |  if arg0.is_a?(Integer)
             ^^^^^^^^^^^^^^^^^^^
  Got `T.untyped` originating from:
    a.rb:12:
    12 |  if arg0.is_a?(Integer)
             ^^^^^^^^^^^^^^^^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.

a.rb:13: Revealed type: `Integer` https://srb.help/7014
    13 |    T.reveal_type(arg0)
            ^^^^^^^^^^^^^^^^^^^
  Got `Integer` originating from:
    a.rb:5:
     5 |def example_untyped(arg0)
                            ^^^^
    a.rb:12:
    12 |  if arg0.is_a?(Integer)
             ^^^^^^^^^^^^^^^^^^^

a.rb:14: Call to method `nil?` on `T.untyped` https://srb.help/7018
    14 |  elsif arg0.nil?
                     ^^^^
  Got `T.untyped` originating from:
    a.rb:5:
     5 |def example_untyped(arg0)
                            ^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.
  Note:
    Use `case ... when nil` instead of `nil?` to check whether an untyped value is nil

a.rb:14: Conditional branch on `T.untyped` https://srb.help/7018
    14 |  elsif arg0.nil?
                ^^^^^^^^^
  Got `T.untyped` originating from:
    a.rb:14:
    14 |  elsif arg0.nil?
                ^^^^^^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.

a.rb:15: Revealed type: `NilClass` https://srb.help/7014
    15 |    T.reveal_type(arg0)
            ^^^^^^^^^^^^^^^^^^^
  Got `NilClass` originating from:
    a.rb:5:
     5 |def example_untyped(arg0)
                            ^^^^
    a.rb:14:
    14 |  elsif arg0.nil?
                ^^^^^^^^^

a.rb:18: Value returned from method `example_untyped` is `T.untyped` https://srb.help/7018
    18 |  result
          ^^^^^^
  Got `T.untyped` originating from:
    a.rb:6:
     6 |  result = arg0.foo
                   ^^^^^^^^
    a.rb:8:
     8 |  if result
             ^^^^^^
    a.rb:5: Blames to `Object#example_untyped`, defined here
     5 |def example_untyped(arg0)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.

b.rb:4: Call to method `foo` on `T.untyped` https://srb.help/7018
     4 |T.unsafe(nil).foo
                      ^^^
  Got `T.untyped` originating from:
    b.rb:4:
     4 |T.unsafe(nil).foo
        ^^^^^^^^^^^^^
    https://github.com/sorbet/sorbet/tree/master/rbi/sorbet/t.rbi#LCENSORED: Blames to `T.unsafe`, defined here
    NN |  def self.unsafe(value); end
          ^^^^^^^^^^^^^^^^^^^^^^
  Note:
    Support for `typed: strong` is minimal. Consider using `typed: strict` instead.
Errors: 11
{
 "files": [
  {
   "path": "test/cli/track-untyped/a.rb",
   "sigil": "Strong",
   "strict": "Strong",
   "min_error_level": "True",
   "untyped_usages": 8
  },
  {
   "path": "test/cli/track-untyped/b.rb",
   "sigil": "Strong",
   "strict": "Strong",
   "min_error_level": "Strong",
   "untyped_usages": 1
  },
  {
   "path": "test/cli/track-untyped/c.rb",
   "sigil": "Strong",
   "strict": "Strong",
   "min_error_level": "Max"
  }
 ]
}
