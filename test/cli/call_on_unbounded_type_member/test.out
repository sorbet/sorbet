test.rb:20: Call to method `only_on_a` on unbounded type member `Box::Elem` https://srb.help/7039
    20 |    x.only_on_a
              ^^^^^^^^^
  Got `Box::Elem` originating from:
    test.rb:19:
    19 |  def initialize(x)
                         ^
  Consider adding an `upper` bound to `Box::Elem` here
    test.rb:16:
    16 |  Elem = type_member
          ^^^^^^^^^^^^^^^^^^

test.rb:21: Expected `A` but found `Box::Elem` for argument `a` https://srb.help/7002
    21 |    takes_a(x)
                    ^
  Expected `A` for argument `a` of method `Object#takes_a`:
    test.rb:9:
     9 |sig {params(a: A).void}
                    ^
  Got `Box::Elem` originating from:
    test.rb:19:
    19 |  def initialize(x)
                         ^

test.rb:23: Call to method `is_a?` on unbounded type member `Box::Elem` https://srb.help/7039
    23 |    if x.is_a?(A)
                 ^^^^^
  Got `Box::Elem` originating from:
    test.rb:19:
    19 |  def initialize(x)
                         ^
  Note:
    Use `case` instead of `is_a?` to check the type of an unconstrained generic type member

test.rb:24: Revealed type: `T.all(A, Box::Elem)` https://srb.help/7014
    24 |      T.reveal_type(x)
              ^^^^^^^^^^^^^^^^
  Got `T.all(A, Box::Elem)` originating from:
    test.rb:19:
    19 |  def initialize(x)
                         ^
    test.rb:23:
    23 |    if x.is_a?(A)
               ^^^^^^^^^^

test.rb:26: Revealed type: `Box::Elem` https://srb.help/7014
    26 |      T.reveal_type(x)
              ^^^^^^^^^^^^^^^^
  Got `Box::Elem` originating from:
    test.rb:19:
    19 |  def initialize(x)
                         ^
    test.rb:23:
    23 |    if x.is_a?(A)
               ^^^^^^^^^^

test.rb:58: Call to method `class` on unbounded type template `T.class_of(DataView)::DataViewModelBad` https://srb.help/7039
    58 |    model.class.props
                  ^^^^^
  Got `T.class_of(DataView)::DataViewModelBad` originating from:
    test.rb:57:
    57 |  def self.bad_from_instance(model)
                                     ^^^^^
  Consider adding an `upper` bound to `T.class_of(DataView)::DataViewModelBad` here
    test.rb:53:
    53 |  DataViewModelBad = type_template
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

test.rb:65: Revealed type: `T::Array[Symbol]` https://srb.help/7014
    65 |    T.reveal_type(props)
            ^^^^^^^^^^^^^^^^^^^^
  Got `T::Array[Symbol]` originating from:
    test.rb:64:
    64 |    props = model.class.all_props
                    ^^^^^^^^^^^^^^^^^^^^^

test.rb:67: Method `does_not_exist` does not exist on `ChalkODMDocument` component of `T.class_of(DataView)::DataViewModel` https://srb.help/7003
    67 |    model.does_not_exist
                  ^^^^^^^^^^^^^^
  Got `T.class_of(DataView)::DataViewModel` originating from:
    test.rb:63:
    63 |  def self.from_instance(model)
                                 ^^^^^
Errors: 8

--------------------------------------------------------------------------

# typed: true
extend T::Sig

class A
  def only_on_a; end
end
class B; end

sig {params(a: A).void}
def takes_a(a); end

class Box
  extend T::Sig
  extend T::Generic

  Elem = type_member

  sig {params(x: Elem).void}
  def initialize(x)
    x.only_on_a
    takes_a(x)

    if x.is_a?(A)
      T.reveal_type(x)
    else
      T.reveal_type(x)
    end
  end
end

Box[A].new(A.new)
Box[B].new(B.new)

module HasProps
  extend T::Helpers
  def prop(name, type); end

  module ClassMethods
    extend T::Sig
    sig {returns(T::Array[Symbol])}
    def all_props; []; end
  end
  mixes_in_class_methods(ClassMethods)
end

class ChalkODMDocument
  include HasProps
end

class DataView
  extend T::Sig
  extend T::Generic
  DataViewModelBad = type_template
  DataViewModel = type_template {{upper: ChalkODMDocument}}

  sig {params(model: DataViewModelBad).returns(T.attached_class)}
  def self.bad_from_instance(model)
    model.class.props
    new()
  end

  sig {params(model: DataViewModel).returns(T.attached_class)}
  def self.from_instance(model)
    props = model.class.all_props
    T.reveal_type(props)

    model.does_not_exist
    new()
  end
end

--------------------------------------------------------------------------

test.rb:20: Call to method `only_on_a` on unbounded type member `Box::Elem` https://srb.help/7039
    20 |    x.only_on_a
              ^^^^^^^^^
  Got `Box::Elem` originating from:
    test.rb:19:
    19 |  def initialize(x)
                         ^
  Autocorrect: Done
    test.rb:20: Replaced with `T.unsafe(x)`
    20 |    x.only_on_a
            ^
  Consider adding an `upper` bound to `Box::Elem` here
    test.rb:16:
    16 |  Elem = type_member
          ^^^^^^^^^^^^^^^^^^

test.rb:21: Expected `A` but found `Box::Elem` for argument `a` https://srb.help/7002
    21 |    takes_a(x)
                    ^
  Expected `A` for argument `a` of method `Object#takes_a`:
    test.rb:9:
     9 |sig {params(a: A).void}
                    ^
  Got `Box::Elem` originating from:
    test.rb:19:
    19 |  def initialize(x)
                         ^
  Autocorrect: Done
    test.rb:21: Replaced with `T.unsafe(x)`
    21 |    takes_a(x)
                    ^

test.rb:23: Call to method `is_a?` on unbounded type member `Box::Elem` https://srb.help/7039
    23 |    if x.is_a?(A)
                 ^^^^^
  Got `Box::Elem` originating from:
    test.rb:19:
    19 |  def initialize(x)
                         ^
  Autocorrect: Done
    test.rb:23: Replaced with `T.unsafe(x)`
    23 |    if x.is_a?(A)
               ^
  Note:
    Use `case` instead of `is_a?` to check the type of an unconstrained generic type member

test.rb:24: Revealed type: `T.all(A, Box::Elem)` https://srb.help/7014
    24 |      T.reveal_type(x)
              ^^^^^^^^^^^^^^^^
  Got `T.all(A, Box::Elem)` originating from:
    test.rb:19:
    19 |  def initialize(x)
                         ^
    test.rb:23:
    23 |    if x.is_a?(A)
               ^^^^^^^^^^

test.rb:26: Revealed type: `Box::Elem` https://srb.help/7014
    26 |      T.reveal_type(x)
              ^^^^^^^^^^^^^^^^
  Got `Box::Elem` originating from:
    test.rb:19:
    19 |  def initialize(x)
                         ^
    test.rb:23:
    23 |    if x.is_a?(A)
               ^^^^^^^^^^

test.rb:58: Call to method `class` on unbounded type template `T.class_of(DataView)::DataViewModelBad` https://srb.help/7039
    58 |    model.class.props
                  ^^^^^
  Got `T.class_of(DataView)::DataViewModelBad` originating from:
    test.rb:57:
    57 |  def self.bad_from_instance(model)
                                     ^^^^^
  Autocorrect: Done
    test.rb:58: Replaced with `T.unsafe(model)`
    58 |    model.class.props
            ^^^^^
  Consider adding an `upper` bound to `T.class_of(DataView)::DataViewModelBad` here
    test.rb:53:
    53 |  DataViewModelBad = type_template
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

test.rb:65: Revealed type: `T::Array[Symbol]` https://srb.help/7014
    65 |    T.reveal_type(props)
            ^^^^^^^^^^^^^^^^^^^^
  Got `T::Array[Symbol]` originating from:
    test.rb:64:
    64 |    props = model.class.all_props
                    ^^^^^^^^^^^^^^^^^^^^^

test.rb:67: Method `does_not_exist` does not exist on `ChalkODMDocument` component of `T.class_of(DataView)::DataViewModel` https://srb.help/7003
    67 |    model.does_not_exist
                  ^^^^^^^^^^^^^^
  Got `T.class_of(DataView)::DataViewModel` originating from:
    test.rb:63:
    63 |  def self.from_instance(model)
                                 ^^^^^
  Autocorrect: Done
    test.rb:67: Replaced with `T.unsafe(model)`
    67 |    model.does_not_exist
            ^^^^^
Errors: 8

--------------------------------------------------------------------------

# typed: true
extend T::Sig

class A
  def only_on_a; end
end
class B; end

sig {params(a: A).void}
def takes_a(a); end

class Box
  extend T::Sig
  extend T::Generic

  Elem = type_member

  sig {params(x: Elem).void}
  def initialize(x)
    T.unsafe(x).only_on_a
    takes_a(T.unsafe(x))

    if T.unsafe(x).is_a?(A)
      T.reveal_type(x)
    else
      T.reveal_type(x)
    end
  end
end

Box[A].new(A.new)
Box[B].new(B.new)

module HasProps
  extend T::Helpers
  def prop(name, type); end

  module ClassMethods
    extend T::Sig
    sig {returns(T::Array[Symbol])}
    def all_props; []; end
  end
  mixes_in_class_methods(ClassMethods)
end

class ChalkODMDocument
  include HasProps
end

class DataView
  extend T::Sig
  extend T::Generic
  DataViewModelBad = type_template
  DataViewModel = type_template {{upper: ChalkODMDocument}}

  sig {params(model: DataViewModelBad).returns(T.attached_class)}
  def self.bad_from_instance(model)
    T.unsafe(model).class.props
    new()
  end

  sig {params(model: DataViewModel).returns(T.attached_class)}
  def self.from_instance(model)
    props = model.class.all_props
    T.reveal_type(props)

    T.unsafe(model).does_not_exist
    new()
  end
end
