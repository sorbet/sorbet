test/cli/flow-sensitivity-hint/test.rb:7: Method `even?` does not exist on `NilClass` component of `T.nilable(Integer)` https://srb.help/7003
     7 |    x.first.even?
                    ^^^^^
  Got `T.nilable(Integer)` originating from:
    test/cli/flow-sensitivity-hint/test.rb:7:
     7 |    x.first.even?
            ^^^^^^^
  Possible misuse of flow-sensitive typing:
    test/cli/flow-sensitivity-hint/test.rb:6: The preceding condition calls `nil?` on an expression, not a variable
     6 |  unless x.first.nil?
                 ^^^^^^^
    Sorbet only tracks flow-sensitive knowledge on variables, not methods.
    See https://sorbet.org/docs/flow-sensitive#limitations-of-flow-sensitivity
    To fix, refactor so the `nil?` call is on a variable and use that variable everywhere,
    or accept the autocorrect to silence this error.
  Autocorrect: Use `-a` to autocorrect
    test/cli/flow-sensitivity-hint/test.rb:7: Replace with `T.must(x.first)`
     7 |    x.first.even?
            ^^^^^^^

test/cli/flow-sensitivity-hint/test.rb:15: Method `even?` does not exist on `NilClass` component of `T.nilable(Integer)` https://srb.help/7003
    15 |    x.first.even?
                    ^^^^^
  Got `T.nilable(Integer)` originating from:
    test/cli/flow-sensitivity-hint/test.rb:15:
    15 |    x.first.even?
            ^^^^^^^
  Possible misuse of flow-sensitive typing:
    test/cli/flow-sensitivity-hint/test.rb:14: The preceding condition calls `is_a?` on an expression, not a variable
    14 |  if x.first.is_a?(Integer)
             ^^^^^^^
    Sorbet only tracks flow-sensitive knowledge on variables, not methods.
    See https://sorbet.org/docs/flow-sensitive#limitations-of-flow-sensitivity
    To fix, refactor so the `is_a?` call is on a variable and use that variable everywhere,
    or accept the autocorrect to silence this error.
  Autocorrect: Use `-a` to autocorrect
    test/cli/flow-sensitivity-hint/test.rb:15: Replace with `T.must(x.first)`
    15 |    x.first.even?
            ^^^^^^^

test/cli/flow-sensitivity-hint/test.rb:21: Method `even?` does not exist on `NilClass` component of `T.nilable(Integer)` https://srb.help/7003
    21 |  x[0].even? if !x[0].nil?
               ^^^^^
  Got `T.nilable(Integer)` originating from:
    test/cli/flow-sensitivity-hint/test.rb:21:
    21 |  x[0].even? if !x[0].nil?
          ^^^^
  Possible misuse of flow-sensitive typing:
    test/cli/flow-sensitivity-hint/test.rb:21: The preceding condition calls `nil?` on an expression, not a variable
    21 |  x[0].even? if !x[0].nil?
                         ^^^^
    Sorbet only tracks flow-sensitive knowledge on variables, not methods.
    See https://sorbet.org/docs/flow-sensitive#limitations-of-flow-sensitivity
    To fix, refactor so the `nil?` call is on a variable and use that variable everywhere,
    or accept the autocorrect to silence this error.
  Autocorrect: Use `-a` to autocorrect
    test/cli/flow-sensitivity-hint/test.rb:21: Replace with `T.must(x[0])`
    21 |  x[0].even? if !x[0].nil?
          ^^^^

test/cli/flow-sensitivity-hint/test.rb:29: Method `even?` does not exist on `NilClass` component of `T.nilable(Integer)` https://srb.help/7003
    29 |  x.first.even?
                  ^^^^^
  Got `T.nilable(Integer)` originating from:
    test/cli/flow-sensitivity-hint/test.rb:29:
    29 |  x.first.even?
          ^^^^^^^
  Possible misuse of flow-sensitive typing:
    test/cli/flow-sensitivity-hint/test.rb:27: The preceding condition calls `nil?` on an expression, not a variable
    27 |  return false if x.first.nil?
                          ^^^^^^^
    Sorbet only tracks flow-sensitive knowledge on variables, not methods.
    See https://sorbet.org/docs/flow-sensitive#limitations-of-flow-sensitivity
    To fix, refactor so the `nil?` call is on a variable and use that variable everywhere,
    or accept the autocorrect to silence this error.
  Autocorrect: Use `-a` to autocorrect
    test/cli/flow-sensitivity-hint/test.rb:29: Replace with `T.must(x.first)`
    29 |  x.first.even?
          ^^^^^^^

test/cli/flow-sensitivity-hint/test.rb:34: Method `even?` does not exist on `NilClass` component of `T.nilable(Integer)` https://srb.help/7003
    34 |  first_is_even = !x.first.nil? && x.first.even?
                                                   ^^^^^
  Got `T.nilable(Integer)` originating from:
    test/cli/flow-sensitivity-hint/test.rb:34:
    34 |  first_is_even = !x.first.nil? && x.first.even?
                                           ^^^^^^^
  Possible misuse of flow-sensitive typing:
    test/cli/flow-sensitivity-hint/test.rb:34: The preceding condition calls `nil?` on an expression, not a variable
    34 |  first_is_even = !x.first.nil? && x.first.even?
                           ^^^^^^^
    Sorbet only tracks flow-sensitive knowledge on variables, not methods.
    See https://sorbet.org/docs/flow-sensitive#limitations-of-flow-sensitivity
    To fix, refactor so the `nil?` call is on a variable and use that variable everywhere,
    or accept the autocorrect to silence this error.
  Autocorrect: Use `-a` to autocorrect
    test/cli/flow-sensitivity-hint/test.rb:34: Replace with `T.must(x.first)`
    34 |  first_is_even = !x.first.nil? && x.first.even?
                                           ^^^^^^^

test/cli/flow-sensitivity-hint/test.rb:46: Method `even?` does not exist on `NilClass` component of `T.nilable(Integer)` https://srb.help/7003
    46 |    looks_like_var_but_is_method.even?
                                         ^^^^^
  Got `T.nilable(Integer)` originating from:
    test/cli/flow-sensitivity-hint/test.rb:46:
    46 |    looks_like_var_but_is_method.even?
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Possible misuse of flow-sensitive typing:
    test/cli/flow-sensitivity-hint/test.rb:45: The preceding condition calls `nil?` on an expression, not a variable
    45 |  if !looks_like_var_but_is_method.nil?
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    Sorbet only tracks flow-sensitive knowledge on variables, not methods.
    See https://sorbet.org/docs/flow-sensitive#limitations-of-flow-sensitivity
    To fix, refactor so the `nil?` call is on a variable and use that variable everywhere,
    or accept the autocorrect to silence this error.
  Autocorrect: Use `-a` to autocorrect
    test/cli/flow-sensitivity-hint/test.rb:46: Replace with `T.must(looks_like_var_but_is_method)`
    46 |    looks_like_var_but_is_method.even?
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

test/cli/flow-sensitivity-hint/test.rb:58: Method `sqrt` does not exist on `Class` https://srb.help/7003
    58 |    returns_class.sqrt(4)
                          ^^^^
  Got `Class` originating from:
    test/cli/flow-sensitivity-hint/test.rb:58:
    58 |    returns_class.sqrt(4)
            ^^^^^^^^^^^^^
  Possible misuse of flow-sensitive typing:
    test/cli/flow-sensitivity-hint/test.rb:57: The preceding condition calls `<` on an expression, not a variable
    57 |  if returns_class < Integer
             ^^^^^^^^^^^^^
    Sorbet only tracks flow-sensitive knowledge on variables, not methods.
    See https://sorbet.org/docs/flow-sensitive#limitations-of-flow-sensitivity
    To fix, refactor so the `<` call is on a variable and use that variable everywhere.

test/cli/flow-sensitivity-hint/test.rb:65: Method `even?` does not exist on `NilClass` component of `T.nilable(Integer)` https://srb.help/7003
    65 |    x.first.even?
                    ^^^^^
  Got `T.nilable(Integer)` originating from:
    test/cli/flow-sensitivity-hint/test.rb:65:
    65 |    x.first.even?
            ^^^^^^^
  Possible misuse of flow-sensitive typing:
    test/cli/flow-sensitivity-hint/test.rb:64: The preceding condition calls `==` on an expression, not a variable
    64 |  if x.first == 0
             ^^^^^^^
    Sorbet only tracks flow-sensitive knowledge on variables, not methods.
    See https://sorbet.org/docs/flow-sensitive#limitations-of-flow-sensitivity
    To fix, refactor so the `==` call is on a variable and use that variable everywhere,
    or accept the autocorrect to silence this error.
  Autocorrect: Use `-a` to autocorrect
    test/cli/flow-sensitivity-hint/test.rb:65: Replace with `T.must(x.first)`
    65 |    x.first.even?
            ^^^^^^^

test/cli/flow-sensitivity-hint/test.rb:71: Revealed type: `String("----- Below tests should not have special messages ---------------------------------------------")` https://srb.help/7014
    71 |  T.reveal_type("----- Below tests should not have special messages ---------------------------------------------")
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Got `String("----- Below tests should not have special messages ---------------------------------------------")` originating from:
    test/cli/flow-sensitivity-hint/test.rb:71:
    71 |  T.reveal_type("----- Below tests should not have special messages ---------------------------------------------")
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

test/cli/flow-sensitivity-hint/test.rb:78: Method `even?` does not exist on `NilClass` component of `T.nilable(Integer)` https://srb.help/7003
    78 |    y.even?
              ^^^^^
  Got `T.nilable(Integer)` originating from:
    test/cli/flow-sensitivity-hint/test.rb:77:
    77 |    y = T.let(nil, T.nilable(Integer))
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    test/cli/flow-sensitivity-hint/test.rb:78: Replace with `T.must(y)`
    78 |    y.even?
            ^

test/cli/flow-sensitivity-hint/test.rb:90: Method `even?` does not exist on `String` component of `T.nilable(String)` https://srb.help/7003
    90 |    x.first.even?
                    ^^^^^
  Got `T.nilable(String)` originating from:
    test/cli/flow-sensitivity-hint/test.rb:90:
    90 |    x.first.even?
            ^^^^^^^

test/cli/flow-sensitivity-hint/test.rb:90: Method `even?` does not exist on `NilClass` component of `T.nilable(String)` https://srb.help/7003
    90 |    x.first.even?
                    ^^^^^
  Got `T.nilable(String)` originating from:
    test/cli/flow-sensitivity-hint/test.rb:90:
    90 |    x.first.even?
            ^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    test/cli/flow-sensitivity-hint/test.rb:90: Replace with `T.must(x.first)`
    90 |    x.first.even?
            ^^^^^^^

test/cli/flow-sensitivity-hint/test.rb:102: Method `even?` does not exist on `NilClass` component of `T.nilable(Integer)` https://srb.help/7003
     102 |    x.first.even?
                      ^^^^^
  Got `T.nilable(Integer)` originating from:
    test/cli/flow-sensitivity-hint/test.rb:102:
     102 |    x.first.even?
              ^^^^^^^
  Possible misuse of flow-sensitive typing:
    test/cli/flow-sensitivity-hint/test.rb:100: The preceding condition calls `nil?` on an expression, not a variable
     100 |  unless x.first.nil? # Should NOT have special message, but does (bug, annoying to fix)
                   ^^^^^^^
    Sorbet only tracks flow-sensitive knowledge on variables, not methods.
    See https://sorbet.org/docs/flow-sensitive#limitations-of-flow-sensitivity
    To fix, refactor so the `nil?` call is on a variable and use that variable everywhere,
    or accept the autocorrect to silence this error.
  Autocorrect: Use `-a` to autocorrect
    test/cli/flow-sensitivity-hint/test.rb:102: Replace with `T.must(x.first)`
     102 |    x.first.even?
              ^^^^^^^

test/cli/flow-sensitivity-hint/test.rb:114: Method `even?` does not exist on `NilClass` component of `T.nilable(Integer)` https://srb.help/7003
     114 |    x.first.even?
                      ^^^^^
  Got `T.nilable(Integer)` originating from:
    test/cli/flow-sensitivity-hint/test.rb:114:
     114 |    x.first.even?
              ^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    test/cli/flow-sensitivity-hint/test.rb:114: Replace with `T.must(x.first)`
     114 |    x.first.even?
              ^^^^^^^

test/cli/flow-sensitivity-hint/test.rb:123: Method `even?` does not exist on `NilClass` component of `T.nilable(Integer)` https://srb.help/7003
     123 |    x.first.even?
                      ^^^^^
  Got `T.nilable(Integer)` originating from:
    test/cli/flow-sensitivity-hint/test.rb:123:
     123 |    x.first.even?
              ^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    test/cli/flow-sensitivity-hint/test.rb:123: Replace with `T.must(x.first)`
     123 |    x.first.even?
              ^^^^^^^

test/cli/flow-sensitivity-hint/test.rb:130: Method `even?` does not exist on `NilClass` component of `T.nilable(Integer)` https://srb.help/7003
     130 |    x.first.even?
                      ^^^^^
  Got `T.nilable(Integer)` originating from:
    test/cli/flow-sensitivity-hint/test.rb:130:
     130 |    x.first.even?
              ^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    test/cli/flow-sensitivity-hint/test.rb:130: Replace with `T.must(x.first)`
     130 |    x.first.even?
              ^^^^^^^

test/cli/flow-sensitivity-hint/test.rb:137: This code is unreachable https://srb.help/7006
     137 |    x.first.even?
              ^^^^^^^^^^^^^
    test/cli/flow-sensitivity-hint/test.rb:136: This condition was always `falsy` (`FalseClass`)
     136 |  if Integer === x.first # Should have special message, but doesn't (bug, annoying to fix)
               ^^^^^^^^^^^^^^^^^^^
  Got `FalseClass` originating from:
    test/cli/flow-sensitivity-hint/test.rb:136:
     136 |  if Integer === x.first # Should have special message, but doesn't (bug, annoying to fix)
               ^^^^^^^^^^^^^^^^^^^

test/cli/flow-sensitivity-hint/test.rb:144: Method `even?` does not exist on `T.class_of(Integer)` component of `T.nilable(T.class_of(Integer))` https://srb.help/7003
     144 |    x.first.even?
                      ^^^^^
  Got `T.nilable(T.class_of(Integer))` originating from:
    test/cli/flow-sensitivity-hint/test.rb:144:
     144 |    x.first.even?
              ^^^^^^^
  Note:
    Did you mean to define `even?` as a singleton class method?
  Possible misuse of flow-sensitive typing:
    test/cli/flow-sensitivity-hint/test.rb:143: The preceding condition calls `===` on an expression, not a variable
     143 |  if x.first === 0 # Should not have special message, but does (bug, annoying to fix)
               ^^^^^^^
    Sorbet only tracks flow-sensitive knowledge on variables, not methods.
    See https://sorbet.org/docs/flow-sensitive#limitations-of-flow-sensitivity
    To fix, refactor so the `===` call is on a variable and use that variable everywhere,
    or accept the autocorrect to silence this error.
  Autocorrect: Use `-a` to autocorrect
    https://github.com/sorbet/sorbet/tree/master/rbi/core/integer.rbi#LCENSORED: Insert `self.`
      NN |  def even?(); end
                ^

test/cli/flow-sensitivity-hint/test.rb:144: Method `even?` does not exist on `NilClass` component of `T.nilable(T.class_of(Integer))` https://srb.help/7003
     144 |    x.first.even?
                      ^^^^^
  Got `T.nilable(T.class_of(Integer))` originating from:
    test/cli/flow-sensitivity-hint/test.rb:144:
     144 |    x.first.even?
              ^^^^^^^
  Possible misuse of flow-sensitive typing:
    test/cli/flow-sensitivity-hint/test.rb:143: The preceding condition calls `===` on an expression, not a variable
     143 |  if x.first === 0 # Should not have special message, but does (bug, annoying to fix)
               ^^^^^^^
    Sorbet only tracks flow-sensitive knowledge on variables, not methods.
    See https://sorbet.org/docs/flow-sensitive#limitations-of-flow-sensitivity
    To fix, refactor so the `===` call is on a variable and use that variable everywhere,
    or accept the autocorrect to silence this error.
  Autocorrect: Use `-a` to autocorrect
    test/cli/flow-sensitivity-hint/test.rb:144: Replace with `T.must(x.first)`
     144 |    x.first.even?
              ^^^^^^^
Errors: 19
