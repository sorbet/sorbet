autocorrect-shape-square-brackets-eq.rb:9: Expected `NilClass` but found `Integer(1)` for key `Symbol(:foo)` https://srb.help/7002
     9 |xs[:foo] = 1
                   ^
  Shape originates from here:
    autocorrect-shape-square-brackets-eq.rb:3:
     3 |xs = {
     4 |  foo: nil,
     5 |  bar: false,
     6 |  qux: true,
     7 |}
  Got `Integer(1)` originating from:
    autocorrect-shape-square-brackets-eq.rb:9:
     9 |xs[:foo] = 1
                   ^
  Autocorrect: Done
    autocorrect-shape-square-brackets-eq.rb:4: Replaced with `T.let(nil, T.nilable(Integer))`
     4 |  foo: nil,
               ^^^

autocorrect-shape-square-brackets-eq.rb:10: Expected `FalseClass` but found `TrueClass` for key `Symbol(:bar)` https://srb.help/7002
    10 |xs[:bar] = true
                   ^^^^
  Shape originates from here:
    autocorrect-shape-square-brackets-eq.rb:3:
     3 |xs = {
     4 |  foo: nil,
     5 |  bar: false,
     6 |  qux: true,
     7 |}
  Got `TrueClass` originating from:
    autocorrect-shape-square-brackets-eq.rb:10:
    10 |xs[:bar] = true
                   ^^^^
  Autocorrect: Done
    autocorrect-shape-square-brackets-eq.rb:5: Replaced with `T.let(false, T::Boolean)`
     5 |  bar: false,
               ^^^^^

autocorrect-shape-square-brackets-eq.rb:11: Expected `TrueClass` but found `FalseClass` for key `Symbol(:qux)` https://srb.help/7002
    11 |xs[:qux] = false
                   ^^^^^
  Shape originates from here:
    autocorrect-shape-square-brackets-eq.rb:3:
     3 |xs = {
     4 |  foo: nil,
     5 |  bar: false,
     6 |  qux: true,
     7 |}
  Got `FalseClass` originating from:
    autocorrect-shape-square-brackets-eq.rb:11:
    11 |xs[:qux] = false
                   ^^^^^
  Autocorrect: Done
    autocorrect-shape-square-brackets-eq.rb:6: Replaced with `T.let(true, T::Boolean)`
     6 |  qux: true,
               ^^^^

autocorrect-shape-square-brackets-eq.rb:17: Expected `[]` but found `T::Array[Integer]` for key `Symbol(:first)` https://srb.help/7002
    17 |ys[:first] = T::Array[Integer].new
                     ^^^^^^^^^^^^^^^^^^^^^
  Shape originates from here:
    autocorrect-shape-square-brackets-eq.rb:13:
    13 |ys = {
    14 |  first: [],
    15 |  second: {},
    16 |}
  Got `T::Array[Integer]` originating from:
    autocorrect-shape-square-brackets-eq.rb:17:
    17 |ys[:first] = T::Array[Integer].new
                     ^^^^^^^^^^^^^^^^^^^^^

autocorrect-shape-square-brackets-eq.rb:18: Expected `{}` but found `T::Hash[Symbol, String]` for key `Symbol(:second)` https://srb.help/7002
    18 |ys[:second] = T::Hash[Symbol, String].new
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Shape originates from here:
    autocorrect-shape-square-brackets-eq.rb:13:
    13 |ys = {
    14 |  first: [],
    15 |  second: {},
    16 |}
  Got `T::Hash[Symbol, String]` originating from:
    autocorrect-shape-square-brackets-eq.rb:18:
    18 |ys[:second] = T::Hash[Symbol, String].new
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^

autocorrect-shape-square-brackets-eq.rb:24: Expected `FalseClass` but found `TrueClass` for key `String("foo")` https://srb.help/7002
    24 |zs['foo'] = true
                    ^^^^
  Shape originates from here:
    autocorrect-shape-square-brackets-eq.rb:20:
    20 |zs = {
    21 |  'foo' => false,
    22 |  :bar => false,
    23 |}
  Got `TrueClass` originating from:
    autocorrect-shape-square-brackets-eq.rb:24:
    24 |zs['foo'] = true
                    ^^^^

autocorrect-shape-square-brackets-eq.rb:25: Expected `FalseClass` but found `TrueClass` for key `Symbol(:bar)` https://srb.help/7002
    25 |zs[:bar] = true
                   ^^^^
  Shape originates from here:
    autocorrect-shape-square-brackets-eq.rb:20:
    20 |zs = {
    21 |  'foo' => false,
    22 |  :bar => false,
    23 |}
  Got `TrueClass` originating from:
    autocorrect-shape-square-brackets-eq.rb:25:
    25 |zs[:bar] = true
                   ^^^^

autocorrect-shape-square-brackets-eq.rb:30: Expected `NilClass` but found `Integer(1)` for key `Symbol(:foo)` https://srb.help/7002
    30 |spacing_is_important[:foo] = 1
                                     ^
  Shape originates from here:
    autocorrect-shape-square-brackets-eq.rb:27:
    27 |spacing_is_important = {
    28 |  foo:nil,
    29 |}
  Got `Integer(1)` originating from:
    autocorrect-shape-square-brackets-eq.rb:30:
    30 |spacing_is_important[:foo] = 1
                                     ^

autocorrect-shape-square-brackets-eq.rb:41: Expected `T.nilable(FalseClass)` but found `TrueClass` for key `Symbol(:foo)` https://srb.help/7002
    41 |initialized_twice[:foo] = true
                                  ^^^^
  Shape originates from here:
    autocorrect-shape-square-brackets-eq.rb:33:
    33 |  initialized_twice = {
    34 |    foo: nil,
    35 |  }
    autocorrect-shape-square-brackets-eq.rb:37:
    37 |  initialized_twice = {
    38 |    foo: false,
    39 |  }
  Got `TrueClass` originating from:
    autocorrect-shape-square-brackets-eq.rb:41:
    41 |initialized_twice[:foo] = true
                                  ^^^^

autocorrect-shape-square-brackets-eq.rb:48: Expected `NilClass` but found `Integer(1)` for key `Symbol(:suffix)` https://srb.help/7002
    48 |ws[:suffix] = 1
                      ^
  Shape originates from here:
    autocorrect-shape-square-brackets-eq.rb:44:
    44 |ws = {
    45 |  another_key_with_suffix: nil,
    46 |  suffix: nil,
    47 |}
  Got `Integer(1)` originating from:
    autocorrect-shape-square-brackets-eq.rb:48:
    48 |ws[:suffix] = 1
                      ^
  Autocorrect: Done
    autocorrect-shape-square-brackets-eq.rb:45: Replaced with `T.let(nil, T.nilable(Integer))`
    45 |  another_key_with_suffix: nil,
                                   ^^^
Errors: 10

--------------------------------------------------------------------------

# typed: strict

xs = {
  foo: T.let(nil, T.nilable(Integer)),
  bar: T.let(false, T::Boolean),
  qux: T.let(true, T::Boolean),
}

xs[:foo] = 1
xs[:bar] = true
xs[:qux] = false

ys = {
  first: [],
  second: {},
}
ys[:first] = T::Array[Integer].new
ys[:second] = T::Hash[Symbol, String].new

zs = {
  'foo' => false,
  :bar => false,
}
zs['foo'] = true
zs[:bar] = true

spacing_is_important = {
  foo:nil,
}
spacing_is_important[:foo] = 1

if T.unsafe(nil)
  initialized_twice = {
    foo: nil,
  }
else
  initialized_twice = {
    foo: false,
  }
end
initialized_twice[:foo] = true

# This one currently picks the wrong key, because the heuristic is naive.
ws = {
  another_key_with_suffix: T.let(nil, T.nilable(Integer)),
  suffix: nil,
}
ws[:suffix] = 1
