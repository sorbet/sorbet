suggest-sig.rb:74: Method `takesBlock` uses `yield` but does not mention a block parameter https://srb.help/3007
    74 |def takesBlock
        ^^^^^^^^^^^^^^
    suggest-sig.rb:75: Arising from use of `yield` in method body
    75 |  yield 1
          ^^^^^^^

suggest-sig.rb:92: Method `with_block` uses `yield` but does not mention a block parameter https://srb.help/3007
    92 |def with_block
        ^^^^^^^^^^^^^^
    suggest-sig.rb:93: Arising from use of `yield` in method body
    93 |  yield
          ^^^^^

suggest-sig.rb:124: Malformed `sig`: `generated` is invalid in this context https://srb.help/5003
     124 |sig {params(a: T.untyped, cond: T::Boolean).returns(T.untyped).generated} # error: `generated` is deprecated
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    suggest-sig.rb:124: Consult https://sorbet.org/docs/sigs for signature syntax
     124 |sig {params(a: T.untyped, cond: T::Boolean).returns(T.untyped).generated} # error: `generated` is deprecated
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

suggest-sig.rb:135: Malformed `sig`: `generated` is invalid in this context https://srb.help/5003
     135 |  params(a: T.untyped, cond: T::Boolean). # error: `generated` is deprecated
     136 |  returns(T.untyped).
     137 |  generated
    suggest-sig.rb:135: Consult https://sorbet.org/docs/sigs for signature syntax
     135 |  params(a: T.untyped, cond: T::Boolean). # error: `generated` is deprecated
     136 |  returns(T.untyped).
     137 |  generated

suggest-sig.rb:204: `MyFinalClass` was declared as final but its method `returns_int` was not declared as final https://srb.help/5048
     204 |  def returns_int; 42; end
            ^^^^^^^^^^^^^^^

suggest-sig.rb:5: The method `hazTwoArgs` does not have a `sig` https://srb.help/7017
     5 |def hazTwoArgs(a, b); 1; end;
        ^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:5: Inserted `extend T::Sig
    sig { params(a: T.untyped, b: T.untyped).returns(Integer) }`
     5 |def hazTwoArgs(a, b); 1; end;
        ^

suggest-sig.rb:8: Method `someCondition` does not exist on `Object` https://srb.help/7003
     8 |  if someCondition
             ^^^^^^^^^^^^^

suggest-sig.rb:7: The method `baz` does not have a `sig` https://srb.help/7017
     7 |def baz
        ^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:7: Inserted `extend T::Sig
    sig { returns(T.any(T::Array[T.untyped], String)) }`
     7 |def baz
        ^

suggest-sig.rb:18: The method `bla` does not have a `sig` https://srb.help/7017
    18 |def bla; give_me_void; end
        ^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:18: Inserted `extend T::Sig
    sig { void }`
    18 |def bla; give_me_void; end
        ^

suggest-sig.rb:21: Method `someCondition` does not exist on `Object` https://srb.help/7003
    21 |  if someCondition
             ^^^^^^^^^^^^^

suggest-sig.rb:20: The method `bbq` does not have a `sig` https://srb.help/7017
    20 |def bbq
        ^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:20: Inserted `extend T::Sig
    sig { void }`
    20 |def bbq
        ^

suggest-sig.rb:28: The method `idk` does not have a `sig` https://srb.help/7017
    28 |def idk(a); a / a + a * a; end
        ^^^^^^^^^^

suggest-sig.rb:30: The method `give_me_literal` does not have a `sig` https://srb.help/7017
    30 |def give_me_literal; 1; end;
        ^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:30: Inserted `extend T::Sig
    sig { returns(Integer) }`
    30 |def give_me_literal; 1; end;
        ^

suggest-sig.rb:32: The method `give_me_literal_nested` does not have a `sig` https://srb.help/7017
    32 |def give_me_literal_nested; [[1]]; end;
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:32: Inserted `extend T::Sig
    sig { returns(T::Array[T::Array[Integer]]) }`
    32 |def give_me_literal_nested; [[1]]; end;
        ^

suggest-sig.rb:34: The method `root_private` does not have a `sig` https://srb.help/7017
    34 |private def root_private; end
                ^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:34: Inserted `extend T::Sig
    sig { returns(NilClass) }`
    34 |private def root_private; end
        ^

suggest-sig.rb:36: The method `root_protected` does not have a `sig` https://srb.help/7017
    36 |protected def root_protected; end
                  ^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:36: Inserted `extend T::Sig
    sig { returns(NilClass) }`
    36 |protected def root_protected; end
        ^

suggest-sig.rb:46: The method `foo` does not have a `sig` https://srb.help/7017
    46 |def foo(a)
        ^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:46: Inserted `extend T::Sig
    sig { params(a: Integer).returns(Integer) }`
    46 |def foo(a)
        ^

suggest-sig.rb:56: The method `fooCond` does not have a `sig` https://srb.help/7017
    56 |def fooCond(a, cond)
        ^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:56: Inserted `extend T::Sig
    sig { params(a: T.any(Integer, String), cond: T.untyped).void }`
    56 |def fooCond(a, cond)
        ^

suggest-sig.rb:64: The method `fooWhile` does not have a `sig` https://srb.help/7017
    64 |def fooWhile(a, cond1, cond2)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:64: Inserted `extend T::Sig
    sig { params(a: T.any(Integer, String), cond1: T.untyped, cond2: T.untyped).returns(NilClass) }`
    64 |def fooWhile(a, cond1, cond2)
        ^

suggest-sig.rb:74: The method `takesBlock` does not have a `sig` https://srb.help/7017
    74 |def takesBlock
        ^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:74: Inserted `extend T::Sig
    sig { returns(Integer) }`
    74 |def takesBlock
        ^

suggest-sig.rb:79: The method `list_ints_or_empty_list` does not have a `sig` https://srb.help/7017
    79 |def list_ints_or_empty_list
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:79: Inserted `extend T::Sig
    sig { returns(T::Array[T.untyped]) }`
    79 |def list_ints_or_empty_list
        ^

suggest-sig.rb:85: This code is unreachable https://srb.help/7006
    85 |  if true || qux || blah
                     ^^^
    suggest-sig.rb:85: This condition was always `truthy` (`TrueClass`)
    85 |  if true || qux || blah
             ^^^^
  Got `TrueClass` originating from:
    suggest-sig.rb:85:
    85 |  if true || qux || blah
             ^^^^

suggest-sig.rb:85: This code is unreachable https://srb.help/7006
    85 |  if true || qux || blah
                            ^^^^
    suggest-sig.rb:85: This condition was always `truthy` (`TrueClass`)
    85 |  if true || qux || blah
             ^^^^^^^^^^^
  Got `TrueClass` originating from:
    suggest-sig.rb:85:
    85 |  if true || qux || blah
             ^^^^

suggest-sig.rb:88: This code is unreachable https://srb.help/7006
    88 |    takesString(x)
            ^^^^^^^^^^^^^^
    suggest-sig.rb:85: This condition was always `truthy` (`TrueClass`)
    85 |  if true || qux || blah
             ^^^^^^^^^^^^^^^^^^^
  Got `TrueClass` originating from:
    suggest-sig.rb:85:
    85 |  if true || qux || blah
             ^^^^
    suggest-sig.rb:85:
    85 |  if true || qux || blah
             ^^^^^^^^^^^

suggest-sig.rb:84: The method `dead` does not have a `sig` https://srb.help/7017
    84 |def dead(x)
        ^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:84: Inserted `extend T::Sig
    sig { params(x: Integer).void }`
    84 |def dead(x)
        ^

suggest-sig.rb:92: The method `with_block` does not have a `sig` https://srb.help/7017
    92 |def with_block
        ^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:92: Inserted `extend T::Sig
    sig { returns(NilClass) }`
    92 |def with_block
        ^

suggest-sig.rb:98: The method `takesRepated` does not have a `sig` https://srb.help/7017
    98 |def takesRepated(*a); end;
        ^^^^^^^^^^^^^^^^^^^^

suggest-sig.rb:99: The method `hasNoName` does not have a `sig` https://srb.help/7017
    99 |def hasNoName(*); end;
        ^^^^^^^^^^^^^^^^

suggest-sig.rb:118: The method `cantRun` does not have a `sig` https://srb.help/7017
     118 |def cantRun(a)
          ^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:118: Inserted `extend T::Sig
    sig { params(a: T.untyped).returns(Integer) }`
     118 |def cantRun(a)
          ^

suggest-sig.rb:155: The method `explicitly_named_block_parameter` does not have a `sig` https://srb.help/7017
     155 |def explicitly_named_block_parameter(&blk)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:155: Inserted `extend T::Sig
    sig { params(blk: T.untyped).returns(Integer) }`
     155 |def explicitly_named_block_parameter(&blk)
          ^

suggest-sig.rb:124: Method `generated` does not exist on `T::Private::Methods::DeclBuilder` https://srb.help/7003
     124 |sig {params(a: T.untyped, cond: T::Boolean).returns(T.untyped).generated} # error: `generated` is deprecated
                                                                         ^^^^^^^^^
  Got `T::Private::Methods::DeclBuilder` originating from:
    suggest-sig.rb:124:
     124 |sig {params(a: T.untyped, cond: T::Boolean).returns(T.untyped).generated} # error: `generated` is deprecated
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:124: Replaced with `inherited`
     124 |sig {params(a: T.untyped, cond: T::Boolean).returns(T.untyped).generated} # error: `generated` is deprecated
                                                                         ^^^^^^^^^
    https://github.com/sorbet/sorbet/tree/master/rbi/core/class.rbi#LCENSORED: Defined here
      NN |  def inherited(arg0); end
            ^^^^^^^^^^^^^^^^^^^

suggest-sig.rb:137: Method `generated` does not exist on `T::Private::Methods::DeclBuilder` https://srb.help/7003
     137 |  generated
            ^^^^^^^^^
  Got `T::Private::Methods::DeclBuilder` originating from:
    suggest-sig.rb:135:
     135 |  params(a: T.untyped, cond: T::Boolean). # error: `generated` is deprecated
     136 |  returns(T.untyped).
  Autocorrect: Done
    suggest-sig.rb:137: Replaced with `inherited`
     137 |  generated
            ^^^^^^^^^
    https://github.com/sorbet/sorbet/tree/master/rbi/core/class.rbi#LCENSORED: Defined here
      NN |  def inherited(arg0); end
            ^^^^^^^^^^^^^^^^^^^

suggest-sig.rb:41: The method `a_private` does not have a `sig` https://srb.help/7017
    41 |  private def a_private; end
                  ^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:41: Inserted `sig { returns(NilClass) }`
    41 |  private def a_private; end
          ^

suggest-sig.rb:43: The method `a_protected` does not have a `sig` https://srb.help/7017
    43 |  protected def a_protected; end
                    ^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:43: Inserted `sig { returns(NilClass) }`
    43 |  protected def a_protected; end
          ^

suggest-sig.rb:102: The method `a` does not have a `sig` https://srb.help/7017
     102 |Foo = Struct.new(:a, :b)
                            ^
  Note:
    Struct classes defined with `Struct` are hard to use in `# typed: strict` files.
    Consider using `T::Struct` instead.

suggest-sig.rb:102: The method `a=` does not have a `sig` https://srb.help/7017
     102 |Foo = Struct.new(:a, :b)
                            ^
  Note:
    Struct classes defined with `Struct` are hard to use in `# typed: strict` files.
    Consider using `T::Struct` instead.

suggest-sig.rb:102: The method `b` does not have a `sig` https://srb.help/7017
     102 |Foo = Struct.new(:a, :b)
                                ^
  Note:
    Struct classes defined with `Struct` are hard to use in `# typed: strict` files.
    Consider using `T::Struct` instead.

suggest-sig.rb:102: The method `b=` does not have a `sig` https://srb.help/7017
     102 |Foo = Struct.new(:a, :b)
                                ^
  Note:
    Struct classes defined with `Struct` are hard to use in `# typed: strict` files.
    Consider using `T::Struct` instead.

suggest-sig.rb:112: The method `load_account_business_profile` does not have a `sig` https://srb.help/7017
     112 |  def self.load_account_business_profile(merchant)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:112: Inserted `sig { params(merchant: TestCarash::Merchant).returns(Integer) }`
     112 |  def self.load_account_business_profile(merchant)
            ^
    suggest-sig.rb:105: Inserted `extend T::Sig`
     105 |  class Merchant
          ^

suggest-sig.rb:108: Method `sig` does not exist on `T.class_of(TestCarash)` https://srb.help/7003
     108 |  sig {params(merchant: Merchant).void}
            ^^^
  Autocorrect: Done
    suggest-sig.rb:105: Inserted `extend T::Sig`
     105 |  class Merchant
          ^

suggest-sig.rb:108: Method `params` does not exist on `T.class_of(TestCarash)` https://srb.help/7003
     108 |  sig {params(merchant: Merchant).void}
                 ^^^^^^

suggest-sig.rb:166: The method `test1` does not have a `sig` https://srb.help/7017
     166 |  def self.test1(x:, y:)
            ^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:166: Inserted `sig { params(x: Integer, y: String).void }`
     166 |  def self.test1(x:, y:)
            ^

suggest-sig.rb:170: The method `test2` does not have a `sig` https://srb.help/7017
     170 |  def self.test2(x:, y:)
            ^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:170: Inserted `sig { params(x: Integer, y: String).void }`
     170 |  def self.test2(x:, y:)
            ^

suggest-sig.rb:174: The method `test3` does not have a `sig` https://srb.help/7017
     174 |  def self.test3(x:, y:)
            ^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:174: Inserted `sig { params(x: Integer, y: T.untyped).void }`
     174 |  def self.test3(x:, y:)
            ^

suggest-sig.rb:186: The method `test1` does not have a `sig` https://srb.help/7017
     186 |  def self.test1(y)
            ^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:186: Inserted `sig { params(y: T.untyped).void }`
     186 |  def self.test1(y)
            ^

suggest-sig.rb:191: The method `test2` does not have a `sig` https://srb.help/7017
     191 |  def self.test2(y)
            ^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:191: Inserted `sig { params(y: T.untyped).void }`
     191 |  def self.test2(y)
            ^

suggest-sig.rb:204: The method `returns_int` does not have a `sig` https://srb.help/7017
     204 |  def returns_int; 42; end
            ^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest-sig.rb:204: Inserted `sig(:final) { returns(Integer) }`
     204 |  def returns_int; 42; end
            ^
Errors: 47

--------------------------------------------------------------------------

# typed: strict

extend T::Sig

extend T::Sig
sig { params(a: T.untyped, b: T.untyped).returns(Integer) }
def hazTwoArgs(a, b); 1; end;

extend T::Sig
sig { returns(T.any(T::Array[T.untyped], String)) }
def baz
  if someCondition
    []
  else
    "[]"
  end
end

sig {void}
def give_me_void; end

extend T::Sig
sig { void }
def bla; give_me_void; end

extend T::Sig
sig { void }
def bbq
  if someCondition
    give_me_void
  else
    nil
  end
end

def idk(a); a / a + a * a; end

extend T::Sig
sig { returns(Integer) }
def give_me_literal; 1; end;

extend T::Sig
sig { returns(T::Array[T::Array[Integer]]) }
def give_me_literal_nested; [[1]]; end;

extend T::Sig
sig { returns(NilClass) }
private def root_private; end

extend T::Sig
sig { returns(NilClass) }
protected def root_protected; end

class A
  extend T::Sig

  sig { returns(NilClass) }
  private def a_private; end

  sig { returns(NilClass) }
  protected def a_protected; end
end

extend T::Sig
sig { params(a: Integer).returns(Integer) }
def foo(a)
 1 + a
end

sig {params(a: Integer).void}
def takesInt(a); end;

sig {params(a: String).void}
def takesString(a); end;

extend T::Sig
sig { params(a: T.any(Integer, String), cond: T.untyped).void }
def fooCond(a, cond)
  if cond
    takesInt(a)
  else
    takesString(a)
  end
end

extend T::Sig
sig { params(a: T.any(Integer, String), cond1: T.untyped, cond2: T.untyped).returns(NilClass) }
def fooWhile(a, cond1, cond2)
  while cond2
    if cond1
      takesInt(a)
    else
      takesString(a)
    end
  end
end

extend T::Sig
sig { returns(Integer) }
def takesBlock
  yield 1
  2
end

extend T::Sig
sig { returns(T::Array[T.untyped]) }
def list_ints_or_empty_list
  x = T.let(1, T.nilable(Integer))
  x.nil? ? [x] : []
end

extend T::Sig
sig { params(x: Integer).void }
def dead(x)
  if true || qux || blah
    takesInt(x)
  else
    takesString(x)
  end
end

extend T::Sig
sig { returns(NilClass) }
def with_block
  yield
  nil
end


def takesRepated(*a); end;
def hasNoName(*); end;

# We used to generate multiple sigs for dsl'd methods here
Foo = Struct.new(:a, :b)

class TestCarash
  extend T::Sig
  class Merchant
  end

  sig {params(merchant: Merchant).void}
  def self.blar(merchant:)
  end

  sig { params(merchant: TestCarash::Merchant).returns(Integer) }
  def self.load_account_business_profile(merchant)
    blar(merchant: merchant)
    1
  end
end

extend T::Sig
sig { params(a: T.untyped).returns(Integer) }
def cantRun(a)
  takesInt(a)
  takesString(a)
  1
end

sig {params(a: T.untyped, cond: T::Boolean).returns(T.untyped).inherited} # error: `generated` is deprecated
def fooCondGeneratedCurly(a, cond)
  if cond
    takesInt(a)
  else
    takesString(a)
  end
end


sig do
  params(a: T.untyped, cond: T::Boolean). # error: `generated` is deprecated
  returns(T.untyped).
  inherited
end
def fooCondGeneratedDo(a, cond)
  if cond
    takesInt(a)
  else
    takesString(a)
  end
end

class Abstract
  extend T::Sig
  extend T::Helpers
  abstract!
  sig {abstract.params(a: T.untyped).void}
  def abstract_foo(a); end
end

extend T::Sig
sig { params(blk: T.untyped).returns(Integer) }
def explicitly_named_block_parameter(&blk)
  42
end

module ReorderedKeywordArgs
  extend T::Sig

  sig {params(x: Integer, y: String).void}
  def self.bar(x:, y: 'default')
  end

  sig { params(x: Integer, y: String).void }
  def self.test1(x:, y:)
    self.bar(x: x, y: y)
  end

  sig { params(x: Integer, y: String).void }
  def self.test2(x:, y:)
    self.bar(y: y, x: x)
  end

  sig { params(x: Integer, y: T.untyped).void }
  def self.test3(x:, y:)
    self.bar(x: x)
  end
end

module KwHashSendSuggest
  extend T::Sig

  sig {params(x: Integer).void}
  def self.foo(x:)
  end

  sig { params(y: T.untyped).void }
  def self.test1(y)
    # signature suggestion driven by an implicit keyword args hash
    self.foo(y)
  end

  sig { params(y: T.untyped).void }
  def self.test2(y)
    # signature suggestion driven by an explicit kwsplat
    self.foo(**y)
  end

end

class MyFinalClass
  extend T::Sig
  extend T::Helpers

  final!

  sig(:final) { returns(Integer) }
  def returns_int; 42; end
end
