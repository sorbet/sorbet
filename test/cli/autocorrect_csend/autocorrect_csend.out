autocorrect_csend.rb:16: Expected `String` but found `T.nilable(String)` for argument `x` https://srb.help/7002
    16 |use_string(maybe_a&.foo)
                   ^^^^^^^^^^^^
  Expected `String` for argument `x` of method `Object#use_string`:
    autocorrect_csend.rb:11:
    11 |sig {params(x: String).void}
                    ^
  Got `T.nilable(String)` originating from:
    autocorrect_csend.rb:16:
    16 |use_string(maybe_a&.foo)
                   ^^^^^^^^^^^^
    autocorrect_csend.rb:16:
    16 |use_string(maybe_a&.foo)
                          ^
  Autocorrect: Done
    autocorrect_csend.rb:16: Replaced with `T.must(maybe_a&.foo)`
    16 |use_string(maybe_a&.foo)
                   ^^^^^^^^^^^^
Errors: 1

--------------------------------------------------------------------------

# typed: true

extend T::Sig

class A
  extend T::Sig
  sig {returns(T.nilable(String))}
  def foo; end
end

sig {params(x: String).void}
def use_string(x)
end

maybe_a = T.let(A.new, T.nilable(A))
use_string(T.must(maybe_a&.foo))

--------------------------------------------------------------------------

autocorrect_csend.rb:16: Expected `String` but found `T.nilable(String)` for argument `x` https://srb.help/7002
    16 |use_string(maybe_a&.foo)
                   ^^^^^^^^^^^^
  Expected `String` for argument `x` of method `Object#use_string`:
    autocorrect_csend.rb:11:
    11 |sig {params(x: String).void}
                    ^
  Got `T.nilable(String)` originating from:
    autocorrect_csend.rb:16:
    16 |use_string(maybe_a&.foo)
                   ^^^^^^^^^^^^
    autocorrect_csend.rb:16:
    16 |use_string(maybe_a&.foo)
                          ^
  Autocorrect: Done
    autocorrect_csend.rb:16: Replaced with `T.unsafe(maybe_a&.foo)`
    16 |use_string(maybe_a&.foo)
                   ^^^^^^^^^^^^
Errors: 1

--------------------------------------------------------------------------

# typed: true

extend T::Sig

class A
  extend T::Sig
  sig {returns(T.nilable(String))}
  def foo; end
end

sig {params(x: String).void}
def use_string(x)
end

maybe_a = T.let(A.new, T.nilable(A))
use_string(T.unsafe(maybe_a&.foo))
