suggest_t_must.rb:4: Method `[]` does not exist on `NilClass` component of `T.nilable(String)` https://srb.help/7003
     4 |foo[0]
           ^^^
  Got `T.nilable(String)` originating from:
    suggest_t_must.rb:3:
     3 |foo = T.let(nil, T.nilable(String))
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest_t_must.rb:4: Replaced with `T.must(foo)`
     4 |foo[0]
        ^^^

suggest_t_must.rb:6: Expected `String` but found `T.nilable(String)` for argument `arg0` https://srb.help/7002
     6 |"hi" + foo
               ^^^
  Expected `String` for argument `arg0` of method `String#+`:
    https://github.com/sorbet/sorbet/tree/master/rbi/core/string.rbi#LCENSORED:
    NN |        arg0: String,
                ^^^^
  Got `T.nilable(String)` originating from:
    suggest_t_must.rb:3:
     3 |foo = T.let(nil, T.nilable(String))
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    suggest_t_must.rb:6: Replaced with `T.must(foo)`
     6 |"hi" + foo
               ^^^

suggest_t_must.rb:8: Method `even?` does not exist on `NilClass` component of `T.nilable(Integer)` https://srb.help/7003
     8 |T::Array[T.nilable(Integer)].new.map(&:even?)
                                              ^^^^^^
  Got `T.nilable(Integer)` originating from:
    suggest_t_must.rb:8:
     8 |T::Array[T.nilable(Integer)].new.map(&:even?)
                                              ^
  Autocorrect: Done
    suggest_t_must.rb:8: Replaced with `{ |x| T.must(x).even? }`
     8 |T::Array[T.nilable(Integer)].new.map(&:even?)
                                            ^^^^^^^^^

suggest_t_must.rb:25: Method `split` does not exist on `NilClass` component of `T.nilable(String)` https://srb.help/7003
    25 |y.split
          ^^^^^
  Got `T.nilable(String)` originating from:
    suggest_t_must.rb:24:
    24 |x, y = [1, T.let('', T.nilable(String))]
           ^
  Autocorrect: Done
    suggest_t_must.rb:25: Replaced with `T.must(y)`
    25 |y.split
        ^

suggest_t_must.rb:20: Expected `Integer` but found `T.nilable(Integer)` for field https://srb.help/7013
    20 |    @result = xs[i]
                      ^^^^^
  Expected `Integer` for field defined here:
    suggest_t_must.rb:15:
    15 |    @result = T.let(0, Integer)
            ^^^^^^^
  Got `T.nilable(Integer)` originating from:
    suggest_t_must.rb:20:
    20 |    @result = xs[i]
                      ^^^^^
  Autocorrect: Done
    suggest_t_must.rb:20: Replaced with `T.must(xs[i])`
    20 |    @result = xs[i]
                      ^^^^^

suggest_t_must.rb:36: Method `foo` does not exist on `NilClass` component of `T.all(NilClass, T.type_parameter(:U) (of B#nil_type_parameter))` https://srb.help/7003
    36 |    x.foo
              ^^^
  Got `T.all(NilClass, T.type_parameter(:U) (of B#nil_type_parameter))` originating from:
    suggest_t_must.rb:35:
    35 |  def nil_type_parameter(x)
                                 ^

suggest_t_must.rb:36: Call to method `foo` on generic type `T.type_parameter(:U) (of B#nil_type_parameter)` component of `T.all(NilClass, T.type_parameter(:U) (of B#nil_type_parameter))` https://srb.help/7038
    36 |    x.foo
              ^^^
  Got `T.all(NilClass, T.type_parameter(:U) (of B#nil_type_parameter))` originating from:
    suggest_t_must.rb:35:
    35 |  def nil_type_parameter(x)
                                 ^
  Note:
    Consider using `T.all(T.type_parameter(:U), Constraint)` to place a constraint on this type
Errors: 7

--------------------------------------------------------------------------

# typed: true

foo = T.let(nil, T.nilable(String))
T.must(foo)[0]

"hi" + T.must(foo)

T::Array[T.nilable(Integer)].new.map { |x| T.must(x).even? }

class A
  extend T::Sig

  sig {void}
  def initialize
    @result = T.let(0, Integer)
  end

  sig {params(xs: T::Array[Integer], i: Integer).void}
  def main(xs, i)
    @result = T.must(xs[i])
  end
end

x, y = [1, T.let('', T.nilable(String))]
T.must(y).split

class B
  extend T::Sig

  sig {
    type_parameters(:U)
      .params(x: T.all(NilClass, T.type_parameter(:U)))
      .void
  }
  def nil_type_parameter(x)
    x.foo
  end
end
