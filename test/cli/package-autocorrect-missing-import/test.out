use_other_package/foo.rb:15: Unable to resolve constant `MyClass` https://srb.help/5002
    15 |  Foo::Bar::MyClass::SUBCLASSES # resolves via root
          ^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_other_package/foo.rb:15: Replaced with `Class`
    15 |  Foo::Bar::MyClass::SUBCLASSES # resolves via root
          ^^^^^^^^^^^^^^^^^
    https://github.com/sorbet/sorbet/tree/master/rbi/core/class.rbi#LCENSORED: `Class` defined here
    NN |class Class < Module
        ^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_other_package/foo.rb:15: Replaced with `T::Class`
    15 |  Foo::Bar::MyClass::SUBCLASSES # resolves via root
          ^^^^^^^^^^^^^^^^^
    https://github.com/sorbet/sorbet/tree/master/rbi/sorbet/t.rbi#LCENSORED: `T::Class` defined here
      NN |module T::Class
          ^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_other_package/foo.rb:15: Replaced with `Digest::Class`
    15 |  Foo::Bar::MyClass::SUBCLASSES # resolves via root
          ^^^^^^^^^^^^^^^^^
    https://github.com/sorbet/sorbet/tree/master/rbi/stdlib/digest.rbi#LCENSORED: `Digest::Class` defined here
      NN |class Digest::Class
          ^^^^^^^^^^^^^^^^^^^

use_other_package/foo.rb:7: `Foo::Bar::OtherPackage::OtherClass` resolves but its package is not imported https://srb.help/3718
     7 |      Foo::Bar::OtherPackage::OtherClass # resolves via root
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    other/__package.rb:3: Exported from package here
     3 |class Foo::Bar::OtherPackage < PackageSpec
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_other_package/__package.rb:7: Inserted `import Foo::Bar::OtherPackage`
     7 |  strict_dependencies 'layered'
                                       ^

use_other_package/foo.rb:8: `Foo::Bar::OtherPackage::OtherClass` resolves but its package is not imported https://srb.help/3718
     8 |      Bar::OtherPackage::OtherClass # resolves via `module Foo`
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    other/__package.rb:3: Exported from package here
     3 |class Foo::Bar::OtherPackage < PackageSpec
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_other_package/__package.rb:7: Inserted `import Foo::Bar::OtherPackage`
     7 |  strict_dependencies 'layered'
                                       ^

use_other_package/foo.rb:14: `Foo::Bar::OtherPackage::OtherClass` resolves but its package is not imported https://srb.help/3718
    14 |  Foo::Bar::OtherPackage::OtherClass # resolves via root
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    other/__package.rb:3: Exported from package here
     3 |class Foo::Bar::OtherPackage < PackageSpec
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_other_package/__package.rb:7: Inserted `import Foo::Bar::OtherPackage`
     7 |  strict_dependencies 'layered'
                                       ^

use_other_package/foo.rb:17: `Test::Foo::Bar::OtherPackage::TestUtil` is defined in a test namespace and cannot be referenced in a non-test file https://srb.help/3720
    17 |  Test::Foo::Bar::OtherPackage::TestUtil
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

use_other_package/foo.test.rb:4: `Test::Foo::Bar::OtherPackage::TestUtil` resolves but its package is not imported https://srb.help/3718
     4 |  Test::Foo::Bar::OtherPackage::TestUtil
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    other/__package.rb:3: Exported from package here
     3 |class Foo::Bar::OtherPackage < PackageSpec
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_other_package/__package.rb:7: Inserted `test_import Foo::Bar::OtherPackage`
     7 |  strict_dependencies 'layered'
                                       ^

use_other_package/foo.test.rb:6: `Foo::Bar::OtherPackage::ImportMeTestOnly` resolves but its package is not imported https://srb.help/3718
     6 |  Foo::Bar::OtherPackage::ImportMeTestOnly
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    other/__package.rb:3: Exported from package here
     3 |class Foo::Bar::OtherPackage < PackageSpec
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_other_package/__package.rb:7: Inserted `test_import Foo::Bar::OtherPackage`
     7 |  strict_dependencies 'layered'
                                       ^
Errors: 7
# frozen_string_literal: true
# typed: strict
# enable-packager: true

class Foo::MyPackage < PackageSpec
  layer 'lib'
  strict_dependencies 'layered'
  import Foo::Bar::OtherPackage
end

--------------------------------------------------------------------------

use_app_package/foo.rb:6: `Foo::Bar::AppPackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because importing it would cause a layering violation https://srb.help/3718
     6 |      Foo::Bar::AppPackage::OtherClass # resolves via root
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    app_package/__package.rb:4: Package `Foo::Bar::AppPackage` must be at most layer `lib` (to match package `Foo::MyPackage`) but is currently layer `app`
     4 |  layer 'app'
                ^^^^^

use_app_package/foo.rb:7: `Foo::Bar::AppPackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because importing it would cause a layering violation https://srb.help/3718
     7 |      Bar::AppPackage::OtherClass # resolves via `module Foo`
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    app_package/__package.rb:4: Package `Foo::Bar::AppPackage` must be at most layer `lib` (to match package `Foo::MyPackage`) but is currently layer `app`
     4 |  layer 'app'
                ^^^^^

use_app_package/foo.rb:13: `Foo::Bar::AppPackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because importing it would cause a layering violation https://srb.help/3718
    13 |  Foo::Bar::AppPackage::OtherClass # resolves via root
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    app_package/__package.rb:4: Package `Foo::Bar::AppPackage` must be at most layer `lib` (to match package `Foo::MyPackage`) but is currently layer `app`
     4 |  layer 'app'
                ^^^^^

use_app_package/foo.rb:15: `Test::Foo::Bar::AppPackage::TestUtil` is defined in a test namespace and cannot be referenced in a non-test file https://srb.help/3720
    15 |  Test::Foo::Bar::AppPackage::TestUtil
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

use_app_package/foo.test.rb:4: `Test::Foo::Bar::AppPackage::TestUtil` resolves but its package is not imported https://srb.help/3718
     4 |  Test::Foo::Bar::AppPackage::TestUtil
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    app_package/__package.rb:3: Exported from package here
     3 |class Foo::Bar::AppPackage < PackageSpec
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_app_package/__package.rb:7: Inserted `test_import Foo::Bar::AppPackage`
     7 |  strict_dependencies 'layered'
                                       ^

use_app_package/foo.test.rb:6: `Foo::Bar::AppPackage::ImportMeTestOnly` resolves but its package is not imported https://srb.help/3718
     6 |  Foo::Bar::AppPackage::ImportMeTestOnly
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    app_package/__package.rb:3: Exported from package here
     3 |class Foo::Bar::AppPackage < PackageSpec
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_app_package/__package.rb:7: Inserted `test_import Foo::Bar::AppPackage`
     7 |  strict_dependencies 'layered'
                                       ^
Errors: 6
# frozen_string_literal: true
# typed: strict
# enable-packager: true

class Foo::MyPackage < PackageSpec
  layer 'lib'
  strict_dependencies 'layered'
  test_import Foo::Bar::AppPackage
end

--------------------------------------------------------------------------

use_false_package/foo.rb:6: `Foo::Bar::FalsePackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because its `strict_dependencies` is too low https://srb.help/3718
     6 |      Foo::Bar::FalsePackage::OtherClass # resolves via root
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    false_package/__package.rb:5: `Foo::Bar::FalsePackage` must be at least `strict_dependencies 'layered'` but is currently `strict_dependencies 'false'`
     5 |  strict_dependencies 'false'
                              ^^^^^^^

use_false_package/foo.rb:7: `Foo::Bar::FalsePackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because its `strict_dependencies` is too low https://srb.help/3718
     7 |      Bar::FalsePackage::OtherClass # resolves via `module Foo`
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    false_package/__package.rb:5: `Foo::Bar::FalsePackage` must be at least `strict_dependencies 'layered'` but is currently `strict_dependencies 'false'`
     5 |  strict_dependencies 'false'
                              ^^^^^^^

use_false_package/foo.rb:13: `Foo::Bar::FalsePackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because its `strict_dependencies` is too low https://srb.help/3718
    13 |  Foo::Bar::FalsePackage::OtherClass # resolves via root
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    false_package/__package.rb:5: `Foo::Bar::FalsePackage` must be at least `strict_dependencies 'layered'` but is currently `strict_dependencies 'false'`
     5 |  strict_dependencies 'false'
                              ^^^^^^^

use_false_package/foo.rb:15: `Test::Foo::Bar::FalsePackage::TestUtil` is defined in a test namespace and cannot be referenced in a non-test file https://srb.help/3720
    15 |  Test::Foo::Bar::FalsePackage::TestUtil
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

use_false_package/foo.test.rb:4: `Test::Foo::Bar::FalsePackage::TestUtil` resolves but its package is not imported https://srb.help/3718
     4 |  Test::Foo::Bar::FalsePackage::TestUtil
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    false_package/__package.rb:3: Exported from package here
     3 |class Foo::Bar::FalsePackage < PackageSpec
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_false_package/__package.rb:7: Inserted `test_import Foo::Bar::FalsePackage`
     7 |  strict_dependencies 'layered'
                                       ^

use_false_package/foo.test.rb:6: `Foo::Bar::FalsePackage::ImportMeTestOnly` resolves but its package is not imported https://srb.help/3718
     6 |  Foo::Bar::FalsePackage::ImportMeTestOnly
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    false_package/__package.rb:3: Exported from package here
     3 |class Foo::Bar::FalsePackage < PackageSpec
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_false_package/__package.rb:7: Inserted `test_import Foo::Bar::FalsePackage`
     7 |  strict_dependencies 'layered'
                                       ^
Errors: 6
# frozen_string_literal: true
# typed: strict
# enable-packager: true

class Foo::MyPackage < PackageSpec
  layer 'lib'
  strict_dependencies 'layered'
  test_import Foo::Bar::FalsePackage
end

--------------------------------------------------------------------------

use_false_and_app_package/foo.rb:6: `Foo::Bar::FalseAndAppPackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because importing it would cause a layering violation and its `strict_dependencies` is too low https://srb.help/3718
     6 |      Foo::Bar::FalseAndAppPackage::OtherClass # resolves via root
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    false_and_app_package/__package.rb:4: Package `Foo::Bar::FalseAndAppPackage` must be at most layer `lib` (to match package `Foo::MyPackage`) but is currently layer `app`
     4 |  layer 'app'
                ^^^^^
    false_and_app_package/__package.rb:5: `Foo::Bar::FalseAndAppPackage` must be at least `strict_dependencies 'layered'` but is currently `strict_dependencies 'false'`
     5 |  strict_dependencies 'false'
                              ^^^^^^^

use_false_and_app_package/foo.rb:7: `Foo::Bar::FalseAndAppPackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because importing it would cause a layering violation and its `strict_dependencies` is too low https://srb.help/3718
     7 |      Bar::FalseAndAppPackage::OtherClass # resolves via `module Foo`
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    false_and_app_package/__package.rb:4: Package `Foo::Bar::FalseAndAppPackage` must be at most layer `lib` (to match package `Foo::MyPackage`) but is currently layer `app`
     4 |  layer 'app'
                ^^^^^
    false_and_app_package/__package.rb:5: `Foo::Bar::FalseAndAppPackage` must be at least `strict_dependencies 'layered'` but is currently `strict_dependencies 'false'`
     5 |  strict_dependencies 'false'
                              ^^^^^^^

use_false_and_app_package/foo.rb:13: `Foo::Bar::FalseAndAppPackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because importing it would cause a layering violation and its `strict_dependencies` is too low https://srb.help/3718
    13 |  Foo::Bar::FalseAndAppPackage::OtherClass # resolves via root
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    false_and_app_package/__package.rb:4: Package `Foo::Bar::FalseAndAppPackage` must be at most layer `lib` (to match package `Foo::MyPackage`) but is currently layer `app`
     4 |  layer 'app'
                ^^^^^
    false_and_app_package/__package.rb:5: `Foo::Bar::FalseAndAppPackage` must be at least `strict_dependencies 'layered'` but is currently `strict_dependencies 'false'`
     5 |  strict_dependencies 'false'
                              ^^^^^^^

use_false_and_app_package/foo.rb:15: `Test::Foo::Bar::FalseAndAppPackage::TestUtil` is defined in a test namespace and cannot be referenced in a non-test file https://srb.help/3720
    15 |  Test::Foo::Bar::FalseAndAppPackage::TestUtil
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

use_false_and_app_package/foo.test.rb:4: `Test::Foo::Bar::FalseAndAppPackage::TestUtil` resolves but its package is not imported https://srb.help/3718
     4 |  Test::Foo::Bar::FalseAndAppPackage::TestUtil
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    false_and_app_package/__package.rb:3: Exported from package here
     3 |class Foo::Bar::FalseAndAppPackage < PackageSpec
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_false_and_app_package/__package.rb:7: Inserted `test_import Foo::Bar::FalseAndAppPackage`
     7 |  strict_dependencies 'layered'
                                       ^

use_false_and_app_package/foo.test.rb:6: `Foo::Bar::FalseAndAppPackage::ImportMeTestOnly` resolves but its package is not imported https://srb.help/3718
     6 |  Foo::Bar::FalseAndAppPackage::ImportMeTestOnly
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    false_and_app_package/__package.rb:3: Exported from package here
     3 |class Foo::Bar::FalseAndAppPackage < PackageSpec
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_false_and_app_package/__package.rb:7: Inserted `test_import Foo::Bar::FalseAndAppPackage`
     7 |  strict_dependencies 'layered'
                                       ^
Errors: 6
# frozen_string_literal: true
# typed: strict
# enable-packager: true

class Foo::MyPackage < PackageSpec
  layer 'lib'
  strict_dependencies 'layered'
  test_import Foo::Bar::FalseAndAppPackage
end

--------------------------------------------------------------------------

use_cycle_package/foo.rb:6: `Foo::Bar::CyclePackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because importing it would put `Foo::MyPackage` into a cycle https://srb.help/3718
     6 |      Foo::Bar::CyclePackage::OtherClass # resolves via root
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    use_cycle_package/__package.rb:7: `Foo::MyPackage` is `strict_dependencies 'layered_dag'`, which disallows cycles
     7 |  strict_dependencies 'layered_dag'
                              ^^^^^^^^^^^^^

use_cycle_package/foo.rb:7: `Foo::Bar::CyclePackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because importing it would put `Foo::MyPackage` into a cycle https://srb.help/3718
     7 |      Bar::CyclePackage::OtherClass # resolves via `module Foo`
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    use_cycle_package/__package.rb:7: `Foo::MyPackage` is `strict_dependencies 'layered_dag'`, which disallows cycles
     7 |  strict_dependencies 'layered_dag'
                              ^^^^^^^^^^^^^

use_cycle_package/foo.rb:13: `Foo::Bar::CyclePackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because importing it would put `Foo::MyPackage` into a cycle https://srb.help/3718
    13 |  Foo::Bar::CyclePackage::OtherClass # resolves via root
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    use_cycle_package/__package.rb:7: `Foo::MyPackage` is `strict_dependencies 'layered_dag'`, which disallows cycles
     7 |  strict_dependencies 'layered_dag'
                              ^^^^^^^^^^^^^

use_cycle_package/foo.rb:15: `Test::Foo::Bar::CyclePackage::TestUtil` is defined in a test namespace and cannot be referenced in a non-test file https://srb.help/3720
    15 |  Test::Foo::Bar::CyclePackage::TestUtil
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

use_cycle_package/foo.test.rb:4: `Test::Foo::Bar::CyclePackage::TestUtil` resolves but its package is not imported https://srb.help/3718
     4 |  Test::Foo::Bar::CyclePackage::TestUtil
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    cycle_package/__package.rb:5: Exported from package here
     5 |class Foo::Bar::CyclePackage < PackageSpec
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_cycle_package/__package.rb:7: Inserted `test_import Foo::Bar::CyclePackage`
     7 |  strict_dependencies 'layered_dag'
                                           ^

use_cycle_package/foo.test.rb:6: `Foo::Bar::CyclePackage::ImportMeTestOnly` resolves but its package is not imported https://srb.help/3718
     6 |  Foo::Bar::CyclePackage::ImportMeTestOnly
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    cycle_package/__package.rb:5: Exported from package here
     5 |class Foo::Bar::CyclePackage < PackageSpec
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_cycle_package/__package.rb:7: Inserted `test_import Foo::Bar::CyclePackage`
     7 |  strict_dependencies 'layered_dag'
                                           ^
Errors: 6
# frozen_string_literal: true
# typed: strict
# enable-packager: true

class Foo::MyPackage < PackageSpec
  layer 'lib'
  strict_dependencies 'layered_dag'
  test_import Foo::Bar::CyclePackage
end

--------------------------------------------------------------------------

use_app_cycle_package/foo.rb:6: `Foo::Bar::AppCyclePackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because importing it would put `Foo::MyPackage` into a cycle and importing it would cause a layering violation https://srb.help/3718
     6 |      Foo::Bar::AppCyclePackage::OtherClass # resolves via root
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    use_app_cycle_package/__package.rb:7: `Foo::MyPackage` is `strict_dependencies 'layered_dag'`, which disallows cycles
     7 |  strict_dependencies 'layered_dag'
                              ^^^^^^^^^^^^^
    app_cycle_package/__package.rb:6: Package `Foo::Bar::AppCyclePackage` must be at most layer `lib` (to match package `Foo::MyPackage`) but is currently layer `app`
     6 |  layer 'app'
                ^^^^^

use_app_cycle_package/foo.rb:7: `Foo::Bar::AppCyclePackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because importing it would put `Foo::MyPackage` into a cycle and importing it would cause a layering violation https://srb.help/3718
     7 |      Bar::AppCyclePackage::OtherClass # resolves via `module Foo`
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    use_app_cycle_package/__package.rb:7: `Foo::MyPackage` is `strict_dependencies 'layered_dag'`, which disallows cycles
     7 |  strict_dependencies 'layered_dag'
                              ^^^^^^^^^^^^^
    app_cycle_package/__package.rb:6: Package `Foo::Bar::AppCyclePackage` must be at most layer `lib` (to match package `Foo::MyPackage`) but is currently layer `app`
     6 |  layer 'app'
                ^^^^^

use_app_cycle_package/foo.rb:13: `Foo::Bar::AppCyclePackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because importing it would put `Foo::MyPackage` into a cycle and importing it would cause a layering violation https://srb.help/3718
    13 |  Foo::Bar::AppCyclePackage::OtherClass # resolves via root
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    use_app_cycle_package/__package.rb:7: `Foo::MyPackage` is `strict_dependencies 'layered_dag'`, which disallows cycles
     7 |  strict_dependencies 'layered_dag'
                              ^^^^^^^^^^^^^
    app_cycle_package/__package.rb:6: Package `Foo::Bar::AppCyclePackage` must be at most layer `lib` (to match package `Foo::MyPackage`) but is currently layer `app`
     6 |  layer 'app'
                ^^^^^

use_app_cycle_package/foo.rb:15: `Test::Foo::Bar::AppCyclePackage::TestUtil` is defined in a test namespace and cannot be referenced in a non-test file https://srb.help/3720
    15 |  Test::Foo::Bar::AppCyclePackage::TestUtil
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

use_app_cycle_package/foo.test.rb:4: `Test::Foo::Bar::AppCyclePackage::TestUtil` resolves but its package is not imported https://srb.help/3718
     4 |  Test::Foo::Bar::AppCyclePackage::TestUtil
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    app_cycle_package/__package.rb:5: Exported from package here
     5 |class Foo::Bar::AppCyclePackage < PackageSpec
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_app_cycle_package/__package.rb:7: Inserted `test_import Foo::Bar::AppCyclePackage`
     7 |  strict_dependencies 'layered_dag'
                                           ^

use_app_cycle_package/foo.test.rb:6: `Foo::Bar::AppCyclePackage::ImportMeTestOnly` resolves but its package is not imported https://srb.help/3718
     6 |  Foo::Bar::AppCyclePackage::ImportMeTestOnly
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    app_cycle_package/__package.rb:5: Exported from package here
     5 |class Foo::Bar::AppCyclePackage < PackageSpec
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_app_cycle_package/__package.rb:7: Inserted `test_import Foo::Bar::AppCyclePackage`
     7 |  strict_dependencies 'layered_dag'
                                           ^
Errors: 6
# frozen_string_literal: true
# typed: strict
# enable-packager: true

class Foo::MyPackage < PackageSpec
  layer 'lib'
  strict_dependencies 'layered_dag'
  test_import Foo::Bar::AppCyclePackage
end

--------------------------------------------------------------------------

use_false_cycle_package/foo.rb:6: `Foo::Bar::FalseCyclePackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because importing it would put `Foo::MyPackage` into a cycle and its `strict_dependencies` is too low https://srb.help/3718
     6 |      Foo::Bar::FalseCyclePackage::OtherClass # resolves via root
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    use_false_cycle_package/__package.rb:7: `Foo::MyPackage` is `strict_dependencies 'layered_dag'`, which disallows cycles
     7 |  strict_dependencies 'layered_dag'
                              ^^^^^^^^^^^^^
    false_cycle_package/__package.rb:7: `Foo::Bar::FalseCyclePackage` must be at least `strict_dependencies 'layered'` but is currently `strict_dependencies 'false'`
     7 |  strict_dependencies 'false'
                              ^^^^^^^

use_false_cycle_package/foo.rb:7: `Foo::Bar::FalseCyclePackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because importing it would put `Foo::MyPackage` into a cycle and its `strict_dependencies` is too low https://srb.help/3718
     7 |      Bar::FalseCyclePackage::OtherClass # resolves via `module Foo`
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    use_false_cycle_package/__package.rb:7: `Foo::MyPackage` is `strict_dependencies 'layered_dag'`, which disallows cycles
     7 |  strict_dependencies 'layered_dag'
                              ^^^^^^^^^^^^^
    false_cycle_package/__package.rb:7: `Foo::Bar::FalseCyclePackage` must be at least `strict_dependencies 'layered'` but is currently `strict_dependencies 'false'`
     7 |  strict_dependencies 'false'
                              ^^^^^^^

use_false_cycle_package/foo.rb:13: `Foo::Bar::FalseCyclePackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because importing it would put `Foo::MyPackage` into a cycle and its `strict_dependencies` is too low https://srb.help/3718
    13 |  Foo::Bar::FalseCyclePackage::OtherClass # resolves via root
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    use_false_cycle_package/__package.rb:7: `Foo::MyPackage` is `strict_dependencies 'layered_dag'`, which disallows cycles
     7 |  strict_dependencies 'layered_dag'
                              ^^^^^^^^^^^^^
    false_cycle_package/__package.rb:7: `Foo::Bar::FalseCyclePackage` must be at least `strict_dependencies 'layered'` but is currently `strict_dependencies 'false'`
     7 |  strict_dependencies 'false'
                              ^^^^^^^

use_false_cycle_package/foo.rb:15: `Test::Foo::Bar::FalseCyclePackage::TestUtil` is defined in a test namespace and cannot be referenced in a non-test file https://srb.help/3720
    15 |  Test::Foo::Bar::FalseCyclePackage::TestUtil
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

use_false_cycle_package/foo.test.rb:4: `Test::Foo::Bar::FalseCyclePackage::TestUtil` resolves but its package is not imported https://srb.help/3718
     4 |  Test::Foo::Bar::FalseCyclePackage::TestUtil
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    false_cycle_package/__package.rb:5: Exported from package here
     5 |class Foo::Bar::FalseCyclePackage < PackageSpec
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_false_cycle_package/__package.rb:7: Inserted `test_import Foo::Bar::FalseCyclePackage`
     7 |  strict_dependencies 'layered_dag'
                                           ^

use_false_cycle_package/foo.test.rb:6: `Foo::Bar::FalseCyclePackage::ImportMeTestOnly` resolves but its package is not imported https://srb.help/3718
     6 |  Foo::Bar::FalseCyclePackage::ImportMeTestOnly
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    false_cycle_package/__package.rb:5: Exported from package here
     5 |class Foo::Bar::FalseCyclePackage < PackageSpec
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_false_cycle_package/__package.rb:7: Inserted `test_import Foo::Bar::FalseCyclePackage`
     7 |  strict_dependencies 'layered_dag'
                                           ^
Errors: 6
# frozen_string_literal: true
# typed: strict
# enable-packager: true

class Foo::MyPackage < PackageSpec
  layer 'lib'
  strict_dependencies 'layered_dag'
  test_import Foo::Bar::FalseCyclePackage
end

--------------------------------------------------------------------------

use_app_false_cycle_package/foo.rb:6: `Foo::Bar::AppFalseCyclePackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because importing it would put `Foo::MyPackage` into a cycle, importing it would cause a layering violation, and its `strict_dependencies` is too low https://srb.help/3718
     6 |      Foo::Bar::AppFalseCyclePackage::OtherClass # resolves via root
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    use_app_false_cycle_package/__package.rb:7: `Foo::MyPackage` is `strict_dependencies 'layered_dag'`, which disallows cycles
     7 |  strict_dependencies 'layered_dag'
                              ^^^^^^^^^^^^^
    app_false_cycle_package/__package.rb:6: Package `Foo::Bar::AppFalseCyclePackage` must be at most layer `lib` (to match package `Foo::MyPackage`) but is currently layer `app`
     6 |  layer 'app'
                ^^^^^
    app_false_cycle_package/__package.rb:7: `Foo::Bar::AppFalseCyclePackage` must be at least `strict_dependencies 'layered'` but is currently `strict_dependencies 'false'`
     7 |  strict_dependencies 'false'
                              ^^^^^^^

use_app_false_cycle_package/foo.rb:7: `Foo::Bar::AppFalseCyclePackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because importing it would put `Foo::MyPackage` into a cycle, importing it would cause a layering violation, and its `strict_dependencies` is too low https://srb.help/3718
     7 |      Bar::AppFalseCyclePackage::OtherClass # resolves via `module Foo`
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    use_app_false_cycle_package/__package.rb:7: `Foo::MyPackage` is `strict_dependencies 'layered_dag'`, which disallows cycles
     7 |  strict_dependencies 'layered_dag'
                              ^^^^^^^^^^^^^
    app_false_cycle_package/__package.rb:6: Package `Foo::Bar::AppFalseCyclePackage` must be at most layer `lib` (to match package `Foo::MyPackage`) but is currently layer `app`
     6 |  layer 'app'
                ^^^^^
    app_false_cycle_package/__package.rb:7: `Foo::Bar::AppFalseCyclePackage` must be at least `strict_dependencies 'layered'` but is currently `strict_dependencies 'false'`
     7 |  strict_dependencies 'false'
                              ^^^^^^^

use_app_false_cycle_package/foo.rb:13: `Foo::Bar::AppFalseCyclePackage::OtherClass` resolves but its package is not imported. However, it cannot be automatically imported because importing it would put `Foo::MyPackage` into a cycle, importing it would cause a layering violation, and its `strict_dependencies` is too low https://srb.help/3718
    13 |  Foo::Bar::AppFalseCyclePackage::OtherClass # resolves via root
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    use_app_false_cycle_package/__package.rb:7: `Foo::MyPackage` is `strict_dependencies 'layered_dag'`, which disallows cycles
     7 |  strict_dependencies 'layered_dag'
                              ^^^^^^^^^^^^^
    app_false_cycle_package/__package.rb:6: Package `Foo::Bar::AppFalseCyclePackage` must be at most layer `lib` (to match package `Foo::MyPackage`) but is currently layer `app`
     6 |  layer 'app'
                ^^^^^
    app_false_cycle_package/__package.rb:7: `Foo::Bar::AppFalseCyclePackage` must be at least `strict_dependencies 'layered'` but is currently `strict_dependencies 'false'`
     7 |  strict_dependencies 'false'
                              ^^^^^^^

use_app_false_cycle_package/foo.rb:15: `Test::Foo::Bar::AppFalseCyclePackage::TestUtil` is defined in a test namespace and cannot be referenced in a non-test file https://srb.help/3720
    15 |  Test::Foo::Bar::AppFalseCyclePackage::TestUtil
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

use_app_false_cycle_package/foo.test.rb:4: `Test::Foo::Bar::AppFalseCyclePackage::TestUtil` resolves but its package is not imported https://srb.help/3718
     4 |  Test::Foo::Bar::AppFalseCyclePackage::TestUtil
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    app_false_cycle_package/__package.rb:5: Exported from package here
     5 |class Foo::Bar::AppFalseCyclePackage < PackageSpec
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_app_false_cycle_package/__package.rb:7: Inserted `test_import Foo::Bar::AppFalseCyclePackage`
     7 |  strict_dependencies 'layered_dag'
                                           ^

use_app_false_cycle_package/foo.test.rb:6: `Foo::Bar::AppFalseCyclePackage::ImportMeTestOnly` resolves but its package is not imported https://srb.help/3718
     6 |  Foo::Bar::AppFalseCyclePackage::ImportMeTestOnly
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    app_false_cycle_package/__package.rb:5: Exported from package here
     5 |class Foo::Bar::AppFalseCyclePackage < PackageSpec
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Done
    use_app_false_cycle_package/__package.rb:7: Inserted `test_import Foo::Bar::AppFalseCyclePackage`
     7 |  strict_dependencies 'layered_dag'
                                           ^
Errors: 6
# frozen_string_literal: true
# typed: strict
# enable-packager: true

class Foo::MyPackage < PackageSpec
  layer 'lib'
  strict_dependencies 'layered_dag'
  test_import Foo::Bar::AppFalseCyclePackage
end
