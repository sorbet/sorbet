No errors! Great job.

--- output/Foo.rb
# frozen_string_literal: true
# typed: true

Opus::Require.on_autoload('Foo')

module Foo
end

Opus::Require.autoload_map(Foo, {
  Bar: "autoloader/Foo/Bar.rb",
  Dabba: "autoloader/Foo/Dabba.rb",
  Errors: "autoloader/Foo/Errors.rb",
  TOP_LEVEL_CONST: "autoloader/Foo/TOP_LEVEL_CONST.rb",
})

--- output/Foo/Bar.rb
# frozen_string_literal: true
# typed: true

Opus::Require.on_autoload('Foo::Bar')

module Foo::Bar
end

Opus::Require.autoload_map(Foo::Bar, {
  Jazz: "autoloader/Foo/Bar/Jazz.rb",
  Quuz: "autoloader/Foo/Bar/Quuz.rb",
})

--- output/Foo/Bar/Jazz.rb
# frozen_string_literal: true
# typed: true

require 'in_class'
require 'in_method'
require 'my_gem'
Opus::Require.on_autoload('Foo::Bar::Jazz')

class Foo::Bar::Jazz < Foo::Bar::Quuz
end

Opus::Require.for_autoload(Foo::Bar::Jazz, "test/cli/autogen-autoloader/foo.rb")

--- output/Foo/Bar/Quuz.rb
# frozen_string_literal: true
# typed: true

require 'in_class'
require 'in_method'
require 'my_gem'
Opus::Require.on_autoload('Foo::Bar::Quuz')

class Foo::Bar::Quuz
end

Opus::Require.for_autoload(Foo::Bar::Quuz, "test/cli/autogen-autoloader/foo.rb")

--- output/Foo/Dabba.rb
# frozen_string_literal: true
# typed: true

require 'in_class'
require 'in_method'
require 'my_gem'

Opus::Require.for_autoload(nil, "test/cli/autogen-autoloader/foo.rb", [Foo, :Dabba])

--- output/Foo/Errors.rb
# frozen_string_literal: true
# typed: true

Opus::Require.on_autoload('Foo::Errors')

module Foo::Errors
end

Opus::Require.autoload_map(Foo::Errors, {
  BaseError: "autoloader/Foo/Errors/BaseError.rb",
  MyError1: "autoloader/Foo/Errors/MyError1.rb",
  MyError2: "autoloader/Foo/Errors/MyError2.rb",
})

--- output/Foo/Errors/BaseError.rb
# frozen_string_literal: true
# typed: true

Opus::Require.on_autoload('Foo::Errors::BaseError')

class Foo::Errors::BaseError < StandardError
end

Opus::Require.for_autoload(Foo::Errors::BaseError, "test/cli/autogen-autoloader/errors.rb")

--- output/Foo/Errors/MyError1.rb
# frozen_string_literal: true
# typed: true

Opus::Require.on_autoload('Foo::Errors::MyError1')

class Foo::Errors::MyError1 < Foo::Errors::BaseError
end

Opus::Require.for_autoload(Foo::Errors::MyError1, "test/cli/autogen-autoloader/errors.rb")

--- output/Foo/Errors/MyError2.rb
# frozen_string_literal: true
# typed: true

Opus::Require.on_autoload('Foo::Errors::MyError2')

class Foo::Errors::MyError2 < Foo::Errors::BaseError
end

Opus::Require.for_autoload(Foo::Errors::MyError2, "test/cli/autogen-autoloader/errors.rb")

--- output/Foo/TOP_LEVEL_CONST.rb
# frozen_string_literal: true
# typed: true

require 'in_class'
require 'in_method'
require 'my_gem'

Opus::Require.for_autoload(nil, "test/cli/autogen-autoloader/foo.rb", [Foo, :TOP_LEVEL_CONST])

--- output/Yabba.rb
# frozen_string_literal: true
# typed: true

Opus::Require.on_autoload('Yabba')

module Yabba
end

Opus::Require.autoload_map(Yabba, {
  Dabba: "autoloader/Yabba/Dabba.rb",
})

--- output/Yabba/Dabba.rb
# frozen_string_literal: true
# typed: true

Opus::Require.on_autoload('Yabba::Dabba')

module Yabba::Dabba
end

Opus::Require.autoload_map(Yabba::Dabba, {
  Bar2: "autoloader/Yabba/Dabba/Bar2.rb",
  Jazz: "autoloader/Yabba/Dabba/Jazz.rb",
  NoBehavior: "autoloader/Yabba/Dabba/NoBehavior.rb",
  Quuz: "autoloader/Yabba/Dabba/Quuz.rb",
})

--- output/Yabba/Dabba/Bar2.rb
# frozen_string_literal: true
# typed: true

Opus::Require.on_autoload('Yabba::Dabba::Bar2')

class Yabba::Dabba::Bar2
end

Opus::Require.for_autoload(Yabba::Dabba::Bar2, "test/cli/autogen-autoloader/bar2.rb")

--- output/Yabba/Dabba/Jazz.rb
# frozen_string_literal: true
# typed: true

Opus::Require.on_autoload('Yabba::Dabba::Jazz')

class Yabba::Dabba::Jazz
end

Opus::Require.autoload_map(Yabba::Dabba::Jazz, {
  JazBaz: "autoloader/Yabba/Dabba/Jazz/JazBaz.rb",
})

--- output/Yabba/Dabba/Jazz/JazBaz.rb
# frozen_string_literal: true
# typed: true

Opus::Require.on_autoload('Yabba::Dabba::Jazz::JazBaz')

class Yabba::Dabba::Jazz::JazBaz
end

Opus::Require.for_autoload(Yabba::Dabba::Jazz::JazBaz, "test/cli/autogen-autoloader/bar.rb")

--- output/Yabba/Dabba/NoBehavior.rb
# frozen_string_literal: true
# typed: true

Opus::Require.on_autoload('Yabba::Dabba::NoBehavior')

class Yabba::Dabba::NoBehavior
end

Opus::Require.for_autoload(Yabba::Dabba::NoBehavior, "test/cli/autogen-autoloader/bar2.rb")

--- output/Yabba/Dabba/Quuz.rb
# frozen_string_literal: true
# typed: true

Opus::Require.on_autoload('Yabba::Dabba::Quuz')

class Yabba::Dabba::Quuz < AWS::String
end

Opus::Require.for_autoload(Yabba::Dabba::Quuz, "test/cli/autogen-autoloader/bar.rb")

--- output/root.rb
# frozen_string_literal: true
# typed: true


Opus::Require.autoload_map(Object, {
  Foo: "autoloader/Foo.rb",
  Yabba: "autoloader/Yabba.rb",
})

--- missing output directory
--print=autogen-autoloader requires an output path to be specified

--- in-place writes
inplace-output
inplace-output/Foo.rb
inplace-output/root.rb

--- strip-prefixes and root rename


Primus::Require.autoload_map(Object, {
  Foo: "my-autoloader/Foo.rb",
})

Primus::Require.on_autoload('Foo')

module Foo
end

Primus::Require.for_autoload(Foo, "autogen-autoloader/inplace.rb")

--- with different root object
No errors! Great job.


Opus::Require.autoload_map(MyRootObject, {
  Foo: "autoloader/Foo.rb",
})

Opus::Require.on_autoload('Foo')

module Foo
end

Opus::Require.for_autoload(Foo, "test/cli/autogen-autoloader/inplace.rb")
