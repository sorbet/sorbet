No errors! Great job.

--- output/Foo/Bar/Jazz.rb
# frozen_string_literal: true
# typed: true

require 'in_class'
require 'in_method'
require 'my_gem'

class Foo::Bar::Jazz < Foo::Bar::Quuz
end

Opus::Require.for_autoload(Foo::Bar::Jazz, "test/cli/autogen-autoloader/example1.rb")

--- output/Foo/Bar/Quuz.rb
# frozen_string_literal: true
# typed: true

require 'in_class'
require 'in_method'
require 'my_gem'

class Foo::Bar::Quuz
end

Opus::Require.for_autoload(Foo::Bar::Quuz, "test/cli/autogen-autoloader/example1.rb")

--- output/Foo/Dabba.rb
# frozen_string_literal: true
# typed: true

require 'in_class'
require 'in_method'
require 'my_gem'

Opus::Require.for_autoload(nil, "test/cli/autogen-autoloader/example1.rb", [Foo, :Dabba])

--- output/Foo/Errors/BaseError.rb
# frozen_string_literal: true
# typed: true


class Foo::Errors::BaseError < StandardError
end

Opus::Require.for_autoload(Foo::Errors::BaseError, "test/cli/autogen-autoloader/errors.rb")

--- output/Foo/Errors/MyError1.rb
# frozen_string_literal: true
# typed: true


class Foo::Errors::MyError1 < Foo::Errors::BaseError
end

Opus::Require.for_autoload(Foo::Errors::MyError1, "test/cli/autogen-autoloader/errors.rb")

--- output/Foo/Errors/MyError2.rb
# frozen_string_literal: true
# typed: true


class Foo::Errors::MyError2 < Foo::Errors::BaseError
end

Opus::Require.for_autoload(Foo::Errors::MyError2, "test/cli/autogen-autoloader/errors.rb")

--- output/Foo/TOP_LEVEL_CONST.rb
# frozen_string_literal: true
# typed: true

require 'in_class'
require 'in_method'
require 'my_gem'

Opus::Require.for_autoload(nil, "test/cli/autogen-autoloader/example1.rb", [Foo, :TOP_LEVEL_CONST])

--- output/Yabba/Dabba/Bar2.rb
# frozen_string_literal: true
# typed: true


class Yabba::Dabba::Bar2
end

Opus::Require.for_autoload(Yabba::Dabba::Bar2, "test/cli/autogen-autoloader/example3.rb")

--- output/Yabba/Dabba/Jazz.rb
# frozen_string_literal: true
# typed: true


class Yabba::Dabba::Jazz
end

--- output/Yabba/Dabba/Jazz/JazBaz.rb
# frozen_string_literal: true
# typed: true


class Yabba::Dabba::Jazz::JazBaz
end

Opus::Require.for_autoload(Yabba::Dabba::Jazz::JazBaz, "test/cli/autogen-autoloader/example2.rb")

--- output/Yabba/Dabba/NoBehavior.rb
# frozen_string_literal: true
# typed: true


class Yabba::Dabba::NoBehavior
end

Opus::Require.for_autoload(Yabba::Dabba::NoBehavior, "test/cli/autogen-autoloader/example3.rb")

--- output/Yabba/Dabba/Quuz.rb
# frozen_string_literal: true
# typed: true


class Yabba::Dabba::Quuz < AWS::String
end

Opus::Require.for_autoload(Yabba::Dabba::Quuz, "test/cli/autogen-autoloader/example2.rb")

--- missing output directory
--print=autogen-autoloader requires an output path to be specified

--- in-place writes
inplace-output
inplace-output/Foo.rb

--- strip-prefixes and root rename


module Foo
end

Primus::Require.for_autoload(Foo, "autogen-autoloader/inplace.rb")

--- with different root object
No errors! Great job.


module Foo
end

Opus::Require.for_autoload(Foo, "test/cli/autogen-autoloader/inplace.rb")
