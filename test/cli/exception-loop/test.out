test/cli/exception-loop/test.rb:23: Revealed type: `T.nilable(A)` https://srb.help/7014
    23 |      T.reveal_type(e) # error: `T.nilable(A)`
              ^^^^^^^^^^^^^^^^
  Got `T.nilable(A)` originating from:
    test/cli/exception-loop/test.rb:17:
    17 |  rescue A => e
          ^^^^^^
    test/cli/exception-loop/test.rb:17:
    17 |  rescue A => e
                 ^
    test/cli/exception-loop/test.rb:14: Possibly uninitialized (`NilClass`) in:
    14 |def example1
        ^^^^^^^^^^^^

test/cli/exception-loop/test.rb:25: Changing the type of a variable in a loop is not permitted https://srb.help/7001
    25 |    rescue B => e
                        ^
  Existing variable has type: `T.nilable(A)`
  Attempting to change type to: `B`

  Original type from:
    test/cli/exception-loop/test.rb:17:
    17 |  rescue A => e
          ^^^^^^
    test/cli/exception-loop/test.rb:17:
    17 |  rescue A => e
                 ^
    test/cli/exception-loop/test.rb:14: Possibly uninitialized (`NilClass`) in:
    14 |def example1
        ^^^^^^^^^^^^
  Note:
    The exception variables of two `rescue` blocks conflict with each other because
    the second is inside a loop. Either use `T.let` to initialize the exception
    variable before the first `rescue`, or pick unique variable names.


test/cli/exception-loop/test.rb:43: Revealed type: `T.nilable(T.any(A, B))` https://srb.help/7014
    43 |      T.reveal_type(e) # error: `T.nilable(T.any(A, B))`
              ^^^^^^^^^^^^^^^^
  Got `T.nilable(T.any(A, B))` originating from:
    test/cli/exception-loop/test.rb:33:
    33 |  e = T.let(nil, T.nilable(T.any(A, B)))
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    test/cli/exception-loop/test.rb:37:
    37 |  rescue A => e
          ^^^^^^
    test/cli/exception-loop/test.rb:37:
    37 |  rescue A => e
                 ^
Errors: 3
