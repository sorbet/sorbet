method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=8]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$7: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$9: T.class_of(Funcs) = alias <C Funcs>
    <statTemp>$5: Sorbet::Private::Static::Void = <cfgAlias>$7: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$9: T.class_of(Funcs))
    <cfgAlias>$14: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$16: T.class_of(C) = alias <C C>
    <statTemp>$12: Sorbet::Private::Static::Void = <cfgAlias>$14: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$16: T.class_of(C))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Funcs#f {

bb0[rubyRegionId=0, firstDead=4]():
    <self>: Funcs = cast(<self>: NilClass, Funcs);
    x: Integer = load_arg(x)
    <returnMethodTemp>$2: Integer = x
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Funcs>#f {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(Funcs) = cast(<self>: NilClass, T.class_of(Funcs));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Funcs#g {

bb0[rubyRegionId=0, firstDead=4]():
    <self>: Funcs = cast(<self>: NilClass, Funcs);
    s: Symbol = load_arg(s)
    <returnMethodTemp>$2: Symbol = s
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Funcs>#g {

bb0[rubyRegionId=0, firstDead=4]():
    <self>: T.class_of(Funcs) = cast(<self>: NilClass, T.class_of(Funcs));
    s: Symbol = load_arg(s)
    <returnMethodTemp>$2: Symbol = s
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Funcs#h {

bb0[rubyRegionId=0, firstDead=4]():
    <self>: Funcs = cast(<self>: NilClass, Funcs);
    s: String = load_arg(s)
    <returnMethodTemp>$2: String = s
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: String
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Funcs>#h {

bb0[rubyRegionId=0, firstDead=4]():
    <self>: T.class_of(Funcs) = cast(<self>: NilClass, T.class_of(Funcs));
    s: String = load_arg(s)
    <returnMethodTemp>$2: String = s
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: String
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Funcs>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(Funcs) = cast(<self>: NilClass, T.class_of(Funcs));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$7: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(Funcs))
    <selfRestore>$8: T.class_of(Funcs) = <self>
    <unconditional> -> bb2

# backedges
# - bb19(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(Funcs), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(Funcs)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(Funcs)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$7, sig>
    <self>: T.class_of(Funcs) = <selfRestore>$8
    <cfgAlias>$21: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$23: Sorbet::Private::Static::Void = <cfgAlias>$21: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(Funcs))
    <selfRestore>$24: T.class_of(Funcs) = <self>
    <unconditional> -> bb6

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=7](<self>: T.class_of(Funcs), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(Funcs)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$13: Symbol(:x) = :x
    <cfgAlias>$15: T.class_of(Integer) = alias <C Integer>
    <statTemp>$11: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$13: Symbol(:x), <cfgAlias>$15: T.class_of(Integer))
    <cfgAlias>$17: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$10: T::Private::Methods::DeclBuilder = <statTemp>$11: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$17: T.class_of(Integer))
    <blockReturnTemp>$18: T.noreturn = blockreturn<sig> <blockReturnTemp>$10: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
# - bb9(rubyRegionId=2)
bb6[rubyRegionId=2, firstDead=-1](<self>: T.class_of(Funcs), <block-pre-call-temp>$23: Sorbet::Private::Static::Void, <selfRestore>$24: T.class_of(Funcs)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb9 : bb7)

# backedges
# - bb6(rubyRegionId=2)
bb7[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$23: Sorbet::Private::Static::Void, <selfRestore>$24: T.class_of(Funcs)):
    <statTemp>$19: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$23, sig>
    <self>: T.class_of(Funcs) = <selfRestore>$24
    <cfgAlias>$37: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$39: Sorbet::Private::Static::Void = <cfgAlias>$37: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(Funcs))
    <selfRestore>$40: T.class_of(Funcs) = <self>
    <unconditional> -> bb10

# backedges
# - bb6(rubyRegionId=2)
bb9[rubyRegionId=2, firstDead=7](<self>: T.class_of(Funcs), <block-pre-call-temp>$23: Sorbet::Private::Static::Void, <selfRestore>$24: T.class_of(Funcs)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$29: Symbol(:s) = :s
    <cfgAlias>$31: T.class_of(Symbol) = alias <C Symbol>
    <statTemp>$27: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$29: Symbol(:s), <cfgAlias>$31: T.class_of(Symbol))
    <cfgAlias>$33: T.class_of(Symbol) = alias <C Symbol>
    <blockReturnTemp>$26: T::Private::Methods::DeclBuilder = <statTemp>$27: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$33: T.class_of(Symbol))
    <blockReturnTemp>$34: T.noreturn = blockreturn<sig> <blockReturnTemp>$26: T::Private::Methods::DeclBuilder
    <unconditional> -> bb6

# backedges
# - bb7(rubyRegionId=0)
# - bb13(rubyRegionId=3)
bb10[rubyRegionId=3, firstDead=-1](<self>: T.class_of(Funcs), <block-pre-call-temp>$39: Sorbet::Private::Static::Void, <selfRestore>$40: T.class_of(Funcs)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb13 : bb11)

# backedges
# - bb10(rubyRegionId=3)
bb11[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$39: Sorbet::Private::Static::Void, <selfRestore>$40: T.class_of(Funcs)):
    <statTemp>$35: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$39, sig>
    <self>: T.class_of(Funcs) = <selfRestore>$40
    <cfgAlias>$53: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$55: Sorbet::Private::Static::Void = <cfgAlias>$53: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(Funcs))
    <selfRestore>$56: T.class_of(Funcs) = <self>
    <unconditional> -> bb14

# backedges
# - bb10(rubyRegionId=3)
bb13[rubyRegionId=3, firstDead=7](<self>: T.class_of(Funcs), <block-pre-call-temp>$39: Sorbet::Private::Static::Void, <selfRestore>$40: T.class_of(Funcs)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$45: Symbol(:s) = :s
    <cfgAlias>$47: T.class_of(Symbol) = alias <C Symbol>
    <statTemp>$43: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$45: Symbol(:s), <cfgAlias>$47: T.class_of(Symbol))
    <cfgAlias>$49: T.class_of(Symbol) = alias <C Symbol>
    <blockReturnTemp>$42: T::Private::Methods::DeclBuilder = <statTemp>$43: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$49: T.class_of(Symbol))
    <blockReturnTemp>$50: T.noreturn = blockreturn<sig> <blockReturnTemp>$42: T::Private::Methods::DeclBuilder
    <unconditional> -> bb10

# backedges
# - bb11(rubyRegionId=0)
# - bb17(rubyRegionId=4)
bb14[rubyRegionId=4, firstDead=-1](<self>: T.class_of(Funcs), <block-pre-call-temp>$55: Sorbet::Private::Static::Void, <selfRestore>$56: T.class_of(Funcs)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb17 : bb15)

# backedges
# - bb14(rubyRegionId=4)
bb15[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$55: Sorbet::Private::Static::Void, <selfRestore>$56: T.class_of(Funcs)):
    <statTemp>$51: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$55, sig>
    <self>: T.class_of(Funcs) = <selfRestore>$56
    <cfgAlias>$69: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$71: Sorbet::Private::Static::Void = <cfgAlias>$69: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(Funcs))
    <selfRestore>$72: T.class_of(Funcs) = <self>
    <unconditional> -> bb18

# backedges
# - bb14(rubyRegionId=4)
bb17[rubyRegionId=4, firstDead=7](<self>: T.class_of(Funcs), <block-pre-call-temp>$55: Sorbet::Private::Static::Void, <selfRestore>$56: T.class_of(Funcs)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$61: Symbol(:s) = :s
    <cfgAlias>$63: T.class_of(String) = alias <C String>
    <statTemp>$59: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$61: Symbol(:s), <cfgAlias>$63: T.class_of(String))
    <cfgAlias>$65: T.class_of(String) = alias <C String>
    <blockReturnTemp>$58: T::Private::Methods::DeclBuilder = <statTemp>$59: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$65: T.class_of(String))
    <blockReturnTemp>$66: T.noreturn = blockreturn<sig> <blockReturnTemp>$58: T::Private::Methods::DeclBuilder
    <unconditional> -> bb14

# backedges
# - bb15(rubyRegionId=0)
# - bb21(rubyRegionId=5)
bb18[rubyRegionId=5, firstDead=-1](<self>: T.class_of(Funcs), <block-pre-call-temp>$71: Sorbet::Private::Static::Void, <selfRestore>$72: T.class_of(Funcs)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb21 : bb19)

# backedges
# - bb18(rubyRegionId=5)
bb19[rubyRegionId=0, firstDead=12](<block-pre-call-temp>$71: Sorbet::Private::Static::Void, <selfRestore>$72: T.class_of(Funcs)):
    <statTemp>$67: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$71, sig>
    <self>: T.class_of(Funcs) = <selfRestore>$72
    <cfgAlias>$86: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$88: T.class_of(T) = alias <C T>
    <statTemp>$83: T.class_of(Funcs) = <self>: T.class_of(Funcs).extend(<cfgAlias>$86: T.class_of(T::Sig))
    <statTemp>$92: Symbol(:f) = :f
    <statTemp>$90: T.class_of(Funcs) = <self>: T.class_of(Funcs).private(<statTemp>$92: Symbol(:f))
    <statTemp>$96: Symbol(:g) = :g
    <statTemp>$94: T.class_of(Funcs) = <self>: T.class_of(Funcs).private(<statTemp>$96: Symbol(:g))
    <statTemp>$100: Symbol(:h) = :h
    <statTemp>$98: T.class_of(Funcs) = <self>: T.class_of(Funcs).private(<statTemp>$100: Symbol(:h))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb18(rubyRegionId=5)
bb21[rubyRegionId=5, firstDead=7](<self>: T.class_of(Funcs), <block-pre-call-temp>$71: Sorbet::Private::Static::Void, <selfRestore>$72: T.class_of(Funcs)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$77: Symbol(:s) = :s
    <cfgAlias>$79: T.class_of(String) = alias <C String>
    <statTemp>$75: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$77: Symbol(:s), <cfgAlias>$79: T.class_of(String))
    <cfgAlias>$81: T.class_of(String) = alias <C String>
    <blockReturnTemp>$74: T::Private::Methods::DeclBuilder = <statTemp>$75: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$81: T.class_of(String))
    <blockReturnTemp>$82: T.noreturn = blockreturn<sig> <blockReturnTemp>$74: T::Private::Methods::DeclBuilder
    <unconditional> -> bb18

}

method ::C#test_calls {

bb0[rubyRegionId=0, firstDead=19]():
    <self>: C = cast(<self>: NilClass, C);
    <statTemp>$5: Integer(0) = 0
    <statTemp>$3: Integer = <self>: C.f(<statTemp>$5: Integer(0))
    <cfgAlias>$8: T.class_of(Funcs) = alias <C Funcs>
    <statTemp>$9: Integer(0) = 0
    <statTemp>$6: T.untyped = <cfgAlias>$8: T.class_of(Funcs).f(<statTemp>$9: Integer(0))
    <statTemp>$12: Symbol(:f) = :f
    <statTemp>$10: Symbol = <self>: C.g(<statTemp>$12: Symbol(:f))
    <cfgAlias>$15: T.class_of(Funcs) = alias <C Funcs>
    <statTemp>$16: Symbol(:f) = :f
    <statTemp>$13: Symbol = <cfgAlias>$15: T.class_of(Funcs).g(<statTemp>$16: Symbol(:f))
    <statTemp>$19: String("hello") = "hello"
    <statTemp>$17: String = <self>: C.h(<statTemp>$19: String("hello"))
    <cfgAlias>$22: T.class_of(Funcs) = alias <C Funcs>
    <statTemp>$23: String("world") = "world"
    <statTemp>$20: String = <cfgAlias>$22: T.class_of(Funcs).h(<statTemp>$23: String("world"))
    <cfgAlias>$25: T.class_of(C) = alias <C C>
    <returnMethodTemp>$2: T.untyped = <cfgAlias>$25: T.class_of(C).f()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:C>#<static-init> {

bb0[rubyRegionId=0, firstDead=4]():
    <self>: T.class_of(C) = cast(<self>: NilClass, T.class_of(C));
    <cfgAlias>$6: T.class_of(Funcs) = alias <C Funcs>
    <statTemp>$3: T.class_of(C) = <self>: T.class_of(C).include(<cfgAlias>$6: T.class_of(Funcs))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

