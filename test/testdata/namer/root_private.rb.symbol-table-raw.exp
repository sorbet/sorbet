class <C <U <root>>> < <C <U Object>> ()
  class <S <C <U <root>>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> ()
    method <S <C <U <root>>> $1>#<N <U <static-init>> $CENSORED> (<blk>) @ Loc {file=test/testdata/namer/root_private.rb start=5:1 end=16:18}
      argument <blk><block> @ Loc {file=test/testdata/namer/root_private.rb start=??? end=???}
  class <C <U A>> < <C <U Object>> () @ Loc {file=test/testdata/namer/root_private.rb start=10:1 end=10:8}
    method <C <U A>>#<U foo_method_inner_private> : private (<blk>) @ Loc {file=test/testdata/namer/root_private.rb start=13:11 end=13:39}
      argument <blk><block> @ Loc {file=test/testdata/namer/root_private.rb start=??? end=???}
    method <C <U A>>#<U foo_method_inner_public> (<blk>) @ Loc {file=test/testdata/namer/root_private.rb start=11:3 end=11:30}
      argument <blk><block> @ Loc {file=test/testdata/namer/root_private.rb start=??? end=???}
  class <S <C <U A>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/namer/root_private.rb start=10:1 end=10:8}
    type-member(+) <S <C <U A>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U A>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=A) @ Loc {file=test/testdata/namer/root_private.rb start=10:1 end=10:8}
    method <S <C <U A>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/namer/root_private.rb start=10:1 end=14:4}
      argument <blk><block> @ Loc {file=test/testdata/namer/root_private.rb start=??? end=???}
  class <C <U Object>> < <C <U BasicObject>> (<C <U Kernel>>) @ Loc {file=https://github.com/sorbet/sorbet/tree/master/rbi/core/object.rbi start=removed end=removed}
    method <C <U Object>>#<U foo_method_root> : private (<blk>) @ Loc {file=test/testdata/namer/root_private.rb start=5:1 end=5:20}
      argument <blk><block> @ Loc {file=test/testdata/namer/root_private.rb start=??? end=???}

