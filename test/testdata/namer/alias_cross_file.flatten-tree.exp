begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        <emptyTree>
        ::Sorbet::Private::Static.keep_for_ide(::TestSig)
        <emptyTree>
      end
    end
  end
  class ::TestSig<<C TestSig>> < (::<todo sym>)
    def test_resolve(<blk>)
      <emptyTree>
    end

    def self.<static-init>(<blk>)
      begin
        ::Sorbet::Private::Static::ResolvedSig.sig(<self>, false, :test_resolve) do ||
          <self>.returns(::T2)
        end
        :test_resolve
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::T1)
          <emptyTree>
        end
        ::T2 = ::T1
        <emptyTree>
      end
    end
  end
  class ::T1<<C T1>> < (::<todo sym>)
    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  <emptyTree>
end
