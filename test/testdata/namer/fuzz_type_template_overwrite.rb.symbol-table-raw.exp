class <C <U <root>>> < <C <U Object>> ()
  class <S <C <U <root>>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> ()
    method <S <C <U <root>>> $1>#<N <U <static-init>> $CENSORED> (<blk>) @ Loc {file=test/testdata/namer/fuzz_type_template_overwrite.rb start=3:1 end=6:4}
      argument <blk><block> @ Loc {file=test/testdata/namer/fuzz_type_template_overwrite.rb start=??? end=???}
  class <C <U A>> < <C <U Object>> () @ Loc {file=test/testdata/namer/fuzz_type_template_overwrite.rb start=3:1 end=3:8}
    static-field <C <U A>>::<C <U B>> -> Integer @ Loc {file=test/testdata/namer/fuzz_type_template_overwrite.rb start=4:3 end=4:4}
    static-field <C <U A>>::<M <C <U B>> $1> -> AliasType { symbol = <S <C <U A>> $1>::<C <U B>> } @ Loc {file=test/testdata/namer/fuzz_type_template_overwrite.rb start=5:3 end=5:20}
  class <S <C <U A>> $1>[<C <U <AttachedClass>>>, <C <U B>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/namer/fuzz_type_template_overwrite.rb start=3:1 end=3:8}
    type-member(+) <S <C <U A>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U A>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=A) @ Loc {file=test/testdata/namer/fuzz_type_template_overwrite.rb start=3:7 end=3:8}
    method <S <C <U A>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/namer/fuzz_type_template_overwrite.rb start=3:1 end=6:4}
      argument <blk><block> @ Loc {file=test/testdata/namer/fuzz_type_template_overwrite.rb start=??? end=???}
    type-member(=) <S <C <U A>> $1>::<C <U B>> -> LambdaParam(<S <C <U A>> $1>::<C <U B>>, lower=T.noreturn, upper=<top>) @ Loc {file=test/testdata/namer/fuzz_type_template_overwrite.rb start=5:3 end=5:20}

