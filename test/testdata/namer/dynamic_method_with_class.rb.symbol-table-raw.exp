class <C <U <root>>> < <C <U Object>> ()
  class <S <C <U <root>>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> ()
    method <S <C <U <root>>> $1>#<N <U <static-init>> $CENSORED> (<blk>) @ Loc {file=test/testdata/namer/dynamic_method_with_class.rb start=2:1 end=12:4}
      argument <blk><block> @ Loc {file=test/testdata/namer/dynamic_method_with_class.rb start=??? end=???}
  class <C <U F>> < <C <U Object>> () @ Loc {file=test/testdata/namer/dynamic_method_with_class.rb start=2:1 end=2:8}
    method <C <U F>>#<U bar> (baz, <blk>) @ Loc {file=test/testdata/namer/dynamic_method_with_class.rb start=8:8 end=8:20}
      argument baz<> @ Loc {file=test/testdata/namer/dynamic_method_with_class.rb start=8:16 end=8:19}
      argument <blk><block> @ Loc {file=test/testdata/namer/dynamic_method_with_class.rb start=??? end=???}
    method <C <U F>>#<U bla> (<blk>) @ Loc {file=test/testdata/namer/dynamic_method_with_class.rb start=6:3 end=6:10}
      argument <blk><block> @ Loc {file=test/testdata/namer/dynamic_method_with_class.rb start=??? end=???}
    method <C <U F>>#<U foo> (<blk>) @ Loc {file=test/testdata/namer/dynamic_method_with_class.rb start=3:3 end=3:10}
      argument <blk><block> @ Loc {file=test/testdata/namer/dynamic_method_with_class.rb start=??? end=???}
  class <S <C <U F>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/namer/dynamic_method_with_class.rb start=2:1 end=2:8}
    type-member(+) <S <C <U F>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U F>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=F) @ Loc {file=test/testdata/namer/dynamic_method_with_class.rb start=2:1 end=2:8}
    method <S <C <U F>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/namer/dynamic_method_with_class.rb start=2:1 end=12:4}
      argument <blk><block> @ Loc {file=test/testdata/namer/dynamic_method_with_class.rb start=??? end=???}

