begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::Mixin1)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::Mixin2)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::Parent)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::Child)
          ::Sorbet::Private::Static.keep_for_ide(::Parent)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::MultipleInclude)
          <emptyTree>
        end
        <emptyTree>
      end
    end
  end
  module ::Mixin1<<C Mixin1>> < ()
    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  module ::Mixin2<<C Mixin2>> < ()
    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  class ::Parent<<C Parent>> < (::<todo sym>, ::Mixin1)
    def self.<static-init>(<blk>)
      <self>.include(::Mixin1)
    end
  end
  class ::Child<<C Child>> < (::Parent, ::Mixin2)
    def self.<static-init>(<blk>)
      <self>.include(::Mixin2)
    end
  end
  class ::MultipleInclude<<C MultipleInclude>> < (::<todo sym>, ::Mixin2, ::Mixin1)
    def self.<static-init>(<blk>)
      <self>.include(::Mixin1, ::Mixin2)
    end
  end
  <emptyTree>
end
