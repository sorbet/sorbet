InsSeq{
  stats = [
    ClassDef{
      kind = class
      name = EmptyTree
      symbol = <C <U <root>>>
      ancestors = [ConstantLit{
          symbol = (class ::<todo sym>)
          orig = nullptr
        }]
      rhs = [
        EmptyTree

        MethodDef{
          flags = {self}
          name = <U <static-init>><<N <U <static-init>> $CENSORED>>
          args = [Local{
              localVariable = <U <blk>>
            }]
          rhs = EmptyTree
        }
      ]
    }
    ClassDef{
      kind = class
      name = ConstantLit{
        symbol = (class ::A)
        orig = UnresolvedConstantLit{
          cnst = <C <U A>>
          scope = EmptyTree
        }
      }
      symbol = <C <U A>>
      ancestors = [ConstantLit{
          symbol = (class ::<todo sym>)
          orig = nullptr
        }]
      rhs = [
        MethodDef{
          flags = {}
          name = <U take_arguments><<U take_arguments>>
          args = [Local{
              localVariable = <U a>
            }, OptionalArg{
              expr = Local{
                localVariable = <U b>
              }
              default_ = Literal{ value = 1 }
            }, Local{
              localVariable = <U c>
            }, Local{
              localVariable = <U d>
            }, OptionalArg{
              expr = Local{
                localVariable = <U e>
              }
              default_ = Literal{ value = 2 }
            }, Local{
              localVariable = <U f>
            }, Local{
              localVariable = <U g>
            }]
          rhs = InsSeq{
            stats = [
              Array{
                elems = [
                  Local{
                    localVariable = <U a>
                  }
                  Local{
                    localVariable = <U b>
                  }
                  Local{
                    localVariable = <U c>
                  }
                  Local{
                    localVariable = <U d>
                  }
                  Local{
                    localVariable = <U e>
                  }
                  Local{
                    localVariable = <U f>
                  }
                  Local{
                    localVariable = <U g>
                  }
                ]
              }
              Assign{
                lhs = Local{
                  localVariable = <U h>
                }
                rhs = Literal{ value = 1 }
              }
            ],
            expr = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U proc>
              block = Block {
                args = [
                  Local{
                    localVariable = <U a>$1
                  }
                  OptionalArg{
                    expr = Local{
                      localVariable = <U b>$1
                    }
                    default_ = Literal{ value = 1 }
                  }
                  RestArg{ expr = Local{
                    localVariable = <U c>$1
                  } }
                  KeywordArg{ expr = Local{
                    localVariable = <U d>$1
                  } }
                  OptionalArg{
                    expr = KeywordArg{ expr = Local{
                      localVariable = <U e>$1
                    } }
                    default_ = Literal{ value = 2 }
                  }
                  RestArg{ expr = KeywordArg{ expr = Local{
                    localVariable = <U f>$1
                  } } }
                  BlockArg{ expr = Local{
                    localVariable = <U g>$1
                  } }
                  ShadowArg{ expr = Local{
                    localVariable = <U h>$1
                  } }
                ]
                body = Array{
                  elems = [
                    Local{
                      localVariable = <U a>$1
                    }
                    Local{
                      localVariable = <U b>$1
                    }
                    Local{
                      localVariable = <U c>$1
                    }
                    Local{
                      localVariable = <U d>$1
                    }
                    Local{
                      localVariable = <U e>$1
                    }
                    Local{
                      localVariable = <U f>$1
                    }
                    Local{
                      localVariable = <U g>$1
                    }
                    Local{
                      localVariable = <U h>$1
                    }
                  ]
                }
              }
              pos_args = 0
              args = [
              ]
            }
          }
        }

        MethodDef{
          flags = {self}
          name = <U <static-init>><<U <static-init>>>
          args = [Local{
              localVariable = <U <blk>>
            }]
          rhs = <runtime method definition of take_arguments>
        }
      ]
    }
  ],
  expr = EmptyTree
}
