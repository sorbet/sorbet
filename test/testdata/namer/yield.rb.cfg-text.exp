method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=5]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$5: T.class_of(Main) = alias <C Main>
    <statTemp>$3: Main = <cfgAlias>$5: T.class_of(Main).new()
    <returnMethodTemp>$2: T.untyped = <statTemp>$3: Main.main()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Main#yielder {

bb0[rubyRegionId=0, firstDead=6]():
    <self>: Main = cast(<self>: NilClass, Main);
    <blk>: T.untyped = load_arg(<blk>)
    <statTemp>$5: Integer(1) = 1
    a: T.untyped = <blk>: T.untyped.call(<statTemp>$5: Integer(1))
    <returnMethodTemp>$2: T.untyped = <blk>: T.untyped.call(a: T.untyped)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Main#blockpass {

bb0[rubyRegionId=0, firstDead=6]():
    <self>: Main = cast(<self>: NilClass, Main);
    blk: T.untyped = load_arg(blk)
    <statTemp>$5: Integer(1) = 1
    a: T.untyped = blk: T.untyped.call(<statTemp>$5: Integer(1))
    <returnMethodTemp>$2: T.untyped = blk: T.untyped.call(a: T.untyped)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Main#mixed {

bb0[rubyRegionId=0, firstDead=6]():
    <self>: Main = cast(<self>: NilClass, Main);
    blk: T.untyped = load_arg(blk)
    <statTemp>$5: Integer(1) = 1
    a: T.untyped = blk: T.untyped.call(<statTemp>$5: Integer(1))
    <returnMethodTemp>$2: T.untyped = blk: T.untyped.call(a: T.untyped)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Main#blockyield {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Main = cast(<self>: NilClass, Main);
    <blk>: T.untyped = load_arg(<blk>)
    <block-pre-call-temp>$4: Sorbet::Private::Static::Void = <self>: Main.yielder()
    <selfRestore>$5: Main = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: Main, <blk>: T.untyped, <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: Main):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=2](<block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: Main):
    <returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$4, yielder>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=5](<self>: Main, <blk>: T.untyped, <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: Main):
    # outerLoops: 1
    <self>: Main = loadSelf(yielder)
    <blk>$6: T.untyped = load_yield_params(yielder)
    i$1: T.untyped = yield_load_arg(0, <blk>$6: T.untyped)
    <blockReturnTemp>$7: T.untyped = <blk>: T.untyped.call(i$1: T.untyped)
    <blockReturnTemp>$10: T.noreturn = blockreturn<yielder> <blockReturnTemp>$7: T.untyped
    <unconditional> -> bb2

}

method ::Main#main {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Main = cast(<self>: NilClass, Main);
    <block-pre-call-temp>$5: Sorbet::Private::Static::Void = <self>: Main.lambda()
    <selfRestore>$6: Main = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: Main, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Main):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=15](<block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Main):
    l: T.proc.params(arg0: T.untyped).returns(T.untyped) = Solve<<block-pre-call-temp>$5, lambda>
    <self>: Main = <selfRestore>$6
    <cfgAlias>$15: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$17: Symbol(:yielder) = :yielder
    <statTemp>$13: T.untyped = <cfgAlias>$15: T.class_of(<Magic>).<call-with-block>(<self>: Main, <statTemp>$17: Symbol(:yielder), l: T.proc.params(arg0: T.untyped).returns(T.untyped))
    <cfgAlias>$21: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$23: Symbol(:blockpass) = :blockpass
    <statTemp>$19: T.untyped = <cfgAlias>$21: T.class_of(<Magic>).<call-with-block>(<self>: Main, <statTemp>$23: Symbol(:blockpass), l: T.proc.params(arg0: T.untyped).returns(T.untyped))
    <cfgAlias>$27: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$29: Symbol(:mixed) = :mixed
    <statTemp>$25: T.untyped = <cfgAlias>$27: T.class_of(<Magic>).<call-with-block>(<self>: Main, <statTemp>$29: Symbol(:mixed), l: T.proc.params(arg0: T.untyped).returns(T.untyped))
    <cfgAlias>$32: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$34: Symbol(:blockyield) = :blockyield
    <returnMethodTemp>$2: T.untyped = <cfgAlias>$32: T.class_of(<Magic>).<call-with-block>(<self>: Main, <statTemp>$34: Symbol(:blockyield), l: T.proc.params(arg0: T.untyped).returns(T.untyped))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=6](<self>: Main, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Main):
    # outerLoops: 1
    <self>: Main = loadSelf(lambda)
    <blk>$7: T.untyped = load_yield_params(lambda)
    x$1: T.untyped = yield_load_arg(0, <blk>$7: T.untyped)
    <statTemp>$9: NilClass = <self>: Main.puts(x$1: T.untyped)
    <blockReturnTemp>$8: Integer(3) = 3
    <blockReturnTemp>$12: T.noreturn = blockreturn<lambda> <blockReturnTemp>$8: Integer(3)
    <unconditional> -> bb2

}

method ::<Class:Main>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(Main) = cast(<self>: NilClass, T.class_of(Main));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

