method ::<Class:<root>>#<static-init> {

bb0[rubyBlockId=0, firstDead=32]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$6: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$8: T.class_of(Object) = alias <C Object>
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$8: T.class_of(Object))
    <cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$13: T.class_of(Object) = alias <C Object>
    <statTemp>$9: Sorbet::Private::Static::Void = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$13: T.class_of(Object))
    <cfgAlias>$17: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$19: T.class_of(Trigger) = alias <C Trigger>
    <statTemp>$15: Sorbet::Private::Static::Void = <cfgAlias>$17: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$19: T.class_of(Trigger))
    <cfgAlias>$22: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$24: T.class_of(Trigger) = alias <C Trigger>
    <statTemp>$20: Sorbet::Private::Static::Void = <cfgAlias>$22: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$24: T.class_of(Trigger))
    <cfgAlias>$28: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$30: T.class_of(Foo) = alias <C Foo>
    <statTemp>$26: Sorbet::Private::Static::Void = <cfgAlias>$28: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$30: T.class_of(Foo))
    <cfgAlias>$33: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$35: T.class_of(Foo) = alias <C Foo>
    <statTemp>$31: Sorbet::Private::Static::Void = <cfgAlias>$33: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$35: T.class_of(Foo))
    <cfgAlias>$38: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$40: T.class_of(Bar) = alias <C Bar>
    <statTemp>$36: Sorbet::Private::Static::Void = <cfgAlias>$38: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$40: T.class_of(Bar))
    <cfgAlias>$44: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$46: T.class_of(Bar) = alias <C Bar>
    <statTemp>$42: Sorbet::Private::Static::Void = <cfgAlias>$44: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$46: T.class_of(Bar))
    <cfgAlias>$49: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$51: T.class_of(Bar) = alias <C Bar>
    <statTemp>$47: Sorbet::Private::Static::Void = <cfgAlias>$49: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$51: T.class_of(Bar))
    <cfgAlias>$54: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$56: T.class_of(Foo) = alias <C Foo>
    <statTemp>$52: Sorbet::Private::Static::Void = <cfgAlias>$54: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$56: T.class_of(Foo))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Object>#<static-init> {

bb0[rubyBlockId=0, firstDead=2]():
    <self>: T.class_of(Object) = cast(<self>: NilClass, T.class_of(Object));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Trigger#trigger {

bb0[rubyBlockId=0, firstDead=4]():
    @__fake_logger$3: T.untyped = alias <C <undeclared-field-stub>> (@__fake_logger)
    <self>: Trigger = cast(<self>: NilClass, Trigger);
    <returnMethodTemp>$2: T.untyped = @__fake_logger$3
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Trigger>#<static-init> {

bb0[rubyBlockId=0, firstDead=6]():
    <self>: T.class_of(Trigger) = cast(<self>: NilClass, T.class_of(Trigger));
    <cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$6: Symbol(:trigger) = :trigger
    <statTemp>$7: Symbol(:normal) = :normal
    <returnMethodTemp>$2: Symbol(:trigger) = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Trigger), <statTemp>$6: Symbol(:trigger), <statTemp>$7: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:trigger)
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Foo>#<static-init> {

bb0[rubyBlockId=0, firstDead=2]():
    <self>: T.class_of(Foo) = cast(<self>: NilClass, T.class_of(Foo));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Bar>#<static-init> {

bb0[rubyBlockId=0, firstDead=2]():
    <self>: T.class_of(Bar) = cast(<self>: NilClass, T.class_of(Bar));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

