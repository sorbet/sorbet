class <C <U <root>>> < <C <U Object>> ()
  class <S <C <U <root>>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> ()
    method <S <C <U <root>>> $1>#<N <U <static-init>> $CENSORED> (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=3:1 end=55:4}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
  class <C <U A>> < <C <U Object>> () @ Loc {file=test/testdata/namer/visibility.rb start=3:1 end=3:8}
    method <C <U A>>#<U f1> (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=4:3 end=4:9}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
    method <C <U A>>#<U f2> (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=5:10 end=5:16}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
    method <C <U A>>#<U f3> : private (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=6:11 end=6:17}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
    method <C <U A>>#<U f4> : protected (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=7:13 end=7:19}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
  class <S <C <U A>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/namer/visibility.rb start=3:1 end=3:8}
    type-member(+) <S <C <U A>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U A>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=A) @ Loc {file=test/testdata/namer/visibility.rb start=3:1 end=3:8}
    method <S <C <U A>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=3:1 end=9:4}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
    method <S <C <U A>> $1>#<U f5> : private (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=8:24 end=8:35}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
  class <C <U B>> < <C <U Object>> () @ Loc {file=test/testdata/namer/visibility.rb start=11:1 end=11:8}
    method <C <U B>>#<U f1> (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=12:3 end=12:9}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
    method <C <U B>>#<U f2> (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=13:3 end=13:9}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
    method <C <U B>>#<U f3> : private (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=14:3 end=14:9}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
    method <C <U B>>#<U f4> : protected (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=15:3 end=15:9}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
  class <S <C <U B>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/namer/visibility.rb start=11:1 end=11:8}
    type-member(+) <S <C <U B>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U B>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=B) @ Loc {file=test/testdata/namer/visibility.rb start=11:1 end=11:8}
    method <S <C <U B>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=11:1 end=21:4}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
    method <S <C <U B>> $1>#<U f5> : private (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=16:3 end=16:14}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
  class <C <U C>> < <C <U Object>> () @ Loc {file=test/testdata/namer/visibility.rb start=24:1 end=24:8}
    method <C <U C>>#<U foo> : private (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=26:3 end=26:10}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
  class <S <C <U C>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/namer/visibility.rb start=24:1 end=24:8}
    type-member(+) <S <C <U C>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U C>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=C) @ Loc {file=test/testdata/namer/visibility.rb start=24:1 end=24:8}
    method <S <C <U C>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=24:1 end=27:4}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
  class <C <U Foo1>> < <C <U Object>> () @ Loc {file=test/testdata/namer/visibility.rb start=29:1 end=29:11}
    method <C <U Foo1>>#<U foo> (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=30:3 end=30:10}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
  class <S <C <U Foo1>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/namer/visibility.rb start=29:1 end=29:11}
    type-member(+) <S <C <U Foo1>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U Foo1>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=Foo1) @ Loc {file=test/testdata/namer/visibility.rb start=29:1 end=29:11}
    method <S <C <U Foo1>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=29:1 end=33:4}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
  class <C <U Foo2>> < <C <U Object>> () @ Loc {file=test/testdata/namer/visibility.rb start=35:1 end=35:11}
  class <S <C <U Foo2>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/namer/visibility.rb start=35:1 end=35:11}
    type-member(+) <S <C <U Foo2>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U Foo2>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=Foo2) @ Loc {file=test/testdata/namer/visibility.rb start=35:1 end=35:11}
    method <S <C <U Foo2>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=35:1 end=39:4}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
    method <S <C <U Foo2>> $1>#<U foo> (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=36:3 end=36:15}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
  class <C <U Foo3>> < <C <U Object>> () @ Loc {file=test/testdata/namer/visibility.rb start=41:1 end=41:11}
  class <S <C <U Foo3>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/namer/visibility.rb start=44:3 end=44:8}
    type-member(+) <S <C <U Foo3>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U Foo3>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=Foo3) @ Loc {file=test/testdata/namer/visibility.rb start=41:1 end=41:11}
    method <S <C <U Foo3>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=41:1 end=47:4}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
    method <S <C <U Foo3>> $1>#<U foo> : private (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=42:3 end=42:15}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
  class <S <S <C <U Foo3>> $1> $1>[<C <U <AttachedClass>>>] < <C <U Class>> () @ Loc {file=test/testdata/namer/visibility.rb start=44:3 end=44:8}
    type-member(+) <S <S <C <U Foo3>> $1> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <S <C <U Foo3>> $1> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {   klass = <S <C <U Foo3>> $1>   targs = [     <C <U <AttachedClass>>> = Foo3   ] }) @ Loc {file=test/testdata/namer/visibility.rb start=44:3 end=44:8}
    method <S <S <C <U Foo3>> $1> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=44:3 end=46:6}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
  class <C <U Foo4>> < <C <U Object>> () @ Loc {file=test/testdata/namer/visibility.rb start=49:1 end=49:11}
  class <S <C <U Foo4>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/namer/visibility.rb start=50:3 end=50:8}
    type-member(+) <S <C <U Foo4>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U Foo4>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=Foo4) @ Loc {file=test/testdata/namer/visibility.rb start=49:1 end=49:11}
    method <S <C <U Foo4>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=49:1 end=55:4}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
    method <S <C <U Foo4>> $1>#<U foo> : private (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=51:5 end=51:12}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}
  class <S <S <C <U Foo4>> $1> $1>[<C <U <AttachedClass>>>] < <C <U Class>> () @ Loc {file=test/testdata/namer/visibility.rb start=50:3 end=50:8}
    type-member(+) <S <S <C <U Foo4>> $1> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <S <C <U Foo4>> $1> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {   klass = <S <C <U Foo4>> $1>   targs = [     <C <U <AttachedClass>>> = Foo4   ] }) @ Loc {file=test/testdata/namer/visibility.rb start=50:3 end=50:8}
    method <S <S <C <U Foo4>> $1> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/namer/visibility.rb start=50:3 end=54:6}
      argument <blk><block> @ Loc {file=test/testdata/namer/visibility.rb start=??? end=???}

