begin
  class <emptyTree><<C <root>>> < (::<todo sym>)
    <emptyTree>

    def self.<static-init><<static-init>$CENSORED>(<blk>)
      <emptyTree>
    end
  end
  class ::Test<<C Test>> < (::<todo sym>)
    def test_next_break(<blk>)
      <self>.each() do ||
        begin
          if <self>.rand()
            next(Unresolved: <emptyTree>::<C Foo>)
          else
            <emptyTree>
          end
          if <self>.rand()
            break(Unresolved: <emptyTree>::<C Bar>)
          else
            <emptyTree>
          end
        end
      end
    end

    def self.<static-init>(<blk>)
      <runtime method definition of test_next_break>
    end
  end
  <emptyTree>
end
