class <C <U <root>>> < <C <U Object>> ()
  class <S <C <U <root>>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> ()
    method <S <C <U <root>>> $1>#<N <U <static-init>> $CENSORED> (<blk>) @ Loc {file=test/testdata/namer/fuzz_class_in_field.rb start=2:1 end=6:4}
      argument <blk><block> @ Loc {file=test/testdata/namer/fuzz_class_in_field.rb start=??? end=???}
  module <C <U D>> < <C <U Sorbet>>::<C <U Private>>::<C <U Static>>::<C <U ImplicitModuleSuperclass>> () @ Loc {file=test/testdata/namer/fuzz_class_in_field.rb start=2:1 end=2:9}
    module <C <U D>>::<C <U D>> < <C <U Sorbet>>::<C <U Private>>::<C <U Static>>::<C <U ImplicitModuleSuperclass>> () @ Loc {file=test/testdata/namer/fuzz_class_in_field.rb start=4:9 end=4:10}
      class <C <U D>>::<C <U D>>::<C <U D>> < <C <U Object>> () @ Loc {file=test/testdata/namer/fuzz_class_in_field.rb start=4:3 end=4:13}
      class <C <U D>>::<C <U D>>::<S <C <U D>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/namer/fuzz_class_in_field.rb start=4:3 end=4:13}
        type-member(+) <C <U D>>::<C <U D>>::<S <C <U D>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<C <U D>>::<C <U D>>::<S <C <U D>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=D::D::D) @ Loc {file=test/testdata/namer/fuzz_class_in_field.rb start=4:3 end=4:13}
        method <C <U D>>::<C <U D>>::<S <C <U D>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/namer/fuzz_class_in_field.rb start=4:3 end=4:18}
          argument <blk><block> @ Loc {file=test/testdata/namer/fuzz_class_in_field.rb start=??? end=???}
    static-field <C <U D>>::<M <C <U D>> $1> -> Integer @ Loc {file=test/testdata/namer/fuzz_class_in_field.rb start=3:3 end=3:4}
    class <C <U D>>::<S <C <U D>> $1>[<C <U <AttachedClass>>>] < <C <U Module>> () @ Loc {file=test/testdata/namer/fuzz_class_in_field.rb start=4:9 end=4:10}
      type-member(+) <C <U D>>::<S <C <U D>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<C <U D>>::<S <C <U D>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=D::D) @ Loc {file=test/testdata/namer/fuzz_class_in_field.rb start=4:9 end=4:10}
  class <S <C <U D>> $1>[<C <U <AttachedClass>>>] < <C <U Module>> () @ Loc {file=test/testdata/namer/fuzz_class_in_field.rb start=2:1 end=2:9}
    type-member(+) <S <C <U D>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U D>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=D) @ Loc {file=test/testdata/namer/fuzz_class_in_field.rb start=2:1 end=2:9}
    method <S <C <U D>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/namer/fuzz_class_in_field.rb start=2:1 end=6:4}
      argument <blk><block> @ Loc {file=test/testdata/namer/fuzz_class_in_field.rb start=??? end=???}

