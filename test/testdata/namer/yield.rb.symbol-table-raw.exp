class <C <U <root>>> < <C <U Object>> ()
  class <S <C <U <root>>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> ()
    method <S <C <U <root>>> $1>#<N <U <static-init>> $CENSORED> (<blk>) @ Loc {file=test/testdata/namer/yield.rb start=2:1 end=27:14}
      argument <blk><block> @ Loc {file=test/testdata/namer/yield.rb start=??? end=???}
  class <C <U Main>> < <C <U Object>> () @ Loc {file=test/testdata/namer/yield.rb start=2:1 end=2:11}
    method <C <U Main>>#<U blockpass> (blk) @ Loc {file=test/testdata/namer/yield.rb start=7:5 end=7:24}
      argument blk<block> @ Loc {file=test/testdata/namer/yield.rb start=7:20 end=7:23}
    method <C <U Main>>#<U blockyield> (<blk>) @ Loc {file=test/testdata/namer/yield.rb start=15:5 end=15:19}
      argument <blk><block> @ Loc {file=test/testdata/namer/yield.rb start=??? end=???}
    method <C <U Main>>#<U main> (<blk>) @ Loc {file=test/testdata/namer/yield.rb start=19:5 end=19:13}
      argument <blk><block> @ Loc {file=test/testdata/namer/yield.rb start=??? end=???}
    method <C <U Main>>#<U mixed> (blk) @ Loc {file=test/testdata/namer/yield.rb start=11:5 end=11:20}
      argument blk<block> @ Loc {file=test/testdata/namer/yield.rb start=11:16 end=11:19}
    method <C <U Main>>#<U yielder> (<blk>) @ Loc {file=test/testdata/namer/yield.rb start=3:5 end=3:16}
      argument <blk><block> @ Loc {file=test/testdata/namer/yield.rb start=??? end=???}
  class <S <C <U Main>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/namer/yield.rb start=2:1 end=2:11}
    type-member(+) <S <C <U Main>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U Main>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=Main) @ Loc {file=test/testdata/namer/yield.rb start=2:1 end=2:11}
    method <S <C <U Main>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/namer/yield.rb start=2:1 end=26:4}
      argument <blk><block> @ Loc {file=test/testdata/namer/yield.rb start=??? end=???}

