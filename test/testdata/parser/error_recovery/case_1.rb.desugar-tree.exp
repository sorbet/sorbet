class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C A><<C <todo sym>>> < (::<todo sym>)
    def test1<<todo method>>(&<blk>)
      begin
        <self>.puts("before")
        begin
          <assignTemp>$2 = <emptyTree>::<C <ErrorNode>>
          if <emptyTree>::<C <ErrorNode>>.===(<assignTemp>$2)
            <emptyTree>
          else
            <emptyTree>
          end
        end
      end
    end

    def test2<<todo method>>(&<blk>)
      <emptyTree>
    end

    def test3<<todo method>>(&<blk>)
      begin
        <self>.puts("before")
        begin
          <assignTemp>$2 = <self>.x()
          if <emptyTree>::<C <ErrorNode>>.===(<assignTemp>$2)
            <emptyTree>
          else
            <emptyTree>
          end
        end
      end
    end

    def test4<<todo method>>(&<blk>)
      begin
        <self>.puts("before")
        begin
          <assignTemp>$2 = <self>.x()
          if <emptyTree>::<C A>.===(<assignTemp>$2)
            <self>.puts("after")
          else
            <emptyTree>
          end
        end
      end
    end

    def test5<<todo method>>(&<blk>)
      begin
        <self>.puts("before")
        begin
          <assignTemp>$2 = <self>.x()
          if <emptyTree>::<C A>.===(<assignTemp>$2)
            <self>.puts("after")
          else
            <emptyTree>
          end
        end
      end
    end

    def test6<<todo method>>(&<blk>)
      begin
        <self>.puts("before")
        begin
          <assignTemp>$2 = <self>.x()
          if <emptyTree>::<C <ErrorNode>>.===(<assignTemp>$2)
            <self>.puts("after")
          else
            <emptyTree>
          end
        end
      end
    end

    def test7<<todo method>>(&<blk>)
      begin
        <self>.puts("before")
        begin
          <assignTemp>$2 = <self>.x()
          if <emptyTree>::<C A>.===(<assignTemp>$2)
            <emptyTree>
          else
            <self>.puts("after")
          end
        end
      end
    end

    def test8<<todo method>>(&<blk>)
      begin
        <self>.puts("before")
        if <emptyTree>::<C A>
          <emptyTree>
        else
          <self>.puts("after")
        end
      end
    end

    def test9<<todo method>>(&<blk>)
      begin
        <self>.puts("before")
        begin
          <assignTemp>$2 = <self>.x()
          if ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
            <emptyTree>
          else
            <self>.puts("after")
          end
        end
      end
    end
  end
end
