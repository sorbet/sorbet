class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C A><<C <todo sym>>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.params(:a, <emptyTree>::<C String>, :b, <emptyTree>::<C Integer>, :c, <emptyTree>::<C Integer>).void()
    end

    def foo<<todo method>>(a, b = 1, c = 2, &<blk>)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    :foo
  end

  class <emptyTree>::<C B><<C <todo sym>>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.returns(<emptyTree>::<C String>)
    end

    def foo<<todo method>>(&<blk>)
      @foo
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.params(:x, <emptyTree>::<C String>).void()
    end

    def initialize<<todo method>>(x = "", &<blk>)
      begin
        @foo = "test"
        @x = ::T.let(x, <emptyTree>::<C String>)
      end
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.params(:x, <emptyTree>::<C Integer>).void()
    end

    def test<<todo method>>(x = 297, &<blk>)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    :foo

    :initialize

    <self>.puts("hi")

    :test
  end
end
