class <emptyTree><<C <root>>> < (::<todo sym>)
  module <emptyTree>::<C ActiveSupport>::<C Concern><<C <todo sym>>> < ()
  end

  module <emptyTree>::<C Foo><<C <todo sym>>> < ()
    def instance_method<<todo method>>(&<blk>)
      <emptyTree>
    end

    module <emptyTree>::<C ClassMethods><<C <todo sym>>> < ()
      ::Sorbet::Private::Static.sig(<self>) do ||
        <self>.void()
      end

      def a_class_method<<todo method>>(&<blk>)
        <emptyTree>
      end

      <self>.extend(<emptyTree>::<C T>::<C Sig>)

      :a_class_method
    end

    <self>.extend(<emptyTree>::<C ActiveSupport>::<C Concern>)

    :instance_method

    ::<Magic>.mixes_in_class_methods(<self>, <emptyTree>::<C ClassMethods>)
  end

  class <emptyTree>::<C A><<C <todo sym>>> < (::<todo sym>)
    <self>.include(<emptyTree>::<C Foo>)
  end

  <emptyTree>::<C A>.new().instance_method()

  <emptyTree>::<C A>.a_class_method()

  <emptyTree>::<C A>.new().a_class_method()

  module <emptyTree>::<C Bar><<C <todo sym>>> < ()
    def instance_method<<todo method>>(&<blk>)
      <emptyTree>
    end

    module <emptyTree>::<C ClassMethods><<C <todo sym>>> < ()
      ::Sorbet::Private::Static.sig(<self>) do ||
        <self>.void()
      end

      def a_class_method<<todo method>>(&<blk>)
        <emptyTree>
      end

      def another_class_method<<todo method>>(&<blk>)
        <emptyTree>
      end

      <self>.extend(<emptyTree>::<C T>::<C Sig>)

      :a_class_method

      :another_class_method
    end

    <self>.extend(<emptyTree>::<C ActiveSupport>::<C Concern>)

    :instance_method

    ::<Magic>.mixes_in_class_methods(<self>, <emptyTree>::<C ClassMethods>)
  end

  class <emptyTree>::<C B><<C <todo sym>>> < (::<todo sym>)
    <self>.include(<emptyTree>::<C Bar>)
  end

  <emptyTree>::<C B>.new().instance_method()

  <emptyTree>::<C B>.a_class_method()

  <emptyTree>::<C B>.another_class_method()

  <emptyTree>::<C B>.new().a_class_method()

  module <emptyTree>::<C Baz><<C <todo sym>>> < ()
    def instance_method<<todo method>>(&<blk>)
      <emptyTree>
    end

    module <emptyTree>::<C ClassMethods><<C <todo sym>>> < ()
      def a_class_method<<todo method>>(&<blk>)
        <emptyTree>
      end

      ::Sorbet::Private::Static.sig(<self>) do ||
        <self>.void()
      end

      def a_class_method_2<<todo method>>(&<blk>)
        <emptyTree>
      end

      :a_class_method

      <self>.extend(<emptyTree>::<C T>::<C Sig>)

      :a_class_method_2
    end

    <self>.extend(<emptyTree>::<C ActiveSupport>::<C Concern>)

    :instance_method

    ::<Magic>.mixes_in_class_methods(<self>, <emptyTree>::<C ClassMethods>)
  end

  class <emptyTree>::<C C><<C <todo sym>>> < (::<todo sym>)
    <self>.include(<emptyTree>::<C Baz>)
  end

  <emptyTree>::<C C>.new().instance_method()

  <emptyTree>::<C C>.a_class_method()

  <emptyTree>::<C C>.a_class_method_2()

  module <emptyTree>::<C Qux><<C <todo sym>>> < ()
    def instance_method<<todo method>>(&<blk>)
      <emptyTree>
    end

    module <emptyTree>::<C ClassMethods><<C <todo sym>>> < ()
      def a_class_method<<todo method>>(&<blk>)
        <emptyTree>
      end

      def a_class_method_2<<todo method>>(&<blk>)
        <emptyTree>
      end

      :a_class_method

      :a_class_method_2
    end

    <self>.extend(<emptyTree>::<C ActiveSupport>::<C Concern>)

    :instance_method

    ::<Magic>.mixes_in_class_methods(<self>, <emptyTree>::<C ClassMethods>)
  end

  class <emptyTree>::<C D><<C <todo sym>>> < (::<todo sym>)
    <self>.include(<emptyTree>::<C Qux>)
  end

  <emptyTree>::<C D>.new().instance_method()

  <emptyTree>::<C D>.a_class_method()

  <emptyTree>::<C D>.a_class_method_2()

  module <emptyTree>::<C Quux><<C <todo sym>>> < ()
    def instance_method<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C ActiveSupport>::<C Concern>)

    :instance_method
  end

  class <emptyTree>::<C E><<C <todo sym>>> < (::<todo sym>)
    <self>.include(<emptyTree>::<C Quux>)
  end

  <emptyTree>::<C E>.new().instance_method()

  module <emptyTree>::<C Corge><<C <todo sym>>> < ()
    def a_class_method<<todo method>>(&<blk>)
      <emptyTree>
    end

    def instance_method<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.class_methods() do ||
      :a_class_method
    end

    :instance_method
  end

  class <emptyTree>::<C F><<C <todo sym>>> < (::<todo sym>)
    <self>.include(<emptyTree>::<C Corge>)
  end

  <emptyTree>::<C F>.new().instance_method()

  <emptyTree>::<C F>.a_class_method()

  module <emptyTree>::<C Grault><<C <todo sym>>> < ()
    module <emptyTree>::<C ClassMethods><<C <todo sym>>> < ()
      def a_class_method<<todo method>>(&<blk>)
        <emptyTree>
      end

      def another_class_method<<todo method>>(&<blk>)
        <emptyTree>
      end

      :a_class_method

      :another_class_method
    end

    <self>.extend(<emptyTree>::<C ActiveSupport>::<C Concern>)

    ::<Magic>.mixes_in_class_methods(<self>, <emptyTree>::<C ClassMethods>)
  end

  class <emptyTree>::<C G><<C <todo sym>>> < (::<todo sym>)
    <self>.include(<emptyTree>::<C Grault>)
  end

  <emptyTree>::<C G>.a_class_method()

  <emptyTree>::<C G>.another_class_method()
end
