class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C ForeignClass><<C <todo sym>>> < (::<todo sym>)
  end

  class <emptyTree>::<C AdvancedODM><<C <todo sym>>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(<emptyTree>::<C String>)
    end

    def foreign_lazy<<todo method>>(&<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params(:arg0, <emptyTree>::<C String>).returns(<emptyTree>::<C String>)
    end

    def foreign_lazy=<<todo method>>(arg0, &<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params(:allow_direct_mutation, ::T.nilable(<emptyTree>::<C T>::<C Boolean>)).returns(::T.nilable(<emptyTree>::<C ForeignClass>))
    end

    def foreign_lazy_<<todo method>>(allow_direct_mutation: = nil, &<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params(:allow_direct_mutation, ::T.nilable(<emptyTree>::<C T>::<C Boolean>)).returns(<emptyTree>::<C ForeignClass>)
    end

    def foreign_lazy_!<<todo method>>(allow_direct_mutation: = nil, &<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(<emptyTree>::<C String>)
    end

    def foreign_proc<<todo method>>(&<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params(:arg0, <emptyTree>::<C String>).returns(<emptyTree>::<C String>)
    end

    def foreign_proc=<<todo method>>(arg0, &<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params(:allow_direct_mutation, ::T.nilable(<emptyTree>::<C T>::<C Boolean>)).returns(::T.nilable(<emptyTree>::<C ForeignClass>))
    end

    def foreign_proc_<<todo method>>(allow_direct_mutation: = nil, &<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params(:allow_direct_mutation, ::T.nilable(<emptyTree>::<C T>::<C Boolean>)).returns(<emptyTree>::<C ForeignClass>)
    end

    def foreign_proc_!<<todo method>>(allow_direct_mutation: = nil, &<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(<emptyTree>::<C String>)
    end

    def foreign_invalid<<todo method>>(&<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params(:arg0, <emptyTree>::<C String>).returns(<emptyTree>::<C String>)
    end

    def foreign_invalid=<<todo method>>(arg0, &<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params(:allow_direct_mutation, ::T.nilable(<emptyTree>::<C T>::<C Boolean>)).returns(::T.untyped())
    end

    def foreign_invalid_<<todo method>>(allow_direct_mutation: = nil, &<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params(:allow_direct_mutation, ::T.nilable(<emptyTree>::<C T>::<C Boolean>)).returns(::T.untyped())
    end

    def foreign_invalid_!<<todo method>>(allow_direct_mutation: = nil, &<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    <self>.include(<emptyTree>::<C T>::<C Props>)

    <self>.prop(:foreign_lazy, <emptyTree>::<C String>, :foreign, <emptyTree>::<C Kernel>.lambda() do ||
        <emptyTree>::<C ForeignClass>
      end, :without_accessors, true)

    <runtime method definition of foreign_lazy>

    <runtime method definition of foreign_lazy=>

    <self>.prop(:foreign_proc, <emptyTree>::<C String>, :foreign, <self>.proc() do ||
        <emptyTree>::<C ForeignClass>
      end, :without_accessors, true)

    <runtime method definition of foreign_proc>

    <runtime method definition of foreign_proc=>

    <self>.prop(:foreign_invalid, <emptyTree>::<C String>, :foreign, <self>.proc() do ||
        :not_a_type
      end, :without_accessors, true)

    <runtime method definition of foreign_invalid>

    <runtime method definition of foreign_invalid=>
  end
end
