ClassDef{
  kind = class
  name = EmptyTree<<C <U <root>>>>
  ancestors = [ConstantLit{
      orig = nullptr
      symbol = (class ::<todo sym>)
    }]
  rhs = [
    MethodDef{
      flags = {}
      name = <U main><<U <todo method>>>
      args = [BlockArg{ expr = UnresolvedIdent{
          kind = Local
          name = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U SomeODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U foo>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U SomeODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U foo=>
                block = nullptr
                pos_args = 1
                args = [
                  Literal{ value = "b" }
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U SomeODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U foo2>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U SomeODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U foo2=>
                block = nullptr
                pos_args = 1
                args = [
                  Literal{ value = "b" }
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U default>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U t_nilable>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U t_array>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U hash_of>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U const_explicit>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U AdvancedODM>>
              }
              fun = <U new>
              block = nullptr
              pos_args = 0
              args = [
              ]
            }
            fun = <U const_explicit=>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "b" }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U const>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U AdvancedODM>>
              }
              fun = <U new>
              block = nullptr
              pos_args = 0
              args = [
              ]
            }
            fun = <U const=>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "b" }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U enum_prop>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U AdvancedODM>>
              }
              fun = <U new>
              block = nullptr
              pos_args = 0
              args = [
              ]
            }
            fun = <U enum_prop=>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "hello" }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U foreign_>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U foreign_!>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U foreign_lazy_>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U AdvancedODM>>
              }
              fun = <U new>
              block = nullptr
              pos_args = 0
              args = [
              ]
            }
            fun = <U foreign_invalid_>
            block = nullptr
            pos_args = 0
            args = [
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U PropHelpers>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U token>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U PropHelpers>>
              }
              fun = <U new>
              block = nullptr
              pos_args = 0
              args = [
              ]
            }
            fun = <U token=>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "tok_token" }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U PropHelpers>>
              }
              fun = <U new>
              block = nullptr
              pos_args = 0
              args = [
              ]
            }
            fun = <U token=>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = nil }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U PropHelpers>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U created>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U PropHelpers>>
              }
              fun = <U new>
              block = nullptr
              pos_args = 0
              args = [
              ]
            }
            fun = <U created=>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = 0.000000 }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U PropHelpers>>
              }
              fun = <U new>
              block = nullptr
              pos_args = 0
              args = [
              ]
            }
            fun = <U created=>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = nil }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U PropHelpers2>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U token>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U PropHelpers2>>
              }
              fun = <U new>
              block = nullptr
              pos_args = 0
              args = [
              ]
            }
            fun = <U token=>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "tok_token" }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U PropHelpers2>>
              }
              fun = <U new>
              block = nullptr
              pos_args = 0
              args = [
              ]
            }
            fun = <U token=>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = nil }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U PropHelpers2>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U created>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U PropHelpers2>>
              }
              fun = <U new>
              block = nullptr
              pos_args = 0
              args = [
              ]
            }
            fun = <U created=>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = 0.000000 }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U EncryptedProp>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U foo>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U EncryptedProp>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U encrypted_foo>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U EncryptedProp>>
              }
              fun = <U new>
              block = nullptr
              pos_args = 0
              args = [
              ]
            }
            fun = <U foo=>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "hello" }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U EncryptedProp>>
              }
              fun = <U new>
              block = nullptr
              pos_args = 0
              args = [
              ]
            }
            fun = <U foo=>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = nil }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U EncryptedProp>>
              }
              fun = <U new>
              block = nullptr
              pos_args = 0
              args = [
              ]
            }
            fun = <U bar=>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "hello" }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U ifunset>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U reveal_type>
            block = nullptr
            pos_args = 1
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U AdvancedODM>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U ifunset_nilable>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U AdvancedODM>>
              }
              fun = <U new>
              block = nullptr
              pos_args = 0
              args = [
              ]
            }
            fun = <U ifunset=>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = nil }
            ]
          }
        ],
        expr = Send{
          recv = Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U AdvancedODM>>
            }
            fun = <U new>
            block = nullptr
            pos_args = 0
            args = [
            ]
          }
          fun = <U ifunset_nilable=>
          block = nullptr
          pos_args = 1
          args = [
            Literal{ value = nil }
          ]
        }
      }
    }

    ClassDef{
      kind = class
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <C <U NotAODM>>
      }<<C <U <todo sym>>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = (class ::<todo sym>)
        }]
      rhs = [
        MethodDef{
          flags = {self}
          name = <U prop><<U <todo method>>>
          args = [RestArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U args>
            } }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = EmptyTree
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_self_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :prop }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 0
          args = [
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :foo }
            Literal{ value = :not_a_string }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = "not_a_symbol" }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 3
          args = [
            Literal{ value = :foo }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
            Literal{ value = "not_a_hash" }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 4
          args = [
            Literal{ value = "too" }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
            Hash{
              pairs = [
              ]
            }
            Literal{ value = "many" }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U optional>
          block = nullptr
          pos_args = 3
          args = [
            Literal{ value = :company_name }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
            Literal{ value = :nonempty_string }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U optional>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :day }
            Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U IntegerParam>>
              }
              fun = <U new>
              block = nullptr
              pos_args = 0
              args = [
                Literal{ value = :min }
                Literal{ value = 1 }
                Literal{ value = :max }
                Literal{ value = 31 }
              ]
            }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U optional>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :name }
            Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U StringParam>>
              }
              fun = <U alphanumeric>
              block = nullptr
              pos_args = 0
              args = [
              ]
            }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U optional>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :how_many }
            Send{
              recv = UnresolvedConstantLit{
                scope = UnresolvedConstantLit{
                  scope = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U Opus>>
                  }
                  cnst = <C <U Param>>
                }
                cnst = <C <U CaseParam>>
              }
              fun = <U new>
              block = nullptr
              pos_args = 2
              args = [
                Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U how_many_cases>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                Send{
                  recv = UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <C <U Opus>>
                      }
                      cnst = <C <U Param>>
                    }
                    cnst = <C <U ParamSpecsParam>>
                  }
                  fun = <U new>
                  block = nullptr
                  pos_args = 1
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U Default>>
                    }
                  ]
                }
              ]
            }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U optional>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :optional_param }
            Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U IntegerParam>>
              }
              fun = <U new>
              block = nullptr
              pos_args = 0
              args = [
              ]
            }
          ]
        }
      ]
    }

    ClassDef{
      kind = class
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <C <U SomeODM>>
      }<<C <U <todo sym>>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = (class ::<todo sym>)
        }]
      rhs = [
        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foo><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Assign{
                lhs = UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
                rhs = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U instance_variable_get>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ value = :@foo }
                  ]
                }
              }
            ],
            expr = Send{
              recv = Send{
                recv = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U class>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U decorator>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
              fun = <U prop_get_logic>
              block = nullptr
              pos_args = 3
              args = [
                Local{
                  localVariable = <U <self>>
                }
                Literal{ value = :foo }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foo=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T::Configuration)
                  }
                  fun = <U prop_freeze_handler>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U call>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :foo }
                ]
              }
            ],
            expr = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U instance_variable_set>
              block = nullptr
              pos_args = 2
              args = [
                Literal{ value = :@foo }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U T>>
                  }
                  fun = <U nilable>
                  block = nullptr
                  pos_args = 1
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            Local{
              localVariable = <U <self>>
            }
          ]
        }

        MethodDef{
          flags = {}
          name = <U foo2><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U cast>
            block = nullptr
            pos_args = 2
            args = [
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U T>>
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U T>>
                }
                fun = <U nilable>
                block = nullptr
                pos_args = 1
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            Local{
              localVariable = <U <self>>
            }
          ]
        }

        MethodDef{
          flags = {}
          name = <U foo2=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U T>>
            }
            fun = <U cast>
            block = nullptr
            pos_args = 2
            args = [
              Literal{ value = nil }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U String>>
              }
            ]
          }
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U extend>
          block = nullptr
          pos_args = 1
          args = [
            UnresolvedConstantLit{
              scope = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U T>>
              }
              cnst = <C <U Sig>>
            }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U include>
          block = nullptr
          pos_args = 1
          args = [
            UnresolvedConstantLit{
              scope = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U T>>
              }
              cnst = <C <U Props>>
            }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :foo }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
            Literal{ value = :without_accessors }
            Literal{ value = true }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :foo }
            Literal{ value = :genericPropGetter }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :foo= }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :foo2 }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :foo2= }
            Literal{ value = :normal }
          ]
        }
      ]
    }

    ClassDef{
      kind = class
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <C <U ForeignClass>>
      }<<C <U <todo sym>>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = (class ::<todo sym>)
        }]
      rhs = [
      ]
    }

    ClassDef{
      kind = class
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <C <U AdvancedODM>>
      }<<C <U <todo sym>>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = (class ::<todo sym>)
        }]
      rhs = [
        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U default><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Assign{
                lhs = UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
                rhs = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U instance_variable_get>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ value = :@default }
                  ]
                }
              }
            ],
            expr = Send{
              recv = Send{
                recv = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U class>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U decorator>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
              fun = <U prop_get_logic>
              block = nullptr
              pos_args = 3
              args = [
                Local{
                  localVariable = <U <self>>
                }
                Literal{ value = :default }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U default=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T::Configuration)
                  }
                  fun = <U prop_freeze_handler>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U call>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :default }
                ]
              }
            ],
            expr = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U instance_variable_set>
              block = nullptr
              pos_args = 2
              args = [
                Literal{ value = :@default }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U T>>
                  }
                  fun = <U nilable>
                  block = nullptr
                  pos_args = 1
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U t_nilable><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Assign{
                lhs = UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
                rhs = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U instance_variable_get>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ value = :@t_nilable }
                  ]
                }
              }
            ],
            expr = Send{
              recv = Send{
                recv = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U class>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U decorator>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
              fun = <U prop_get_logic>
              block = nullptr
              pos_args = 3
              args = [
                Local{
                  localVariable = <U <self>>
                }
                Literal{ value = :t_nilable }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U T>>
                    }
                    fun = <U nilable>
                    block = nullptr
                    pos_args = 1
                    args = [
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <C <U String>>
                      }
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U T>>
                  }
                  fun = <U nilable>
                  block = nullptr
                  pos_args = 1
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U t_nilable=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T::Configuration)
                  }
                  fun = <U prop_freeze_handler>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U call>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :t_nilable }
                ]
              }
            ],
            expr = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U instance_variable_set>
              block = nullptr
              pos_args = 2
              args = [
                Literal{ value = :@t_nilable }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U Array>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U array><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Assign{
                lhs = UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
                rhs = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U instance_variable_get>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ value = :@array }
                  ]
                }
              }
            ],
            expr = Send{
              recv = Send{
                recv = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U class>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U decorator>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
              fun = <U prop_get_logic>
              block = nullptr
              pos_args = 3
              args = [
                Local{
                  localVariable = <U <self>>
                }
                Literal{ value = :array }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U Array>>
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U Array>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U array=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T::Configuration)
                  }
                  fun = <U prop_freeze_handler>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U call>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :array }
                ]
              }
            ],
            expr = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U instance_variable_set>
              block = nullptr
              pos_args = 2
              args = [
                Literal{ value = :@array }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U T>>
                    }
                    cnst = <C <U Array>>
                  }
                  fun = <U []>
                  block = nullptr
                  pos_args = 1
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U t_array><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Assign{
                lhs = UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
                rhs = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U instance_variable_get>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ value = :@t_array }
                  ]
                }
              }
            ],
            expr = Send{
              recv = Send{
                recv = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U class>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U decorator>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
              fun = <U prop_get_logic>
              block = nullptr
              pos_args = 3
              args = [
                Local{
                  localVariable = <U <self>>
                }
                Literal{ value = :t_array }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <C <U T>>
                      }
                      cnst = <C <U Array>>
                    }
                    fun = <U []>
                    block = nullptr
                    pos_args = 1
                    args = [
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <C <U String>>
                      }
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U T>>
                    }
                    cnst = <C <U Array>>
                  }
                  fun = <U []>
                  block = nullptr
                  pos_args = 1
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U t_array=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T::Configuration)
                  }
                  fun = <U prop_freeze_handler>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U call>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :t_array }
                ]
              }
            ],
            expr = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U instance_variable_set>
              block = nullptr
              pos_args = 2
              args = [
                Literal{ value = :@t_array }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U T>>
                    }
                    cnst = <C <U Hash>>
                  }
                  fun = <U []>
                  block = nullptr
                  pos_args = 2
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U Symbol>>
                    }
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U hash_of><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Assign{
                lhs = UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
                rhs = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U instance_variable_get>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ value = :@hash_of }
                  ]
                }
              }
            ],
            expr = Send{
              recv = Send{
                recv = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U class>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U decorator>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
              fun = <U prop_get_logic>
              block = nullptr
              pos_args = 3
              args = [
                Local{
                  localVariable = <U <self>>
                }
                Literal{ value = :hash_of }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <C <U T>>
                      }
                      cnst = <C <U Hash>>
                    }
                    fun = <U []>
                    block = nullptr
                    pos_args = 2
                    args = [
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <C <U Symbol>>
                      }
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <C <U String>>
                      }
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U T>>
                    }
                    cnst = <C <U Hash>>
                  }
                  fun = <U []>
                  block = nullptr
                  pos_args = 2
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U Symbol>>
                    }
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U hash_of=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T::Configuration)
                  }
                  fun = <U prop_freeze_handler>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U call>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :hash_of }
                ]
              }
            ],
            expr = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U instance_variable_set>
              block = nullptr
              pos_args = 2
              args = [
                Literal{ value = :@hash_of }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U const_explicit><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Assign{
                lhs = UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
                rhs = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U instance_variable_get>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ value = :@const_explicit }
                  ]
                }
              }
            ],
            expr = Send{
              recv = Send{
                recv = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U class>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U decorator>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
              fun = <U prop_get_logic>
              block = nullptr
              pos_args = 3
              args = [
                Local{
                  localVariable = <U <self>>
                }
                Literal{ value = :const_explicit }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U const><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Assign{
                lhs = UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
                rhs = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U instance_variable_get>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ value = :@const }
                  ]
                }
              }
            ],
            expr = Send{
              recv = Send{
                recv = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U class>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U decorator>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
              fun = <U prop_get_logic>
              block = nullptr
              pos_args = 3
              args = [
                Local{
                  localVariable = <U <self>>
                }
                Literal{ value = :const }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U enum_prop><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Assign{
                lhs = UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
                rhs = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U instance_variable_get>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ value = :@enum_prop }
                  ]
                }
              }
            ],
            expr = Send{
              recv = Send{
                recv = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U class>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U decorator>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
              fun = <U prop_get_logic>
              block = nullptr
              pos_args = 3
              args = [
                Local{
                  localVariable = <U <self>>
                }
                Literal{ value = :enum_prop }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U enum_prop=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = (module ::T)
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (module ::Kernel)
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foreign><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Assign{
                lhs = UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
                rhs = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U instance_variable_get>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ value = :@foreign }
                  ]
                }
              }
            ],
            expr = Send{
              recv = Send{
                recv = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U class>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U decorator>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
              fun = <U prop_get_logic>
              block = nullptr
              pos_args = 3
              args = [
                Local{
                  localVariable = <U <self>>
                }
                Literal{ value = :foreign }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foreign=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T::Configuration)
                  }
                  fun = <U prop_freeze_handler>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U call>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :foreign }
                ]
              }
            ],
            expr = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U instance_variable_set>
              block = nullptr
              pos_args = 2
              args = [
                Literal{ value = :@foreign }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :opts }
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = (module ::T)
                    }
                    fun = <U untyped>
                    block = nullptr
                    pos_args = 0
                    args = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T)
                  }
                  fun = <U nilable>
                  block = nullptr
                  pos_args = 1
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U ForeignClass>>
                    }
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foreign_><<U <todo method>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U opts>
            } } }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = (module ::T)
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (module ::Kernel)
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :opts }
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = (module ::T)
                    }
                    fun = <U untyped>
                    block = nullptr
                    pos_args = 0
                    args = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U ForeignClass>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foreign_!><<U <todo method>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U opts>
            } } }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = (module ::T)
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (module ::Kernel)
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foreign_lazy><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Assign{
                lhs = UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
                rhs = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U instance_variable_get>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ value = :@foreign_lazy }
                  ]
                }
              }
            ],
            expr = Send{
              recv = Send{
                recv = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U class>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U decorator>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
              fun = <U prop_get_logic>
              block = nullptr
              pos_args = 3
              args = [
                Local{
                  localVariable = <U <self>>
                }
                Literal{ value = :foreign_lazy }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foreign_lazy=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T::Configuration)
                  }
                  fun = <U prop_freeze_handler>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U call>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :foreign_lazy }
                ]
              }
            ],
            expr = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U instance_variable_set>
              block = nullptr
              pos_args = 2
              args = [
                Literal{ value = :@foreign_lazy }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :opts }
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = (module ::T)
                    }
                    fun = <U untyped>
                    block = nullptr
                    pos_args = 0
                    args = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T)
                  }
                  fun = <U nilable>
                  block = nullptr
                  pos_args = 1
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U ForeignClass>>
                    }
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foreign_lazy_><<U <todo method>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U opts>
            } } }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = (module ::T)
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (module ::Kernel)
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :opts }
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = (module ::T)
                    }
                    fun = <U untyped>
                    block = nullptr
                    pos_args = 0
                    args = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U ForeignClass>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foreign_lazy_!><<U <todo method>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U opts>
            } } }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = (module ::T)
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (module ::Kernel)
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foreign_proc><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Assign{
                lhs = UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
                rhs = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U instance_variable_get>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ value = :@foreign_proc }
                  ]
                }
              }
            ],
            expr = Send{
              recv = Send{
                recv = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U class>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U decorator>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
              fun = <U prop_get_logic>
              block = nullptr
              pos_args = 3
              args = [
                Local{
                  localVariable = <U <self>>
                }
                Literal{ value = :foreign_proc }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foreign_proc=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T::Configuration)
                  }
                  fun = <U prop_freeze_handler>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U call>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :foreign_proc }
                ]
              }
            ],
            expr = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U instance_variable_set>
              block = nullptr
              pos_args = 2
              args = [
                Literal{ value = :@foreign_proc }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :opts }
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = (module ::T)
                    }
                    fun = <U untyped>
                    block = nullptr
                    pos_args = 0
                    args = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T)
                  }
                  fun = <U nilable>
                  block = nullptr
                  pos_args = 1
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U ForeignClass>>
                    }
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foreign_proc_><<U <todo method>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U opts>
            } } }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = (module ::T)
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (module ::Kernel)
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :opts }
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = (module ::T)
                    }
                    fun = <U untyped>
                    block = nullptr
                    pos_args = 0
                    args = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U ForeignClass>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foreign_proc_!><<U <todo method>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U opts>
            } } }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = (module ::T)
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (module ::Kernel)
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foreign_invalid><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Assign{
                lhs = UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
                rhs = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U instance_variable_get>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ value = :@foreign_invalid }
                  ]
                }
              }
            ],
            expr = Send{
              recv = Send{
                recv = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U class>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U decorator>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
              fun = <U prop_get_logic>
              block = nullptr
              pos_args = 3
              args = [
                Local{
                  localVariable = <U <self>>
                }
                Literal{ value = :foreign_invalid }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foreign_invalid=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T::Configuration)
                  }
                  fun = <U prop_freeze_handler>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U call>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :foreign_invalid }
                ]
              }
            ],
            expr = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U instance_variable_set>
              block = nullptr
              pos_args = 2
              args = [
                Literal{ value = :@foreign_invalid }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :opts }
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = (module ::T)
                    }
                    fun = <U untyped>
                    block = nullptr
                    pos_args = 0
                    args = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T)
                  }
                  fun = <U untyped>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foreign_invalid_><<U <todo method>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U opts>
            } } }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = (module ::T)
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (module ::Kernel)
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :opts }
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = (module ::T)
                    }
                    fun = <U untyped>
                    block = nullptr
                    pos_args = 0
                    args = [
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T)
                  }
                  fun = <U untyped>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foreign_invalid_!><<U <todo method>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U opts>
            } } }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = (module ::T)
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (module ::Kernel)
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U ifunset><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = (module ::T)
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (module ::Kernel)
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U ifunset=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T::Configuration)
                  }
                  fun = <U prop_freeze_handler>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U call>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :ifunset }
                ]
              }
            ],
            expr = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U instance_variable_set>
              block = nullptr
              pos_args = 2
              args = [
                Literal{ value = :@ifunset }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U T>>
                  }
                  fun = <U nilable>
                  block = nullptr
                  pos_args = 1
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U ifunset_nilable><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = (module ::T)
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (module ::Kernel)
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U T>>
                    }
                    fun = <U nilable>
                    block = nullptr
                    pos_args = 1
                    args = [
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <C <U String>>
                      }
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U T>>
                  }
                  fun = <U nilable>
                  block = nullptr
                  pos_args = 1
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U String>>
                    }
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U ifunset_nilable=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T::Configuration)
                  }
                  fun = <U prop_freeze_handler>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U call>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :ifunset_nilable }
                ]
              }
            ],
            expr = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U instance_variable_set>
              block = nullptr
              pos_args = 2
              args = [
                Literal{ value = :@ifunset_nilable }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U empty_hash_rules><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Assign{
                lhs = UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
                rhs = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U instance_variable_get>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ value = :@empty_hash_rules }
                  ]
                }
              }
            ],
            expr = Send{
              recv = Send{
                recv = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U class>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U decorator>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
              fun = <U prop_get_logic>
              block = nullptr
              pos_args = 3
              args = [
                Local{
                  localVariable = <U <self>>
                }
                Literal{ value = :empty_hash_rules }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U empty_hash_rules=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T::Configuration)
                  }
                  fun = <U prop_freeze_handler>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U call>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :empty_hash_rules }
                ]
              }
            ],
            expr = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U instance_variable_set>
              block = nullptr
              pos_args = 2
              args = [
                Literal{ value = :@empty_hash_rules }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U hash_rules><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Assign{
                lhs = UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
                rhs = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U instance_variable_get>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ value = :@hash_rules }
                  ]
                }
              }
            ],
            expr = Send{
              recv = Send{
                recv = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U class>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U decorator>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
              fun = <U prop_get_logic>
              block = nullptr
              pos_args = 3
              args = [
                Local{
                  localVariable = <U <self>>
                }
                Literal{ value = :hash_rules }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <C <U String>>
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U hash_rules=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = (module ::T)
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (module ::Kernel)
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U include>
          block = nullptr
          pos_args = 1
          args = [
            UnresolvedConstantLit{
              scope = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U T>>
              }
              cnst = <C <U Props>>
            }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :default }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
            Literal{ value = :default }
            Literal{ value = "" }
            Literal{ value = :without_accessors }
            Literal{ value = true }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :default }
            Literal{ value = :genericPropGetter }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :default= }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :t_nilable }
            Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U T>>
              }
              fun = <U nilable>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
            Literal{ value = :without_accessors }
            Literal{ value = true }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :t_nilable }
            Literal{ value = :genericPropGetter }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :t_nilable= }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :array }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U Array>>
            }
            Literal{ value = :without_accessors }
            Literal{ value = true }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :array }
            Literal{ value = :genericPropGetter }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :array= }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :t_array }
            Send{
              recv = UnresolvedConstantLit{
                scope = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U T>>
                }
                cnst = <C <U Array>>
              }
              fun = <U []>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
            Literal{ value = :without_accessors }
            Literal{ value = true }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :t_array }
            Literal{ value = :genericPropGetter }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :t_array= }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :hash_of }
            Send{
              recv = UnresolvedConstantLit{
                scope = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U T>>
                }
                cnst = <C <U Hash>>
              }
              fun = <U []>
              block = nullptr
              pos_args = 2
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U Symbol>>
                }
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
            Literal{ value = :without_accessors }
            Literal{ value = true }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :hash_of }
            Literal{ value = :genericPropGetter }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :hash_of= }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :const_explicit }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
            Literal{ value = :immutable }
            Literal{ value = true }
            Literal{ value = :without_accessors }
            Literal{ value = true }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :const_explicit }
            Literal{ value = :genericPropGetter }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U const>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :const }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
            Literal{ value = :without_accessors }
            Literal{ value = true }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :const }
            Literal{ value = :genericPropGetter }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :enum_prop }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
            Literal{ value = :enum }
            Array{
              elems = [
                Literal{ value = "hello" }
                Literal{ value = "goodbye" }
              ]
            }
            Literal{ value = :without_accessors }
            Literal{ value = true }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :enum_prop }
            Literal{ value = :genericPropGetter }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :enum_prop= }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :foreign }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
            Literal{ value = :foreign }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U ForeignClass>>
            }
            Literal{ value = :without_accessors }
            Literal{ value = true }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :foreign }
            Literal{ value = :genericPropGetter }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :foreign= }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :foreign_lazy }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
            Literal{ value = :foreign }
            Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U Kernel>>
              }
              fun = <U lambda>
              block = Block {
                args = [
                ]
                body = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U ForeignClass>>
                }
              }
              pos_args = 0
              args = [
              ]
            }
            Literal{ value = :without_accessors }
            Literal{ value = true }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :foreign_lazy }
            Literal{ value = :genericPropGetter }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :foreign_lazy= }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :foreign_proc }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
            Literal{ value = :foreign }
            Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U proc>
              block = Block {
                args = [
                ]
                body = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U ForeignClass>>
                }
              }
              pos_args = 0
              args = [
              ]
            }
            Literal{ value = :without_accessors }
            Literal{ value = true }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :foreign_proc }
            Literal{ value = :genericPropGetter }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :foreign_proc= }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :foreign_invalid }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
            Literal{ value = :foreign }
            Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U proc>
              block = Block {
                args = [
                ]
                body = Literal{ value = :not_a_type }
              }
              pos_args = 0
              args = [
              ]
            }
            Literal{ value = :without_accessors }
            Literal{ value = true }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :foreign_invalid }
            Literal{ value = :genericPropGetter }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :foreign_invalid= }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :ifunset }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
            Literal{ value = :ifunset }
            Literal{ value = "" }
            Literal{ value = :without_accessors }
            Literal{ value = true }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :ifunset }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :ifunset= }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 2
          args = [
            Literal{ value = :ifunset_nilable }
            Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U T>>
              }
              fun = <U nilable>
              block = nullptr
              pos_args = 1
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U String>>
                }
              ]
            }
            Literal{ value = :ifunset }
            Literal{ value = "" }
            Literal{ value = :without_accessors }
            Literal{ value = true }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :ifunset_nilable }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :ifunset_nilable= }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 3
          args = [
            Literal{ value = :empty_hash_rules }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
            Hash{
              pairs = [
                [
                  key = Literal{ value = :without_accessors }
                  value = Literal{ value = true }
                ]
              ]
            }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :empty_hash_rules }
            Literal{ value = :genericPropGetter }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :empty_hash_rules= }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U prop>
          block = nullptr
          pos_args = 3
          args = [
            Literal{ value = :hash_rules }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U String>>
            }
            Hash{
              pairs = [
                [
                  key = Literal{ value = :enum }
                  value = Array{
                    elems = [
                      Literal{ value = "hello" }
                      Literal{ value = "goodbye" }
                    ]
                  }
                ]
                [
                  key = Literal{ value = :without_accessors }
                  value = Literal{ value = true }
                ]
              ]
            }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :hash_rules }
            Literal{ value = :genericPropGetter }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :hash_rules= }
            Literal{ value = :normal }
          ]
        }
      ]
    }

    ClassDef{
      kind = class
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <C <U PropHelpers>>
      }<<C <U <todo sym>>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = (class ::<todo sym>)
        }]
      rhs = [
        MethodDef{
          flags = {self}
          name = <U token_prop><<U <todo method>>>
          args = [OptionalArg{
              expr = UnresolvedIdent{
                kind = Local
                name = <U opts>
              }
              default_ = Hash{
                pairs = [
                ]
              }
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = EmptyTree
        }

        MethodDef{
          flags = {self}
          name = <U created_prop><<U <todo method>>>
          args = [OptionalArg{
              expr = UnresolvedIdent{
                kind = Local
                name = <U opts>
              }
              default_ = Hash{
                pairs = [
                ]
              }
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = EmptyTree
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (class ::String)
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U token><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Assign{
                lhs = UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
                rhs = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U instance_variable_get>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ value = :@token }
                  ]
                }
              }
            ],
            expr = Send{
              recv = Send{
                recv = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U class>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U decorator>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
              fun = <U prop_get_logic>
              block = nullptr
              pos_args = 3
              args = [
                Local{
                  localVariable = <U <self>>
                }
                Literal{ value = :token }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  ConstantLit{
                    orig = nullptr
                    symbol = (class ::String)
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (class ::String)
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U token=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T::Configuration)
                  }
                  fun = <U prop_freeze_handler>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U call>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :token }
                ]
              }
            ],
            expr = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U instance_variable_set>
              block = nullptr
              pos_args = 2
              args = [
                Literal{ value = :@token }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (class ::Float)
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U created><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Assign{
                lhs = UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
                rhs = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U instance_variable_get>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ value = :@created }
                  ]
                }
              }
            ],
            expr = Send{
              recv = Send{
                recv = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U class>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U decorator>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
              fun = <U prop_get_logic>
              block = nullptr
              pos_args = 3
              args = [
                Local{
                  localVariable = <U <self>>
                }
                Literal{ value = :created }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  ConstantLit{
                    orig = nullptr
                    symbol = (class ::Float)
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (class ::Float)
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U created=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T::Configuration)
                  }
                  fun = <U prop_freeze_handler>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U call>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :created }
                ]
              }
            ],
            expr = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U instance_variable_set>
              block = nullptr
              pos_args = 2
              args = [
                Literal{ value = :@created }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }
              ]
            }
          }
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U include>
          block = nullptr
          pos_args = 1
          args = [
            UnresolvedConstantLit{
              scope = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U T>>
              }
              cnst = <C <U Props>>
            }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_self_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :token_prop }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_self_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :created_prop }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U token_prop>
          block = nullptr
          pos_args = 0
          args = [
            Literal{ value = :without_accessors }
            Literal{ value = true }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :token }
            Literal{ value = :genericPropGetter }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :token= }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U created_prop>
          block = nullptr
          pos_args = 0
          args = [
            Literal{ value = :without_accessors }
            Literal{ value = true }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :created }
            Literal{ value = :genericPropGetter }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :created= }
            Literal{ value = :normal }
          ]
        }
      ]
    }

    ClassDef{
      kind = class
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <C <U PropHelpers2>>
      }<<C <U <todo sym>>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = (class ::<todo sym>)
        }]
      rhs = [
        MethodDef{
          flags = {self}
          name = <U timestamped_token_prop><<U <todo method>>>
          args = [OptionalArg{
              expr = UnresolvedIdent{
                kind = Local
                name = <U opts>
              }
              default_ = Hash{
                pairs = [
                ]
              }
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = EmptyTree
        }

        MethodDef{
          flags = {self}
          name = <U created_prop><<U <todo method>>>
          args = [OptionalArg{
              expr = UnresolvedIdent{
                kind = Local
                name = <U opts>
              }
              default_ = Hash{
                pairs = [
                ]
              }
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = EmptyTree
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (class ::String)
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U token><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Assign{
                lhs = UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
                rhs = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U instance_variable_get>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ value = :@token }
                  ]
                }
              }
            ],
            expr = Send{
              recv = Send{
                recv = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U class>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U decorator>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
              fun = <U prop_get_logic>
              block = nullptr
              pos_args = 3
              args = [
                Local{
                  localVariable = <U <self>>
                }
                Literal{ value = :token }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  ConstantLit{
                    orig = nullptr
                    symbol = (class ::String)
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (class ::String)
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U token=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T::Configuration)
                  }
                  fun = <U prop_freeze_handler>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U call>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :token }
                ]
              }
            ],
            expr = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U instance_variable_set>
              block = nullptr
              pos_args = 2
              args = [
                Literal{ value = :@token }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg0>
                }
              ]
            }
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (class ::Float)
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U created><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Assign{
                lhs = UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
                rhs = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U instance_variable_get>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ value = :@created }
                  ]
                }
              }
            ],
            expr = Send{
              recv = Send{
                recv = Send{
                  recv = Local{
                    localVariable = <U <self>>
                  }
                  fun = <U class>
                  block = nullptr
                  pos_args = 0
                  args = [
                  ]
                }
                fun = <U decorator>
                block = nullptr
                pos_args = 0
                args = [
                ]
              }
              fun = <U prop_get_logic>
              block = nullptr
              pos_args = 3
              args = [
                Local{
                  localVariable = <U <self>>
                }
                Literal{ value = :created }
                UnresolvedIdent{
                  kind = Local
                  name = <U arg2>
                }
              ]
            }
          }
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U include>
          block = nullptr
          pos_args = 1
          args = [
            UnresolvedConstantLit{
              scope = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U T>>
              }
              cnst = <C <U Props>>
            }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_self_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :timestamped_token_prop }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_self_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :created_prop }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U timestamped_token_prop>
          block = nullptr
          pos_args = 0
          args = [
            Literal{ value = :without_accessors }
            Literal{ value = true }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :token }
            Literal{ value = :genericPropGetter }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :token= }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U created_prop>
          block = nullptr
          pos_args = 0
          args = [
            Literal{ value = :immutable }
            Literal{ value = true }
            Literal{ value = :without_accessors }
            Literal{ value = true }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :created }
            Literal{ value = :genericPropGetter }
          ]
        }
      ]
    }

    ClassDef{
      kind = class
      name = UnresolvedConstantLit{
        scope = UnresolvedConstantLit{
          scope = UnresolvedConstantLit{
            scope = EmptyTree
            cnst = <C <U Chalk>>
          }
          cnst = <C <U ODM>>
        }
        cnst = <C <U Document>>
      }<<C <U <todo sym>>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = (class ::<todo sym>)
        }]
      rhs = [
      ]
    }

    ClassDef{
      kind = class
      name = UnresolvedConstantLit{
        scope = UnresolvedConstantLit{
          scope = UnresolvedConstantLit{
            scope = UnresolvedConstantLit{
              scope = UnresolvedConstantLit{
                scope = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <C <U Opus>>
                }
                cnst = <C <U DB>>
              }
              cnst = <C <U Model>>
            }
            cnst = <C <U Mixins>>
          }
          cnst = <C <U Encryptable>>
        }
        cnst = <C <U EncryptedValue>>
      }<<C <U <todo sym>>>>
      ancestors = [UnresolvedConstantLit{
          scope = UnresolvedConstantLit{
            scope = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U Chalk>>
            }
            cnst = <C <U ODM>>
          }
          cnst = <C <U Document>>
        }]
      rhs = [
      ]
    }

    ClassDef{
      kind = class
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <C <U EncryptedProp>>
      }<<C <U <todo sym>>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = (class ::<todo sym>)
        }]
      rhs = [
        MethodDef{
          flags = {self}
          name = <U encrypted_prop><<U <todo method>>>
          args = [OptionalArg{
              expr = UnresolvedIdent{
                kind = Local
                name = <U opts>
              }
              default_ = Hash{
                pairs = [
                ]
              }
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = EmptyTree
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T)
                  }
                  fun = <U nilable>
                  block = nullptr
                  pos_args = 1
                  args = [
                    ConstantLit{
                      orig = nullptr
                      symbol = (class ::String)
                    }
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foo><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = (module ::T)
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (module ::Kernel)
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T)
                  }
                  fun = <U nilable>
                  block = nullptr
                  pos_args = 1
                  args = [
                    UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = EmptyTree
                                cnst = <C <U Opus>>
                              }
                              cnst = <C <U DB>>
                            }
                            cnst = <C <U Model>>
                          }
                          cnst = <C <U Mixins>>
                        }
                        cnst = <C <U Encryptable>>
                      }
                      cnst = <C <U EncryptedValue>>
                    }
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U encrypted_foo><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = (module ::T)
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (module ::Kernel)
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = (module ::T)
                    }
                    fun = <U nilable>
                    block = nullptr
                    pos_args = 1
                    args = [
                      ConstantLit{
                        orig = nullptr
                        symbol = (class ::String)
                      }
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T)
                  }
                  fun = <U nilable>
                  block = nullptr
                  pos_args = 1
                  args = [
                    ConstantLit{
                      orig = nullptr
                      symbol = (class ::String)
                    }
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U foo=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = (module ::T)
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (module ::Kernel)
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U params>
                block = nullptr
                pos_args = 0
                args = [
                  Literal{ value = :arg0 }
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = (module ::T)
                    }
                    fun = <U nilable>
                    block = nullptr
                    pos_args = 1
                    args = [
                      UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = UnresolvedConstantLit{
                                  scope = EmptyTree
                                  cnst = <C <U Opus>>
                                }
                                cnst = <C <U DB>>
                              }
                              cnst = <C <U Model>>
                            }
                            cnst = <C <U Mixins>>
                          }
                          cnst = <C <U Encryptable>>
                        }
                        cnst = <C <U EncryptedValue>>
                      }
                    ]
                  }
                ]
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T)
                  }
                  fun = <U nilable>
                  block = nullptr
                  pos_args = 1
                  args = [
                    UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = EmptyTree
                                cnst = <C <U Opus>>
                              }
                              cnst = <C <U DB>>
                            }
                            cnst = <C <U Model>>
                          }
                          cnst = <C <U Mixins>>
                        }
                        cnst = <C <U Encryptable>>
                      }
                      cnst = <C <U EncryptedValue>>
                    }
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U encrypted_foo=><<U <todo method>>>
          args = [UnresolvedIdent{
              kind = Local
              name = <U arg0>
            }, BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = (module ::T)
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (module ::Kernel)
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T)
                  }
                  fun = <U nilable>
                  block = nullptr
                  pos_args = 1
                  args = [
                    ConstantLit{
                      orig = nullptr
                      symbol = (class ::String)
                    }
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U bar><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = (module ::T)
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (module ::Kernel)
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U sig>
          block = Block {
            args = [
            ]
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U returns>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = (module ::T)
                  }
                  fun = <U nilable>
                  block = nullptr
                  pos_args = 1
                  args = [
                    UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = EmptyTree
                                cnst = <C <U Opus>>
                              }
                              cnst = <C <U DB>>
                            }
                            cnst = <C <U Model>>
                          }
                          cnst = <C <U Mixins>>
                        }
                        cnst = <C <U Encryptable>>
                      }
                      cnst = <C <U EncryptedValue>>
                    }
                  ]
                }
              ]
            }
          }
          pos_args = 1
          args = [
            ConstantLit{
              orig = nullptr
              symbol = (module ::T::Sig::WithoutRuntime)
            }
          ]
        }

        MethodDef{
          flags = {rewriter}
          name = <U encrypted_bar><<U <todo method>>>
          args = [BlockArg{ expr = UnresolvedIdent{
              kind = Local
              name = <U <blk>>
            } }]
          rhs = Send{
            recv = Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = (module ::T)
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = (module ::Kernel)
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
        }

        Send{
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U include>
          block = nullptr
          pos_args = 1
          args = [
            UnresolvedConstantLit{
              scope = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <C <U T>>
              }
              cnst = <C <U Props>>
            }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_self_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :encrypted_prop }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :foo }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :encrypted_foo }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :foo= }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :encrypted_foo= }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :bar }
            Literal{ value = :normal }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = (module ::Sorbet::Private::Static)
          }
          fun = <U keep_def>
          block = nullptr
          pos_args = 3
          args = [
            Local{
              localVariable = <U <self>>
            }
            Literal{ value = :encrypted_bar }
            Literal{ value = :normal }
          ]
        }
      ]
    }

    Send{
      recv = ConstantLit{
        orig = nullptr
        symbol = (module ::Sorbet::Private::Static)
      }
      fun = <U keep_def>
      block = nullptr
      pos_args = 3
      args = [
        Local{
          localVariable = <U <self>>
        }
        Literal{ value = :main }
        Literal{ value = :normal }
      ]
    }
  ]
}
