class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C Opus>::<C Command><<C <todo sym>>> < (::<todo sym>)
    <self>.extend(<emptyTree>::<C T>::<C Sig>)
  end

  class <emptyTree>::<C MyCommand><<C <todo sym>>> < (<emptyTree>::<C Opus>::<C Command>)
    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.params(:x, <emptyTree>::<C Integer>).returns(<emptyTree>::<C String>)
    end

    def call<<todo method>>(x, &<blk>)
      x.to_s()
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.params(:x, <emptyTree>::<C Integer>).returns(<emptyTree>::<C String>)
    end

    def self.call<<todo method>>(x, &<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    <runtime method definition of call>
  end

  <cast:assert_type!>(<emptyTree>::<C MyCommand>.call(7), <todo sym>, <emptyTree>::<C String>)

  class <emptyTree>::<C OtherCommand><<C <todo sym>>> < (::<root>::<C Opus>::<C Command>)
    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.params(:x, <emptyTree>::<C String>).returns(<emptyTree>::<C Integer>)
    end

    def call<<todo method>>(x, &<blk>)
      <self>.Integer(x)
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.params(:x, <emptyTree>::<C String>).returns(<emptyTree>::<C Integer>)
    end

    def self.call<<todo method>>(x, &<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    <runtime method definition of call>
  end

  <cast:assert_type!>(<emptyTree>::<C OtherCommand>.call("8"), <todo sym>, <emptyTree>::<C Integer>)

  class <emptyTree>::<C NotACommand><<C <todo sym>>> < (<emptyTree>::<C Llamas>::<C Opus>::<C Command>)
    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.params(:x, <emptyTree>::<C String>).returns(<emptyTree>::<C Integer>)
    end

    def call<<todo method>>(x, &<blk>)
      <self>.Integer(x)
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <runtime method definition of call>
  end

  <emptyTree>::<C NotACommand>.call()

  class <emptyTree>::<C CallNoSig><<C <todo sym>>> < (<emptyTree>::<C Opus>::<C Command>)
    def call<<todo method>>(x, &<blk>)
      <self>.Integer(x)
    end

    <runtime method definition of call>
  end

  <emptyTree>::<C CallNoSig>.call()
end
