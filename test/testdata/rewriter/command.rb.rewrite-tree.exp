class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C Opus>::<C Command><<C <todo sym>>> < (::<todo sym>)
    <self>.extend(<emptyTree>::<C T>::<C Sig>)
  end

  class <emptyTree>::<C MyCommand><<C <todo sym>>> < (<emptyTree>::<C Opus>::<C Command>)
    <self>.sig() do ||
      <self>.params(:x, <emptyTree>::<C Integer>).returns(<emptyTree>::<C String>)
    end

    def call<<todo method>>(x, &<blk>)
      x.to_s()
    end

    <self>.sig() do ||
      <self>.params(:x, <emptyTree>::<C Integer>).returns(<emptyTree>::<C String>)
    end

    def self.call<<todo method>>(x, &<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    <runtime method definition of call>

    <self>.private(:call)
  end

  <cast:assert_type!>(<emptyTree>::<C MyCommand>.call(7), <todo sym>, <emptyTree>::<C String>)

  <emptyTree>::<C MyCommand>.new().call(12)

  class <emptyTree>::<C OtherCommand><<C <todo sym>>> < (::<root>::<C Opus>::<C Command>)
    <self>.sig() do ||
      <self>.params(:x, <emptyTree>::<C String>).returns(<emptyTree>::<C Integer>)
    end

    def call<<todo method>>(x, &<blk>)
      <self>.Integer(x)
    end

    <self>.sig() do ||
      <self>.params(:x, <emptyTree>::<C String>).returns(<emptyTree>::<C Integer>)
    end

    def self.call<<todo method>>(x, &<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    <runtime method definition of call>

    <self>.private(:call)
  end

  <cast:assert_type!>(<emptyTree>::<C OtherCommand>.call("8"), <todo sym>, <emptyTree>::<C Integer>)

  class <emptyTree>::<C NotACommand><<C <todo sym>>> < (<emptyTree>::<C Llamas>::<C Opus>::<C Command>)
    <self>.sig() do ||
      <self>.params(:x, <emptyTree>::<C String>).returns(<emptyTree>::<C Integer>)
    end

    def call<<todo method>>(x, &<blk>)
      <self>.Integer(x)
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <runtime method definition of call>
  end

  <emptyTree>::<C NotACommand>.call()

  class <emptyTree>::<C CallNoSig><<C <todo sym>>> < (<emptyTree>::<C Opus>::<C Command>)
    def call<<todo method>>(x, &<blk>)
      <self>.Integer(x)
    end

    <runtime method definition of call>

    <self>.private(:call)
  end

  <emptyTree>::<C CallNoSig>.call()

  module <emptyTree>::<C AbstractMixin><<C <todo sym>>> < ()
    <self>.sig() do ||
      <self>.abstract().params(:z, <emptyTree>::<C Integer>).returns(<emptyTree>::<C Integer>)
    end

    def foo<<todo method>>(z, &<blk>)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <self>.extend(<emptyTree>::<C T>::<C Helpers>)

    <self>.abstract!()

    <runtime method definition of foo>
  end

  class <emptyTree>::<C ConcreteCommand><<C <todo sym>>> < (<emptyTree>::<C Opus>::<C Command>)
    <self>.sig() do ||
      <self>.override().params(:z, <emptyTree>::<C Integer>).returns(<emptyTree>::<C Integer>)
    end

    def foo<<todo method>>(z, &<blk>)
      z
    end

    <self>.include(<emptyTree>::<C AbstractMixin>)

    <runtime method definition of foo>

    <self>.private(:foo)
  end

  module <emptyTree>::<C AbstractMixin><<C <todo sym>>> < ()
    <self>.sig() do ||
      <self>.abstract().params(:z, <emptyTree>::<C Integer>).returns(<emptyTree>::<C Integer>)
    end

    def foo<<todo method>>(z, &<blk>)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <self>.extend(<emptyTree>::<C T>::<C Helpers>)

    <self>.abstract!()

    <runtime method definition of foo>
  end

  class <emptyTree>::<C ConcreteCommand><<C <todo sym>>> < (<emptyTree>::<C Opus>::<C Command>)
    <self>.sig() do ||
      <self>.override().params(:z, <emptyTree>::<C Integer>).returns(<emptyTree>::<C Integer>)
    end

    def foo<<todo method>>(z, &<blk>)
      z
    end

    <self>.include(<emptyTree>::<C AbstractMixin>)

    <runtime method definition of foo>

    <self>.private(:foo)
  end

  class <emptyTree>::<C NotACommand><<C <todo sym>>> < (::<todo sym>)
    <self>.sig() do ||
      <self>.override().params(:z, <emptyTree>::<C Integer>).returns(<emptyTree>::<C Integer>)
    end

    def foo<<todo method>>(z, &<blk>)
      0
    end

    <self>.include(<emptyTree>::<C AbstractMixin>)

    <runtime method definition of foo>
  end

  class <emptyTree>::<C CommandWithCallAndMixin><<C <todo sym>>> < (<emptyTree>::<C Opus>::<C Command>)
    <self>.sig() do ||
      <self>.params(:x, <emptyTree>::<C String>).returns(<emptyTree>::<C Integer>)
    end

    def call<<todo method>>(x, &<blk>)
      <self>.Integer(x)
    end

    <self>.sig() do ||
      <self>.params(:x, <emptyTree>::<C String>).returns(<emptyTree>::<C Integer>)
    end

    def self.call<<todo method>>(x, &<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    <self>.sig() do ||
      <self>.override().params(:z, <emptyTree>::<C Integer>).returns(<emptyTree>::<C Integer>)
    end

    def foo<<todo method>>(z, &<blk>)
      0
    end

    <self>.include(<emptyTree>::<C AbstractMixin>)

    <runtime method definition of call>

    <runtime method definition of foo>

    <self>.private(:call, :foo)
  end
end
