method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:A>#make {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(A) = cast(<self>: NilClass, T.class_of(A));
    <cfgAlias>$5: T.class_of(Class)[T::Class[T.anything]] = alias <C Class>
    <block-pre-call-temp>$6: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Class)[T::Class[T.anything]].new()
    <selfRestore>$7: T.class_of(A) = <self>
    <unconditional> -> bb2

# backedges
# - bb7(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(A), <block-pre-call-temp>$6: Sorbet::Private::Static::Void, <selfRestore>$7: T.class_of(A)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$6: Sorbet::Private::Static::Void, <selfRestore>$7: T.class_of(A)):
    _cls: T::Class[T.untyped] = Solve<<block-pre-call-temp>$6, new>
    <self>: T.class_of(A) = <selfRestore>$7
    <cfgAlias>$18: T.class_of(Class)[T::Class[T.anything]] = alias <C Class>
    <cfgAlias>$20: T.class_of(A) = alias <C A>
    <block-pre-call-temp>$21: Sorbet::Private::Static::Void = <cfgAlias>$18: T.class_of(Class)[T::Class[T.anything]].new(<cfgAlias>$20: T.class_of(A))
    <selfRestore>$22: T.class_of(A) = <self>
    <unconditional> -> bb6

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=8](<self>: T.class_of(A), <block-pre-call-temp>$6: Sorbet::Private::Static::Void, <selfRestore>$7: T.class_of(A)):
    # outerLoops: 1
    <self>: T.class_of(A) = loadSelf(new)
    <cfgAlias>$12: T.class_of(T::Class) = alias <C Class>
    <cfgAlias>$14: T.class_of(Object) = alias <C Object>
    keep_for_ide$10: Runtime object representing type: T::Class[Object] = <cfgAlias>$12: T.class_of(T::Class).[](<cfgAlias>$14: T.class_of(Object))
    keep_for_ide$10: T.untyped = <keep-alive> keep_for_ide$10
    <castTemp>$15: T.class_of(A) = <self>
    <self>: T::Class[Object] = cast(<castTemp>$15: T.class_of(A), T::Class[Object]);
    <blockReturnTemp>$16: T.noreturn = blockreturn<new> <blockReturnTemp>$8: NilClass
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
# - bb9(rubyRegionId=2)
bb6[rubyRegionId=2, firstDead=-1](<self>: T.class_of(A), <block-pre-call-temp>$21: Sorbet::Private::Static::Void, <selfRestore>$22: T.class_of(A)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb9 : bb7)

# backedges
# - bb6(rubyRegionId=2)
bb7[rubyRegionId=0, firstDead=3](<block-pre-call-temp>$21: Sorbet::Private::Static::Void, <selfRestore>$22: T.class_of(A)):
    _cls: T.class_of(A) = Solve<<block-pre-call-temp>$21, new>
    <returnMethodTemp>$2: T.class_of(A) = _cls
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.class_of(A)
    <unconditional> -> bb1

# backedges
# - bb6(rubyRegionId=2)
bb9[rubyRegionId=2, firstDead=8](<self>: T.class_of(A), <block-pre-call-temp>$21: Sorbet::Private::Static::Void, <selfRestore>$22: T.class_of(A)):
    # outerLoops: 1
    <self>: T.class_of(A) = loadSelf(new)
    <cfgAlias>$27: T.class_of(T) = alias <C T>
    <cfgAlias>$29: T.class_of(A) = alias <C A>
    keep_for_ide$25: Runtime object representing type: T.class_of(A) = <cfgAlias>$27: T.class_of(T).class_of(<cfgAlias>$29: T.class_of(A))
    keep_for_ide$25: T.untyped = <keep-alive> keep_for_ide$25
    <castTemp>$30: T.class_of(A) = <self>
    <self>: T.class_of(A) = cast(<castTemp>$30: T.class_of(A), T.class_of(A));
    <blockReturnTemp>$31: T.noreturn = blockreturn<new> <blockReturnTemp>$23: NilClass
    <unconditional> -> bb6

}

method ::<Class:A>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(A) = cast(<self>: NilClass, T.class_of(A));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$7: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(A))
    <selfRestore>$8: T.class_of(A) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(A), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(A)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=6](<block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(A)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$7, sig>
    <self>: T.class_of(A) = <selfRestore>$8
    <cfgAlias>$15: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$17: T.class_of(T) = alias <C T>
    <statTemp>$12: T.class_of(A) = <self>: T.class_of(A).extend(<cfgAlias>$15: T.class_of(T::Sig))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=3](<self>: T.class_of(A), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(A)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <blockReturnTemp>$9: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.void()
    <blockReturnTemp>$11: T.noreturn = blockreturn<sig> <blockReturnTemp>$9: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

}

