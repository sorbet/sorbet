method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=5]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$6: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$8: T.class_of(A) = alias <C A>
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$8: T.class_of(A))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:A>#make {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(A) = cast(<self>: NilClass, T.class_of(A));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$8: T.class_of(T) = alias <C T>
    <cfgAlias>$10: T.class_of(A) = alias <C A>
    <statTemp>$6: Runtime object representing type: T.class_of(A) = <cfgAlias>$8: T.class_of(T).class_of(<cfgAlias>$10: T.class_of(A))
    <statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<statTemp>$6: Runtime object representing type: T.class_of(A))
    <cfgAlias>$13: T.class_of(Class) = alias <C Class>
    <cfgAlias>$15: T.class_of(A) = alias <C A>
    <block-pre-call-temp>$16: Sorbet::Private::Static::Void = <cfgAlias>$13: T.class_of(Class).new(<cfgAlias>$15: T.class_of(A))
    <selfRestore>$17: T.class_of(A) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(A), <block-pre-call-temp>$16: Sorbet::Private::Static::Void, <selfRestore>$17: T.class_of(A)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=4](<block-pre-call-temp>$16: Sorbet::Private::Static::Void, <selfRestore>$17: T.class_of(A)):
    <castTemp>$11: Class = Solve<<block-pre-call-temp>$16, new>
    cls: T.class_of(A) = cast(<castTemp>$11: Class, T.class_of(A));
    <returnMethodTemp>$2: T.class_of(A) = cls
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.class_of(A)
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=9](<self>: T.class_of(A), <block-pre-call-temp>$16: Sorbet::Private::Static::Void, <selfRestore>$17: T.class_of(A)):
    # outerLoops: 1
    <self>: T.class_of(A) = loadSelf(new)
    <cfgAlias>$23: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$26: T.class_of(T) = alias <C T>
    <cfgAlias>$28: T.class_of(A) = alias <C A>
    <statTemp>$24: Runtime object representing type: T.class_of(A) = <cfgAlias>$26: T.class_of(T).class_of(<cfgAlias>$28: T.class_of(A))
    <statTemp>$21: Sorbet::Private::Static::Void = <cfgAlias>$23: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<statTemp>$24: Runtime object representing type: T.class_of(A))
    <castTemp>$29: T.class_of(A) = <self>
    <self>: T.class_of(A) = cast(<castTemp>$29: T.class_of(A), T.class_of(A));
    <blockReturnTemp>$30: T.noreturn = blockreturn<new> <blockReturnTemp>$19: NilClass
    <unconditional> -> bb2

}

method ::<Class:A>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(A) = cast(<self>: NilClass, T.class_of(A));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$7: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(A))
    <selfRestore>$8: T.class_of(A) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(A), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(A)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=6](<block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(A)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$7, sig>
    <self>: T.class_of(A) = <selfRestore>$8
    <cfgAlias>$16: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$18: T.class_of(T) = alias <C T>
    <statTemp>$13: T.class_of(A) = <self>: T.class_of(A).extend(<cfgAlias>$16: T.class_of(T::Sig))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=3](<self>: T.class_of(A), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(A)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <blockReturnTemp>$10: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.void()
    <blockReturnTemp>$12: T.noreturn = blockreturn<sig> <blockReturnTemp>$10: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

}

