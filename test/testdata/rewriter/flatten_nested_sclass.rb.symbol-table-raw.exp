class <C <U <root>>> < <C <U Object>> ()
  class <S <C <U <root>>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> ()
    method <S <C <U <root>>> $1>#<N <U <static-init>> $CENSORED> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=3:1 end=34:4}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
  class <C <U A>> < <C <U Object>> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=3:1 end=3:8}
  class <S <C <U A>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=5:5 end=5:10}
    type-member(+) <S <C <U A>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U A>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=A) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=3:1 end=3:8}
    method <S <C <U A>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=3:1 end=9:4}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
    method <S <C <U A>> $1>#<U bar> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=6:7 end=6:14}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
    method <S <C <U A>> $1>#<U foo> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=4:3 end=4:15}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
  class <S <S <C <U A>> $1> $1>[<C <U <AttachedClass>>>] < <S <S <C <U Object>> $1> $1> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=5:5 end=5:10}
    type-member(+) <S <S <C <U A>> $1> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <S <C <U A>> $1> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {   klass = <S <C <U A>> $1>   targs = [     <C <U <AttachedClass>>> = A   ] }) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=5:5 end=5:10}
    method <S <S <C <U A>> $1> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=5:5 end=7:8}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
  class <C <U B>> < <C <U Object>> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=14:1 end=14:8}
    method <C <U B>>#<U foo> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=15:3 end=15:10}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
  class <S <C <U B>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=16:5 end=16:10}
    type-member(+) <S <C <U B>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U B>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=B) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=14:1 end=14:8}
    method <S <C <U B>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=14:1 end=20:4}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
    method <S <C <U B>> $1>#<U bar> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=17:7 end=17:14}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
  class <S <S <C <U B>> $1> $1>[<C <U <AttachedClass>>>] < <S <S <C <U Object>> $1> $1> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=16:5 end=16:10}
    type-member(+) <S <S <C <U B>> $1> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <S <C <U B>> $1> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {   klass = <S <C <U B>> $1>   targs = [     <C <U <AttachedClass>>> = B   ] }) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=16:5 end=16:10}
    method <S <S <C <U B>> $1> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=16:5 end=18:8}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
  class <C <U C>> < <C <U Object>> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=26:1 end=26:8}
  class <S <C <U C>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=28:5 end=28:10}
    type-member(+) <S <C <U C>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U C>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=C) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=26:1 end=26:8}
    method <S <C <U C>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=26:1 end=34:4}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
    method <S <C <U C>> $1>#<U foo> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=27:3 end=27:15}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
  class <S <S <C <U C>> $1> $1>[<C <U <AttachedClass>>>] < <S <S <C <U Object>> $1> $1> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=29:7 end=29:12}
    type-member(+) <S <S <C <U C>> $1> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <S <C <U C>> $1> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {   klass = <S <C <U C>> $1>   targs = [     <C <U <AttachedClass>>> = C   ] }) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=28:5 end=28:10}
    method <S <S <C <U C>> $1> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=28:5 end=32:8}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
    method <S <S <C <U C>> $1> $1>#<U bar> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=30:9 end=30:16}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}
  class <S <S <S <C <U C>> $1> $1> $1>[<C <U <AttachedClass>>>] < <S <S <S <C <U Object>> $1> $1> $1> () @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=29:7 end=29:12}
    type-member(+) <S <S <S <C <U C>> $1> $1> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <S <S <C <U C>> $1> $1> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {   klass = <S <S <C <U C>> $1> $1>   targs = [     <C <U <AttachedClass>>> = AppliedType {         klass = <S <C <U C>> $1>         targs = [           <C <U <AttachedClass>>> = C         ]       }   ] }) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=29:7 end=29:12}
    method <S <S <S <C <U C>> $1> $1> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=29:7 end=31:10}
      argument <blk><block> @ Loc {file=test/testdata/rewriter/flatten_nested_sclass.rb start=??? end=???}

