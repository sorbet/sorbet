begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::A)
          <emptyTree>
        end
        ::A.new().outer_method()
        ::A.new().inner_method()
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::B)
          <emptyTree>
        end
        b = ::B.new()
        b.outer_method()
        b.inner_method()
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::C)
          <emptyTree>
        end
        ::C.outer_method()
        ::C.new().inner_method()
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::D)
          <emptyTree>
        end
        ::D.outer_method()
        ::D.inner_method()
        <emptyTree>
      end
    end
  end
  class ::A<<C A>> < (::<todo sym>)
    def outer_method(<blk>)
      :inner_method
    end

    def inner_method(<blk>)
      <self>.puts(<self>)
    end

    def self.<static-init>(<blk>)
      :outer_method
    end
  end
  class ::B<<C B>> < (::<todo sym>)
    def outer_method(<blk>)
      :inner_method
    end

    def inner_method(<blk>)
      <self>.puts(<self>)
    end

    def self.<static-init>(<blk>)
      :outer_method
    end
  end
  class ::C<<C C>> < (::<todo sym>)
    def self.outer_method(<blk>)
      :inner_method
    end

    def inner_method(<blk>)
      <self>.puts(<self>)
    end

    def self.<static-init>(<blk>)
      :outer_method
    end
  end
  class ::D<<C D>> < (::<todo sym>)
    def self.outer_method(<blk>)
      :inner_method
    end

    def self.inner_method(<blk>)
      <self>.puts(<self>)
    end

    def self.<static-init>(<blk>)
      :outer_method
    end
  end
  <emptyTree>
end
