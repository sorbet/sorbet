class <emptyTree><<C <root>>> < (::<todo sym>)
  def junk<<todo method>>(&<blk>)
    <emptyTree>
  end

  class <emptyTree>::<C MyTest><<C <todo sym>>> < (::<todo sym>)
    def outside_method<<todo method>>(&<blk>)
      <emptyTree>
    end

    def <it 'works outside'><<todo method>>(&<blk>)
      <self>.outside_method()
    end

    def <it 'allows constants inside of IT'><<todo method>>(&<blk>)
      ::Module.const_set(:CONST, 10)
    end

    def <it 'allows let-ed constants inside of IT'><<todo method>>(&<blk>)
      ::Module.const_set(:C2, <cast:let>(10, <todo sym>, <emptyTree>::<C Integer>))
    end

    def <it 'allows path constants inside of IT'><<todo method>>(&<blk>)
      <emptyTree>::<C C3>.new()
    end

    def <it '::<Magic>.<string-interpolate>("finds errors in the test name: ", <self>.bad_variable())'><<todo method>>(&<blk>)
      <emptyTree>
    end

    def instance_helper<<todo method>>(&<blk>)
      <emptyTree>
    end

    def <before><<todo method>>(&<blk>)
      begin
        @foo = <cast:let>(3, <todo sym>, <emptyTree>::<C Integer>)
        <self>.instance_helper()
      end
    end

    def <after><<todo method>>(&<blk>)
      begin
        @foo = nil
        <self>.instance_helper()
      end
    end

    def <it 'can read foo'><<todo method>>(&<blk>)
      begin
        <cast:assert_type!>(@foo, <todo sym>, <emptyTree>::<C Integer>)
        <self>.instance_helper()
      end
    end

    def self.random_method<<todo method>>(&<blk>)
      <emptyTree>
    end

    def self.it<<todo method>>(*args, &<blk>)
      <emptyTree>
    end

    def <it><<todo method>>(&<blk>)
      <self>.puts("anonymous it blocks")
    end

    <runtime method definition of outside_method>

    begin
      <emptyTree>::<C CONST> = ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
      <emptyTree>
    end

    begin
      <emptyTree>::<C C2> = <cast:let>(::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented"), <todo sym>, <emptyTree>::<C Integer>)
      <emptyTree>
    end

    begin
      <emptyTree>::<C C3> = <emptyTree>::<C Mod>::<C C>
      <emptyTree>
    end

    begin
      ::<Magic>.<string-interpolate>("finds errors in the test name: ", <self>.bad_variable())
      <emptyTree>
    end

    class <emptyTree>::<C <describe 'some inner tests'>><<C <todo sym>>> < (<self>)
      def inside_method<<todo method>>(&<blk>)
        <emptyTree>
      end

      def <it 'works inside'><<todo method>>(&<blk>)
        begin
          <self>.outside_method()
          <self>.inside_method()
        end
      end

      <runtime method definition of inside_method>
    end

    <runtime method definition of instance_helper>

    <runtime method definition of self.random_method>

    <self>.random_method() do ||
      @random_method_ivar = <cast:let>(3, <todo sym>, <emptyTree>::<C Integer>)
    end

    class <emptyTree>::<C <describe 'Object'>><<C <todo sym>>> < (<self>)
      def <it 'Object'><<todo method>>(&<blk>)
        <emptyTree>
      end

      def <it 'Object'><<todo method>>(&<blk>)
        <emptyTree>
      end

      begin
        <emptyTree>::<C Object>
        <emptyTree>
      end

      begin
        <emptyTree>::<C Object>
        <emptyTree>
      end
    end

    <runtime method definition of self.it>

    <self>.it("ignores methods without a block")

    <self>.junk().it("ignores non-self calls") do ||
      <self>.junk()
    end

    class <emptyTree>::<C <describe 'a non-ideal situation'>><<C <todo sym>>> < (<self>)
      def <it 'contains nested describes'><<todo method>>(&<blk>)
        <emptyTree>
      end

      class <emptyTree>::<C <describe 'nobody should write this but we should still parse it'>><<C <todo sym>>> < (<self>)
      end
    end
  end

  class <emptyTree>::<C <describe 'extends T::Sig'>><<C <todo sym>>> < (<self>)
    <self>.sig() do ||
      <self>.returns(<emptyTree>::<C Integer>)
    end

    def example<<todo method>>(&<blk>)
      0
    end

    def <it 'calls example'><<todo method>>(&<blk>)
      begin
        res = <self>.example()
        <emptyTree>::<C T>.reveal_type(res)
      end
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <runtime method definition of example>
  end

  <runtime method definition of junk>

  module <emptyTree>::<C Mod><<C <todo sym>>> < ()
    class <emptyTree>::<C C><<C <todo sym>>> < (::<todo sym>)
    end
  end
end
