class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C Test><<C <todo sym>>> < (::<todo sym>)
    def self.test_each<<todo method>>(arg, &blk)
      <emptyTree>
    end

    def self.it<<todo method>>(name, &blk)
      <emptyTree>
    end

    def self.describe<<todo method>>(name, &blk)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <runtime method definition of self.test_each>

    <runtime method definition of self.it>

    <runtime method definition of self.describe>
  end

  class <emptyTree>::<C Foo><<C <todo sym>>> < (<emptyTree>::<C Test>)
    def <it 'it block 1'><<todo method>>(&<blk>)
      [[1, 2], [3, 4]].each() do |<destructure>$2|
        <emptyTree>
      end
    end

    def <it 'it block 2'><<todo method>>(&<blk>)
      [[1, 2], [3, 4]].each() do |<destructure>$2|
        <emptyTree>
      end
    end

    <self>.test_each([[1, 2], [3, 4]]) do |<destructure>$2|
      begin
        <runtime method definition of <it 'it block 1'>>
        <runtime method definition of <it 'it block 2'>>
      end
    end
  end
end
