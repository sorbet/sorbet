class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C RSpecLetSubjectTest><<C <todo sym>>> < (::<todo sym>)
    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    class <emptyTree>::<C <describe 'let blocks'>><<C <todo sym>>> < (<self>)
      def helper_method<<todo method>>(&<blk>)
        "hello world"
      end

      ::Sorbet::Private::Static.sig(<self>) do ||
        <self>.returns(<emptyTree>::<C String>)
      end

      def typed_helper<<todo method>>(&<blk>)
        "typed string"
      end

      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.void()
      end

      def <it 'can use let methods'><<todo method>>(&<blk>)
        begin
          result = <self>.helper_method()
          <self>.puts(result)
          typed_result = <self>.typed_helper()
          <emptyTree>::<C T>.reveal_type(typed_result)
          <self>.puts(typed_result)
        end
      end

      <runtime method definition of helper_method>

      <runtime method definition of typed_helper>

      begin
        "can use let methods"
        <runtime method definition of <it 'can use let methods'>>
      end
    end

    class <emptyTree>::<C <describe 'let! blocks'>><<C <todo sym>>> < (<self>)
      def eager_helper<<todo method>>(&<blk>)
        "evaluated immediately"
      end

      ::Sorbet::Private::Static.sig(<self>) do ||
        <self>.returns(<emptyTree>::<C Integer>)
      end

      def eager_number<<todo method>>(&<blk>)
        42
      end

      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.void()
      end

      def <it 'can use let! methods'><<todo method>>(&<blk>)
        begin
          result = <self>.eager_helper()
          <self>.puts(result)
          number = <self>.eager_number()
          <emptyTree>::<C T>.reveal_type(number)
          <self>.puts(number)
        end
      end

      <runtime method definition of eager_helper>

      <runtime method definition of eager_number>

      begin
        "can use let! methods"
        <runtime method definition of <it 'can use let! methods'>>
      end
    end

    class <emptyTree>::<C <describe 'subject blocks'>><<C <todo sym>>> < (<self>)
      def my_subject<<todo method>>(&<blk>)
        "subject value"
      end

      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.void()
      end

      def <it 'can use named subject'><<todo method>>(&<blk>)
        begin
          result = <self>.my_subject()
          <self>.puts(result)
        end
      end

      <runtime method definition of my_subject>

      begin
        "can use named subject"
        <runtime method definition of <it 'can use named subject'>>
      end

      class <emptyTree>::<C <describe 'with anonymous subject'>><<C <todo sym>>> < (<self>)
        def subject<<todo method>>(&<blk>)
          "anonymous subject"
        end

        ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
          <self>.void()
        end

        def <it 'can use anonymous subject'><<todo method>>(&<blk>)
          begin
            result = <self>.subject()
            <self>.puts(result)
          end
        end

        <runtime method definition of subject>

        begin
          "can use anonymous subject"
          <runtime method definition of <it 'can use anonymous subject'>>
        end
      end
    end

    class <emptyTree>::<C <describe 'mixed let variants'>><<C <todo sym>>> < (<self>)
      def regular_let<<todo method>>(&<blk>)
        "regular"
      end

      def eager_let<<todo method>>(&<blk>)
        "eager"
      end

      def main_subject<<todo method>>(&<blk>)
        "subject"
      end

      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.void()
      end

      def <it 'can use all variants together'><<todo method>>(&<blk>)
        begin
          <self>.puts(<self>.regular_let())
          <self>.puts(<self>.eager_let())
          <self>.puts(<self>.main_subject())
        end
      end

      <runtime method definition of regular_let>

      <runtime method definition of eager_let>

      <runtime method definition of main_subject>

      begin
        "can use all variants together"
        <runtime method definition of <it 'can use all variants together'>>
      end
    end
  end
end
