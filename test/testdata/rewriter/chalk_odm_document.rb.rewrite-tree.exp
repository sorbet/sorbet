class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C Chalk>::<C ODM>::<C Document><<C <todo sym>>> < (::<todo sym>)
    <self>.include(<emptyTree>::<C T>::<C Props>)

    <self>.include(<emptyTree>::<C T>::<C Props>::<C Serializable>)

    <self>.include(<emptyTree>::<C T>::<C Props>::<C WeakConstructor>)

    <self>.extend(<emptyTree>::<C T>::<C Helpers>)

    <self>.abstract!()
  end

  class <emptyTree>::<C MyParentDocument><<C <todo sym>>> < (<emptyTree>::<C Chalk>::<C ODM>::<C Document>)
    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(<emptyTree>::<C String>)
    end

    def my_parent_method<<todo method>>(&<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params(:arg0, <emptyTree>::<C String>).returns(<emptyTree>::<C String>)
    end

    def my_parent_method=<<todo method>>(arg0, &<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    <self>.prop(:my_parent_method, <emptyTree>::<C String>, :without_accessors, true)

    <runtime method definition of my_parent_method>

    <runtime method definition of my_parent_method=>
  end

  class <emptyTree>::<C MyChildDocument><<C <todo sym>>> < (<emptyTree>::<C MyParentDocument>)
    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(<emptyTree>::<C Integer>)
    end

    def my_child_method<<todo method>>(&<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params(:arg0, <emptyTree>::<C Integer>).returns(<emptyTree>::<C Integer>)
    end

    def my_child_method=<<todo method>>(arg0, &<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    <self>.prop(:my_child_method, <emptyTree>::<C Integer>, :without_accessors, true)

    <runtime method definition of my_child_method>

    <runtime method definition of my_child_method=>
  end

  <emptyTree>::<C MyParentDocument>.new()

  <emptyTree>::<C MyChildDocument>.new()

  <self>.p(<emptyTree>::<C MyParentDocument>.new(:my_parent_method, "hello").my_parent_method())

  <self>.p(<emptyTree>::<C MyChildDocument>.new(:my_child_method, 42).my_child_method())
end
