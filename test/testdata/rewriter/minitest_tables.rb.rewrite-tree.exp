class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C Parent><<C <todo sym>>> < (::<todo sym>)
    def foo<<todo method>>(&<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.keep_def(<self>, :foo, :normal)
  end

  class <emptyTree>::<C Child><<C <todo sym>>> < (<emptyTree>::<C Parent>)
  end

  class <emptyTree>::<C MyTest><<C <todo sym>>> < (::<todo sym>)
    def outside_method<<todo method>>(&<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.type_parameters(:U).params(:arg, <emptyTree>::<C T>::<C Enumerable>.[](<emptyTree>::<C T>.type_parameter(:U)), :blk, <emptyTree>::<C T>.proc().params(:arg0, <emptyTree>::<C T>.type_parameter(:U)).void()).void()
    end

    def self.test_each<<todo method>>(arg, &blk)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.type_parameters(:K, :V).params(:arg, <emptyTree>::<C T>::<C Hash>.[](<emptyTree>::<C T>.type_parameter(:K), <emptyTree>::<C T>.type_parameter(:V)), :blk, <emptyTree>::<C T>.proc().params(:arg0, <emptyTree>::<C T>.type_parameter(:K), :arg1, <emptyTree>::<C T>.type_parameter(:V)).void()).void()
    end

    def self.test_each_hash<<todo method>>(arg, &blk)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.params(:name, <emptyTree>::<C String>, :blk, <emptyTree>::<C T>.proc().void()).void()
    end

    def self.it<<todo method>>(name, &blk)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it 'works with instance methods'><<todo method>>(&<blk>)
      [<emptyTree>::<C Parent>.new(), <emptyTree>::<C Child>.new()].each() do |value|
        begin
          <self>.puts(value.foo())
          <self>.outside_method()
          <emptyTree>::<C T>.reveal_type(value)
        end
      end
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it 'succeeds with a constant list'><<todo method>>(&<blk>)
      <emptyTree>::<C CONST_LIST>.each() do |value|
        begin
          <self>.puts(value.foo())
          <emptyTree>::<C T>.reveal_type(value)
        end
      end
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it 'succeeds with a typed constant list'><<todo method>>(&<blk>)
      <emptyTree>::<C ANOTHER_CONST_LIST>.each() do |value|
        begin
          <self>.puts(value.foo())
          <emptyTree>::<C T>.reveal_type(value)
        end
      end
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it 'succeed with a local variable but cannot type it'><<todo method>>(&<blk>)
      ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented").each() do |value|
        begin
          <self>.puts(value.foo())
          <emptyTree>::<C T>.reveal_type(value)
        end
      end
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it 'fails with non-it statements'><<todo method>>(&<blk>)
      <emptyTree>::<C CONST_LIST>.each() do |value|
        <self>.puts(x)
      end
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it 'handles lists with several types'><<todo method>>(&<blk>)
      ["foo", 5, {:x => false}].each() do |v|
        <emptyTree>::<C T>.reveal_type(v)
      end
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it 'blocks get padded with NilClass arguments'><<todo method>>(&<blk>)
      [1, 2, 3].each() do |k, v|
        begin
          <emptyTree>::<C T>.reveal_type(k)
          <emptyTree>::<C T>.reveal_type(v)
        end
      end
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it 'multiple it blocks are ok with multiple arguments'><<todo method>>(&<blk>)
      [1, 2, 3].each() do |k, v|
        begin
          <emptyTree>::<C T>.reveal_type(k)
          <emptyTree>::<C T>.reveal_type(v)
        end
      end
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it 'destructured blocks get padded with NilClass arguments'><<todo method>>(&<blk>)
      [1, 2, 3].each() do |<destructure>$4|
        begin
          begin
            <assignTemp>$5 = <destructure>$4
            <assignTemp>$6 = ::<Magic>.<expand-splat>(<assignTemp>$5, 2, 0)
            k = <assignTemp>$6.[](0)
            v = <assignTemp>$6.[](1)
            <assignTemp>$5
          end
          begin
            <emptyTree>::<C T>.reveal_type(k)
            <emptyTree>::<C T>.reveal_type(v)
          end
        end
      end
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it 'multiple it blocks are ok with multiple destructured arguments'><<todo method>>(&<blk>)
      [1, 2, 3].each() do |<destructure>$4|
        begin
          begin
            <assignTemp>$5 = <destructure>$4
            <assignTemp>$6 = ::<Magic>.<expand-splat>(<assignTemp>$5, 2, 0)
            k = <assignTemp>$6.[](0)
            v = <assignTemp>$6.[](1)
            <assignTemp>$5
          end
          begin
            <emptyTree>::<C T>.reveal_type(k)
            <emptyTree>::<C T>.reveal_type(v)
          end
        end
      end
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it 'handles mixed destructuring and positional arguments'><<todo method>>(&<blk>)
      [[1, ["hi", false]], [2, ["bye", true]]].each() do |i, <destructure>$7, <destructure>$10|
        begin
          begin
            <assignTemp>$8 = <destructure>$7
            <assignTemp>$9 = ::<Magic>.<expand-splat>(<assignTemp>$8, 2, 0)
            s = <assignTemp>$9.[](0)
            b = <assignTemp>$9.[](1)
            <assignTemp>$8
          end
          begin
            <assignTemp>$11 = <destructure>$10
            <assignTemp>$12 = ::<Magic>.<expand-splat>(<assignTemp>$11, 2, 0)
            x = <assignTemp>$12.[](0)
            y = <assignTemp>$12.[](1)
            <assignTemp>$11
          end
          begin
            <emptyTree>::<C T>.reveal_type(i)
            <emptyTree>::<C T>.reveal_type(s)
            <emptyTree>::<C T>.reveal_type(b)
            <emptyTree>::<C T>.reveal_type(x)
            <emptyTree>::<C T>.reveal_type(y)
          end
        end
      end
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it 'multiple it blocks are ok with mixed argument styles'><<todo method>>(&<blk>)
      [[1, ["hi", false]], [2, ["bye", true]]].each() do |i, <destructure>$7, <destructure>$10|
        begin
          begin
            <assignTemp>$8 = <destructure>$7
            <assignTemp>$9 = ::<Magic>.<expand-splat>(<assignTemp>$8, 2, 0)
            s = <assignTemp>$9.[](0)
            b = <assignTemp>$9.[](1)
            <assignTemp>$8
          end
          begin
            <assignTemp>$11 = <destructure>$10
            <assignTemp>$12 = ::<Magic>.<expand-splat>(<assignTemp>$11, 2, 0)
            x = <assignTemp>$12.[](0)
            y = <assignTemp>$12.[](1)
            <assignTemp>$11
          end
          begin
            <emptyTree>::<C T>.reveal_type(i)
            <emptyTree>::<C T>.reveal_type(s)
            <emptyTree>::<C T>.reveal_type(b)
          end
        end
      end
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it 'handles lists with several types'><<todo method>>(&<blk>)
      {:foo => 1, :bar => 2, :baz => 3}.each() do |k, v|
        begin
          <emptyTree>::<C T>.reveal_type(k)
          <emptyTree>::<C T>.reveal_type(v)
        end
      end
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.void()
    end

    def <it 'fails to typecheck with non-hash arguments to `test_each-hash`'><<todo method>>(&<blk>)
      [1, 2, 3].each() do |k, v|
        <self>.puts(k, v)
      end
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    ::Sorbet::Private::Static.keep_def(<self>, :outside_method, :normal)

    ::Sorbet::Private::Static.keep_self_def(<self>, :test_each, :normal)

    ::Sorbet::Private::Static.keep_self_def(<self>, :test_each_hash, :normal)

    ::Sorbet::Private::Static.keep_self_def(<self>, :it, :normal)

    <self>.test_each([<emptyTree>::<C Parent>.new(), <emptyTree>::<C Child>.new()]) do |value|
      ::Sorbet::Private::Static.keep_def(<self>, :"<it \'works with instance methods\'>", :normal)
    end

    <emptyTree>::<C CONST_LIST> = [<emptyTree>::<C Parent>.new(), <emptyTree>::<C Child>.new()]

    <self>.test_each(<emptyTree>::<C CONST_LIST>) do |value|
      ::Sorbet::Private::Static.keep_def(<self>, :"<it \'succeeds with a constant list\'>", :normal)
    end

    <emptyTree>::<C ANOTHER_CONST_LIST> = <emptyTree>::<C T>.let([<emptyTree>::<C Parent>.new(), <emptyTree>::<C Child>.new()], <emptyTree>::<C T>::<C Array>.[](<emptyTree>::<C Parent>))

    <self>.test_each(<emptyTree>::<C ANOTHER_CONST_LIST>) do |value|
      ::Sorbet::Private::Static.keep_def(<self>, :"<it \'succeeds with a typed constant list\'>", :normal)
    end

    local = [<emptyTree>::<C Parent>.new(), <emptyTree>::<C Child>.new()]

    <self>.test_each(local) do |value|
      ::Sorbet::Private::Static.keep_def(<self>, :"<it \'succeed with a local variable but cannot type it\'>", :normal)
    end

    <self>.test_each([<emptyTree>::<C Parent>.new(), <emptyTree>::<C Child>.new()]) do |x|
      y = x
    end

    <self>.test_each_hash({}) do |k, v|
      y = k.+(v)
    end

    <self>.test_each(<emptyTree>::<C CONST_LIST>) do |value|
      begin
        x = value.foo()
        ::Sorbet::Private::Static.keep_def(<self>, :"<it \'fails with non-it statements\'>", :normal)
      end
    end

    <self>.test_each(["foo", 5, {:x => false}]) do |v|
      ::Sorbet::Private::Static.keep_def(<self>, :"<it \'handles lists with several types\'>", :normal)
    end

    <self>.test_each([1, 2, 3]) do |k, v|
      begin
        ::Sorbet::Private::Static.keep_def(<self>, :"<it \'blocks get padded with NilClass arguments\'>", :normal)
        ::Sorbet::Private::Static.keep_def(<self>, :"<it \'multiple it blocks are ok with multiple arguments\'>", :normal)
      end
    end

    <self>.test_each([1, 2, 3]) do |<destructure>$4|
      begin
        ::Sorbet::Private::Static.keep_def(<self>, :"<it \'destructured blocks get padded with NilClass arguments\'>", :normal)
        ::Sorbet::Private::Static.keep_def(<self>, :"<it \'multiple it blocks are ok with multiple destructured arguments\'>", :normal)
      end
    end

    <self>.test_each([[1, ["hi", false]], [2, ["bye", true]]]) do |i, <destructure>$7, <destructure>$10|
      begin
        ::Sorbet::Private::Static.keep_def(<self>, :"<it \'handles mixed destructuring and positional arguments\'>", :normal)
        ::Sorbet::Private::Static.keep_def(<self>, :"<it \'multiple it blocks are ok with mixed argument styles\'>", :normal)
      end
    end

    <self>.test_each([1, 2, 3]) do ||
      <self>.it("does not handle zero argument blocks") do ||
        <emptyTree>
      end
    end

    <self>.test_each_hash({:foo => 1, :bar => 2, :baz => 3}) do |k, v|
      ::Sorbet::Private::Static.keep_def(<self>, :"<it \'handles lists with several types\'>", :normal)
    end

    <self>.test_each_hash([1, 2, 3]) do |k, v|
      ::Sorbet::Private::Static.keep_def(<self>, :"<it \'fails to typecheck with non-hash arguments to `test_each-hash`\'>", :normal)
    end

    <self>.test_each_hash({:foo => 1, :bar => 2}) do |x|
      <self>.it("does not handle more than one argument") do ||
        <emptyTree>
      end
    end
  end
end
