class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C ClassA><<C <todo sym>>> < (::<todo sym>)
    def <it 'first_test'><<todo method>>(&<blk>)
      <emptyTree>
    end

    class <emptyTree>::<C <describe 'BAR'>><<C <todo sym>>> < (<self>)
    end

    class <emptyTree>::<C <describe 'OUTER'>><<C <todo sym>>> < (<self>)
      def <it 'second_test'><<todo method>>(&<blk>)
        <emptyTree>
      end

      class <emptyTree>::<C <describe 'QUX'>><<C <todo sym>>> < (<self>)
      end
    end
  end

  module <emptyTree>::<C ModuleB><<C <todo sym>>> < ()
    def <it 'first_test'><<todo method>>(&<blk>)
      <emptyTree>
    end

    class <emptyTree>::<C <describe 'BAR'>><<C <todo sym>>> < (::<todo sym>)
    end

    class <emptyTree>::<C <describe 'OUTER'>><<C <todo sym>>> < (::<todo sym>)
      def <it 'second_test'><<todo method>>(&<blk>)
        <emptyTree>
      end

      class <emptyTree>::<C <describe 'QUX'>><<C <todo sym>>> < (<self>)
      end
    end
  end
end
