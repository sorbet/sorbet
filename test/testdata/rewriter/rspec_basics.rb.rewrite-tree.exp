class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C RSpecBasicsTest><<C <todo sym>>> < (::<todo sym>)
    class <emptyTree>::<C <describe 'traditional describe syntax'>><<C <todo sym>>> < (<self>)
      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.void()
      end

      def <it 'still works without RSpec receiver'><<todo method>>(&<blk>)
        <self>.puts("traditional test")
      end

      "still works without RSpec receiver"

      <runtime method definition of <it 'still works without RSpec receiver'>>
    end

    <self>.context("using context instead of describe") do ||
      begin
        <self>.it("context should work like describe") do ||
          <self>.puts("context test")
        end
        <self>.context("nested contexts") do ||
          <self>.it("should handle nesting") do ||
            <self>.puts("nested context test")
          end
        end
      end
    end

    class <emptyTree>::<C <describe 'pending tests with xit'>><<C <todo sym>>> < (<self>)
      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.void()
      end

      def <it 'regular test'><<todo method>>(&<blk>)
        <self>.puts("regular test runs")
      end

      begin
        "regular test"
        <runtime method definition of <it 'regular test'>>
      end

      <self>.xit("pending test with description") do ||
        <self>.puts("this should be skipped")
      end
    end

    class <emptyTree>::<C <describe 'mixed syntax'>><<C <todo sym>>> < (<self>)
      <self>.context("inside describe") do ||
        begin
          <self>.it("regular it block") do ||
            <self>.puts("mixed syntax test")
          end
          <self>.xit("pending in context") do ||
            <self>.puts("pending test")
          end
        end
      end

      class <emptyTree>::<C <describe 'nested describe'>><<C <todo sym>>> < (<self>)
        ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
          <self>.void()
        end

        def <it 'should work fine'><<todo method>>(&<blk>)
          <self>.puts("nested traditional in describe")
        end

        "should work fine"

        <runtime method definition of <it 'should work fine'>>
      end
    end

    module <emptyTree>::<C Foo><<C <todo sym>>> < ()
      class <emptyTree>::<C Baz><<C <todo sym>>> < (::<todo sym>)
      end
    end

    module <emptyTree>::<C Bar><<C <todo sym>>> < ()
      class <emptyTree>::<C Baz><<C <todo sym>>> < (::<todo sym>)
      end
    end

    module <emptyTree>::<C RSpec><<C <todo sym>>> < ()
      module <emptyTree>::<C Core><<C <todo sym>>> < ()
        class <emptyTree>::<C ExampleGroup><<C <todo sym>>> < (::<todo sym>)
        end
      end
    end

    class <emptyTree>::<C <describe 'Baz'>><<C <todo sym>>> < (<self>)
      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.void()
      end

      def <it 'should work fine'><<todo method>>(&<blk>)
        <self>.puts("nested traditional in describe")
      end

      "should work fine"

      <runtime method definition of <it 'should work fine'>>
    end

    <emptyTree>::<C RSpec>.describe(<emptyTree>::<C Bar>::<C Baz>) do ||
      <self>.it("should work fine") do ||
        <self>.puts("nested traditional in describe")
      end
    end
  end
end
