begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        <emptyTree>
        ::Sorbet::Private::Static.keep_for_ide(::A)
        <emptyTree>
      end
    end
  end
  class ::A<<C A>> < (::<todo sym>)
    def self.make(<blk>)
      cls = ::Class.new(::A) do ||
        begin
          <cast:<synthetic bind>>(<self>, AppliedType {
            klass = <S <C <U A>> $1>
            targs = [
              <C <U <AttachedClass>>> = A
            ]
          }, ::T.class_of(::A))
          <emptyTree>
        end
      end
    end

    def self.<static-init>(<blk>)
      begin
        ::Sorbet::Private::Static.sig(<self>) do ||
          <self>.void()
        end
        <self>.extend(::T::Sig)
        <runtime method definition of self.make>
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
