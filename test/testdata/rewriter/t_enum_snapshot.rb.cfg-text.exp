method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=26]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$7: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$9: T.class_of(MyEnum) = alias <C MyEnum>
    <statTemp>$5: Sorbet::Private::Static::Void = <cfgAlias>$7: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$9: T.class_of(MyEnum))
    <cfgAlias>$12: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$14: T.class_of(T::Enum) = alias <C Enum>
    <cfgAlias>$16: T.class_of(T) = alias <C T>
    <statTemp>$10: Sorbet::Private::Static::Void = <cfgAlias>$12: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$14: T.class_of(T::Enum))
    <cfgAlias>$21: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$23: T.class_of(NotAnEnum) = alias <C NotAnEnum>
    <statTemp>$19: Sorbet::Private::Static::Void = <cfgAlias>$21: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$23: T.class_of(NotAnEnum))
    <cfgAlias>$28: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$30: T.class_of(EnumsDoEnum) = alias <C EnumsDoEnum>
    <statTemp>$26: Sorbet::Private::Static::Void = <cfgAlias>$28: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$30: T.class_of(EnumsDoEnum))
    <cfgAlias>$33: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$35: T.class_of(T::Enum) = alias <C Enum>
    <cfgAlias>$37: T.class_of(T) = alias <C T>
    <statTemp>$31: Sorbet::Private::Static::Void = <cfgAlias>$33: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$35: T.class_of(T::Enum))
    <cfgAlias>$42: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$44: T.class_of(BadConsts) = alias <C BadConsts>
    <statTemp>$40: Sorbet::Private::Static::Void = <cfgAlias>$42: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$44: T.class_of(BadConsts))
    <cfgAlias>$47: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$49: T.class_of(T::Enum) = alias <C Enum>
    <cfgAlias>$51: T.class_of(T) = alias <C T>
    <statTemp>$45: Sorbet::Private::Static::Void = <cfgAlias>$47: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$49: T.class_of(T::Enum))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:MyEnum>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <C X>$29: MyEnum::X = alias <C X>
    <C Y>$48: MyEnum::Y = alias <C Y>
    <C Z>$68: MyEnum::Z = alias <C Z>
    <self>: T.class_of(MyEnum) = cast(<self>: NilClass, T.class_of(MyEnum));
    <cfgAlias>$6: T.class_of(T::Helpers) = alias <C Helpers>
    <statTemp>$3: T.class_of(MyEnum) = <self>: T.class_of(MyEnum).extend(<cfgAlias>$6: T.class_of(T::Helpers))
    <statTemp>$7: Sorbet::Private::Static::Void = <self>: T.class_of(MyEnum).abstract!()
    <statTemp>$9: Sorbet::Private::Static::Void = <self>: T.class_of(MyEnum).sealed!()
    <block-pre-call-temp>$13: Sorbet::Private::Static::Void = <self>: T.class_of(MyEnum).enums()
    <selfRestore>$14: T.class_of(MyEnum) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(MyEnum), <block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: T.class_of(MyEnum), <C X>$29: MyEnum::X, <C Y>$48: MyEnum::Y, <C Z>$68: MyEnum::Z):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=2](<block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: T.class_of(MyEnum)):
    <statTemp>$11: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$13, enums>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=40](<self>: T.class_of(MyEnum), <block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: T.class_of(MyEnum), <C X>$29: MyEnum::X, <C Y>$48: MyEnum::Y, <C Z>$68: MyEnum::Z):
    # outerLoops: 1
    <self>: T.class_of(MyEnum) = loadSelf(enums)
    <cfgAlias>$20: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$22: T.class_of(MyEnum::X) = alias <C X$1>
    <statTemp>$18: Sorbet::Private::Static::Void = <cfgAlias>$20: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$22: T.class_of(MyEnum::X))
    <cfgAlias>$25: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$27: T.class_of(MyEnum) = alias <C MyEnum>
    <statTemp>$23: Sorbet::Private::Static::Void = <cfgAlias>$25: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$27: T.class_of(MyEnum))
    <cfgAlias>$31: T.class_of(MyEnum::X) = alias <C X$1>
    keep_for_ide$30: T.class_of(MyEnum::X) = <cfgAlias>$31
    keep_for_ide$30: T.untyped = <keep-alive> keep_for_ide$30
    <cfgAlias>$34: T.class_of(MyEnum::X) = alias <C X$1>
    <castTemp>$32: MyEnum::X = <cfgAlias>$34: T.class_of(MyEnum::X).new()
    <C X>$29: MyEnum::X = <castTemp>$32
    <cfgAlias>$39: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$41: T.class_of(MyEnum::Y) = alias <C Y$1>
    <statTemp>$37: Sorbet::Private::Static::Void = <cfgAlias>$39: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$41: T.class_of(MyEnum::Y))
    <cfgAlias>$44: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$46: T.class_of(MyEnum) = alias <C MyEnum>
    <statTemp>$42: Sorbet::Private::Static::Void = <cfgAlias>$44: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$46: T.class_of(MyEnum))
    <cfgAlias>$50: T.class_of(MyEnum::Y) = alias <C Y$1>
    keep_for_ide$49: T.class_of(MyEnum::Y) = <cfgAlias>$50
    keep_for_ide$49: T.untyped = <keep-alive> keep_for_ide$49
    <cfgAlias>$53: T.class_of(MyEnum::Y) = alias <C Y$1>
    <statTemp>$54: String("y") = "y"
    <castTemp>$51: MyEnum::Y = <cfgAlias>$53: T.class_of(MyEnum::Y).new(<statTemp>$54: String("y"))
    <C Y>$48: MyEnum::Y = <castTemp>$51
    <cfgAlias>$59: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$61: T.class_of(MyEnum::Z) = alias <C Z$1>
    <statTemp>$57: Sorbet::Private::Static::Void = <cfgAlias>$59: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$61: T.class_of(MyEnum::Z))
    <cfgAlias>$64: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$66: T.class_of(MyEnum) = alias <C MyEnum>
    <statTemp>$62: Sorbet::Private::Static::Void = <cfgAlias>$64: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$66: T.class_of(MyEnum))
    <cfgAlias>$70: T.class_of(MyEnum::Z) = alias <C Z$1>
    keep_for_ide$69: T.class_of(MyEnum::Z) = <cfgAlias>$70
    keep_for_ide$69: T.untyped = <keep-alive> keep_for_ide$69
    <cfgAlias>$73: T.class_of(MyEnum::Z) = alias <C Z$1>
    <castTemp>$71: MyEnum::Z = <cfgAlias>$73: T.class_of(MyEnum::Z).new()
    <C Z>$68: MyEnum::Z = <castTemp>$71
    <blockReturnTemp>$15: NilClass = nil
    <blockReturnTemp>$74: T.noreturn = blockreturn<enums> <blockReturnTemp>$15: NilClass
    <unconditional> -> bb2

}

method ::MyEnum::<Class:X>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(MyEnum::X) = cast(<self>: NilClass, T.class_of(MyEnum::X));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::MyEnum::<Class:Y>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(MyEnum::Y) = cast(<self>: NilClass, T.class_of(MyEnum::Y));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::MyEnum::<Class:Z>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(MyEnum::Z) = cast(<self>: NilClass, T.class_of(MyEnum::Z));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:NotAnEnum>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <C X>$8: T.untyped = alias <C X>
    <C Y>$13: NotAnEnum = alias <C Y>
    <self>: T.class_of(NotAnEnum) = cast(<self>: NilClass, T.class_of(NotAnEnum));
    <block-pre-call-temp>$4: Sorbet::Private::Static::Void = <self>: T.class_of(NotAnEnum).enums()
    <selfRestore>$5: T.class_of(NotAnEnum) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(NotAnEnum), <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: T.class_of(NotAnEnum), <C X>$8: T.untyped, <C Y>$13: NotAnEnum):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=2](<block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: T.class_of(NotAnEnum)):
    <returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$4, enums>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=10](<self>: T.class_of(NotAnEnum), <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: T.class_of(NotAnEnum), <C X>$8: T.untyped, <C Y>$13: NotAnEnum):
    # outerLoops: 1
    <self>: T.class_of(NotAnEnum) = loadSelf(enums)
    <cfgAlias>$10: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$11: T.attached_class (of NotAnEnum) = <self>: T.class_of(NotAnEnum).new()
    <C X>$8: T.attached_class (of NotAnEnum) = <cfgAlias>$10: T.class_of(<Magic>).<suggest-constant-type>(<statTemp>$11: T.attached_class (of NotAnEnum))
    keep_for_ide$14: T.class_of(NotAnEnum) = <self>
    keep_for_ide$14: T.untyped = <keep-alive> keep_for_ide$14
    <castTemp>$15: T.attached_class (of NotAnEnum) = <self>: T.class_of(NotAnEnum).new()
    <C Y>$13: NotAnEnum = cast(<castTemp>$15: T.attached_class (of NotAnEnum), NotAnEnum);
    <blockReturnTemp>$6: NotAnEnum = <C Y>$13
    <blockReturnTemp>$17: T.noreturn = blockreturn<enums> <blockReturnTemp>$6: NotAnEnum
    <unconditional> -> bb2

}

method ::EnumsDoEnum#something_outside {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: EnumsDoEnum = cast(<self>: NilClass, EnumsDoEnum);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:EnumsDoEnum>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <C X>$29: EnumsDoEnum::X = alias <C X>
    <C Y>$48: EnumsDoEnum::Y = alias <C Y>
    <C Z>$68: EnumsDoEnum::Z = alias <C Z>
    <self>: T.class_of(EnumsDoEnum) = cast(<self>: NilClass, T.class_of(EnumsDoEnum));
    <cfgAlias>$6: T.class_of(T::Helpers) = alias <C Helpers>
    <statTemp>$3: T.class_of(EnumsDoEnum) = <self>: T.class_of(EnumsDoEnum).extend(<cfgAlias>$6: T.class_of(T::Helpers))
    <statTemp>$7: Sorbet::Private::Static::Void = <self>: T.class_of(EnumsDoEnum).abstract!()
    <statTemp>$9: Sorbet::Private::Static::Void = <self>: T.class_of(EnumsDoEnum).sealed!()
    <block-pre-call-temp>$13: Sorbet::Private::Static::Void = <self>: T.class_of(EnumsDoEnum).enums()
    <selfRestore>$14: T.class_of(EnumsDoEnum) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(EnumsDoEnum), <block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: T.class_of(EnumsDoEnum), <C X>$29: EnumsDoEnum::X, <C Y>$48: EnumsDoEnum::Y, <C Z>$68: EnumsDoEnum::Z):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=2](<block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: T.class_of(EnumsDoEnum)):
    <statTemp>$11: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$13, enums>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=40](<self>: T.class_of(EnumsDoEnum), <block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: T.class_of(EnumsDoEnum), <C X>$29: EnumsDoEnum::X, <C Y>$48: EnumsDoEnum::Y, <C Z>$68: EnumsDoEnum::Z):
    # outerLoops: 1
    <self>: T.class_of(EnumsDoEnum) = loadSelf(enums)
    <cfgAlias>$20: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$22: T.class_of(EnumsDoEnum::X) = alias <C X$1>
    <statTemp>$18: Sorbet::Private::Static::Void = <cfgAlias>$20: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$22: T.class_of(EnumsDoEnum::X))
    <cfgAlias>$25: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$27: T.class_of(EnumsDoEnum) = alias <C EnumsDoEnum>
    <statTemp>$23: Sorbet::Private::Static::Void = <cfgAlias>$25: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$27: T.class_of(EnumsDoEnum))
    <cfgAlias>$31: T.class_of(EnumsDoEnum::X) = alias <C X$1>
    keep_for_ide$30: T.class_of(EnumsDoEnum::X) = <cfgAlias>$31
    keep_for_ide$30: T.untyped = <keep-alive> keep_for_ide$30
    <cfgAlias>$34: T.class_of(EnumsDoEnum::X) = alias <C X$1>
    <castTemp>$32: EnumsDoEnum::X = <cfgAlias>$34: T.class_of(EnumsDoEnum::X).new()
    <C X>$29: EnumsDoEnum::X = <castTemp>$32
    <cfgAlias>$39: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$41: T.class_of(EnumsDoEnum::Y) = alias <C Y$1>
    <statTemp>$37: Sorbet::Private::Static::Void = <cfgAlias>$39: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$41: T.class_of(EnumsDoEnum::Y))
    <cfgAlias>$44: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$46: T.class_of(EnumsDoEnum) = alias <C EnumsDoEnum>
    <statTemp>$42: Sorbet::Private::Static::Void = <cfgAlias>$44: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$46: T.class_of(EnumsDoEnum))
    <cfgAlias>$50: T.class_of(EnumsDoEnum::Y) = alias <C Y$1>
    keep_for_ide$49: T.class_of(EnumsDoEnum::Y) = <cfgAlias>$50
    keep_for_ide$49: T.untyped = <keep-alive> keep_for_ide$49
    <cfgAlias>$53: T.class_of(EnumsDoEnum::Y) = alias <C Y$1>
    <statTemp>$54: String("y") = "y"
    <castTemp>$51: EnumsDoEnum::Y = <cfgAlias>$53: T.class_of(EnumsDoEnum::Y).new(<statTemp>$54: String("y"))
    <C Y>$48: EnumsDoEnum::Y = <castTemp>$51
    <cfgAlias>$59: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$61: T.class_of(EnumsDoEnum::Z) = alias <C Z$1>
    <statTemp>$57: Sorbet::Private::Static::Void = <cfgAlias>$59: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$61: T.class_of(EnumsDoEnum::Z))
    <cfgAlias>$64: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$66: T.class_of(EnumsDoEnum) = alias <C EnumsDoEnum>
    <statTemp>$62: Sorbet::Private::Static::Void = <cfgAlias>$64: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$66: T.class_of(EnumsDoEnum))
    <cfgAlias>$70: T.class_of(EnumsDoEnum::Z) = alias <C Z$1>
    keep_for_ide$69: T.class_of(EnumsDoEnum::Z) = <cfgAlias>$70
    keep_for_ide$69: T.untyped = <keep-alive> keep_for_ide$69
    <cfgAlias>$73: T.class_of(EnumsDoEnum::Z) = alias <C Z$1>
    <castTemp>$71: EnumsDoEnum::Z = <cfgAlias>$73: T.class_of(EnumsDoEnum::Z).new()
    <C Z>$68: EnumsDoEnum::Z = <castTemp>$71
    <blockReturnTemp>$15: NilClass = nil
    <blockReturnTemp>$74: T.noreturn = blockreturn<enums> <blockReturnTemp>$15: NilClass
    <unconditional> -> bb2

}

method ::EnumsDoEnum::<Class:X>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(EnumsDoEnum::X) = cast(<self>: NilClass, T.class_of(EnumsDoEnum::X));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::EnumsDoEnum::<Class:Y>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(EnumsDoEnum::Y) = cast(<self>: NilClass, T.class_of(EnumsDoEnum::Y));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::EnumsDoEnum::<Class:Z>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(EnumsDoEnum::Z) = cast(<self>: NilClass, T.class_of(EnumsDoEnum::Z));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:BadConsts>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <C Before>$24: BadConsts::Before = alias <C Before>
    <C StaticField1>$31: Integer = alias <C StaticField1>
    <C Inside>$50: BadConsts::Inside = alias <C Inside>
    <C StaticField2>$57: Integer = alias <C StaticField2>
    <C After>$72: BadConsts::After = alias <C After>
    <C StaticField3>$79: Integer = alias <C StaticField3>
    <C StaticField4>$81: Integer = alias <C StaticField4>
    <self>: T.class_of(BadConsts) = cast(<self>: NilClass, T.class_of(BadConsts));
    <cfgAlias>$6: T.class_of(T::Helpers) = alias <C Helpers>
    <statTemp>$3: T.class_of(BadConsts) = <self>: T.class_of(BadConsts).extend(<cfgAlias>$6: T.class_of(T::Helpers))
    <statTemp>$7: Sorbet::Private::Static::Void = <self>: T.class_of(BadConsts).abstract!()
    <statTemp>$9: Sorbet::Private::Static::Void = <self>: T.class_of(BadConsts).sealed!()
    <cfgAlias>$15: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$17: T.class_of(BadConsts::Before) = alias <C Before$1>
    <statTemp>$13: Sorbet::Private::Static::Void = <cfgAlias>$15: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$17: T.class_of(BadConsts::Before))
    <cfgAlias>$20: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$22: T.class_of(BadConsts) = alias <C BadConsts>
    <statTemp>$18: Sorbet::Private::Static::Void = <cfgAlias>$20: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$22: T.class_of(BadConsts))
    <cfgAlias>$26: T.class_of(BadConsts::Before) = alias <C Before$1>
    keep_for_ide$25: T.class_of(BadConsts::Before) = <cfgAlias>$26
    keep_for_ide$25: T.untyped = <keep-alive> keep_for_ide$25
    <cfgAlias>$29: T.class_of(BadConsts::Before) = alias <C Before$1>
    <castTemp>$27: BadConsts::Before = <cfgAlias>$29: T.class_of(BadConsts::Before).new()
    <C Before>$24: BadConsts::Before = <castTemp>$27
    <C StaticField1>$31: Integer(1) = 1
    <block-pre-call-temp>$34: Sorbet::Private::Static::Void = <self>: T.class_of(BadConsts).enums()
    <selfRestore>$35: T.class_of(BadConsts) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(BadConsts), <block-pre-call-temp>$34: Sorbet::Private::Static::Void, <selfRestore>$35: T.class_of(BadConsts), <C Inside>$50: BadConsts::Inside, <C StaticField2>$57: Integer, <C After>$72: BadConsts::After, <C StaticField3>$79: Integer, <C StaticField4>$81: Integer):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=20](<block-pre-call-temp>$34: Sorbet::Private::Static::Void, <selfRestore>$35: T.class_of(BadConsts), <C After>$72: BadConsts::After, <C StaticField3>$79: Integer, <C StaticField4>$81: Integer):
    <statTemp>$32: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$34, enums>
    <cfgAlias>$63: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$65: T.class_of(BadConsts::After) = alias <C After$1>
    <statTemp>$61: Sorbet::Private::Static::Void = <cfgAlias>$63: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$65: T.class_of(BadConsts::After))
    <cfgAlias>$68: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$70: T.class_of(BadConsts) = alias <C BadConsts>
    <statTemp>$66: Sorbet::Private::Static::Void = <cfgAlias>$68: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$70: T.class_of(BadConsts))
    <cfgAlias>$74: T.class_of(BadConsts::After) = alias <C After$1>
    keep_for_ide$73: T.class_of(BadConsts::After) = <cfgAlias>$74
    keep_for_ide$73: T.untyped = <keep-alive> keep_for_ide$73
    <cfgAlias>$77: T.class_of(BadConsts::After) = alias <C After$1>
    <castTemp>$75: BadConsts::After = <cfgAlias>$77: T.class_of(BadConsts::After).new()
    <C After>$72: BadConsts::After = <castTemp>$75
    <C StaticField3>$79: Integer(3) = 3
    <cfgAlias>$83: T.class_of(Integer) = alias <C Integer>
    keep_for_ide$82: T.class_of(Integer) = <cfgAlias>$83
    keep_for_ide$82: T.untyped = <keep-alive> keep_for_ide$82
    <castTemp>$84: Integer(1) = 1
    <C StaticField4>$81: Integer = cast(<castTemp>$84: Integer(1), Integer);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=16](<self>: T.class_of(BadConsts), <block-pre-call-temp>$34: Sorbet::Private::Static::Void, <selfRestore>$35: T.class_of(BadConsts), <C Inside>$50: BadConsts::Inside, <C StaticField2>$57: Integer, <C After>$72: BadConsts::After, <C StaticField3>$79: Integer, <C StaticField4>$81: Integer):
    # outerLoops: 1
    <self>: T.class_of(BadConsts) = loadSelf(enums)
    <cfgAlias>$41: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$43: T.class_of(BadConsts::Inside) = alias <C Inside$1>
    <statTemp>$39: Sorbet::Private::Static::Void = <cfgAlias>$41: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$43: T.class_of(BadConsts::Inside))
    <cfgAlias>$46: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$48: T.class_of(BadConsts) = alias <C BadConsts>
    <statTemp>$44: Sorbet::Private::Static::Void = <cfgAlias>$46: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$48: T.class_of(BadConsts))
    <cfgAlias>$52: T.class_of(BadConsts::Inside) = alias <C Inside$1>
    keep_for_ide$51: T.class_of(BadConsts::Inside) = <cfgAlias>$52
    keep_for_ide$51: T.untyped = <keep-alive> keep_for_ide$51
    <cfgAlias>$55: T.class_of(BadConsts::Inside) = alias <C Inside$1>
    <castTemp>$53: BadConsts::Inside = <cfgAlias>$55: T.class_of(BadConsts::Inside).new()
    <C Inside>$50: BadConsts::Inside = <castTemp>$53
    <C StaticField2>$57: Integer(2) = 2
    <blockReturnTemp>$36: NilClass = nil
    <blockReturnTemp>$58: T.noreturn = blockreturn<enums> <blockReturnTemp>$36: NilClass
    <unconditional> -> bb2

}

method ::BadConsts::<Class:Before>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(BadConsts::Before) = cast(<self>: NilClass, T.class_of(BadConsts::Before));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::BadConsts::<Class:Inside>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(BadConsts::Inside) = cast(<self>: NilClass, T.class_of(BadConsts::Inside));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::BadConsts::<Class:After>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(BadConsts::After) = cast(<self>: NilClass, T.class_of(BadConsts::After));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

