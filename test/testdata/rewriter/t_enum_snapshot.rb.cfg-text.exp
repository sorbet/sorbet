method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::MyEnum#serialize {

bb0[rubyRegionId=0, firstDead=4]():
    <self>: MyEnum = cast(<self>: NilClass, MyEnum);
    <cfgAlias>$4: T.class_of(Kernel) = alias <C Kernel>
    <statTemp>$5: String("Sorbet rewriter pass partially unimplemented") = "Sorbet rewriter pass partially unimplemented"
    <returnMethodTemp>$2: T.noreturn = <cfgAlias>$4: T.class_of(Kernel).raise(<statTemp>$5: String("Sorbet rewriter pass partially unimplemented"))
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:MyEnum>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <C X>$30: MyEnum::X = alias <C X>
    <C Y>$38: MyEnum::Y = alias <C Y>
    <C Z>$47: MyEnum::Z = alias <C Z>
    <self>: T.class_of(MyEnum) = cast(<self>: NilClass, T.class_of(MyEnum));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$7: T.class_of(T::Sig::WithoutRuntime) = alias <C WithoutRuntime>
    <block-pre-call-temp>$8: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<cfgAlias>$7: T.class_of(T::Sig::WithoutRuntime))
    <selfRestore>$9: T.class_of(MyEnum) = <self>
    <unconditional> -> bb2

# backedges
# - bb7(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(MyEnum), <block-pre-call-temp>$8: Sorbet::Private::Static::Void, <selfRestore>$9: T.class_of(MyEnum), <C X>$30: MyEnum::X, <C Y>$38: MyEnum::Y, <C Z>$47: MyEnum::Z):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$8: Sorbet::Private::Static::Void, <selfRestore>$9: T.class_of(MyEnum), <C X>$30: MyEnum::X, <C Y>$38: MyEnum::Y, <C Z>$47: MyEnum::Z):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$8, sig>
    <self>: T.class_of(MyEnum) = <selfRestore>$9
    <cfgAlias>$18: T.class_of(T::Helpers) = alias <C Helpers>
    <statTemp>$15: T.class_of(MyEnum) = <self>: T.class_of(MyEnum).extend(<cfgAlias>$18: T.class_of(T::Helpers))
    <statTemp>$19: Sorbet::Private::Static::Void = <self>: T.class_of(MyEnum).abstract!()
    <statTemp>$21: Sorbet::Private::Static::Void = <self>: T.class_of(MyEnum).sealed!()
    <block-pre-call-temp>$25: Sorbet::Private::Static::Void = <self>: T.class_of(MyEnum).enums()
    <selfRestore>$26: T.class_of(MyEnum) = <self>
    <unconditional> -> bb6

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=4](<self>: T.class_of(MyEnum), <block-pre-call-temp>$8: Sorbet::Private::Static::Void, <selfRestore>$9: T.class_of(MyEnum), <C X>$30: MyEnum::X, <C Y>$38: MyEnum::Y, <C Z>$47: MyEnum::Z):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <cfgAlias>$13: T.class_of(String) = alias <C String>
    <blockReturnTemp>$10: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$13: T.class_of(String))
    <blockReturnTemp>$14: T.noreturn = blockreturn<sig> <blockReturnTemp>$10: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
# - bb9(rubyRegionId=2)
bb6[rubyRegionId=2, firstDead=-1](<self>: T.class_of(MyEnum), <block-pre-call-temp>$25: Sorbet::Private::Static::Void, <selfRestore>$26: T.class_of(MyEnum), <C X>$30: MyEnum::X, <C Y>$38: MyEnum::Y, <C Z>$47: MyEnum::Z):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb9 : bb7)

# backedges
# - bb6(rubyRegionId=2)
bb7[rubyRegionId=0, firstDead=4](<block-pre-call-temp>$25: Sorbet::Private::Static::Void, <selfRestore>$26: T.class_of(MyEnum)):
    <statTemp>$23: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$25, enums>
    <self>: T.class_of(MyEnum) = <selfRestore>$26
    <statTemp>$54: T.class_of(MyEnum) = <self>: T.class_of(MyEnum).public()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb6(rubyRegionId=2)
bb9[rubyRegionId=2, firstDead=22](<self>: T.class_of(MyEnum), <block-pre-call-temp>$25: Sorbet::Private::Static::Void, <selfRestore>$26: T.class_of(MyEnum), <C X>$30: MyEnum::X, <C Y>$38: MyEnum::Y, <C Z>$47: MyEnum::Z):
    # outerLoops: 1
    <self>: T.class_of(MyEnum) = loadSelf(enums)
    <cfgAlias>$32: T.class_of(MyEnum::X) = alias <C X$1>
    keep_for_ide$31: T.class_of(MyEnum::X) = <cfgAlias>$32
    keep_for_ide$31: T.untyped = <keep-alive> keep_for_ide$31
    <cfgAlias>$35: T.class_of(MyEnum::X) = alias <C X$1>
    <castTemp>$33: MyEnum::X = <cfgAlias>$35: T.class_of(MyEnum::X).new()
    <C X>$30: MyEnum::X = <castTemp>$33
    <cfgAlias>$40: T.class_of(MyEnum::Y) = alias <C Y$1>
    keep_for_ide$39: T.class_of(MyEnum::Y) = <cfgAlias>$40
    keep_for_ide$39: T.untyped = <keep-alive> keep_for_ide$39
    <cfgAlias>$43: T.class_of(MyEnum::Y) = alias <C Y$1>
    <statTemp>$44: String("y") = "y"
    <castTemp>$41: MyEnum::Y = <cfgAlias>$43: T.class_of(MyEnum::Y).new(<statTemp>$44: String("y"))
    <C Y>$38: MyEnum::Y = <castTemp>$41
    <cfgAlias>$49: T.class_of(MyEnum::Z) = alias <C Z$1>
    keep_for_ide$48: T.class_of(MyEnum::Z) = <cfgAlias>$49
    keep_for_ide$48: T.untyped = <keep-alive> keep_for_ide$48
    <cfgAlias>$52: T.class_of(MyEnum::Z) = alias <C Z$1>
    <castTemp>$50: MyEnum::Z = <cfgAlias>$52: T.class_of(MyEnum::Z).new()
    <C Z>$47: MyEnum::Z = <castTemp>$50
    <blockReturnTemp>$27: NilClass = nil
    <blockReturnTemp>$53: T.noreturn = blockreturn<enums> <blockReturnTemp>$27: NilClass
    <unconditional> -> bb6

}

method ::MyEnum::<Class:X>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(MyEnum::X) = cast(<self>: NilClass, T.class_of(MyEnum::X));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::MyEnum::<Class:Y>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(MyEnum::Y) = cast(<self>: NilClass, T.class_of(MyEnum::Y));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::MyEnum::<Class:Z>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(MyEnum::Z) = cast(<self>: NilClass, T.class_of(MyEnum::Z));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:NotAnEnum>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <C X>$8: T.untyped = alias <C X>
    <C Y>$13: NotAnEnum = alias <C Y>
    <self>: T.class_of(NotAnEnum) = cast(<self>: NilClass, T.class_of(NotAnEnum));
    <block-pre-call-temp>$4: Sorbet::Private::Static::Void = <self>: T.class_of(NotAnEnum).enums()
    <selfRestore>$5: T.class_of(NotAnEnum) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(NotAnEnum), <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: T.class_of(NotAnEnum), <C X>$8: T.untyped, <C Y>$13: NotAnEnum):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=2](<block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: T.class_of(NotAnEnum)):
    <returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$4, enums>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=10](<self>: T.class_of(NotAnEnum), <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: T.class_of(NotAnEnum), <C X>$8: T.untyped, <C Y>$13: NotAnEnum):
    # outerLoops: 1
    <self>: T.class_of(NotAnEnum) = loadSelf(enums)
    <cfgAlias>$10: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$11: T.attached_class (of NotAnEnum) = <self>: T.class_of(NotAnEnum).new()
    <C X>$8: T.attached_class (of NotAnEnum) = <cfgAlias>$10: T.class_of(<Magic>).<suggest-constant-type>(<statTemp>$11: T.attached_class (of NotAnEnum))
    keep_for_ide$14: T.class_of(NotAnEnum) = <self>
    keep_for_ide$14: T.untyped = <keep-alive> keep_for_ide$14
    <castTemp>$15: T.attached_class (of NotAnEnum) = <self>: T.class_of(NotAnEnum).new()
    <C Y>$13: NotAnEnum = cast(<castTemp>$15: T.attached_class (of NotAnEnum), NotAnEnum);
    <blockReturnTemp>$6: NotAnEnum = <C Y>$13
    <blockReturnTemp>$17: T.noreturn = blockreturn<enums> <blockReturnTemp>$6: NotAnEnum
    <unconditional> -> bb2

}

method ::EnumsDoEnum#something_outside {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: EnumsDoEnum = cast(<self>: NilClass, EnumsDoEnum);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::EnumsDoEnum#serialize {

bb0[rubyRegionId=0, firstDead=4]():
    <self>: EnumsDoEnum = cast(<self>: NilClass, EnumsDoEnum);
    <cfgAlias>$4: T.class_of(Kernel) = alias <C Kernel>
    <statTemp>$5: String("Sorbet rewriter pass partially unimplemented") = "Sorbet rewriter pass partially unimplemented"
    <returnMethodTemp>$2: T.noreturn = <cfgAlias>$4: T.class_of(Kernel).raise(<statTemp>$5: String("Sorbet rewriter pass partially unimplemented"))
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:EnumsDoEnum>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <C X>$30: EnumsDoEnum::X = alias <C X>
    <C Y>$38: EnumsDoEnum::Y = alias <C Y>
    <C Z>$47: EnumsDoEnum::Z = alias <C Z>
    <self>: T.class_of(EnumsDoEnum) = cast(<self>: NilClass, T.class_of(EnumsDoEnum));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$7: T.class_of(T::Sig::WithoutRuntime) = alias <C WithoutRuntime>
    <block-pre-call-temp>$8: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<cfgAlias>$7: T.class_of(T::Sig::WithoutRuntime))
    <selfRestore>$9: T.class_of(EnumsDoEnum) = <self>
    <unconditional> -> bb2

# backedges
# - bb7(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(EnumsDoEnum), <block-pre-call-temp>$8: Sorbet::Private::Static::Void, <selfRestore>$9: T.class_of(EnumsDoEnum), <C X>$30: EnumsDoEnum::X, <C Y>$38: EnumsDoEnum::Y, <C Z>$47: EnumsDoEnum::Z):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$8: Sorbet::Private::Static::Void, <selfRestore>$9: T.class_of(EnumsDoEnum), <C X>$30: EnumsDoEnum::X, <C Y>$38: EnumsDoEnum::Y, <C Z>$47: EnumsDoEnum::Z):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$8, sig>
    <self>: T.class_of(EnumsDoEnum) = <selfRestore>$9
    <cfgAlias>$18: T.class_of(T::Helpers) = alias <C Helpers>
    <statTemp>$15: T.class_of(EnumsDoEnum) = <self>: T.class_of(EnumsDoEnum).extend(<cfgAlias>$18: T.class_of(T::Helpers))
    <statTemp>$19: Sorbet::Private::Static::Void = <self>: T.class_of(EnumsDoEnum).abstract!()
    <statTemp>$21: Sorbet::Private::Static::Void = <self>: T.class_of(EnumsDoEnum).sealed!()
    <block-pre-call-temp>$25: Sorbet::Private::Static::Void = <self>: T.class_of(EnumsDoEnum).enums()
    <selfRestore>$26: T.class_of(EnumsDoEnum) = <self>
    <unconditional> -> bb6

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=4](<self>: T.class_of(EnumsDoEnum), <block-pre-call-temp>$8: Sorbet::Private::Static::Void, <selfRestore>$9: T.class_of(EnumsDoEnum), <C X>$30: EnumsDoEnum::X, <C Y>$38: EnumsDoEnum::Y, <C Z>$47: EnumsDoEnum::Z):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <cfgAlias>$13: T.class_of(String) = alias <C String>
    <blockReturnTemp>$10: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$13: T.class_of(String))
    <blockReturnTemp>$14: T.noreturn = blockreturn<sig> <blockReturnTemp>$10: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
# - bb9(rubyRegionId=2)
bb6[rubyRegionId=2, firstDead=-1](<self>: T.class_of(EnumsDoEnum), <block-pre-call-temp>$25: Sorbet::Private::Static::Void, <selfRestore>$26: T.class_of(EnumsDoEnum), <C X>$30: EnumsDoEnum::X, <C Y>$38: EnumsDoEnum::Y, <C Z>$47: EnumsDoEnum::Z):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb9 : bb7)

# backedges
# - bb6(rubyRegionId=2)
bb7[rubyRegionId=0, firstDead=4](<block-pre-call-temp>$25: Sorbet::Private::Static::Void, <selfRestore>$26: T.class_of(EnumsDoEnum)):
    <statTemp>$23: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$25, enums>
    <self>: T.class_of(EnumsDoEnum) = <selfRestore>$26
    <statTemp>$55: T.class_of(EnumsDoEnum) = <self>: T.class_of(EnumsDoEnum).public()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb6(rubyRegionId=2)
bb9[rubyRegionId=2, firstDead=22](<self>: T.class_of(EnumsDoEnum), <block-pre-call-temp>$25: Sorbet::Private::Static::Void, <selfRestore>$26: T.class_of(EnumsDoEnum), <C X>$30: EnumsDoEnum::X, <C Y>$38: EnumsDoEnum::Y, <C Z>$47: EnumsDoEnum::Z):
    # outerLoops: 1
    <self>: T.class_of(EnumsDoEnum) = loadSelf(enums)
    <cfgAlias>$32: T.class_of(EnumsDoEnum::X) = alias <C X$1>
    keep_for_ide$31: T.class_of(EnumsDoEnum::X) = <cfgAlias>$32
    keep_for_ide$31: T.untyped = <keep-alive> keep_for_ide$31
    <cfgAlias>$35: T.class_of(EnumsDoEnum::X) = alias <C X$1>
    <castTemp>$33: EnumsDoEnum::X = <cfgAlias>$35: T.class_of(EnumsDoEnum::X).new()
    <C X>$30: EnumsDoEnum::X = <castTemp>$33
    <cfgAlias>$40: T.class_of(EnumsDoEnum::Y) = alias <C Y$1>
    keep_for_ide$39: T.class_of(EnumsDoEnum::Y) = <cfgAlias>$40
    keep_for_ide$39: T.untyped = <keep-alive> keep_for_ide$39
    <cfgAlias>$43: T.class_of(EnumsDoEnum::Y) = alias <C Y$1>
    <statTemp>$44: String("y") = "y"
    <castTemp>$41: EnumsDoEnum::Y = <cfgAlias>$43: T.class_of(EnumsDoEnum::Y).new(<statTemp>$44: String("y"))
    <C Y>$38: EnumsDoEnum::Y = <castTemp>$41
    <cfgAlias>$49: T.class_of(EnumsDoEnum::Z) = alias <C Z$1>
    keep_for_ide$48: T.class_of(EnumsDoEnum::Z) = <cfgAlias>$49
    keep_for_ide$48: T.untyped = <keep-alive> keep_for_ide$48
    <cfgAlias>$52: T.class_of(EnumsDoEnum::Z) = alias <C Z$1>
    <castTemp>$50: EnumsDoEnum::Z = <cfgAlias>$52: T.class_of(EnumsDoEnum::Z).new()
    <C Z>$47: EnumsDoEnum::Z = <castTemp>$50
    <blockReturnTemp>$27: NilClass = nil
    <blockReturnTemp>$53: T.noreturn = blockreturn<enums> <blockReturnTemp>$27: NilClass
    <unconditional> -> bb6

}

method ::EnumsDoEnum::<Class:X>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(EnumsDoEnum::X) = cast(<self>: NilClass, T.class_of(EnumsDoEnum::X));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::EnumsDoEnum::<Class:Y>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(EnumsDoEnum::Y) = cast(<self>: NilClass, T.class_of(EnumsDoEnum::Y));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::EnumsDoEnum::<Class:Z>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(EnumsDoEnum::Z) = cast(<self>: NilClass, T.class_of(EnumsDoEnum::Z));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::BadConsts#serialize {

bb0[rubyRegionId=0, firstDead=4]():
    <self>: BadConsts = cast(<self>: NilClass, BadConsts);
    <cfgAlias>$4: T.class_of(Kernel) = alias <C Kernel>
    <statTemp>$5: String("Sorbet rewriter pass partially unimplemented") = "Sorbet rewriter pass partially unimplemented"
    <returnMethodTemp>$2: T.noreturn = <cfgAlias>$4: T.class_of(Kernel).raise(<statTemp>$5: String("Sorbet rewriter pass partially unimplemented"))
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:BadConsts>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <C Before>$24: BadConsts::Before = alias <C Before>
    <C StaticField1>$31: Integer = alias <C StaticField1>
    <C Inside>$39: BadConsts::Inside = alias <C Inside>
    <C StaticField2>$46: Integer = alias <C StaticField2>
    <C After>$49: BadConsts::After = alias <C After>
    <C StaticField3>$56: Integer = alias <C StaticField3>
    <C StaticField4>$58: Integer = alias <C StaticField4>
    <self>: T.class_of(BadConsts) = cast(<self>: NilClass, T.class_of(BadConsts));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$7: T.class_of(T::Sig::WithoutRuntime) = alias <C WithoutRuntime>
    <block-pre-call-temp>$8: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<cfgAlias>$7: T.class_of(T::Sig::WithoutRuntime))
    <selfRestore>$9: T.class_of(BadConsts) = <self>
    <unconditional> -> bb2

# backedges
# - bb7(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(BadConsts), <block-pre-call-temp>$8: Sorbet::Private::Static::Void, <selfRestore>$9: T.class_of(BadConsts), <C Before>$24: BadConsts::Before, <C StaticField1>$31: Integer, <C Inside>$39: BadConsts::Inside, <C StaticField2>$46: Integer, <C After>$49: BadConsts::After, <C StaticField3>$56: Integer, <C StaticField4>$58: Integer):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$8: Sorbet::Private::Static::Void, <selfRestore>$9: T.class_of(BadConsts), <C Before>$24: BadConsts::Before, <C StaticField1>$31: Integer, <C Inside>$39: BadConsts::Inside, <C StaticField2>$46: Integer, <C After>$49: BadConsts::After, <C StaticField3>$56: Integer, <C StaticField4>$58: Integer):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$8, sig>
    <self>: T.class_of(BadConsts) = <selfRestore>$9
    <cfgAlias>$18: T.class_of(T::Helpers) = alias <C Helpers>
    <statTemp>$15: T.class_of(BadConsts) = <self>: T.class_of(BadConsts).extend(<cfgAlias>$18: T.class_of(T::Helpers))
    <statTemp>$19: Sorbet::Private::Static::Void = <self>: T.class_of(BadConsts).abstract!()
    <statTemp>$21: Sorbet::Private::Static::Void = <self>: T.class_of(BadConsts).sealed!()
    <cfgAlias>$26: T.class_of(BadConsts::Before) = alias <C Before$1>
    keep_for_ide$25: T.class_of(BadConsts::Before) = <cfgAlias>$26
    keep_for_ide$25: T.untyped = <keep-alive> keep_for_ide$25
    <cfgAlias>$29: T.class_of(BadConsts::Before) = alias <C Before$1>
    <castTemp>$27: BadConsts::Before = <cfgAlias>$29: T.class_of(BadConsts::Before).new()
    <C Before>$24: BadConsts::Before = <castTemp>$27
    <C StaticField1>$31: Integer(1) = 1
    <block-pre-call-temp>$34: Sorbet::Private::Static::Void = <self>: T.class_of(BadConsts).enums()
    <selfRestore>$35: T.class_of(BadConsts) = <self>
    <unconditional> -> bb6

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=4](<self>: T.class_of(BadConsts), <block-pre-call-temp>$8: Sorbet::Private::Static::Void, <selfRestore>$9: T.class_of(BadConsts), <C Before>$24: BadConsts::Before, <C StaticField1>$31: Integer, <C Inside>$39: BadConsts::Inside, <C StaticField2>$46: Integer, <C After>$49: BadConsts::After, <C StaticField3>$56: Integer, <C StaticField4>$58: Integer):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <cfgAlias>$13: T.class_of(String) = alias <C String>
    <blockReturnTemp>$10: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$13: T.class_of(String))
    <blockReturnTemp>$14: T.noreturn = blockreturn<sig> <blockReturnTemp>$10: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
# - bb9(rubyRegionId=2)
bb6[rubyRegionId=2, firstDead=-1](<self>: T.class_of(BadConsts), <block-pre-call-temp>$34: Sorbet::Private::Static::Void, <selfRestore>$35: T.class_of(BadConsts), <C Inside>$39: BadConsts::Inside, <C StaticField2>$46: Integer, <C After>$49: BadConsts::After, <C StaticField3>$56: Integer, <C StaticField4>$58: Integer):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb9 : bb7)

# backedges
# - bb6(rubyRegionId=2)
bb7[rubyRegionId=0, firstDead=16](<block-pre-call-temp>$34: Sorbet::Private::Static::Void, <selfRestore>$35: T.class_of(BadConsts), <C After>$49: BadConsts::After, <C StaticField3>$56: Integer, <C StaticField4>$58: Integer):
    <statTemp>$32: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$34, enums>
    <self>: T.class_of(BadConsts) = <selfRestore>$35
    <cfgAlias>$51: T.class_of(BadConsts::After) = alias <C After$1>
    keep_for_ide$50: T.class_of(BadConsts::After) = <cfgAlias>$51
    keep_for_ide$50: T.untyped = <keep-alive> keep_for_ide$50
    <cfgAlias>$54: T.class_of(BadConsts::After) = alias <C After$1>
    <castTemp>$52: BadConsts::After = <cfgAlias>$54: T.class_of(BadConsts::After).new()
    <C After>$49: BadConsts::After = <castTemp>$52
    <C StaticField3>$56: Integer(3) = 3
    <cfgAlias>$60: T.class_of(Integer) = alias <C Integer>
    keep_for_ide$59: T.class_of(Integer) = <cfgAlias>$60
    keep_for_ide$59: T.untyped = <keep-alive> keep_for_ide$59
    <castTemp>$61: Integer(1) = 1
    <C StaticField4>$58: Integer = cast(<castTemp>$61: Integer(1), Integer);
    <statTemp>$62: T.class_of(BadConsts) = <self>: T.class_of(BadConsts).public()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb6(rubyRegionId=2)
bb9[rubyRegionId=2, firstDead=10](<self>: T.class_of(BadConsts), <block-pre-call-temp>$34: Sorbet::Private::Static::Void, <selfRestore>$35: T.class_of(BadConsts), <C Inside>$39: BadConsts::Inside, <C StaticField2>$46: Integer, <C After>$49: BadConsts::After, <C StaticField3>$56: Integer, <C StaticField4>$58: Integer):
    # outerLoops: 1
    <self>: T.class_of(BadConsts) = loadSelf(enums)
    <cfgAlias>$41: T.class_of(BadConsts::Inside) = alias <C Inside$1>
    keep_for_ide$40: T.class_of(BadConsts::Inside) = <cfgAlias>$41
    keep_for_ide$40: T.untyped = <keep-alive> keep_for_ide$40
    <cfgAlias>$44: T.class_of(BadConsts::Inside) = alias <C Inside$1>
    <castTemp>$42: BadConsts::Inside = <cfgAlias>$44: T.class_of(BadConsts::Inside).new()
    <C Inside>$39: BadConsts::Inside = <castTemp>$42
    <C StaticField2>$46: Integer(2) = 2
    <blockReturnTemp>$36: NilClass = nil
    <blockReturnTemp>$47: T.noreturn = blockreturn<enums> <blockReturnTemp>$36: NilClass
    <unconditional> -> bb6

}

method ::BadConsts::<Class:Before>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(BadConsts::Before) = cast(<self>: NilClass, T.class_of(BadConsts::Before));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::BadConsts::<Class:Inside>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(BadConsts::Inside) = cast(<self>: NilClass, T.class_of(BadConsts::Inside));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::BadConsts::<Class:After>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(BadConsts::After) = cast(<self>: NilClass, T.class_of(BadConsts::After));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

