method ::<Class:<root>>#<static-init> {

bb0[rubyBlockId=0, firstDead=38]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$6: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$8: T.class_of(MyEnum) = alias <C MyEnum>
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$8: T.class_of(MyEnum))
    <cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$13: T.class_of(MyEnum) = alias <C MyEnum>
    <statTemp>$9: Sorbet::Private::Static::Void = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$13: T.class_of(MyEnum))
    <cfgAlias>$16: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$18: T.class_of(T::Enum) = alias <C Enum>
    <cfgAlias>$20: T.class_of(T) = alias <C T>
    <statTemp>$14: Sorbet::Private::Static::Void = <cfgAlias>$16: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$18: T.class_of(T::Enum))
    <cfgAlias>$24: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$26: T.class_of(NotAnEnum) = alias <C NotAnEnum>
    <statTemp>$22: Sorbet::Private::Static::Void = <cfgAlias>$24: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$26: T.class_of(NotAnEnum))
    <cfgAlias>$29: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$31: T.class_of(NotAnEnum) = alias <C NotAnEnum>
    <statTemp>$27: Sorbet::Private::Static::Void = <cfgAlias>$29: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$31: T.class_of(NotAnEnum))
    <cfgAlias>$35: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$37: T.class_of(EnumsDoEnum) = alias <C EnumsDoEnum>
    <statTemp>$33: Sorbet::Private::Static::Void = <cfgAlias>$35: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$37: T.class_of(EnumsDoEnum))
    <cfgAlias>$40: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$42: T.class_of(EnumsDoEnum) = alias <C EnumsDoEnum>
    <statTemp>$38: Sorbet::Private::Static::Void = <cfgAlias>$40: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$42: T.class_of(EnumsDoEnum))
    <cfgAlias>$45: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$47: T.class_of(T::Enum) = alias <C Enum>
    <cfgAlias>$49: T.class_of(T) = alias <C T>
    <statTemp>$43: Sorbet::Private::Static::Void = <cfgAlias>$45: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$47: T.class_of(T::Enum))
    <cfgAlias>$53: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$55: T.class_of(BadConsts) = alias <C BadConsts>
    <statTemp>$51: Sorbet::Private::Static::Void = <cfgAlias>$53: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$55: T.class_of(BadConsts))
    <cfgAlias>$58: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$60: T.class_of(BadConsts) = alias <C BadConsts>
    <statTemp>$56: Sorbet::Private::Static::Void = <cfgAlias>$58: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$60: T.class_of(BadConsts))
    <cfgAlias>$63: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$65: T.class_of(T::Enum) = alias <C Enum>
    <cfgAlias>$67: T.class_of(T) = alias <C T>
    <statTemp>$61: Sorbet::Private::Static::Void = <cfgAlias>$63: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$65: T.class_of(T::Enum))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:MyEnum>#<static-init> {

bb0[rubyBlockId=0, firstDead=-1]():
    <C X>$34: MyEnum::X = alias <C X>
    <C Y>$60: MyEnum::Y = alias <C Y>
    <C Z>$87: MyEnum::Z = alias <C Z>
    <self>: T.class_of(MyEnum) = cast(<self>: NilClass, T.class_of(MyEnum));
    <cfgAlias>$6: T.class_of(T::Helpers) = alias <C Helpers>
    <statTemp>$3: T.class_of(MyEnum) = <self>: T.class_of(MyEnum).extend(<cfgAlias>$6: T.class_of(T::Helpers))
    <statTemp>$7: Sorbet::Private::Static::Void = <self>: T.class_of(MyEnum).abstract!()
    <statTemp>$9: Sorbet::Private::Static::Void = <self>: T.class_of(MyEnum).sealed!()
    <block-pre-call-temp>$13: Sorbet::Private::Static::Void = <self>: T.class_of(MyEnum).enums()
    <selfRestore>$14: T.class_of(MyEnum) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
# - bb5(rubyBlockId=1)
bb2[rubyBlockId=1, firstDead=-1](<self>: T.class_of(MyEnum), <block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: T.class_of(MyEnum), <C X>$34: MyEnum::X, <C Y>$60: MyEnum::Y, <C Z>$87: MyEnum::Z):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyBlockId=1)
bb3[rubyBlockId=0, firstDead=2](<block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: T.class_of(MyEnum)):
    <statTemp>$11: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$13, enums>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyBlockId=1)
bb5[rubyBlockId=1, firstDead=49](<self>: T.class_of(MyEnum), <block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: T.class_of(MyEnum), <C X>$34: MyEnum::X, <C Y>$60: MyEnum::Y, <C Z>$87: MyEnum::Z):
    # outerLoops: 1
    <self>: T.class_of(MyEnum) = loadSelf
    <cfgAlias>$20: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$22: T.class_of(MyEnum::X) = alias <C X$1>
    <statTemp>$18: Sorbet::Private::Static::Void = <cfgAlias>$20: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$22: T.class_of(MyEnum::X))
    <cfgAlias>$25: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$27: T.class_of(MyEnum::X) = alias <C X$1>
    <statTemp>$23: Sorbet::Private::Static::Void = <cfgAlias>$25: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$27: T.class_of(MyEnum::X))
    <cfgAlias>$30: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$32: T.class_of(MyEnum) = alias <C MyEnum>
    <statTemp>$28: Sorbet::Private::Static::Void = <cfgAlias>$30: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$32: T.class_of(MyEnum))
    <cfgAlias>$37: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$39: T.class_of(MyEnum::X) = alias <C X$1>
    <statTemp>$35: Sorbet::Private::Static::Void = <cfgAlias>$37: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$39: T.class_of(MyEnum::X))
    <cfgAlias>$42: T.class_of(MyEnum::X) = alias <C X$1>
    <castTemp>$40: MyEnum::X = <cfgAlias>$42: T.class_of(MyEnum::X).new()
    <C X>$34: MyEnum::X = <castTemp>$40
    <cfgAlias>$46: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$48: T.class_of(MyEnum::Y) = alias <C Y$1>
    <statTemp>$44: Sorbet::Private::Static::Void = <cfgAlias>$46: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$48: T.class_of(MyEnum::Y))
    <cfgAlias>$51: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$53: T.class_of(MyEnum::Y) = alias <C Y$1>
    <statTemp>$49: Sorbet::Private::Static::Void = <cfgAlias>$51: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$53: T.class_of(MyEnum::Y))
    <cfgAlias>$56: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$58: T.class_of(MyEnum) = alias <C MyEnum>
    <statTemp>$54: Sorbet::Private::Static::Void = <cfgAlias>$56: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$58: T.class_of(MyEnum))
    <cfgAlias>$63: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$65: T.class_of(MyEnum::Y) = alias <C Y$1>
    <statTemp>$61: Sorbet::Private::Static::Void = <cfgAlias>$63: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$65: T.class_of(MyEnum::Y))
    <cfgAlias>$68: T.class_of(MyEnum::Y) = alias <C Y$1>
    <statTemp>$69: String("y") = "y"
    <castTemp>$66: MyEnum::Y = <cfgAlias>$68: T.class_of(MyEnum::Y).new(<statTemp>$69: String("y"))
    <C Y>$60: MyEnum::Y = <castTemp>$66
    <cfgAlias>$73: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$75: T.class_of(MyEnum::Z) = alias <C Z$1>
    <statTemp>$71: Sorbet::Private::Static::Void = <cfgAlias>$73: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$75: T.class_of(MyEnum::Z))
    <cfgAlias>$78: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$80: T.class_of(MyEnum::Z) = alias <C Z$1>
    <statTemp>$76: Sorbet::Private::Static::Void = <cfgAlias>$78: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$80: T.class_of(MyEnum::Z))
    <cfgAlias>$83: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$85: T.class_of(MyEnum) = alias <C MyEnum>
    <statTemp>$81: Sorbet::Private::Static::Void = <cfgAlias>$83: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$85: T.class_of(MyEnum))
    <cfgAlias>$90: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$92: T.class_of(MyEnum::Z) = alias <C Z$1>
    <statTemp>$88: Sorbet::Private::Static::Void = <cfgAlias>$90: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$92: T.class_of(MyEnum::Z))
    <cfgAlias>$95: T.class_of(MyEnum::Z) = alias <C Z$1>
    <castTemp>$93: MyEnum::Z = <cfgAlias>$95: T.class_of(MyEnum::Z).new(<self>: T.class_of(MyEnum))
    <C Z>$87: MyEnum::Z = <castTemp>$93
    <blockReturnTemp>$16: NilClass = nil
    <blockReturnTemp>$97: T.noreturn = blockreturn<enums> <blockReturnTemp>$16: NilClass
    <unconditional> -> bb2

}

method ::MyEnum::<Class:X>#<static-init> {

bb0[rubyBlockId=0, firstDead=2]():
    <self>: T.class_of(MyEnum::X) = cast(<self>: NilClass, T.class_of(MyEnum::X));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::MyEnum::<Class:Y>#<static-init> {

bb0[rubyBlockId=0, firstDead=2]():
    <self>: T.class_of(MyEnum::Y) = cast(<self>: NilClass, T.class_of(MyEnum::Y));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::MyEnum::<Class:Z>#<static-init> {

bb0[rubyBlockId=0, firstDead=2]():
    <self>: T.class_of(MyEnum::Z) = cast(<self>: NilClass, T.class_of(MyEnum::Z));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:NotAnEnum>#<static-init> {

bb0[rubyBlockId=0, firstDead=-1]():
    <C X>$9: T.untyped = alias <C X>
    <C Y>$16: NotAnEnum = alias <C Y>
    <self>: T.class_of(NotAnEnum) = cast(<self>: NilClass, T.class_of(NotAnEnum));
    <block-pre-call-temp>$4: Sorbet::Private::Static::Void = <self>: T.class_of(NotAnEnum).enums()
    <selfRestore>$5: T.class_of(NotAnEnum) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
# - bb5(rubyBlockId=1)
bb2[rubyBlockId=1, firstDead=-1](<self>: T.class_of(NotAnEnum), <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: T.class_of(NotAnEnum), <C X>$9: T.untyped, <C Y>$16: NotAnEnum):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyBlockId=1)
bb3[rubyBlockId=0, firstDead=2](<block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: T.class_of(NotAnEnum)):
    <returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$4, enums>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb2(rubyBlockId=1)
bb5[rubyBlockId=1, firstDead=12](<self>: T.class_of(NotAnEnum), <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: T.class_of(NotAnEnum), <C X>$9: T.untyped, <C Y>$16: NotAnEnum):
    # outerLoops: 1
    <self>: T.class_of(NotAnEnum) = loadSelf
    <cfgAlias>$11: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$14: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$12: T.attached_class (of NotAnEnum) = <cfgAlias>$14: T.class_of(<Magic>).<self-new>(<self>: T.class_of(NotAnEnum))
    <C X>$9: T.attached_class (of NotAnEnum) = <cfgAlias>$11: T.class_of(<Magic>).<suggest-type>(<statTemp>$12: T.attached_class (of NotAnEnum))
    <cfgAlias>$19: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$17: Sorbet::Private::Static::Void = <cfgAlias>$19: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<self>: T.class_of(NotAnEnum))
    <cfgAlias>$23: T.class_of(<Magic>) = alias <C <Magic>>
    <castTemp>$21: T.attached_class (of NotAnEnum) = <cfgAlias>$23: T.class_of(<Magic>).<self-new>(<self>: T.class_of(NotAnEnum))
    <C Y>$16: NotAnEnum = cast(<castTemp>$21: T.attached_class (of NotAnEnum), NotAnEnum);
    <blockReturnTemp>$7: NotAnEnum = <C Y>$16
    <blockReturnTemp>$25: T.noreturn = blockreturn<enums> <blockReturnTemp>$7: NotAnEnum
    <unconditional> -> bb2

}

method ::EnumsDoEnum#something_outside {

bb0[rubyBlockId=0, firstDead=2]():
    <self>: EnumsDoEnum = cast(<self>: NilClass, EnumsDoEnum);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:EnumsDoEnum>#<static-init> {

bb0[rubyBlockId=0, firstDead=-1]():
    <C X>$34: EnumsDoEnum::X = alias <C X>
    <C Y>$60: EnumsDoEnum::Y = alias <C Y>
    <C Z>$87: EnumsDoEnum::Z = alias <C Z>
    <self>: T.class_of(EnumsDoEnum) = cast(<self>: NilClass, T.class_of(EnumsDoEnum));
    <cfgAlias>$6: T.class_of(T::Helpers) = alias <C Helpers>
    <statTemp>$3: T.class_of(EnumsDoEnum) = <self>: T.class_of(EnumsDoEnum).extend(<cfgAlias>$6: T.class_of(T::Helpers))
    <statTemp>$7: Sorbet::Private::Static::Void = <self>: T.class_of(EnumsDoEnum).abstract!()
    <statTemp>$9: Sorbet::Private::Static::Void = <self>: T.class_of(EnumsDoEnum).sealed!()
    <block-pre-call-temp>$13: Sorbet::Private::Static::Void = <self>: T.class_of(EnumsDoEnum).enums()
    <selfRestore>$14: T.class_of(EnumsDoEnum) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
# - bb5(rubyBlockId=1)
bb2[rubyBlockId=1, firstDead=-1](<self>: T.class_of(EnumsDoEnum), <block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: T.class_of(EnumsDoEnum), <C X>$34: EnumsDoEnum::X, <C Y>$60: EnumsDoEnum::Y, <C Z>$87: EnumsDoEnum::Z):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyBlockId=1)
bb3[rubyBlockId=0, firstDead=7](<block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: T.class_of(EnumsDoEnum)):
    <statTemp>$11: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$13, enums>
    <self>: T.class_of(EnumsDoEnum) = <selfRestore>$14
    <cfgAlias>$100: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$102: Symbol(:something_outside) = :something_outside
    <statTemp>$103: Symbol(:normal) = :normal
    <statTemp>$98: Symbol(:something_outside) = <cfgAlias>$100: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(EnumsDoEnum), <statTemp>$102: Symbol(:something_outside), <statTemp>$103: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyBlockId=1)
bb5[rubyBlockId=1, firstDead=49](<self>: T.class_of(EnumsDoEnum), <block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: T.class_of(EnumsDoEnum), <C X>$34: EnumsDoEnum::X, <C Y>$60: EnumsDoEnum::Y, <C Z>$87: EnumsDoEnum::Z):
    # outerLoops: 1
    <self>: T.class_of(EnumsDoEnum) = loadSelf
    <cfgAlias>$20: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$22: T.class_of(EnumsDoEnum::X) = alias <C X$1>
    <statTemp>$18: Sorbet::Private::Static::Void = <cfgAlias>$20: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$22: T.class_of(EnumsDoEnum::X))
    <cfgAlias>$25: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$27: T.class_of(EnumsDoEnum::X) = alias <C X$1>
    <statTemp>$23: Sorbet::Private::Static::Void = <cfgAlias>$25: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$27: T.class_of(EnumsDoEnum::X))
    <cfgAlias>$30: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$32: T.class_of(EnumsDoEnum) = alias <C EnumsDoEnum>
    <statTemp>$28: Sorbet::Private::Static::Void = <cfgAlias>$30: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$32: T.class_of(EnumsDoEnum))
    <cfgAlias>$37: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$39: T.class_of(EnumsDoEnum::X) = alias <C X$1>
    <statTemp>$35: Sorbet::Private::Static::Void = <cfgAlias>$37: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$39: T.class_of(EnumsDoEnum::X))
    <cfgAlias>$42: T.class_of(EnumsDoEnum::X) = alias <C X$1>
    <castTemp>$40: EnumsDoEnum::X = <cfgAlias>$42: T.class_of(EnumsDoEnum::X).new()
    <C X>$34: EnumsDoEnum::X = <castTemp>$40
    <cfgAlias>$46: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$48: T.class_of(EnumsDoEnum::Y) = alias <C Y$1>
    <statTemp>$44: Sorbet::Private::Static::Void = <cfgAlias>$46: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$48: T.class_of(EnumsDoEnum::Y))
    <cfgAlias>$51: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$53: T.class_of(EnumsDoEnum::Y) = alias <C Y$1>
    <statTemp>$49: Sorbet::Private::Static::Void = <cfgAlias>$51: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$53: T.class_of(EnumsDoEnum::Y))
    <cfgAlias>$56: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$58: T.class_of(EnumsDoEnum) = alias <C EnumsDoEnum>
    <statTemp>$54: Sorbet::Private::Static::Void = <cfgAlias>$56: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$58: T.class_of(EnumsDoEnum))
    <cfgAlias>$63: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$65: T.class_of(EnumsDoEnum::Y) = alias <C Y$1>
    <statTemp>$61: Sorbet::Private::Static::Void = <cfgAlias>$63: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$65: T.class_of(EnumsDoEnum::Y))
    <cfgAlias>$68: T.class_of(EnumsDoEnum::Y) = alias <C Y$1>
    <statTemp>$69: String("y") = "y"
    <castTemp>$66: EnumsDoEnum::Y = <cfgAlias>$68: T.class_of(EnumsDoEnum::Y).new(<statTemp>$69: String("y"))
    <C Y>$60: EnumsDoEnum::Y = <castTemp>$66
    <cfgAlias>$73: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$75: T.class_of(EnumsDoEnum::Z) = alias <C Z$1>
    <statTemp>$71: Sorbet::Private::Static::Void = <cfgAlias>$73: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$75: T.class_of(EnumsDoEnum::Z))
    <cfgAlias>$78: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$80: T.class_of(EnumsDoEnum::Z) = alias <C Z$1>
    <statTemp>$76: Sorbet::Private::Static::Void = <cfgAlias>$78: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$80: T.class_of(EnumsDoEnum::Z))
    <cfgAlias>$83: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$85: T.class_of(EnumsDoEnum) = alias <C EnumsDoEnum>
    <statTemp>$81: Sorbet::Private::Static::Void = <cfgAlias>$83: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$85: T.class_of(EnumsDoEnum))
    <cfgAlias>$90: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$92: T.class_of(EnumsDoEnum::Z) = alias <C Z$1>
    <statTemp>$88: Sorbet::Private::Static::Void = <cfgAlias>$90: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$92: T.class_of(EnumsDoEnum::Z))
    <cfgAlias>$95: T.class_of(EnumsDoEnum::Z) = alias <C Z$1>
    <castTemp>$93: EnumsDoEnum::Z = <cfgAlias>$95: T.class_of(EnumsDoEnum::Z).new(<self>: T.class_of(EnumsDoEnum))
    <C Z>$87: EnumsDoEnum::Z = <castTemp>$93
    <blockReturnTemp>$16: NilClass = nil
    <blockReturnTemp>$97: T.noreturn = blockreturn<enums> <blockReturnTemp>$16: NilClass
    <unconditional> -> bb2

}

method ::EnumsDoEnum::<Class:X>#<static-init> {

bb0[rubyBlockId=0, firstDead=2]():
    <self>: T.class_of(EnumsDoEnum::X) = cast(<self>: NilClass, T.class_of(EnumsDoEnum::X));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::EnumsDoEnum::<Class:Y>#<static-init> {

bb0[rubyBlockId=0, firstDead=2]():
    <self>: T.class_of(EnumsDoEnum::Y) = cast(<self>: NilClass, T.class_of(EnumsDoEnum::Y));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::EnumsDoEnum::<Class:Z>#<static-init> {

bb0[rubyBlockId=0, firstDead=2]():
    <self>: T.class_of(EnumsDoEnum::Z) = cast(<self>: NilClass, T.class_of(EnumsDoEnum::Z));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:BadConsts>#<static-init> {

bb0[rubyBlockId=0, firstDead=-1]():
    <C Before>$28: BadConsts::Before = alias <C Before>
    <C StaticField1>$38: Integer(1) = alias <C StaticField1>
    <C Inside>$62: BadConsts::Inside = alias <C Inside>
    <C StaticField2>$72: Integer(2) = alias <C StaticField2>
    <C After>$91: BadConsts::After = alias <C After>
    <C StaticField3>$101: Integer(3) = alias <C StaticField3>
    <C StaticField4>$103: Integer = alias <C StaticField4>
    <self>: T.class_of(BadConsts) = cast(<self>: NilClass, T.class_of(BadConsts));
    <cfgAlias>$6: T.class_of(T::Helpers) = alias <C Helpers>
    <statTemp>$3: T.class_of(BadConsts) = <self>: T.class_of(BadConsts).extend(<cfgAlias>$6: T.class_of(T::Helpers))
    <statTemp>$7: Sorbet::Private::Static::Void = <self>: T.class_of(BadConsts).abstract!()
    <statTemp>$9: Sorbet::Private::Static::Void = <self>: T.class_of(BadConsts).sealed!()
    <cfgAlias>$14: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$16: T.class_of(BadConsts::Before) = alias <C Before$1>
    <statTemp>$12: Sorbet::Private::Static::Void = <cfgAlias>$14: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$16: T.class_of(BadConsts::Before))
    <cfgAlias>$19: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$21: T.class_of(BadConsts::Before) = alias <C Before$1>
    <statTemp>$17: Sorbet::Private::Static::Void = <cfgAlias>$19: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$21: T.class_of(BadConsts::Before))
    <cfgAlias>$24: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$26: T.class_of(BadConsts) = alias <C BadConsts>
    <statTemp>$22: Sorbet::Private::Static::Void = <cfgAlias>$24: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$26: T.class_of(BadConsts))
    <cfgAlias>$31: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$33: T.class_of(BadConsts::Before) = alias <C Before$1>
    <statTemp>$29: Sorbet::Private::Static::Void = <cfgAlias>$31: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$33: T.class_of(BadConsts::Before))
    <cfgAlias>$36: T.class_of(BadConsts::Before) = alias <C Before$1>
    <castTemp>$34: BadConsts::Before = <cfgAlias>$36: T.class_of(BadConsts::Before).new()
    <C Before>$28: BadConsts::Before = <castTemp>$34
    <C StaticField1>$38: Integer(1) = 1
    <block-pre-call-temp>$41: Sorbet::Private::Static::Void = <self>: T.class_of(BadConsts).enums()
    <selfRestore>$42: T.class_of(BadConsts) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
# - bb5(rubyBlockId=1)
bb2[rubyBlockId=1, firstDead=-1](<self>: T.class_of(BadConsts), <block-pre-call-temp>$41: Sorbet::Private::Static::Void, <selfRestore>$42: T.class_of(BadConsts), <C Inside>$62: BadConsts::Inside, <C StaticField2>$72: Integer(2), <C After>$91: BadConsts::After, <C StaticField3>$101: Integer(3), <C StaticField4>$103: Integer):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyBlockId=1)
bb3[rubyBlockId=0, firstDead=23](<block-pre-call-temp>$41: Sorbet::Private::Static::Void, <selfRestore>$42: T.class_of(BadConsts), <C After>$91: BadConsts::After, <C StaticField3>$101: Integer(3), <C StaticField4>$103: Integer):
    <statTemp>$39: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$41, enums>
    <cfgAlias>$77: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$79: T.class_of(BadConsts::After) = alias <C After$1>
    <statTemp>$75: Sorbet::Private::Static::Void = <cfgAlias>$77: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$79: T.class_of(BadConsts::After))
    <cfgAlias>$82: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$84: T.class_of(BadConsts::After) = alias <C After$1>
    <statTemp>$80: Sorbet::Private::Static::Void = <cfgAlias>$82: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$84: T.class_of(BadConsts::After))
    <cfgAlias>$87: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$89: T.class_of(BadConsts) = alias <C BadConsts>
    <statTemp>$85: Sorbet::Private::Static::Void = <cfgAlias>$87: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$89: T.class_of(BadConsts))
    <cfgAlias>$94: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$96: T.class_of(BadConsts::After) = alias <C After$1>
    <statTemp>$92: Sorbet::Private::Static::Void = <cfgAlias>$94: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$96: T.class_of(BadConsts::After))
    <cfgAlias>$99: T.class_of(BadConsts::After) = alias <C After$1>
    <castTemp>$97: BadConsts::After = <cfgAlias>$99: T.class_of(BadConsts::After).new()
    <C After>$91: BadConsts::After = <castTemp>$97
    <C StaticField3>$101: Integer(3) = 3
    <cfgAlias>$106: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$108: T.class_of(Integer) = alias <C Integer>
    <statTemp>$104: Sorbet::Private::Static::Void = <cfgAlias>$106: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$108: T.class_of(Integer))
    <castTemp>$109: Integer(1) = 1
    <C StaticField4>$103: Integer = cast(<castTemp>$109: Integer(1), Integer);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyBlockId=1)
bb5[rubyBlockId=1, firstDead=19](<self>: T.class_of(BadConsts), <block-pre-call-temp>$41: Sorbet::Private::Static::Void, <selfRestore>$42: T.class_of(BadConsts), <C Inside>$62: BadConsts::Inside, <C StaticField2>$72: Integer(2), <C After>$91: BadConsts::After, <C StaticField3>$101: Integer(3), <C StaticField4>$103: Integer):
    # outerLoops: 1
    <self>: T.class_of(BadConsts) = loadSelf
    <cfgAlias>$48: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$50: T.class_of(BadConsts::Inside) = alias <C Inside$1>
    <statTemp>$46: Sorbet::Private::Static::Void = <cfgAlias>$48: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$50: T.class_of(BadConsts::Inside))
    <cfgAlias>$53: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$55: T.class_of(BadConsts::Inside) = alias <C Inside$1>
    <statTemp>$51: Sorbet::Private::Static::Void = <cfgAlias>$53: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$55: T.class_of(BadConsts::Inside))
    <cfgAlias>$58: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$60: T.class_of(BadConsts) = alias <C BadConsts>
    <statTemp>$56: Sorbet::Private::Static::Void = <cfgAlias>$58: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$60: T.class_of(BadConsts))
    <cfgAlias>$65: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$67: T.class_of(BadConsts::Inside) = alias <C Inside$1>
    <statTemp>$63: Sorbet::Private::Static::Void = <cfgAlias>$65: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$67: T.class_of(BadConsts::Inside))
    <cfgAlias>$70: T.class_of(BadConsts::Inside) = alias <C Inside$1>
    <castTemp>$68: BadConsts::Inside = <cfgAlias>$70: T.class_of(BadConsts::Inside).new()
    <C Inside>$62: BadConsts::Inside = <castTemp>$68
    <C StaticField2>$72: Integer(2) = 2
    <blockReturnTemp>$44: NilClass = nil
    <blockReturnTemp>$73: T.noreturn = blockreturn<enums> <blockReturnTemp>$44: NilClass
    <unconditional> -> bb2

}

method ::BadConsts::<Class:Before>#<static-init> {

bb0[rubyBlockId=0, firstDead=2]():
    <self>: T.class_of(BadConsts::Before) = cast(<self>: NilClass, T.class_of(BadConsts::Before));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::BadConsts::<Class:Inside>#<static-init> {

bb0[rubyBlockId=0, firstDead=2]():
    <self>: T.class_of(BadConsts::Inside) = cast(<self>: NilClass, T.class_of(BadConsts::Inside));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::BadConsts::<Class:After>#<static-init> {

bb0[rubyBlockId=0, firstDead=2]():
    <self>: T.class_of(BadConsts::After) = cast(<self>: NilClass, T.class_of(BadConsts::After));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

