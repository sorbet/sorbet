class <emptyTree><<C <root>>> < (::<todo sym>)
  module <emptyTree>::<C Opus>::<C Autogen>::<C Tokens><<C <todo sym>>> < ()
    class <emptyTree>::<C AccountModelMerchantToken><<C <todo sym>>> < (::<todo sym>)
    end
  end

  module <emptyTree>::<C ShardByMerchant><<C <todo sym>>> < ()
    def merchant_prop<<todo method>>(name: = :merchant, override: = false, without_accessors: = false, &<blk>)
      <emptyTree>
    end

    :merchant_prop
  end

  module <emptyTree>::<C ShardByMerchantBase><<C <todo sym>>> < ()
    def merchant_token_prop<<todo method>>(name: = :merchant, override: = false, without_accessors: = false, &<blk>)
      <emptyTree>
    end

    :merchant_token_prop
  end

  class <emptyTree>::<C MerchantPropModel><<C <todo sym>>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(::String)
    end

    def merchant<<todo method>>(&<blk>)
      begin
        arg2 = <self>.instance_variable_get(:@merchant)
        <self>.class().decorator().prop_get_logic(<self>, :merchant, arg2)
      end
    end

    <self>.include(<emptyTree>::<C T>::<C Props>)

    <self>.extend(<emptyTree>::<C ShardByMerchant>)

    <self>.merchant_prop(:without_accessors, true)

    :merchant
  end

  class <emptyTree>::<C MerchantTokenPropModel><<C <todo sym>>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(<emptyTree>::<C Opus>::<C Autogen>::<C Tokens>::<C AccountModelMerchantToken>)
    end

    def merchant<<todo method>>(&<blk>)
      begin
        arg2 = <self>.instance_variable_get(:@merchant)
        <self>.class().decorator().prop_get_logic(<self>, :merchant, arg2)
      end
    end

    <self>.include(<emptyTree>::<C T>::<C Props>)

    <self>.extend(<emptyTree>::<C ShardByMerchantBase>)

    <self>.merchant_token_prop(:without_accessors, true)

    :merchant
  end

  <emptyTree>::<C T>.reveal_type(<emptyTree>::<C MerchantPropModel>.new().merchant())

  <emptyTree>::<C MerchantPropModel>.new().merchant=("hi")

  <emptyTree>::<C T>.reveal_type(<emptyTree>::<C MerchantTokenPropModel>.new().merchant())

  <emptyTree>::<C MerchantTokenPropModel>.new().merchant=(nil)
end
