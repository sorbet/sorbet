class <emptyTree><<C <root>>> < (::<todo sym>)
  module <emptyTree>::<C Helper><<C <todo sym>>> < ()
    def foo<<todo method>>(&<blk>)
      <emptyTree>
    end

    <runtime method definition of foo>
  end

  module <emptyTree>::<C M><<C <todo sym>>> < ()
    class <emptyTree>::<C <describe 'describe'>><<C <todo sym>>> < (::<todo sym>)
      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.void()
      end

      def <it 'adds a method'><<todo method>>(&<blk>)
        <emptyTree>
      end

      <runtime method definition of <it 'adds a method'>>

      class <emptyTree>::<C <describe 'inner'>><<C <todo sym>>> < (<self>)
        ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
          <self>.void()
        end

        def <it 'inner test'><<todo method>>(&<blk>)
          <emptyTree>
        end

        <runtime method definition of <it 'inner test'>>
      end
    end

    class <emptyTree>::<C <describe 'another'>><<C <todo sym>>> < (::<todo sym>)
      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.void()
      end

      def <it 'something'><<todo method>>(&<blk>)
        <self>.foo()
      end

      <self>.include(<emptyTree>::<C Helper>)

      <runtime method definition of <it 'something'>>
    end
  end

  class <emptyTree>::<C C><<C <todo sym>>> < (::<todo sym>)
    def test_method<<todo method>>(&<blk>)
      <emptyTree>
    end

    <runtime method definition of test_method>

    class <emptyTree>::<C <describe 'describe'>><<C <todo sym>>> < (<self>)
      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.void()
      end

      def <it 'adds a method'><<todo method>>(&<blk>)
        <self>.test_method()
      end

      <runtime method definition of <it 'adds a method'>>
    end
  end
end
