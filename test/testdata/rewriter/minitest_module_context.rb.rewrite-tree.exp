class <emptyTree><<C <root>>> < (::<todo sym>)
  module <emptyTree>::<C M><<C <todo sym>>> < ()
    class <emptyTree>::<C <describe 'describe'>><<C <todo sym>>> < ()
      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.void()
      end

      def <it 'adds a method'><<todo method>>(&<blk>)
        <emptyTree>
      end

      begin
        begin
          "adds a method"
          :"<it \'adds a method\'>"
        end
        class <emptyTree>::<C <describe 'inner'>><<C <todo sym>>> < (<self>)
          ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
            <self>.void()
          end

          def <it 'inner test'><<todo method>>(&<blk>)
            <emptyTree>
          end

          begin
            "inner test"
            :"<it \'inner test\'>"
          end
        end
      end
    end
  end

  class <emptyTree>::<C C><<C <todo sym>>> < (::<todo sym>)
    def test_method<<todo method>>(&<blk>)
      <emptyTree>
    end

    :test_method

    class <emptyTree>::<C <describe 'describe'>><<C <todo sym>>> < (<self>)
      ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
        <self>.void()
      end

      def <it 'adds a method'><<todo method>>(&<blk>)
        <self>.test_method()
      end

      begin
        "adds a method"
        :"<it \'adds a method\'>"
      end
    end
  end
end
