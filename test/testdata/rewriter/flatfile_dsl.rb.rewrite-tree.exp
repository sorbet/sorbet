class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C Record><<C <todo sym>>> < (::<todo sym>)
    def self.flatfile<<todo method>>(&<blk>)
      <emptyTree>
    end

    def self.from<<todo method>>(*_, &<blk>)
      <emptyTree>
    end

    def self.pattern<<todo method>>(*_, &<blk>)
      <emptyTree>
    end

    def self.field<<todo method>>(*_, &<blk>)
      <emptyTree>
    end

    :flatfile

    :from

    :pattern

    :field
  end

  class <emptyTree>::<C Flatfile><<C <todo sym>>> < (<emptyTree>::<C Record>)
    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(::T.untyped())
    end

    def foo<<todo method>>(&<blk>)
      nil
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params(:arg0, ::T.untyped()).returns(::T.untyped())
    end

    def foo=<<todo method>>(arg0, &<blk>)
      nil
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(::T.untyped())
    end

    def bar<<todo method>>(&<blk>)
      nil
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params(:arg0, ::T.untyped()).returns(::T.untyped())
    end

    def bar=<<todo method>>(arg0, &<blk>)
      nil
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(::T.untyped())
    end

    def baz<<todo method>>(&<blk>)
      nil
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params(:arg0, ::T.untyped()).returns(::T.untyped())
    end

    def baz=<<todo method>>(arg0, &<blk>)
      nil
    end

    <self>.flatfile() do ||
      begin
        <self>.from(::<Magic>.<build-range>(1, 2, false), :foo)
        <self>.pattern(::Regexp.new("A-Za-z", 0), :bar)
        <self>.field(:baz)
      end
    end

    :foo

    :foo=

    :bar

    :bar=

    :baz

    :baz=
  end

  t = <emptyTree>::<C Flatfile>.new()

  t.foo=(t.foo().+(1))

  t.bar=(t.bar().+(1))

  t.baz=(t.baz().+(1))
end
