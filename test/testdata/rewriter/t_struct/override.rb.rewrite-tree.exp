class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C Override><<C <todo sym>>> < (<emptyTree>::<C T>::<C Struct>)
    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params(:foo, <emptyTree>::<C String>).void()
    end

    def initialize<<todo method>>(foo:, &<blk>)
      begin
        @foo = <cast:let>(foo, <todo sym>, <emptyTree>::<C String>)
        nil
      end
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.returns(<emptyTree>::<C String>)
    end

    def foo<<todo method>>(&<blk>)
      @foo
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params(:arg0, <emptyTree>::<C String>).returns(<emptyTree>::<C String>)
    end

    def foo=<<todo method>>(arg0, &<blk>)
      @foo = arg0
    end

    <self>.sig() do ||
      <self>.params(:foo, <emptyTree>::<C Integer>).void()
    end

    def initialize<<todo method>>(foo:, &<blk>)
      <self>.puts("override")
    end

    <runtime method definition of initialize>

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <self>.prop(:foo, <emptyTree>::<C String>)

    <runtime method definition of foo>

    <runtime method definition of foo=>

    <runtime method definition of initialize>
  end

  <emptyTree>::<C Override>.new()

  <emptyTree>::<C Override>.new(:foo, "no")

  <emptyTree>::<C Override>.new(:foo, 3, :bar, 4)

  <emptyTree>::<C T>.reveal_type(<emptyTree>::<C Override>.new(:foo, 3).foo())
end
