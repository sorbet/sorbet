class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C MyEnum><<C <todo sym>>> < (<emptyTree>::<C T>::<C Enum>)
    <self>.extend(::T::Helpers)

    <self>.abstract!()

    <self>.sealed!()

    <self>.enums() do ||
      begin
        class <emptyTree>::<C X$1><<C <todo sym>>> < (<emptyTree>::<C MyEnum>)
        end
        <emptyTree>::<C X> = ::T.<unchecked_let>(<emptyTree>::<C X$1>.new(), <emptyTree>::<C X$1>)
        class <emptyTree>::<C Y$1><<C <todo sym>>> < (<emptyTree>::<C MyEnum>)
        end
        <emptyTree>::<C Y> = ::T.<unchecked_let>(<emptyTree>::<C Y$1>.new("y"), <emptyTree>::<C Y$1>)
        class <emptyTree>::<C Z$1><<C <todo sym>>> < (<emptyTree>::<C MyEnum>)
        end
        <emptyTree>::<C Z> = ::T.<unchecked_let>(<emptyTree>::<C Z$1>.new(<self>), <emptyTree>::<C Z$1>)
        nil
      end
    end
  end

  class <emptyTree>::<C NotAnEnum><<C <todo sym>>> < (::<todo sym>)
    <self>.enums() do ||
      begin
        <emptyTree>::<C X> = ::<Magic>.<self-new>(<self>)
        <emptyTree>::<C Y> = <emptyTree>::<C T>.let(::<Magic>.<self-new>(<self>), <self>)
      end
    end
  end

  class <emptyTree>::<C EnumsDoEnum><<C <todo sym>>> < (<emptyTree>::<C T>::<C Enum>)
    def something_outside<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.extend(::T::Helpers)

    <self>.abstract!()

    <self>.sealed!()

    <self>.enums() do ||
      begin
        class <emptyTree>::<C X$1><<C <todo sym>>> < (<emptyTree>::<C EnumsDoEnum>)
        end
        <emptyTree>::<C X> = ::T.<unchecked_let>(<emptyTree>::<C X$1>.new(), <emptyTree>::<C X$1>)
        class <emptyTree>::<C Y$1><<C <todo sym>>> < (<emptyTree>::<C EnumsDoEnum>)
        end
        <emptyTree>::<C Y> = ::T.<unchecked_let>(<emptyTree>::<C Y$1>.new("y"), <emptyTree>::<C Y$1>)
        class <emptyTree>::<C Z$1><<C <todo sym>>> < (<emptyTree>::<C EnumsDoEnum>)
        end
        <emptyTree>::<C Z> = ::T.<unchecked_let>(<emptyTree>::<C Z$1>.new(<self>), <emptyTree>::<C Z$1>)
        nil
      end
    end

    :something_outside
  end

  class <emptyTree>::<C BadConsts><<C <todo sym>>> < (<emptyTree>::<C T>::<C Enum>)
    <self>.extend(::T::Helpers)

    <self>.abstract!()

    <self>.sealed!()

    class <emptyTree>::<C Before$1><<C <todo sym>>> < (<emptyTree>::<C BadConsts>)
    end

    <emptyTree>::<C Before> = ::T.<unchecked_let>(<emptyTree>::<C Before$1>.new(), <emptyTree>::<C Before$1>)

    <emptyTree>::<C StaticField1> = 1

    <self>.enums() do ||
      begin
        class <emptyTree>::<C Inside$1><<C <todo sym>>> < (<emptyTree>::<C BadConsts>)
        end
        <emptyTree>::<C Inside> = ::T.<unchecked_let>(<emptyTree>::<C Inside$1>.new(), <emptyTree>::<C Inside$1>)
        <emptyTree>::<C StaticField2> = 2
        nil
      end
    end

    class <emptyTree>::<C After$1><<C <todo sym>>> < (<emptyTree>::<C BadConsts>)
    end

    <emptyTree>::<C After> = ::T.<unchecked_let>(<emptyTree>::<C After$1>.new(), <emptyTree>::<C After$1>)

    <emptyTree>::<C StaticField3> = 3

    <emptyTree>::<C StaticField4> = <emptyTree>::<C T>.let(1, <emptyTree>::<C Integer>)
  end
end
