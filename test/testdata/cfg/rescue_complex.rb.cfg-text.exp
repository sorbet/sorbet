method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=8]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$7: T.class_of(TestRescue) = alias <C TestRescue>
    <statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(TestRescue))
    <cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$12: T.class_of(TestRescue) = alias <C TestRescue>
    <statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(TestRescue))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestRescue#meth {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    <returnMethodTemp>$2: Integer(0) = 0
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(0)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestRescue#foo {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    <returnMethodTemp>$2: Integer(1) = 1
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(1)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestRescue#bar {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    <returnMethodTemp>$2: Integer(2) = 2
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(2)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestRescue#baz {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    <returnMethodTemp>$2: Integer(3) = 3
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(3)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestRescue#take_arg {

bb0[rubyRegionId=0, firstDead=4]():
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    x: T.untyped = load_arg(x)
    <returnMethodTemp>$2: T.untyped = x
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestRescue#initialize {

bb0[rubyRegionId=0, firstDead=11]():
    @ex$3: T.nilable(StandardError) = alias @ex
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    <cfgAlias>$6: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$9: T.class_of(T) = alias <C T>
    <cfgAlias>$11: T.class_of(StandardError) = alias <C StandardError>
    <statTemp>$7: Runtime object representing type: T.nilable(StandardError) = <cfgAlias>$9: T.class_of(T).nilable(<cfgAlias>$11: T.class_of(StandardError))
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<statTemp>$7: Runtime object representing type: T.nilable(StandardError))
    <castTemp>$12: NilClass = nil
    @ex$3: T.nilable(StandardError) = cast(<castTemp>$12: NilClass, T.nilable(StandardError));
    <returnMethodTemp>$2: T.nilable(StandardError) = @ex$3
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(StandardError)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestRescue#multiple_rescue {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    <magic>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb6(rubyRegionId=3)
# - bb11(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb4(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <returnMethodTemp>$2: T.untyped, <exceptionValue>$3: T.untyped, <magic>$5: T.class_of(<Magic>)):
    <cfgAlias>$8: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$9: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<cfgAlias>$8: T.class_of(StandardError))
    <isaCheckTemp>$9 -> (T.untyped ? bb7 : bb8)

# backedges
# - bb0(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=-1](<self>: TestRescue, <magic>$5: T.class_of(<Magic>)):
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb5)

# backedges
# - bb4(rubyRegionId=1)
bb5[rubyRegionId=4, firstDead=-1](<returnMethodTemp>$2: T.untyped):
    <unconditional> -> bb6

# backedges
# - bb5(rubyRegionId=4)
# - bb7(rubyRegionId=2)
# - bb9(rubyRegionId=2)
# - bb10(rubyRegionId=2)
bb6[rubyRegionId=3, firstDead=-1](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$16: T.nilable(TrueClass)):
    <gotoDeadTemp>$16 -> (T.nilable(TrueClass) ? bb1 : bb11)

# backedges
# - bb3(rubyRegionId=2)
bb7[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <magic>$5: T.class_of(<Magic>)):
    <exceptionValue>$3: NilClass = nil
    <keepForCfgTemp>$6: Sorbet::Private::Static::Void = <magic>$5: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$3: NilClass)
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.baz()
    <unconditional> -> bb6

# backedges
# - bb3(rubyRegionId=2)
bb8[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <returnMethodTemp>$2: T.untyped, <exceptionValue>$3: T.untyped, <magic>$5: T.class_of(<Magic>)):
    <cfgAlias>$13: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$14: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<cfgAlias>$13: T.class_of(StandardError))
    <isaCheckTemp>$14 -> (T.untyped ? bb9 : bb10)

# backedges
# - bb8(rubyRegionId=2)
bb9[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <magic>$5: T.class_of(<Magic>)):
    <exceptionValue>$3: NilClass = nil
    <keepForCfgTemp>$11: Sorbet::Private::Static::Void = <magic>$5: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$3: NilClass)
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.bar()
    <unconditional> -> bb6

# backedges
# - bb8(rubyRegionId=2)
bb10[rubyRegionId=2, firstDead=-1](<returnMethodTemp>$2: T.untyped):
    <gotoDeadTemp>$16: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb6(rubyRegionId=3)
bb11[rubyRegionId=0, firstDead=1](<returnMethodTemp>$2: T.untyped):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

}

method ::TestRescue#multiple_rescue_classes {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    <magic>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb6(rubyRegionId=3)
# - bb10(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb4(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1](<returnMethodTemp>$2: T.untyped, <exceptionValue>$3: T.untyped, <magic>$5: T.class_of(<Magic>)):
    baz: T.untyped = <exceptionValue>$3
    <cfgAlias>$8: T.untyped = alias <C T.untyped>
    <isaCheckTemp>$9: T.untyped = baz: T.untyped.is_a?(<cfgAlias>$8: T.untyped)
    <isaCheckTemp>$9 -> (T.untyped ? bb7 : bb8)

# backedges
# - bb0(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=-1](<self>: TestRescue, <magic>$5: T.class_of(<Magic>)):
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb5)

# backedges
# - bb4(rubyRegionId=1)
bb5[rubyRegionId=4, firstDead=-1](<returnMethodTemp>$2: T.untyped):
    <unconditional> -> bb6

# backedges
# - bb5(rubyRegionId=4)
# - bb7(rubyRegionId=2)
# - bb9(rubyRegionId=2)
bb6[rubyRegionId=3, firstDead=-1](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$13: T.nilable(TrueClass)):
    <gotoDeadTemp>$13 -> (T.nilable(TrueClass) ? bb1 : bb10)

# backedges
# - bb3(rubyRegionId=2)
# - bb8(rubyRegionId=2)
bb7[rubyRegionId=2, firstDead=-1](<magic>$5: T.class_of(<Magic>), baz: T.untyped):
    <exceptionValue>$3: NilClass = nil
    <keepForCfgTemp>$6: Sorbet::Private::Static::Void = <magic>$5: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$3: NilClass)
    <returnMethodTemp>$2: T.untyped = baz
    <unconditional> -> bb6

# backedges
# - bb3(rubyRegionId=2)
bb8[rubyRegionId=2, firstDead=-1](<returnMethodTemp>$2: T.untyped, <magic>$5: T.class_of(<Magic>), baz: T.untyped):
    <cfgAlias>$11: T.untyped = alias <C T.untyped>
    <isaCheckTemp>$12: T.untyped = baz: T.untyped.is_a?(<cfgAlias>$11: T.untyped)
    <isaCheckTemp>$12 -> (T.untyped ? bb7 : bb9)

# backedges
# - bb8(rubyRegionId=2)
bb9[rubyRegionId=2, firstDead=-1](<returnMethodTemp>$2: T.untyped):
    <gotoDeadTemp>$13: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb6(rubyRegionId=3)
bb10[rubyRegionId=0, firstDead=1](<returnMethodTemp>$2: T.untyped):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

}

method ::TestRescue#parse_rescue_ensure {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    <magic>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb6(rubyRegionId=3)
# - bb9(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb4(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <returnMethodTemp>$2: T.untyped, <exceptionValue>$3: T.untyped, <magic>$5: T.class_of(<Magic>)):
    <cfgAlias>$8: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$9: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<cfgAlias>$8: T.class_of(StandardError))
    <isaCheckTemp>$9 -> (T.untyped ? bb7 : bb8)

# backedges
# - bb0(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=-1](<self>: TestRescue, <magic>$5: T.class_of(<Magic>)):
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb5)

# backedges
# - bb4(rubyRegionId=1)
bb5[rubyRegionId=4, firstDead=-1](<self>: TestRescue, <returnMethodTemp>$2: T.untyped):
    <unconditional> -> bb6

# backedges
# - bb5(rubyRegionId=4)
# - bb7(rubyRegionId=2)
# - bb8(rubyRegionId=2)
bb6[rubyRegionId=3, firstDead=-1](<self>: TestRescue, <returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$11: T.nilable(TrueClass)):
    <throwAwayTemp>$12: T.untyped = <self>: TestRescue.bar()
    <gotoDeadTemp>$11 -> (T.nilable(TrueClass) ? bb1 : bb9)

# backedges
# - bb3(rubyRegionId=2)
bb7[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <magic>$5: T.class_of(<Magic>)):
    <exceptionValue>$3: NilClass = nil
    <keepForCfgTemp>$6: Sorbet::Private::Static::Void = <magic>$5: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$3: NilClass)
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.baz()
    <unconditional> -> bb6

# backedges
# - bb3(rubyRegionId=2)
bb8[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <returnMethodTemp>$2: T.untyped):
    <gotoDeadTemp>$11: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb6(rubyRegionId=3)
bb9[rubyRegionId=0, firstDead=1](<returnMethodTemp>$2: T.untyped):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

}

method ::TestRescue#parse_bug_rescue_empty_else {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    <magic>$4: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb6(rubyRegionId=3)
# - bb9(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb4(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1](<exceptionValue>$3: T.untyped, <magic>$4: T.class_of(<Magic>)):
    <cfgAlias>$7: T.class_of(LoadError) = alias <C LoadError>
    <isaCheckTemp>$8: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<cfgAlias>$7: T.class_of(LoadError))
    <isaCheckTemp>$8 -> (T.untyped ? bb7 : bb8)

# backedges
# - bb0(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=-1](<magic>$4: T.class_of(<Magic>)):
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb5)

# backedges
# - bb4(rubyRegionId=1)
bb5[rubyRegionId=4, firstDead=-1]():
    <unconditional> -> bb6

# backedges
# - bb5(rubyRegionId=4)
# - bb7(rubyRegionId=2)
# - bb8(rubyRegionId=2)
bb6[rubyRegionId=3, firstDead=-1](<gotoDeadTemp>$9: T.nilable(TrueClass)):
    <gotoDeadTemp>$9 -> (T.nilable(TrueClass) ? bb1 : bb9)

# backedges
# - bb3(rubyRegionId=2)
bb7[rubyRegionId=2, firstDead=-1](<magic>$4: T.class_of(<Magic>)):
    <exceptionValue>$3: NilClass = nil
    <keepForCfgTemp>$5: Sorbet::Private::Static::Void = <magic>$4: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$3: NilClass)
    <unconditional> -> bb6

# backedges
# - bb3(rubyRegionId=2)
bb8[rubyRegionId=2, firstDead=-1]():
    <gotoDeadTemp>$9: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb6(rubyRegionId=3)
bb9[rubyRegionId=0, firstDead=1]():
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

}

method ::TestRescue#parse_ruby_bug_12686 {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    <magic>$7: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$5: T.untyped = <get-current-exception>
    <exceptionValue>$5 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb6(rubyRegionId=3)
# - bb9(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb4(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <statTemp>$4: T.untyped, <exceptionValue>$5: T.untyped, <magic>$7: T.class_of(<Magic>)):
    <cfgAlias>$10: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$11: T.untyped = <exceptionValue>$5: T.untyped.is_a?(<cfgAlias>$10: T.class_of(StandardError))
    <isaCheckTemp>$11 -> (T.untyped ? bb7 : bb8)

# backedges
# - bb0(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=-1](<self>: TestRescue, <magic>$7: T.class_of(<Magic>)):
    <statTemp>$4: T.untyped = <self>: TestRescue.bar()
    <exceptionValue>$5: T.untyped = <get-current-exception>
    <exceptionValue>$5 -> (T.untyped ? bb3 : bb5)

# backedges
# - bb4(rubyRegionId=1)
bb5[rubyRegionId=4, firstDead=-1](<self>: TestRescue, <statTemp>$4: T.untyped):
    <unconditional> -> bb6

# backedges
# - bb5(rubyRegionId=4)
# - bb7(rubyRegionId=2)
# - bb8(rubyRegionId=2)
bb6[rubyRegionId=3, firstDead=-1](<self>: TestRescue, <statTemp>$4: T.untyped, <gotoDeadTemp>$12: T.nilable(TrueClass)):
    <gotoDeadTemp>$12 -> (T.nilable(TrueClass) ? bb1 : bb9)

# backedges
# - bb3(rubyRegionId=2)
bb7[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <magic>$7: T.class_of(<Magic>)):
    <exceptionValue>$5: NilClass = nil
    <keepForCfgTemp>$8: Sorbet::Private::Static::Void = <magic>$7: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$5: NilClass)
    <statTemp>$4: NilClass = nil
    <unconditional> -> bb6

# backedges
# - bb3(rubyRegionId=2)
bb8[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <statTemp>$4: T.untyped):
    <gotoDeadTemp>$12: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb6(rubyRegionId=3)
bb9[rubyRegionId=0, firstDead=2](<self>: TestRescue, <statTemp>$4: T.untyped):
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.take_arg(<statTemp>$4: T.untyped)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

}

method ::TestRescue#parse_rescue_mod {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    <magic>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb6(rubyRegionId=3)
# - bb9(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb4(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <returnMethodTemp>$2: T.untyped, <exceptionValue>$3: T.untyped, <magic>$5: T.class_of(<Magic>)):
    <cfgAlias>$8: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$9: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<cfgAlias>$8: T.class_of(StandardError))
    <isaCheckTemp>$9 -> (T.untyped ? bb7 : bb8)

# backedges
# - bb0(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=-1](<self>: TestRescue, <magic>$5: T.class_of(<Magic>)):
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb5)

# backedges
# - bb4(rubyRegionId=1)
bb5[rubyRegionId=4, firstDead=-1](<returnMethodTemp>$2: T.untyped):
    <unconditional> -> bb6

# backedges
# - bb5(rubyRegionId=4)
# - bb7(rubyRegionId=2)
# - bb8(rubyRegionId=2)
bb6[rubyRegionId=3, firstDead=-1](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$11: T.nilable(TrueClass)):
    <gotoDeadTemp>$11 -> (T.nilable(TrueClass) ? bb1 : bb9)

# backedges
# - bb3(rubyRegionId=2)
bb7[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <magic>$5: T.class_of(<Magic>)):
    <exceptionValue>$3: NilClass = nil
    <keepForCfgTemp>$6: Sorbet::Private::Static::Void = <magic>$5: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$3: NilClass)
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.bar()
    <unconditional> -> bb6

# backedges
# - bb3(rubyRegionId=2)
bb8[rubyRegionId=2, firstDead=-1](<returnMethodTemp>$2: T.untyped):
    <gotoDeadTemp>$11: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb6(rubyRegionId=3)
bb9[rubyRegionId=0, firstDead=1](<returnMethodTemp>$2: T.untyped):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

}

method ::TestRescue#parse_resbody_list_var {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    <magic>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb6(rubyRegionId=3)
# - bb9(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb4(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <returnMethodTemp>$2: T.untyped, <exceptionValue>$3: T.untyped, <magic>$5: T.class_of(<Magic>)):
    ex: T.untyped = <exceptionValue>$3
    <exceptionClassTemp>$7: T.untyped = <self>: TestRescue.foo()
    <isaCheckTemp>$9: T.untyped = ex: T.untyped.is_a?(<exceptionClassTemp>$7: T.untyped)
    <isaCheckTemp>$9 -> (T.untyped ? bb7 : bb8)

# backedges
# - bb0(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=-1](<self>: TestRescue, <magic>$5: T.class_of(<Magic>)):
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb5)

# backedges
# - bb4(rubyRegionId=1)
bb5[rubyRegionId=4, firstDead=-1](<returnMethodTemp>$2: T.untyped):
    <unconditional> -> bb6

# backedges
# - bb5(rubyRegionId=4)
# - bb7(rubyRegionId=2)
# - bb8(rubyRegionId=2)
bb6[rubyRegionId=3, firstDead=-1](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$11: T.nilable(TrueClass)):
    <gotoDeadTemp>$11 -> (T.nilable(TrueClass) ? bb1 : bb9)

# backedges
# - bb3(rubyRegionId=2)
bb7[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <magic>$5: T.class_of(<Magic>)):
    <exceptionValue>$3: NilClass = nil
    <keepForCfgTemp>$6: Sorbet::Private::Static::Void = <magic>$5: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$3: NilClass)
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.bar()
    <unconditional> -> bb6

# backedges
# - bb3(rubyRegionId=2)
bb8[rubyRegionId=2, firstDead=-1](<returnMethodTemp>$2: T.untyped):
    <gotoDeadTemp>$11: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb6(rubyRegionId=3)
bb9[rubyRegionId=0, firstDead=1](<returnMethodTemp>$2: T.untyped):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

}

method ::TestRescue#parse_rescue_else_ensure {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    <magic>$6: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb6(rubyRegionId=3)
# - bb9(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb4(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <returnMethodTemp>$2: T.untyped, <exceptionValue>$3: T.untyped, <magic>$6: T.class_of(<Magic>)):
    <cfgAlias>$9: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$10: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<cfgAlias>$9: T.class_of(StandardError))
    <isaCheckTemp>$10 -> (T.untyped ? bb7 : bb8)

# backedges
# - bb0(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=-1](<self>: TestRescue, <magic>$6: T.class_of(<Magic>)):
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb5)

# backedges
# - bb4(rubyRegionId=1)
bb5[rubyRegionId=4, firstDead=-1](<self>: TestRescue):
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.foo()
    <unconditional> -> bb6

# backedges
# - bb5(rubyRegionId=4)
# - bb7(rubyRegionId=2)
# - bb8(rubyRegionId=2)
bb6[rubyRegionId=3, firstDead=-1](<self>: TestRescue, <returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$12: T.nilable(TrueClass)):
    <throwAwayTemp>$13: T.untyped = <self>: TestRescue.bar()
    <gotoDeadTemp>$12 -> (T.nilable(TrueClass) ? bb1 : bb9)

# backedges
# - bb3(rubyRegionId=2)
bb7[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <magic>$6: T.class_of(<Magic>)):
    <exceptionValue>$3: NilClass = nil
    <keepForCfgTemp>$7: Sorbet::Private::Static::Void = <magic>$6: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$3: NilClass)
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.baz()
    <unconditional> -> bb6

# backedges
# - bb3(rubyRegionId=2)
bb8[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <returnMethodTemp>$2: T.untyped):
    <gotoDeadTemp>$12: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb6(rubyRegionId=3)
bb9[rubyRegionId=0, firstDead=1](<returnMethodTemp>$2: T.untyped):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

}

method ::TestRescue#parse_rescue {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    <magic>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb6(rubyRegionId=3)
# - bb9(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb4(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <returnMethodTemp>$2: T.untyped, <exceptionValue>$3: T.untyped, <magic>$5: T.class_of(<Magic>)):
    <cfgAlias>$8: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$9: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<cfgAlias>$8: T.class_of(StandardError))
    <isaCheckTemp>$9 -> (T.untyped ? bb7 : bb8)

# backedges
# - bb0(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=-1](<self>: TestRescue, <magic>$5: T.class_of(<Magic>)):
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb5)

# backedges
# - bb4(rubyRegionId=1)
bb5[rubyRegionId=4, firstDead=-1](<returnMethodTemp>$2: T.untyped):
    <unconditional> -> bb6

# backedges
# - bb5(rubyRegionId=4)
# - bb7(rubyRegionId=2)
# - bb8(rubyRegionId=2)
bb6[rubyRegionId=3, firstDead=-1](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$11: T.nilable(TrueClass)):
    <gotoDeadTemp>$11 -> (T.nilable(TrueClass) ? bb1 : bb9)

# backedges
# - bb3(rubyRegionId=2)
bb7[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <magic>$5: T.class_of(<Magic>)):
    <exceptionValue>$3: NilClass = nil
    <keepForCfgTemp>$6: Sorbet::Private::Static::Void = <magic>$5: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$3: NilClass)
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.foo()
    <unconditional> -> bb6

# backedges
# - bb3(rubyRegionId=2)
bb8[rubyRegionId=2, firstDead=-1](<returnMethodTemp>$2: T.untyped):
    <gotoDeadTemp>$11: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb6(rubyRegionId=3)
bb9[rubyRegionId=0, firstDead=1](<returnMethodTemp>$2: T.untyped):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

}

method ::TestRescue#parse_resbody_var {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    <magic>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb6(rubyRegionId=3)
# - bb9(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb4(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <returnMethodTemp>$2: T.untyped, <exceptionValue>$3: T.untyped, <magic>$5: T.class_of(<Magic>)):
    ex: T.untyped = <exceptionValue>$3
    <cfgAlias>$8: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$9: T.untyped = ex: T.untyped.is_a?(<cfgAlias>$8: T.class_of(StandardError))
    <isaCheckTemp>$9 -> (T.untyped ? bb7 : bb8)

# backedges
# - bb0(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=-1](<self>: TestRescue, <magic>$5: T.class_of(<Magic>)):
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb5)

# backedges
# - bb4(rubyRegionId=1)
bb5[rubyRegionId=4, firstDead=-1](<returnMethodTemp>$2: T.untyped):
    <unconditional> -> bb6

# backedges
# - bb5(rubyRegionId=4)
# - bb7(rubyRegionId=2)
# - bb8(rubyRegionId=2)
bb6[rubyRegionId=3, firstDead=-1](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$11: T.nilable(TrueClass)):
    <gotoDeadTemp>$11 -> (T.nilable(TrueClass) ? bb1 : bb9)

# backedges
# - bb3(rubyRegionId=2)
bb7[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <magic>$5: T.class_of(<Magic>)):
    <exceptionValue>$3: NilClass = nil
    <keepForCfgTemp>$6: Sorbet::Private::Static::Void = <magic>$5: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$3: NilClass)
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.bar()
    <unconditional> -> bb6

# backedges
# - bb3(rubyRegionId=2)
bb8[rubyRegionId=2, firstDead=-1](<returnMethodTemp>$2: T.untyped):
    <gotoDeadTemp>$11: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb6(rubyRegionId=3)
bb9[rubyRegionId=0, firstDead=1](<returnMethodTemp>$2: T.untyped):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

}

method ::TestRescue#parse_resbody_var_1 {

bb0[rubyRegionId=0, firstDead=-1]():
    @ex$11: T.nilable(StandardError) = alias @ex
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    <magic>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb6(rubyRegionId=3)
# - bb9(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb4(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <returnMethodTemp>$2: T.untyped, <exceptionValue>$3: T.untyped, <magic>$5: T.class_of(<Magic>), @ex$11: T.nilable(StandardError)):
    <rescueTemp>$2: T.untyped = <exceptionValue>$3
    <cfgAlias>$8: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$9: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<cfgAlias>$8: T.class_of(StandardError))
    <isaCheckTemp>$9 -> (T.untyped ? bb7 : bb8)

# backedges
# - bb0(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=-1](<self>: TestRescue, <magic>$5: T.class_of(<Magic>), @ex$11: T.nilable(StandardError)):
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb5)

# backedges
# - bb4(rubyRegionId=1)
bb5[rubyRegionId=4, firstDead=-1](<returnMethodTemp>$2: T.untyped):
    <unconditional> -> bb6

# backedges
# - bb5(rubyRegionId=4)
# - bb7(rubyRegionId=2)
# - bb8(rubyRegionId=2)
bb6[rubyRegionId=3, firstDead=-1](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$13: T.nilable(TrueClass)):
    <gotoDeadTemp>$13 -> (T.nilable(TrueClass) ? bb1 : bb9)

# backedges
# - bb3(rubyRegionId=2)
bb7[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <magic>$5: T.class_of(<Magic>), <rescueTemp>$2: T.untyped, @ex$11: T.nilable(StandardError)):
    <exceptionValue>$3: NilClass = nil
    <keepForCfgTemp>$6: Sorbet::Private::Static::Void = <magic>$5: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$3: NilClass)
    @ex$11: T.untyped = <rescueTemp>$2
    <returnMethodTemp>$2: T.untyped = <self>: TestRescue.bar()
    <unconditional> -> bb6

# backedges
# - bb3(rubyRegionId=2)
bb8[rubyRegionId=2, firstDead=-1](<returnMethodTemp>$2: T.untyped):
    <gotoDeadTemp>$13: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb6(rubyRegionId=3)
bb9[rubyRegionId=0, firstDead=1](<returnMethodTemp>$2: T.untyped):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

}

method ::TestRescue#parse_rescue_mod_op_assign {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    <statTemp>$3: NilClass = foo
    <magic>$7: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$5: T.untyped = <get-current-exception>
    <exceptionValue>$5 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb6(rubyRegionId=3)
# - bb9(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb4(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <statTemp>$3: NilClass, <statTemp>$4: T.untyped, <exceptionValue>$5: T.untyped, <magic>$7: T.class_of(<Magic>)):
    <cfgAlias>$10: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$11: T.untyped = <exceptionValue>$5: T.untyped.is_a?(<cfgAlias>$10: T.class_of(StandardError))
    <isaCheckTemp>$11 -> (T.untyped ? bb7 : bb8)

# backedges
# - bb0(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=-1](<self>: TestRescue, <statTemp>$3: NilClass, <magic>$7: T.class_of(<Magic>)):
    <statTemp>$4: T.untyped = <self>: TestRescue.meth()
    <exceptionValue>$5: T.untyped = <get-current-exception>
    <exceptionValue>$5 -> (T.untyped ? bb3 : bb5)

# backedges
# - bb4(rubyRegionId=1)
bb5[rubyRegionId=4, firstDead=-1](<statTemp>$3: NilClass, <statTemp>$4: T.untyped):
    <unconditional> -> bb6

# backedges
# - bb5(rubyRegionId=4)
# - bb7(rubyRegionId=2)
# - bb8(rubyRegionId=2)
bb6[rubyRegionId=3, firstDead=-1](<statTemp>$3: NilClass, <statTemp>$4: T.untyped, <gotoDeadTemp>$13: T.nilable(TrueClass)):
    <gotoDeadTemp>$13 -> (T.nilable(TrueClass) ? bb1 : bb9)

# backedges
# - bb3(rubyRegionId=2)
bb7[rubyRegionId=2, firstDead=-1](<self>: TestRescue, <statTemp>$3: NilClass, <magic>$7: T.class_of(<Magic>)):
    <exceptionValue>$5: NilClass = nil
    <keepForCfgTemp>$8: Sorbet::Private::Static::Void = <magic>$7: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$5: NilClass)
    <statTemp>$4: T.untyped = <self>: TestRescue.bar()
    <unconditional> -> bb6

# backedges
# - bb3(rubyRegionId=2)
bb8[rubyRegionId=2, firstDead=-1](<statTemp>$3: NilClass, <statTemp>$4: T.untyped):
    <gotoDeadTemp>$13: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb6(rubyRegionId=3)
bb9[rubyRegionId=0, firstDead=3](<statTemp>$3: NilClass, <statTemp>$4: T.untyped):
    foo: T.untyped = <statTemp>$3: NilClass.+(<statTemp>$4: T.untyped)
    <returnMethodTemp>$2: T.untyped = foo
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

}

method ::TestRescue#parse_ruby_bug_12402 {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    <magic>$7: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb6(rubyRegionId=3)
# - bb9(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb4(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1](foo: NilClass, <exceptionValue>$3: T.untyped, <magic>$7: T.class_of(<Magic>)):
    <cfgAlias>$10: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$11: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<cfgAlias>$10: T.class_of(StandardError))
    <isaCheckTemp>$11 -> (T.untyped ? bb7 : bb8)

# backedges
# - bb0(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=2](<self>: TestRescue, <magic>$7: T.class_of(<Magic>)):
    <statTemp>$5: T.untyped = <self>: TestRescue.bar()
    foo: T.noreturn = <self>: TestRescue.raise(<statTemp>$5: T.untyped)
    <exceptionValue>$3 = <get-current-exception>
    <exceptionValue>$3 -> (<nullptr> ? bb3 : bb5)

# backedges
# - bb4(rubyRegionId=1)
bb5[rubyRegionId=4, firstDead=0](foo: NilClass):
    <unconditional> -> bb6

# backedges
# - bb5(rubyRegionId=4)
# - bb7(rubyRegionId=2)
# - bb8(rubyRegionId=2)
bb6[rubyRegionId=3, firstDead=-1](foo: NilClass, <gotoDeadTemp>$12: T.nilable(TrueClass)):
    <gotoDeadTemp>$12 -> (T.nilable(TrueClass) ? bb1 : bb9)

# backedges
# - bb3(rubyRegionId=2)
bb7[rubyRegionId=2, firstDead=-1](<magic>$7: T.class_of(<Magic>)):
    <exceptionValue>$3: NilClass = nil
    <keepForCfgTemp>$8: Sorbet::Private::Static::Void = <magic>$7: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$3: NilClass)
    foo: NilClass = nil
    <unconditional> -> bb6

# backedges
# - bb3(rubyRegionId=2)
bb8[rubyRegionId=2, firstDead=-1](foo: NilClass):
    <gotoDeadTemp>$12: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb6(rubyRegionId=3)
bb9[rubyRegionId=0, firstDead=2](foo: NilClass):
    <returnMethodTemp>$2: NilClass = foo
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

}

method ::TestRescue#parse_ruby_bug_12402_1 {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    <statTemp>$3: NilClass = foo
    <magic>$9: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$5: T.untyped = <get-current-exception>
    <exceptionValue>$5 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb6(rubyRegionId=3)
# - bb9(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb4(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1](<statTemp>$3: NilClass, <statTemp>$4: NilClass, <exceptionValue>$5: T.untyped, <magic>$9: T.class_of(<Magic>)):
    <cfgAlias>$12: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$13: T.untyped = <exceptionValue>$5: T.untyped.is_a?(<cfgAlias>$12: T.class_of(StandardError))
    <isaCheckTemp>$13 -> (T.untyped ? bb7 : bb8)

# backedges
# - bb0(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=2](<self>: TestRescue, <statTemp>$3: NilClass, <magic>$9: T.class_of(<Magic>)):
    <statTemp>$7: T.untyped = <self>: TestRescue.bar()
    <statTemp>$4: T.noreturn = <self>: TestRescue.raise(<statTemp>$7: T.untyped)
    <exceptionValue>$5 = <get-current-exception>
    <exceptionValue>$5 -> (<nullptr> ? bb3 : bb5)

# backedges
# - bb4(rubyRegionId=1)
bb5[rubyRegionId=4, firstDead=0](<statTemp>$3: NilClass, <statTemp>$4: NilClass):
    <unconditional> -> bb6

# backedges
# - bb5(rubyRegionId=4)
# - bb7(rubyRegionId=2)
# - bb8(rubyRegionId=2)
bb6[rubyRegionId=3, firstDead=-1](<statTemp>$3: NilClass, <statTemp>$4: NilClass, <gotoDeadTemp>$14: T.nilable(TrueClass)):
    <gotoDeadTemp>$14 -> (T.nilable(TrueClass) ? bb1 : bb9)

# backedges
# - bb3(rubyRegionId=2)
bb7[rubyRegionId=2, firstDead=-1](<statTemp>$3: NilClass, <magic>$9: T.class_of(<Magic>)):
    <exceptionValue>$5: NilClass = nil
    <keepForCfgTemp>$10: Sorbet::Private::Static::Void = <magic>$9: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$5: NilClass)
    <statTemp>$4: NilClass = nil
    <unconditional> -> bb6

# backedges
# - bb3(rubyRegionId=2)
bb8[rubyRegionId=2, firstDead=-1](<statTemp>$3: NilClass, <statTemp>$4: NilClass):
    <gotoDeadTemp>$14: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb6(rubyRegionId=3)
bb9[rubyRegionId=0, firstDead=3](<statTemp>$3: NilClass, <statTemp>$4: NilClass):
    foo: T.untyped = <statTemp>$3: NilClass.+(<statTemp>$4: NilClass)
    <returnMethodTemp>$2: T.untyped = foo
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

}

method ::TestRescue#parse_ruby_bug_12402_2 {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: TestRescue = cast(<self>: NilClass, TestRescue);
    []$3: T.untyped = <self>: TestRescue.foo()
    []$4: Integer(0) = 0
    <statTemp>$9: T.untyped = []$3: T.untyped.[]([]$4: Integer(0))
    <magic>$17: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$13: T.untyped = <get-current-exception>
    <exceptionValue>$13 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb6(rubyRegionId=3)
# - bb9(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb4(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1]([]$3: T.untyped, []$4: Integer(0), <statTemp>$9: T.untyped, <statTemp>$12: NilClass, <exceptionValue>$13: T.untyped, <magic>$17: T.class_of(<Magic>)):
    <cfgAlias>$20: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$21: T.untyped = <exceptionValue>$13: T.untyped.is_a?(<cfgAlias>$20: T.class_of(StandardError))
    <isaCheckTemp>$21 -> (T.untyped ? bb7 : bb8)

# backedges
# - bb0(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=2](<self>: TestRescue, []$3: T.untyped, []$4: Integer(0), <statTemp>$9: T.untyped, <magic>$17: T.class_of(<Magic>)):
    <statTemp>$15: T.untyped = <self>: TestRescue.bar()
    <statTemp>$12: T.noreturn = <self>: TestRescue.raise(<statTemp>$15: T.untyped)
    <exceptionValue>$13 = <get-current-exception>
    <exceptionValue>$13 -> (<nullptr> ? bb3 : bb5)

# backedges
# - bb4(rubyRegionId=1)
bb5[rubyRegionId=4, firstDead=0]([]$3: NilClass, []$4: NilClass, <statTemp>$9: NilClass, <statTemp>$12: NilClass):
    <unconditional> -> bb6

# backedges
# - bb5(rubyRegionId=4)
# - bb7(rubyRegionId=2)
# - bb8(rubyRegionId=2)
bb6[rubyRegionId=3, firstDead=-1]([]$3: T.untyped, []$4: Integer(0), <statTemp>$9: T.untyped, <statTemp>$12: NilClass, <gotoDeadTemp>$22: T.nilable(TrueClass)):
    <gotoDeadTemp>$22 -> (T.nilable(TrueClass) ? bb1 : bb9)

# backedges
# - bb3(rubyRegionId=2)
bb7[rubyRegionId=2, firstDead=-1]([]$3: T.untyped, []$4: Integer(0), <statTemp>$9: T.untyped, <magic>$17: T.class_of(<Magic>)):
    <exceptionValue>$13: NilClass = nil
    <keepForCfgTemp>$18: Sorbet::Private::Static::Void = <magic>$17: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$13: NilClass)
    <statTemp>$12: NilClass = nil
    <unconditional> -> bb6

# backedges
# - bb3(rubyRegionId=2)
bb8[rubyRegionId=2, firstDead=-1]([]$3: T.untyped, []$4: Integer(0), <statTemp>$9: T.untyped, <statTemp>$12: NilClass):
    <gotoDeadTemp>$22: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb6(rubyRegionId=3)
bb9[rubyRegionId=0, firstDead=3]([]$3: T.untyped, []$4: Integer(0), <statTemp>$9: T.untyped, <statTemp>$12: NilClass):
    <statTemp>$8: T.untyped = <statTemp>$9: T.untyped.+(<statTemp>$12: NilClass)
    <returnMethodTemp>$2: T.untyped = []$3: T.untyped.[]=([]$4: Integer(0), <statTemp>$8: T.untyped)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

}

method ::<Class:TestRescue>#<static-init> {

bb0[rubyRegionId=0, firstDead=86]():
    <self>: T.class_of(TestRescue) = cast(<self>: NilClass, T.class_of(TestRescue));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$7: Symbol(:meth) = :meth
    <statTemp>$8: Symbol(:normal) = :normal
    <statTemp>$3: Symbol(:meth) = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$7: Symbol(:meth), <statTemp>$8: Symbol(:normal))
    <cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$13: Symbol(:foo) = :foo
    <statTemp>$14: Symbol(:normal) = :normal
    <statTemp>$9: Symbol(:foo) = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$13: Symbol(:foo), <statTemp>$14: Symbol(:normal))
    <cfgAlias>$17: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$19: Symbol(:bar) = :bar
    <statTemp>$20: Symbol(:normal) = :normal
    <statTemp>$15: Symbol(:bar) = <cfgAlias>$17: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$19: Symbol(:bar), <statTemp>$20: Symbol(:normal))
    <cfgAlias>$23: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$25: Symbol(:baz) = :baz
    <statTemp>$26: Symbol(:normal) = :normal
    <statTemp>$21: Symbol(:baz) = <cfgAlias>$23: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$25: Symbol(:baz), <statTemp>$26: Symbol(:normal))
    <cfgAlias>$29: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$31: Symbol(:take_arg) = :take_arg
    <statTemp>$32: Symbol(:normal) = :normal
    <statTemp>$27: Symbol(:take_arg) = <cfgAlias>$29: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$31: Symbol(:take_arg), <statTemp>$32: Symbol(:normal))
    <cfgAlias>$35: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$37: Symbol(:initialize) = :initialize
    <statTemp>$38: Symbol(:normal) = :normal
    <statTemp>$33: Symbol(:initialize) = <cfgAlias>$35: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$37: Symbol(:initialize), <statTemp>$38: Symbol(:normal))
    <cfgAlias>$41: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$43: Symbol(:multiple_rescue) = :multiple_rescue
    <statTemp>$44: Symbol(:normal) = :normal
    <statTemp>$39: Symbol(:multiple_rescue) = <cfgAlias>$41: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$43: Symbol(:multiple_rescue), <statTemp>$44: Symbol(:normal))
    <cfgAlias>$47: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$49: Symbol(:multiple_rescue_classes) = :multiple_rescue_classes
    <statTemp>$50: Symbol(:normal) = :normal
    <statTemp>$45: Symbol(:multiple_rescue_classes) = <cfgAlias>$47: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$49: Symbol(:multiple_rescue_classes), <statTemp>$50: Symbol(:normal))
    <cfgAlias>$53: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$55: Symbol(:parse_rescue_ensure) = :parse_rescue_ensure
    <statTemp>$56: Symbol(:normal) = :normal
    <statTemp>$51: Symbol(:parse_rescue_ensure) = <cfgAlias>$53: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$55: Symbol(:parse_rescue_ensure), <statTemp>$56: Symbol(:normal))
    <cfgAlias>$59: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$61: Symbol(:parse_bug_rescue_empty_else) = :parse_bug_rescue_empty_else
    <statTemp>$62: Symbol(:normal) = :normal
    <statTemp>$57: Symbol(:parse_bug_rescue_empty_else) = <cfgAlias>$59: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$61: Symbol(:parse_bug_rescue_empty_else), <statTemp>$62: Symbol(:normal))
    <cfgAlias>$65: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$67: Symbol(:parse_ruby_bug_12686) = :parse_ruby_bug_12686
    <statTemp>$68: Symbol(:normal) = :normal
    <statTemp>$63: Symbol(:parse_ruby_bug_12686) = <cfgAlias>$65: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$67: Symbol(:parse_ruby_bug_12686), <statTemp>$68: Symbol(:normal))
    <cfgAlias>$71: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$73: Symbol(:parse_rescue_mod) = :parse_rescue_mod
    <statTemp>$74: Symbol(:normal) = :normal
    <statTemp>$69: Symbol(:parse_rescue_mod) = <cfgAlias>$71: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$73: Symbol(:parse_rescue_mod), <statTemp>$74: Symbol(:normal))
    <cfgAlias>$77: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$79: Symbol(:parse_resbody_list_var) = :parse_resbody_list_var
    <statTemp>$80: Symbol(:normal) = :normal
    <statTemp>$75: Symbol(:parse_resbody_list_var) = <cfgAlias>$77: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$79: Symbol(:parse_resbody_list_var), <statTemp>$80: Symbol(:normal))
    <cfgAlias>$83: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$85: Symbol(:parse_rescue_else_ensure) = :parse_rescue_else_ensure
    <statTemp>$86: Symbol(:normal) = :normal
    <statTemp>$81: Symbol(:parse_rescue_else_ensure) = <cfgAlias>$83: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$85: Symbol(:parse_rescue_else_ensure), <statTemp>$86: Symbol(:normal))
    <cfgAlias>$89: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$91: Symbol(:parse_rescue) = :parse_rescue
    <statTemp>$92: Symbol(:normal) = :normal
    <statTemp>$87: Symbol(:parse_rescue) = <cfgAlias>$89: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$91: Symbol(:parse_rescue), <statTemp>$92: Symbol(:normal))
    <cfgAlias>$95: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$97: Symbol(:parse_resbody_var) = :parse_resbody_var
    <statTemp>$98: Symbol(:normal) = :normal
    <statTemp>$93: Symbol(:parse_resbody_var) = <cfgAlias>$95: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$97: Symbol(:parse_resbody_var), <statTemp>$98: Symbol(:normal))
    <cfgAlias>$101: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$103: Symbol(:parse_resbody_var_1) = :parse_resbody_var_1
    <statTemp>$104: Symbol(:normal) = :normal
    <statTemp>$99: Symbol(:parse_resbody_var_1) = <cfgAlias>$101: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$103: Symbol(:parse_resbody_var_1), <statTemp>$104: Symbol(:normal))
    <cfgAlias>$107: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$109: Symbol(:parse_rescue_mod_op_assign) = :parse_rescue_mod_op_assign
    <statTemp>$110: Symbol(:normal) = :normal
    <statTemp>$105: Symbol(:parse_rescue_mod_op_assign) = <cfgAlias>$107: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$109: Symbol(:parse_rescue_mod_op_assign), <statTemp>$110: Symbol(:normal))
    <cfgAlias>$113: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$115: Symbol(:parse_ruby_bug_12402) = :parse_ruby_bug_12402
    <statTemp>$116: Symbol(:normal) = :normal
    <statTemp>$111: Symbol(:parse_ruby_bug_12402) = <cfgAlias>$113: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$115: Symbol(:parse_ruby_bug_12402), <statTemp>$116: Symbol(:normal))
    <cfgAlias>$119: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$121: Symbol(:parse_ruby_bug_12402_1) = :parse_ruby_bug_12402_1
    <statTemp>$122: Symbol(:normal) = :normal
    <statTemp>$117: Symbol(:parse_ruby_bug_12402_1) = <cfgAlias>$119: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$121: Symbol(:parse_ruby_bug_12402_1), <statTemp>$122: Symbol(:normal))
    <cfgAlias>$125: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$127: Symbol(:parse_ruby_bug_12402_2) = :parse_ruby_bug_12402_2
    <statTemp>$128: Symbol(:normal) = :normal
    <statTemp>$123: Symbol(:parse_ruby_bug_12402_2) = <cfgAlias>$125: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestRescue), <statTemp>$127: Symbol(:parse_ruby_bug_12402_2), <statTemp>$128: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

