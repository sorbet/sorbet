method ::Object#foo {

bb0[rubyBlockId=0, firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    <arrayTemp>$5: Integer(1) = 1
    <arrayTemp>$6: Integer(2) = 2
    <magic>$7: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$4: [Integer(1), Integer(2)] = <magic>$7: T.class_of(<Magic>).<build-array>(<arrayTemp>$5: Integer(1), <arrayTemp>$6: Integer(2))
    <block-pre-call-temp>$8: Sorbet::Private::Static::Void = <statTemp>$4: [Integer(1), Integer(2)].map()
    <selfRestore>$9: Object = <self>
    <unconditional> -> bb2

# backedges
# - bb4(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb2[rubyBlockId=1, firstDead=-1](<self>: Object, <block-pre-call-temp>$8: Sorbet::Private::Static::Void, <selfRestore>$9: Object):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyBlockId=1)
bb3[rubyBlockId=0, firstDead=-1](<block-pre-call-temp>$8: Sorbet::Private::Static::Void, <selfRestore>$9: Object):
    target: T::Array[T.noreturn] = Solve<<block-pre-call-temp>$8, map>
    <unconditional> -> bb4

# backedges
# - bb3(rubyBlockId=0)
# - bb5(rubyBlockId=1)
bb4[rubyBlockId=0, firstDead=3](target: T.any(T::Array[T.noreturn], Integer), <selfRestore>$9: Object):
    <cfgAlias>$19: T.class_of(T) = alias <C T>
    <returnMethodTemp>$2: T.any(T::Array[T.noreturn], Integer) = <cfgAlias>$19: T.class_of(T).reveal_type(target: T.any(T::Array[T.noreturn], Integer))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.any(T::Array[T.noreturn], Integer)
    <unconditional> -> bb1

# backedges
# - bb2(rubyBlockId=1)
bb5[rubyBlockId=1, firstDead=-1](<self>: Object, <selfRestore>$9: Object):
    # outerLoops: 1
    <self>: Object = loadSelf
    <blk>$10: [Integer] = load_yield_params(map)
    x$1: Integer = yield_load_arg(0)
    <returnTemp>$14: Integer = x$1
    <block-break-assign>$15: Integer = x$1
    <magic>$16: T.class_of(<Magic>) = alias <C <Magic>>
    <block-break>$17: T.untyped = <magic>$16: T.class_of(<Magic>).<block-break>(<returnTemp>$14: Integer)
    target: Integer = <block-break-assign>$15
    <unconditional> -> bb4

}

method ::Object#bar {

bb0[rubyBlockId=0, firstDead=3]():
    <self>: Object = cast(<self>: NilClass, Object);
    <returnMethodTemp>$2: String("foo bar") = "foo bar"
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: String("foo bar")
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[rubyBlockId=0, firstDead=-1]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$7: FalseClass = false
    <statTemp>$8: Symbol(:bar) = :bar
    <block-pre-call-temp>$9: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(<root>), <statTemp>$7: FalseClass, <statTemp>$8: Symbol(:bar))
    <selfRestore>$10: T.class_of(<root>) = <self>
    <unconditional> -> bb2

# backedges
# - bb20(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
# - bb5(rubyBlockId=1)
bb2[rubyBlockId=1, firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(<root>)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyBlockId=1)
bb3[rubyBlockId=0, firstDead=-1](<block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(<root>)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$9, sig>
    <self>: T.class_of(<root>) = <selfRestore>$10
    <cfgAlias>$32: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$34: T.class_of(T) = alias <C T>
    <statTemp>$29: T.class_of(<root>) = <self>: T.class_of(<root>).extend(<cfgAlias>$32: T.class_of(T::Sig))
    <cfgAlias>$37: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$39: Symbol(:foo) = :foo
    <statTemp>$40: Symbol(:normal) = :normal
    <statTemp>$35: Symbol(:foo) = <cfgAlias>$37: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$39: Symbol(:foo), <statTemp>$40: Symbol(:normal))
    <statTemp>$43: T.untyped = <self>: T.class_of(<root>).foo()
    <statTemp>$41: NilClass = <self>: T.class_of(<root>).puts(<statTemp>$43: T.untyped)
    <cfgAlias>$47: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$49: Symbol(:bar) = :bar
    <statTemp>$50: Symbol(:normal) = :normal
    <statTemp>$45: Symbol(:bar) = <cfgAlias>$47: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$49: Symbol(:bar), <statTemp>$50: Symbol(:normal))
    <block-pre-call-temp>$53: Sorbet::Private::Static::Void = <self>: T.class_of(<root>).bar()
    <selfRestore>$54: T.class_of(<root>) = <self>
    <unconditional> -> bb6

# backedges
# - bb2(rubyBlockId=1)
bb5[rubyBlockId=1, firstDead=13](<self>: T.class_of(<root>), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(<root>)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf
    <hashTemp>$15: Symbol(:blk) = :blk
    <cfgAlias>$20: T.class_of(T) = alias <C T>
    <statTemp>$18: T.class_of(T.proc) = <cfgAlias>$20: T.class_of(T).proc()
    <hashTemp>$21: Symbol(:x) = :x
    <cfgAlias>$23: T.class_of(Integer) = alias <C Integer>
    <statTemp>$17: T.class_of(T.proc) = <statTemp>$18: T.class_of(T.proc).params(<hashTemp>$21: Symbol(:x), <cfgAlias>$23: T.class_of(Integer))
    <cfgAlias>$25: T.class_of(String) = alias <C String>
    <hashTemp>$16: T.class_of(T.proc) = <statTemp>$17: T.class_of(T.proc).returns(<cfgAlias>$25: T.class_of(String))
    <statTemp>$13: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$15: Symbol(:blk), <hashTemp>$16: T.class_of(T.proc))
    <cfgAlias>$27: T.class_of(String) = alias <C String>
    <blockReturnTemp>$12: T::Private::Methods::DeclBuilder = <statTemp>$13: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$27: T.class_of(String))
    <blockReturnTemp>$28: T.noreturn = blockreturn<sig> <blockReturnTemp>$12: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

# backedges
# - bb3(rubyBlockId=0)
# - bb11(rubyBlockId=2)
bb6[rubyBlockId=2, firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$53: Sorbet::Private::Static::Void, <selfRestore>$54: T.class_of(<root>)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb9 : bb7)

# backedges
# - bb6(rubyBlockId=2)
bb7[rubyBlockId=0, firstDead=-1](<block-pre-call-temp>$53: Sorbet::Private::Static::Void, <selfRestore>$54: T.class_of(<root>)):
    a: String = Solve<<block-pre-call-temp>$53, bar>
    <unconditional> -> bb8

# backedges
# - bb7(rubyBlockId=0)
# - bb10(rubyBlockId=2)
bb8[rubyBlockId=0, firstDead=-1](a: T.any(String, Integer), <selfRestore>$54: T.class_of(<root>)):
    <self>: T.class_of(<root>) = <selfRestore>$54
    <cfgAlias>$68: T.class_of(T) = alias <C T>
    <statTemp>$66: T.any(String, Integer) = <cfgAlias>$68: T.class_of(T).reveal_type(a: T.any(String, Integer))
    <block-pre-call-temp>$72: Sorbet::Private::Static::Void = <self>: T.class_of(<root>).bar()
    <selfRestore>$73: T.class_of(<root>) = <self>
    <unconditional> -> bb12

# backedges
# - bb6(rubyBlockId=2)
bb9[rubyBlockId=2, firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$53: Sorbet::Private::Static::Void, <selfRestore>$54: T.class_of(<root>)):
    # outerLoops: 1
    <self>: T.class_of(<root>) = loadSelf
    <blk>$55: [Integer] = load_yield_params(bar)
    x$2: Integer = yield_load_arg(0)
    <statTemp>$60: Integer(5) = 5
    <ifTemp>$58: T::Boolean = x$2: Integer.>(<statTemp>$60: Integer(5))
    <ifTemp>$58 -> (T::Boolean ? bb10 : bb11)

# backedges
# - bb9(rubyBlockId=2)
bb10[rubyBlockId=2, firstDead=-1](<selfRestore>$54: T.class_of(<root>)):
    # outerLoops: 1
    <returnTemp>$61: Integer(10) = 10
    <block-break-assign>$62: Integer(10) = <returnTemp>$61
    <magic>$63: T.class_of(<Magic>) = alias <C <Magic>>
    <block-break>$64: T.untyped = <magic>$63: T.class_of(<Magic>).<block-break>(<returnTemp>$61: Integer(10))
    a: Integer(10) = <block-break-assign>$62
    <unconditional> -> bb8

# backedges
# - bb9(rubyBlockId=2)
bb11[rubyBlockId=2, firstDead=2](<self>: T.class_of(<root>), <block-pre-call-temp>$53: Sorbet::Private::Static::Void, <selfRestore>$54: T.class_of(<root>)):
    # outerLoops: 1
    <blockReturnTemp>$56: String("test") = "test"
    <blockReturnTemp>$65: T.noreturn = blockreturn<bar> <blockReturnTemp>$56: String("test")
    <unconditional> -> bb6

# backedges
# - bb8(rubyBlockId=0)
# - bb17(rubyBlockId=3)
bb12[rubyBlockId=3, firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$72: Sorbet::Private::Static::Void, <selfRestore>$73: T.class_of(<root>)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb15 : bb13)

# backedges
# - bb12(rubyBlockId=3)
bb13[rubyBlockId=0, firstDead=-1](<block-pre-call-temp>$72: Sorbet::Private::Static::Void, <selfRestore>$73: T.class_of(<root>)):
    b: String = Solve<<block-pre-call-temp>$72, bar>
    <unconditional> -> bb14

# backedges
# - bb13(rubyBlockId=0)
# - bb16(rubyBlockId=3)
bb14[rubyBlockId=0, firstDead=-1](b: T.nilable(String), <selfRestore>$73: T.class_of(<root>)):
    <cfgAlias>$87: T.class_of(T) = alias <C T>
    <statTemp>$85: T.nilable(String) = <cfgAlias>$87: T.class_of(T).reveal_type(b: T.nilable(String))
    <unconditional> -> bb18

# backedges
# - bb12(rubyBlockId=3)
bb15[rubyBlockId=3, firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$72: Sorbet::Private::Static::Void, <selfRestore>$73: T.class_of(<root>)):
    # outerLoops: 1
    <self>: T.class_of(<root>) = loadSelf
    <blk>$74: [Integer] = load_yield_params(bar)
    x$3: Integer = yield_load_arg(0)
    <statTemp>$79: Integer(5) = 5
    <ifTemp>$77: T::Boolean = x$3: Integer.>(<statTemp>$79: Integer(5))
    <ifTemp>$77 -> (T::Boolean ? bb16 : bb17)

# backedges
# - bb15(rubyBlockId=3)
bb16[rubyBlockId=3, firstDead=-1](<selfRestore>$73: T.class_of(<root>)):
    # outerLoops: 1
    <block-break-assign>$81: NilClass = <returnTemp>$80
    <magic>$82: T.class_of(<Magic>) = alias <C <Magic>>
    <block-break>$83: T.untyped = <magic>$82: T.class_of(<Magic>).<block-break>(<returnTemp>$80: NilClass)
    b: NilClass = <block-break-assign>$81
    <unconditional> -> bb14

# backedges
# - bb15(rubyBlockId=3)
bb17[rubyBlockId=3, firstDead=2](<self>: T.class_of(<root>), <block-pre-call-temp>$72: Sorbet::Private::Static::Void, <selfRestore>$73: T.class_of(<root>)):
    # outerLoops: 1
    <blockReturnTemp>$75: String("test") = "test"
    <blockReturnTemp>$84: T.noreturn = blockreturn<bar> <blockReturnTemp>$75: String("test")
    <unconditional> -> bb12

# backedges
# - bb14(rubyBlockId=0)
# - bb21(rubyBlockId=0)
bb18[rubyBlockId=0, firstDead=-1]():
    # outerLoops: 1
    <statTemp>$92: Integer(1) = 1
    <statTemp>$91: String = <statTemp>$92: Integer(1).to_s()
    <statTemp>$93: String("") = ""
    <whileTemp>$90: T::Boolean = <statTemp>$91: String.==(<statTemp>$93: String(""))
    <whileTemp>$90 -> (T::Boolean ? bb21 : bb19)

# backedges
# - bb18(rubyBlockId=0)
bb19[rubyBlockId=0, firstDead=-1]():
    c: NilClass = nil
    <unconditional> -> bb20

# backedges
# - bb19(rubyBlockId=0)
# - bb22(rubyBlockId=0)
bb20[rubyBlockId=0, firstDead=3](c: T.nilable(Symbol)):
    <cfgAlias>$103: T.class_of(T) = alias <C T>
    <statTemp>$101: T.nilable(Symbol) = <cfgAlias>$103: T.class_of(T).reveal_type(c: T.nilable(Symbol))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb18(rubyBlockId=0)
bb21[rubyBlockId=0, firstDead=-1]():
    # outerLoops: 1
    <statTemp>$97: Integer(1) = 1
    <statTemp>$96: String = <statTemp>$97: Integer(1).to_s()
    <statTemp>$98: String("") = ""
    <ifTemp>$95: T::Boolean = <statTemp>$96: String.==(<statTemp>$98: String(""))
    <ifTemp>$95 -> (T::Boolean ? bb22 : bb18)

# backedges
# - bb21(rubyBlockId=0)
bb22[rubyBlockId=0, firstDead=-1]():
    # outerLoops: 1
    <returnTemp>$99: Symbol(:abc) = :abc
    <block-break-assign>$100: Symbol(:abc) = <returnTemp>$99
    c: Symbol(:abc) = <block-break-assign>$100
    <unconditional> -> bb20

}

