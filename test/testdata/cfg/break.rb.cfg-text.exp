method ::Object#foo {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    <arrayTemp>$5: Integer(1) = 1
    <arrayTemp>$6: Integer(2) = 2
    <magic>$7: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$4: [Integer(1), Integer(2)] = <magic>$7: T.class_of(<Magic>).<build-array>(<arrayTemp>$5: Integer(1), <arrayTemp>$6: Integer(2))
    <block-pre-call-temp>$8: Sorbet::Private::Static::Void = <statTemp>$4: [Integer(1), Integer(2)].map()
    <selfRestore>$9: Object = <self>
    <unconditional> -> bb2

# backedges
# - bb4(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=1, firstDead=-1](<self>: Object, <block-pre-call-temp>$8: Sorbet::Private::Static::Void, <selfRestore>$9: Object):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$8: Sorbet::Private::Static::Void, <selfRestore>$9: Object):
    target: T::Array[T.noreturn] = Solve<<block-pre-call-temp>$8, map>
    <unconditional> -> bb4

# backedges
# - bb3(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb4[rubyRegionId=0, firstDead=3](target: T.any(T::Array[T.noreturn], Integer), <selfRestore>$9: Object):
    <cfgAlias>$19: T.class_of(T) = alias <C T>
    <returnMethodTemp>$2: T.any(T::Array[T.noreturn], Integer) = <cfgAlias>$19: T.class_of(T).reveal_type(target: T.any(T::Array[T.noreturn], Integer))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.any(T::Array[T.noreturn], Integer)
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=-1](<self>: Object, <selfRestore>$9: Object):
    # outerLoops: 1
    <self>: Object = loadSelf(map)
    <blk>$10: [Integer] = load_yield_params(map)
    x$1: Integer = yield_load_arg(0, <blk>$10: [Integer])
    <returnTemp>$14: Integer = x$1
    <block-break-assign>$15: Integer = x$1
    <magic>$16: T.class_of(<Magic>) = alias <C <Magic>>
    <block-break>$17: T.untyped = <magic>$16: T.class_of(<Magic>).<block-break>(<returnTemp>$14: Integer)
    target: Integer = <block-break-assign>$15
    <unconditional> -> bb4

}

method ::Object#bar {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: Object = cast(<self>: NilClass, Object);
    <returnMethodTemp>$2: String("foo bar") = "foo bar"
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: String("foo bar")
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$7: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(<root>))
    <selfRestore>$8: T.class_of(<root>) = <self>
    <unconditional> -> bb2

# backedges
# - bb20(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(<root>)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(<root>)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$7, sig>
    <self>: T.class_of(<root>) = <selfRestore>$8
    <cfgAlias>$29: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$31: T.class_of(T) = alias <C T>
    <statTemp>$26: T.class_of(<root>) = <self>: T.class_of(<root>).extend(<cfgAlias>$29: T.class_of(T::Sig))
    <statTemp>$35: T.untyped = <self>: T.class_of(<root>).foo()
    <statTemp>$33: NilClass = <self>: T.class_of(<root>).puts(<statTemp>$35: T.untyped)
    <block-pre-call-temp>$40: Sorbet::Private::Static::Void = <self>: T.class_of(<root>).bar()
    <selfRestore>$41: T.class_of(<root>) = <self>
    <unconditional> -> bb6

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=13](<self>: T.class_of(<root>), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(<root>)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$12: Symbol(:blk) = :blk
    <cfgAlias>$17: T.class_of(T) = alias <C T>
    <statTemp>$15: T.class_of(T.proc) = <cfgAlias>$17: T.class_of(T).proc()
    <hashTemp>$18: Symbol(:x) = :x
    <cfgAlias>$20: T.class_of(Integer) = alias <C Integer>
    <statTemp>$14: Runtime object representing type: T.proc.params(arg0: Integer).returns(<todo sym>) = <statTemp>$15: T.class_of(T.proc).params(<hashTemp>$18: Symbol(:x), <cfgAlias>$20: T.class_of(Integer))
    <cfgAlias>$22: T.class_of(String) = alias <C String>
    <hashTemp>$13: Runtime object representing type: T.proc.params(arg0: Integer).returns(String) = <statTemp>$14: Runtime object representing type: T.proc.params(arg0: Integer).returns(<todo sym>).returns(<cfgAlias>$22: T.class_of(String))
    <statTemp>$10: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$12: Symbol(:blk), <hashTemp>$13: Runtime object representing type: T.proc.params(arg0: Integer).returns(String))
    <cfgAlias>$24: T.class_of(String) = alias <C String>
    <blockReturnTemp>$9: T::Private::Methods::DeclBuilder = <statTemp>$10: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$24: T.class_of(String))
    <blockReturnTemp>$25: T.noreturn = blockreturn<sig> <blockReturnTemp>$9: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
# - bb11(rubyRegionId=2)
bb6[rubyRegionId=2, firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$40: Sorbet::Private::Static::Void, <selfRestore>$41: T.class_of(<root>)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb9 : bb7)

# backedges
# - bb6(rubyRegionId=2)
bb7[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$40: Sorbet::Private::Static::Void, <selfRestore>$41: T.class_of(<root>)):
    a: String = Solve<<block-pre-call-temp>$40, bar>
    <unconditional> -> bb8

# backedges
# - bb7(rubyRegionId=0)
# - bb10(rubyRegionId=2)
bb8[rubyRegionId=0, firstDead=-1](a: T.any(String, Integer), <selfRestore>$41: T.class_of(<root>)):
    <self>: T.class_of(<root>) = <selfRestore>$41
    <cfgAlias>$55: T.class_of(T) = alias <C T>
    <statTemp>$53: T.any(String, Integer) = <cfgAlias>$55: T.class_of(T).reveal_type(a: T.any(String, Integer))
    <block-pre-call-temp>$59: Sorbet::Private::Static::Void = <self>: T.class_of(<root>).bar()
    <selfRestore>$60: T.class_of(<root>) = <self>
    <unconditional> -> bb12

# backedges
# - bb6(rubyRegionId=2)
bb9[rubyRegionId=2, firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$40: Sorbet::Private::Static::Void, <selfRestore>$41: T.class_of(<root>)):
    # outerLoops: 1
    <self>: T.class_of(<root>) = loadSelf(bar)
    <blk>$42: [Integer] = load_yield_params(bar)
    x$2: Integer = yield_load_arg(0, <blk>$42: [Integer])
    <statTemp>$47: Integer(5) = 5
    <ifTemp>$45: T::Boolean = x$2: Integer.>(<statTemp>$47: Integer(5))
    <ifTemp>$45 -> (T::Boolean ? bb10 : bb11)

# backedges
# - bb9(rubyRegionId=2)
bb10[rubyRegionId=2, firstDead=-1](<selfRestore>$41: T.class_of(<root>)):
    # outerLoops: 1
    <returnTemp>$48: Integer(10) = 10
    <block-break-assign>$49: Integer(10) = <returnTemp>$48
    <magic>$50: T.class_of(<Magic>) = alias <C <Magic>>
    <block-break>$51: T.untyped = <magic>$50: T.class_of(<Magic>).<block-break>(<returnTemp>$48: Integer(10))
    a: Integer(10) = <block-break-assign>$49
    <unconditional> -> bb8

# backedges
# - bb9(rubyRegionId=2)
bb11[rubyRegionId=2, firstDead=2](<self>: T.class_of(<root>), <block-pre-call-temp>$40: Sorbet::Private::Static::Void, <selfRestore>$41: T.class_of(<root>)):
    # outerLoops: 1
    <blockReturnTemp>$43: String("test") = "test"
    <blockReturnTemp>$52: T.noreturn = blockreturn<bar> <blockReturnTemp>$43: String("test")
    <unconditional> -> bb6

# backedges
# - bb8(rubyRegionId=0)
# - bb17(rubyRegionId=3)
bb12[rubyRegionId=3, firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$59: Sorbet::Private::Static::Void, <selfRestore>$60: T.class_of(<root>)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb15 : bb13)

# backedges
# - bb12(rubyRegionId=3)
bb13[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$59: Sorbet::Private::Static::Void, <selfRestore>$60: T.class_of(<root>)):
    b: String = Solve<<block-pre-call-temp>$59, bar>
    <unconditional> -> bb14

# backedges
# - bb13(rubyRegionId=0)
# - bb16(rubyRegionId=3)
bb14[rubyRegionId=0, firstDead=-1](b: T.nilable(String), <selfRestore>$60: T.class_of(<root>)):
    <cfgAlias>$74: T.class_of(T) = alias <C T>
    <statTemp>$72: T.nilable(String) = <cfgAlias>$74: T.class_of(T).reveal_type(b: T.nilable(String))
    <unconditional> -> bb18

# backedges
# - bb12(rubyRegionId=3)
bb15[rubyRegionId=3, firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$59: Sorbet::Private::Static::Void, <selfRestore>$60: T.class_of(<root>)):
    # outerLoops: 1
    <self>: T.class_of(<root>) = loadSelf(bar)
    <blk>$61: [Integer] = load_yield_params(bar)
    x$3: Integer = yield_load_arg(0, <blk>$61: [Integer])
    <statTemp>$66: Integer(5) = 5
    <ifTemp>$64: T::Boolean = x$3: Integer.>(<statTemp>$66: Integer(5))
    <ifTemp>$64 -> (T::Boolean ? bb16 : bb17)

# backedges
# - bb15(rubyRegionId=3)
bb16[rubyRegionId=3, firstDead=-1](<selfRestore>$60: T.class_of(<root>)):
    # outerLoops: 1
    <block-break-assign>$68: NilClass = <returnTemp>$67
    <magic>$69: T.class_of(<Magic>) = alias <C <Magic>>
    <block-break>$70: T.untyped = <magic>$69: T.class_of(<Magic>).<block-break>(<returnTemp>$67: NilClass)
    b: NilClass = <block-break-assign>$68
    <unconditional> -> bb14

# backedges
# - bb15(rubyRegionId=3)
bb17[rubyRegionId=3, firstDead=2](<self>: T.class_of(<root>), <block-pre-call-temp>$59: Sorbet::Private::Static::Void, <selfRestore>$60: T.class_of(<root>)):
    # outerLoops: 1
    <blockReturnTemp>$62: String("test") = "test"
    <blockReturnTemp>$71: T.noreturn = blockreturn<bar> <blockReturnTemp>$62: String("test")
    <unconditional> -> bb12

# backedges
# - bb14(rubyRegionId=0)
# - bb21(rubyRegionId=0)
bb18[rubyRegionId=0, firstDead=-1]():
    # outerLoops: 1
    <statTemp>$79: Integer(1) = 1
    <statTemp>$78: String = <statTemp>$79: Integer(1).to_s()
    <statTemp>$80: String("") = ""
    <whileTemp>$77: T::Boolean = <statTemp>$78: String.==(<statTemp>$80: String(""))
    <whileTemp>$77 -> (T::Boolean ? bb21 : bb19)

# backedges
# - bb18(rubyRegionId=0)
bb19[rubyRegionId=0, firstDead=-1]():
    c: NilClass = nil
    <unconditional> -> bb20

# backedges
# - bb19(rubyRegionId=0)
# - bb22(rubyRegionId=0)
bb20[rubyRegionId=0, firstDead=3](c: T.nilable(Symbol)):
    <cfgAlias>$90: T.class_of(T) = alias <C T>
    <statTemp>$88: T.nilable(Symbol) = <cfgAlias>$90: T.class_of(T).reveal_type(c: T.nilable(Symbol))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb18(rubyRegionId=0)
bb21[rubyRegionId=0, firstDead=-1]():
    # outerLoops: 1
    <statTemp>$84: Integer(1) = 1
    <statTemp>$83: String = <statTemp>$84: Integer(1).to_s()
    <statTemp>$85: String("") = ""
    <ifTemp>$82: T::Boolean = <statTemp>$83: String.==(<statTemp>$85: String(""))
    <ifTemp>$82 -> (T::Boolean ? bb22 : bb18)

# backedges
# - bb21(rubyRegionId=0)
bb22[rubyRegionId=0, firstDead=-1]():
    # outerLoops: 1
    <returnTemp>$86: Symbol(:abc) = :abc
    <block-break-assign>$87: Symbol(:abc) = <returnTemp>$86
    c: Symbol(:abc) = <block-break-assign>$87
    <unconditional> -> bb20

}

