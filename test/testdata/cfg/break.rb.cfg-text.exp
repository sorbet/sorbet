method ::Object#foo {

bb0[firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    <arrayTemp>$5: Integer(1) = 1
    <arrayTemp>$6: Integer(2) = 2
    <magic>$7: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$4: [Integer(1), Integer(2)] = <magic>$7: T.class_of(<Magic>).<build-array>(<arrayTemp>$5: Integer(1), <arrayTemp>$6: Integer(2))
    <block-pre-call-temp>$8: Sorbet::Private::Static::Void = <statTemp>$4: [Integer(1), Integer(2)].map()
    <selfRestore>$9: Object = <self>
    <unconditional> -> bb2

# backedges
# - bb4
bb1[firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0
bb2[firstDead=-1](<self>: Object, <block-pre-call-temp>$8: Sorbet::Private::Static::Void, <selfRestore>$9: Object):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2
bb3[firstDead=-1](<block-pre-call-temp>$8: Sorbet::Private::Static::Void, <selfRestore>$9: Object):
    target: T::Array[T.noreturn] = Solve<<block-pre-call-temp>$8, map>
    <unconditional> -> bb4

# backedges
# - bb3
# - bb5
bb4[firstDead=3](target: T.any(T::Array[T.noreturn], Integer), <selfRestore>$9: Object):
    <cfgAlias>$19: T.class_of(T) = alias <C T>
    <returnMethodTemp>$2: T.any(T::Array[T.noreturn], Integer) = <cfgAlias>$19: T.class_of(T).reveal_type(target: T.any(T::Array[T.noreturn], Integer))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.any(T::Array[T.noreturn], Integer)
    <unconditional> -> bb1

# backedges
# - bb2
bb5[firstDead=-1](<self>: Object, <selfRestore>$9: Object):
    # outerLoops: 1
    <self>: Object = loadSelf(map)
    <blk>$10: [Integer] = load_yield_params(map)
    x$1: Integer = yield_load_arg(0, <blk>$10: [Integer])
    <returnTemp>$14: Integer = x$1
    <block-break-assign>$15: Integer = x$1
    <magic>$16: T.class_of(<Magic>) = alias <C <Magic>>
    <block-break>$17: T.untyped = <magic>$16: T.class_of(<Magic>).<block-break>(<returnTemp>$14: Integer)
    target: Integer = <block-break-assign>$15
    <unconditional> -> bb4

}

method ::Object#bar {

bb0[firstDead=3]():
    <self>: Object = cast(<self>: NilClass, Object);
    <returnMethodTemp>$2: String("foo bar") = "foo bar"
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: String("foo bar")
    <unconditional> -> bb1

# backedges
# - bb0
bb1[firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[firstDead=-1]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <block-pre-call-temp>$5: Sorbet::Private::Static::Void = <self>: T.class_of(<root>).sig()
    <selfRestore>$6: T.class_of(<root>) = <self>
    <unconditional> -> bb2

# backedges
# - bb20
bb1[firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0
# - bb5
bb2[firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: T.class_of(<root>)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2
bb3[firstDead=-1](<block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: T.class_of(<root>)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$5, sig>
    <self>: T.class_of(<root>) = <selfRestore>$6
    <cfgAlias>$27: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$29: T.class_of(T) = alias <C T>
    <statTemp>$24: T.class_of(<root>) = <self>: T.class_of(<root>).extend(<cfgAlias>$27: T.class_of(T::Sig))
    <statTemp>$33: T.untyped = <self>: T.class_of(<root>).foo()
    <statTemp>$31: NilClass = <self>: T.class_of(<root>).puts(<statTemp>$33: T.untyped)
    <block-pre-call-temp>$38: Sorbet::Private::Static::Void = <self>: T.class_of(<root>).bar()
    <selfRestore>$39: T.class_of(<root>) = <self>
    <unconditional> -> bb6

# backedges
# - bb2
bb5[firstDead=13](<self>: T.class_of(<root>), <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: T.class_of(<root>)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$10: Symbol(:blk) = :blk
    <cfgAlias>$15: T.class_of(T) = alias <C T>
    <statTemp>$13: T.class_of(T.proc) = <cfgAlias>$15: T.class_of(T).proc()
    <hashTemp>$16: Symbol(:x) = :x
    <cfgAlias>$18: T.class_of(Integer) = alias <C Integer>
    <statTemp>$12: Runtime object representing type: T.proc.params(arg0: Integer).returns(<todo sym>) = <statTemp>$13: T.class_of(T.proc).params(<hashTemp>$16: Symbol(:x), <cfgAlias>$18: T.class_of(Integer))
    <cfgAlias>$20: T.class_of(String) = alias <C String>
    <hashTemp>$11: Runtime object representing type: T.proc.params(arg0: Integer).returns(String) = <statTemp>$12: Runtime object representing type: T.proc.params(arg0: Integer).returns(<todo sym>).returns(<cfgAlias>$20: T.class_of(String))
    <statTemp>$8: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$10: Symbol(:blk), <hashTemp>$11: Runtime object representing type: T.proc.params(arg0: Integer).returns(String))
    <cfgAlias>$22: T.class_of(String) = alias <C String>
    <blockReturnTemp>$7: T::Private::Methods::DeclBuilder = <statTemp>$8: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$22: T.class_of(String))
    <blockReturnTemp>$23: T.noreturn = blockreturn<sig> <blockReturnTemp>$7: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

# backedges
# - bb3
# - bb11
bb6[firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$38: Sorbet::Private::Static::Void, <selfRestore>$39: T.class_of(<root>)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb9 : bb7)

# backedges
# - bb6
bb7[firstDead=-1](<block-pre-call-temp>$38: Sorbet::Private::Static::Void, <selfRestore>$39: T.class_of(<root>)):
    a: String = Solve<<block-pre-call-temp>$38, bar>
    <unconditional> -> bb8

# backedges
# - bb7
# - bb10
bb8[firstDead=-1](a: T.any(String, Integer), <selfRestore>$39: T.class_of(<root>)):
    <self>: T.class_of(<root>) = <selfRestore>$39
    <cfgAlias>$53: T.class_of(T) = alias <C T>
    <statTemp>$51: T.any(String, Integer) = <cfgAlias>$53: T.class_of(T).reveal_type(a: T.any(String, Integer))
    <block-pre-call-temp>$57: Sorbet::Private::Static::Void = <self>: T.class_of(<root>).bar()
    <selfRestore>$58: T.class_of(<root>) = <self>
    <unconditional> -> bb12

# backedges
# - bb6
bb9[firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$38: Sorbet::Private::Static::Void, <selfRestore>$39: T.class_of(<root>)):
    # outerLoops: 1
    <self>: T.class_of(<root>) = loadSelf(bar)
    <blk>$40: [Integer] = load_yield_params(bar)
    x$2: Integer = yield_load_arg(0, <blk>$40: [Integer])
    <statTemp>$45: Integer(5) = 5
    <ifTemp>$43: T::Boolean = x$2: Integer.>(<statTemp>$45: Integer(5))
    <ifTemp>$43 -> (T::Boolean ? bb10 : bb11)

# backedges
# - bb9
bb10[firstDead=-1](<selfRestore>$39: T.class_of(<root>)):
    # outerLoops: 1
    <returnTemp>$46: Integer(10) = 10
    <block-break-assign>$47: Integer(10) = <returnTemp>$46
    <magic>$48: T.class_of(<Magic>) = alias <C <Magic>>
    <block-break>$49: T.untyped = <magic>$48: T.class_of(<Magic>).<block-break>(<returnTemp>$46: Integer(10))
    a: Integer(10) = <block-break-assign>$47
    <unconditional> -> bb8

# backedges
# - bb9
bb11[firstDead=2](<self>: T.class_of(<root>), <block-pre-call-temp>$38: Sorbet::Private::Static::Void, <selfRestore>$39: T.class_of(<root>)):
    # outerLoops: 1
    <blockReturnTemp>$41: String("test") = "test"
    <blockReturnTemp>$50: T.noreturn = blockreturn<bar> <blockReturnTemp>$41: String("test")
    <unconditional> -> bb6

# backedges
# - bb8
# - bb17
bb12[firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$57: Sorbet::Private::Static::Void, <selfRestore>$58: T.class_of(<root>)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb15 : bb13)

# backedges
# - bb12
bb13[firstDead=-1](<block-pre-call-temp>$57: Sorbet::Private::Static::Void, <selfRestore>$58: T.class_of(<root>)):
    b: String = Solve<<block-pre-call-temp>$57, bar>
    <unconditional> -> bb14

# backedges
# - bb13
# - bb16
bb14[firstDead=-1](b: T.nilable(String), <selfRestore>$58: T.class_of(<root>)):
    <cfgAlias>$72: T.class_of(T) = alias <C T>
    <statTemp>$70: T.nilable(String) = <cfgAlias>$72: T.class_of(T).reveal_type(b: T.nilable(String))
    <unconditional> -> bb18

# backedges
# - bb12
bb15[firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$57: Sorbet::Private::Static::Void, <selfRestore>$58: T.class_of(<root>)):
    # outerLoops: 1
    <self>: T.class_of(<root>) = loadSelf(bar)
    <blk>$59: [Integer] = load_yield_params(bar)
    x$3: Integer = yield_load_arg(0, <blk>$59: [Integer])
    <statTemp>$64: Integer(5) = 5
    <ifTemp>$62: T::Boolean = x$3: Integer.>(<statTemp>$64: Integer(5))
    <ifTemp>$62 -> (T::Boolean ? bb16 : bb17)

# backedges
# - bb15
bb16[firstDead=-1](<selfRestore>$58: T.class_of(<root>)):
    # outerLoops: 1
    <block-break-assign>$66: NilClass = <returnTemp>$65
    <magic>$67: T.class_of(<Magic>) = alias <C <Magic>>
    <block-break>$68: T.untyped = <magic>$67: T.class_of(<Magic>).<block-break>(<returnTemp>$65: NilClass)
    b: NilClass = <block-break-assign>$66
    <unconditional> -> bb14

# backedges
# - bb15
bb17[firstDead=2](<self>: T.class_of(<root>), <block-pre-call-temp>$57: Sorbet::Private::Static::Void, <selfRestore>$58: T.class_of(<root>)):
    # outerLoops: 1
    <blockReturnTemp>$60: String("test") = "test"
    <blockReturnTemp>$69: T.noreturn = blockreturn<bar> <blockReturnTemp>$60: String("test")
    <unconditional> -> bb12

# backedges
# - bb14
# - bb21
bb18[firstDead=-1]():
    # outerLoops: 1
    <statTemp>$77: Integer(1) = 1
    <statTemp>$76: String = <statTemp>$77: Integer(1).to_s()
    <statTemp>$78: String("") = ""
    <whileTemp>$75: T::Boolean = <statTemp>$76: String.==(<statTemp>$78: String(""))
    <whileTemp>$75 -> (T::Boolean ? bb21 : bb19)

# backedges
# - bb18
bb19[firstDead=-1]():
    c: NilClass = nil
    <unconditional> -> bb20

# backedges
# - bb19
# - bb22
bb20[firstDead=3](c: T.nilable(Symbol)):
    <cfgAlias>$88: T.class_of(T) = alias <C T>
    <statTemp>$86: T.nilable(Symbol) = <cfgAlias>$88: T.class_of(T).reveal_type(c: T.nilable(Symbol))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb18
bb21[firstDead=-1]():
    # outerLoops: 1
    <statTemp>$82: Integer(1) = 1
    <statTemp>$81: String = <statTemp>$82: Integer(1).to_s()
    <statTemp>$83: String("") = ""
    <ifTemp>$80: T::Boolean = <statTemp>$81: String.==(<statTemp>$83: String(""))
    <ifTemp>$80 -> (T::Boolean ? bb22 : bb18)

# backedges
# - bb21
bb22[firstDead=-1]():
    # outerLoops: 1
    <returnTemp>$84: Symbol(:abc) = :abc
    <block-break-assign>$85: Symbol(:abc) = <returnTemp>$84
    c: Symbol(:abc) = <block-break-assign>$85
    <unconditional> -> bb20

}

