digraph "retry_nested.rb" {
subgraph "cluster_::Object#main" {
    label = "::Object#main";
    color = blue;

    "bb::Object#main_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\ltry: Integer(0) = 0\l<magic>$42: T.class_of(<Magic>) = alias <C <Magic>>\l<unconditional>\l"
    ];

    "bb::Object#main_0" -> "bb::Object#main_2" [style="bold"];
    "bb::Object#main_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#main_1" -> "bb::Object#main_1" [style="bold"];
    "bb::Object#main_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=0](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <gotoDeadTemp>$40: NilClass, <magic>$42: T.class_of(<Magic>))\l<exceptionValue>$4: T.untyped = <get-current-exception>\l<exceptionValue>$4: T.untyped\l"
    ];

    "bb::Object#main_2" -> "bb::Object#main_3" [style="bold"];
    "bb::Object#main_2" -> "bb::Object#main_4" [style="tapered"];

    "bb::Object#main_3" [
        shape = rectangle;
        color = black;
        label = "block[id=3, rubyBlockId=2](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <exceptionValue>$4: T.untyped, <gotoDeadTemp>$40: NilClass, <magic>$42: T.class_of(<Magic>))\l<cfgAlias>$45: T.class_of(B) = alias <C B>\l<isaCheckTemp>$46: T.untyped = <exceptionValue>$4: T.untyped.is_a?(<cfgAlias>$45: T.class_of(B))\l<isaCheckTemp>$46: T.untyped\l"
    ];

    "bb::Object#main_3" -> "bb::Object#main_21" [style="bold"];
    "bb::Object#main_3" -> "bb::Object#main_22" [style="tapered"];

    "bb::Object#main_4" [
        shape = rectangle;
        color = black;
        label = "block[id=4, rubyBlockId=1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <gotoDeadTemp>$40: NilClass, <magic>$42: T.class_of(<Magic>))\l<statTemp>$7: String(\"top\") = \"top\"\l<statTemp>$5: NilClass = <self>: Object.puts(<statTemp>$7: String(\"top\"))\l<magic>$29: T.class_of(<Magic>) = alias <C <Magic>>\l<unconditional>\l"
    ];

    "bb::Object#main_4" -> "bb::Object#main_5" [style="bold"];
    "bb::Object#main_5" [
        shape = rectangle;
        color = black;
        label = "block[id=5, rubyBlockId=1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$29: T.class_of(<Magic>), <gotoDeadTemp>$40: NilClass, <magic>$42: T.class_of(<Magic>))\l<exceptionValue>$8: T.untyped = <get-current-exception>\l<exceptionValue>$8: T.untyped\l"
    ];

    "bb::Object#main_5" -> "bb::Object#main_6" [style="bold"];
    "bb::Object#main_5" -> "bb::Object#main_7" [style="tapered"];

    "bb::Object#main_6" [
        shape = rectangle;
        color = black;
        label = "block[id=6, rubyBlockId=6](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <exceptionValue>$8: T.untyped, <magic>$29: T.class_of(<Magic>), <gotoDeadTemp>$40: NilClass, <magic>$42: T.class_of(<Magic>))\l<cfgAlias>$32: T.class_of(A) = alias <C A>\l<isaCheckTemp>$33: T.untyped = <exceptionValue>$8: T.untyped.is_a?(<cfgAlias>$32: T.class_of(A))\l<isaCheckTemp>$33: T.untyped\l"
    ];

    "bb::Object#main_6" -> "bb::Object#main_16" [style="bold"];
    "bb::Object#main_6" -> "bb::Object#main_17" [style="tapered"];

    "bb::Object#main_7" [
        shape = rectangle;
        color = black;
        label = "block[id=7, rubyBlockId=5](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$29: T.class_of(<Magic>), <gotoDeadTemp>$40: NilClass, <magic>$42: T.class_of(<Magic>))\l<statTemp>$11: Integer(3) = 3\l<ifTemp>$9: T::Boolean = try: Integer(0).<(<statTemp>$11: Integer(3))\l<ifTemp>$9: T::Boolean\l"
    ];

    "bb::Object#main_7" -> "bb::Object#main_8" [style="bold"];
    "bb::Object#main_7" -> "bb::Object#main_9" [style="tapered"];

    "bb::Object#main_8" [
        shape = rectangle;
        color = black;
        label = "block[id=8, rubyBlockId=5](<self>: Object, try: Integer(0), <magic>$29: T.class_of(<Magic>), <gotoDeadTemp>$40: NilClass, <magic>$42: T.class_of(<Magic>))\l<statTemp>$13: Integer(0) = try\l<statTemp>$14: Integer(1) = 1\ltry: Integer = <statTemp>$13: Integer(0).+(<statTemp>$14: Integer(1))\l<cfgAlias>$18: T.class_of(A) = alias <C A>\l<statTemp>$16: A = <cfgAlias>$18: T.class_of(A).new()\l<returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$16: A)\l<unconditional>\l"
    ];

    "bb::Object#main_8" -> "bb::Object#main_13" [style="bold"];
    "bb::Object#main_9" [
        shape = rectangle;
        color = black;
        label = "block[id=9, rubyBlockId=5](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$29: T.class_of(<Magic>), <gotoDeadTemp>$40: NilClass, <magic>$42: T.class_of(<Magic>))\l<statTemp>$21: Integer(6) = 6\l<ifTemp>$19: T::Boolean = try: Integer(0).<(<statTemp>$21: Integer(6))\l<ifTemp>$19: T::Boolean\l"
    ];

    "bb::Object#main_9" -> "bb::Object#main_10" [style="bold"];
    "bb::Object#main_9" -> "bb::Object#main_13" [style="tapered"];

    "bb::Object#main_10" [
        shape = rectangle;
        color = black;
        label = "block[id=10, rubyBlockId=5](<self>: Object, try: Integer(0), <magic>$29: T.class_of(<Magic>), <gotoDeadTemp>$40: NilClass, <magic>$42: T.class_of(<Magic>))\l<statTemp>$23: Integer(0) = try\l<statTemp>$24: Integer(1) = 1\ltry: Integer = <statTemp>$23: Integer(0).+(<statTemp>$24: Integer(1))\l<cfgAlias>$28: T.class_of(B) = alias <C B>\l<statTemp>$26: B = <cfgAlias>$28: T.class_of(B).new()\l<returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$26: B)\l<unconditional>\l"
    ];

    "bb::Object#main_10" -> "bb::Object#main_13" [style="bold"];
    "bb::Object#main_13" [
        shape = rectangle;
        color = black;
        label = "block[id=13, rubyBlockId=5](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$29: T.class_of(<Magic>), <gotoDeadTemp>$40: NilClass, <magic>$42: T.class_of(<Magic>))\l<exceptionValue>$8: T.untyped = <get-current-exception>\l<exceptionValue>$8: T.untyped\l"
    ];

    "bb::Object#main_13" -> "bb::Object#main_6" [style="bold"];
    "bb::Object#main_13" -> "bb::Object#main_14" [style="tapered"];

    "bb::Object#main_14" [
        shape = rectangle;
        color = black;
        label = "block[id=14, rubyBlockId=8](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <gotoDeadTemp>$40: NilClass, <magic>$42: T.class_of(<Magic>))\l<unconditional>\l"
    ];

    "bb::Object#main_14" -> "bb::Object#main_15" [style="bold"];
    "bb::Object#main_15" [
        shape = rectangle;
        color = black;
        label = "block[id=15, rubyBlockId=7](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <gotoDeadTemp>$40: T.nilable(TrueClass), <magic>$42: T.class_of(<Magic>))\l<gotoDeadTemp>$40: T.nilable(TrueClass)\l"
    ];

    "bb::Object#main_15" -> "bb::Object#main_1" [style="bold"];
    "bb::Object#main_15" -> "bb::Object#main_18" [style="tapered"];

    "bb::Object#main_16" [
        shape = rectangle;
        color = black;
        label = "block[id=16, rubyBlockId=6](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$29: T.class_of(<Magic>), <gotoDeadTemp>$40: NilClass, <magic>$42: T.class_of(<Magic>))\l<exceptionValue>$8: NilClass = nil\l<keepForCfgTemp>$30: Sorbet::Private::Static::Void = <magic>$29: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$8: NilClass)\l<statTemp>$36: String(\"rescue A\") = \"rescue A\"\l<statTemp>$34: NilClass = <self>: Object.puts(<statTemp>$36: String(\"rescue A\"))\l<magic>$38: T.class_of(<Magic>) = alias <C <Magic>>\l<retryTemp>$39: Sorbet::Private::Static::Void = <magic>$38: T.class_of(<Magic>).<retry>()\l<unconditional>\l"
    ];

    "bb::Object#main_16" -> "bb::Object#main_5" [style="bold"];
    "bb::Object#main_17" [
        shape = rectangle;
        color = black;
        label = "block[id=17, rubyBlockId=6](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$42: T.class_of(<Magic>))\l<gotoDeadTemp>$40: TrueClass = true\l<unconditional>\l"
    ];

    "bb::Object#main_17" -> "bb::Object#main_15" [style="bold"];
    "bb::Object#main_18" [
        shape = rectangle;
        color = black;
        label = "block[id=18, rubyBlockId=1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <gotoDeadTemp>$40: NilClass, <magic>$42: T.class_of(<Magic>))\l<exceptionValue>$4: T.untyped = <get-current-exception>\l<exceptionValue>$4: T.untyped\l"
    ];

    "bb::Object#main_18" -> "bb::Object#main_3" [style="bold"];
    "bb::Object#main_18" -> "bb::Object#main_19" [style="tapered"];

    "bb::Object#main_19" [
        shape = rectangle;
        color = black;
        label = "block[id=19, rubyBlockId=4](<returnMethodTemp>$2: NilClass)\l<unconditional>\l"
    ];

    "bb::Object#main_19" -> "bb::Object#main_20" [style="bold"];
    "bb::Object#main_20" [
        shape = rectangle;
        color = black;
        label = "block[id=20, rubyBlockId=3](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$53: T.nilable(TrueClass))\l<gotoDeadTemp>$53: T.nilable(TrueClass)\l"
    ];

    "bb::Object#main_20" -> "bb::Object#main_1" [style="bold"];
    "bb::Object#main_20" -> "bb::Object#main_23" [style="tapered"];

    "bb::Object#main_21" [
        shape = rectangle;
        color = black;
        label = "block[id=21, rubyBlockId=2](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <gotoDeadTemp>$40: NilClass, <magic>$42: T.class_of(<Magic>))\l<exceptionValue>$4: NilClass = nil\l<keepForCfgTemp>$43: Sorbet::Private::Static::Void = <magic>$42: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$4: NilClass)\l<statTemp>$49: String(\"rescue B \") = \"rescue B \"\l<statTemp>$47: NilClass = <self>: Object.puts(<statTemp>$49: String(\"rescue B \"))\l<magic>$51: T.class_of(<Magic>) = alias <C <Magic>>\l<retryTemp>$52: Sorbet::Private::Static::Void = <magic>$51: T.class_of(<Magic>).<retry>()\l<unconditional>\l"
    ];

    "bb::Object#main_21" -> "bb::Object#main_2" [style="bold"];
    "bb::Object#main_22" [
        shape = rectangle;
        color = black;
        label = "block[id=22, rubyBlockId=2](<returnMethodTemp>$2: NilClass)\l<gotoDeadTemp>$53: TrueClass = true\l<unconditional>\l"
    ];

    "bb::Object#main_22" -> "bb::Object#main_20" [style="bold"];
    "bb::Object#main_23" [
        shape = rectangle;
        color = black;
        label = "block[id=23, rubyBlockId=0](<returnMethodTemp>$2: NilClass)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Object#main_23" -> "bb::Object#main_1" [style="bold"];
}

subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;

    "bb::<Class:<root>>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));\l<cfgAlias>$6: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$8: T.class_of(A) = alias <C A>\l<statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$8: T.class_of(A))\l<cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$13: T.class_of(A) = alias <C A>\l<statTemp>$9: Sorbet::Private::Static::Void = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$13: T.class_of(A))\l<cfgAlias>$16: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$18: T.class_of(Exception) = alias <C Exception>\l<statTemp>$14: Sorbet::Private::Static::Void = <cfgAlias>$16: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$18: T.class_of(Exception))\l<cfgAlias>$22: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$24: T.class_of(B) = alias <C B>\l<statTemp>$20: Sorbet::Private::Static::Void = <cfgAlias>$22: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$24: T.class_of(B))\l<cfgAlias>$27: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$29: T.class_of(B) = alias <C B>\l<statTemp>$25: Sorbet::Private::Static::Void = <cfgAlias>$27: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$29: T.class_of(B))\l<cfgAlias>$32: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$34: T.class_of(Exception) = alias <C Exception>\l<statTemp>$30: Sorbet::Private::Static::Void = <cfgAlias>$32: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$34: T.class_of(Exception))\l<cfgAlias>$37: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$39: Symbol(:main) = :main\l<statTemp>$40: Symbol(:normal) = :normal\l<statTemp>$35: Symbol(:main) = <cfgAlias>$37: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$39: Symbol(:main), <statTemp>$40: Symbol(:normal))\l<statTemp>$41: T.untyped = <self>: T.class_of(<root>).main()\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:A>#<static-init>" {
    label = "::<Class:A>#<static-init>";
    color = blue;

    "bb::<Class:A>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(A) = cast(<self>: NilClass, T.class_of(A));\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:A>#<static-init>_0" -> "bb::<Class:A>#<static-init>_1" [style="bold"];
    "bb::<Class:A>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:A>#<static-init>_1" -> "bb::<Class:A>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:B>#<static-init>" {
    label = "::<Class:B>#<static-init>";
    color = blue;

    "bb::<Class:B>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(B) = cast(<self>: NilClass, T.class_of(B));\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:B>#<static-init>_0" -> "bb::<Class:B>#<static-init>_1" [style="bold"];
    "bb::<Class:B>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:B>#<static-init>_1" -> "bb::<Class:B>#<static-init>_1" [style="bold"];
}

}

