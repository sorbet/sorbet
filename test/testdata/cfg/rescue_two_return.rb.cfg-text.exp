method ::Object#foo {

bb0[firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    <exceptionValue>$4: T.nilable(Exception) = <get-current-exception>
    <exceptionValue>$4 -> (T.nilable(Exception) ? bb3 : bb4)

# backedges
# - bb4
# - bb7
# - bb8
# - bb9
bb1[firstDead=-1]():
    <exceptionValue>$4 = <get-current-exception>
    <unconditional> -> bb1

# backedges
# - bb0
bb3[firstDead=-1](<self>: Object, <exceptionValue>$4: Exception):
    <cfgAlias>$8: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$9: T::Boolean = <cfgAlias>$8: T.class_of(StandardError).===(<exceptionValue>$4: Exception)
    <isaCheckTemp>$9 -> (T::Boolean ? bb7 : bb8)

# backedges
# - bb0
bb4[firstDead=2]():
    <returnTemp>$5: Integer(1) = 1
    <statTemp>$3: T.noreturn = return <returnTemp>$5: Integer(1)
    <unconditional> -> bb1

# backedges
# - bb3
bb7[firstDead=4](<exceptionValue>$4: StandardError):
    <exceptionValue>$4: NilClass = nil
    <keepForCfgTemp>$6: T.untyped = <keep-alive> <exceptionValue>$4
    <returnTemp>$10: Integer(2) = 2
    <statTemp>$3: T.noreturn = return <returnTemp>$10: Integer(2)
    <unconditional> -> bb1

# backedges
# - bb3
bb8[firstDead=-1](<self>: Object):
    <gotoDeadTemp>$11: TrueClass = true
    <gotoDeadTemp>$11 -> (TrueClass ? bb1 : bb9)

# backedges
# - bb8
bb9[firstDead=0](<self>: Object):
    <returnMethodTemp>$2 = <self>.deadcode()
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[firstDead=3]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <returnMethodTemp>$2: Symbol(:foo) = :foo
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:foo)
    <unconditional> -> bb1

# backedges
# - bb0
bb1[firstDead=-1]():
    <unconditional> -> bb1

}

