method ::<Class:<root>>#<static-init> {

bb0[firstDead=-1]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$6: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$8: T.class_of(T) = alias <C T>
    <statTemp>$3: T.class_of(<root>) = <self>: T.class_of(<root>).extend(<cfgAlias>$6: T.class_of(T::Sig))
    <statTemp>$10: Integer(0) = 0
    xyz: Integer = <statTemp>$10: Integer(0).to_i()
    <cfgAlias>$13: Runtime object representing type: T::Boolean = alias <C Boolean>
    keep_for_ide$12: Runtime object representing type: T::Boolean = <cfgAlias>$13
    <cfgAlias>$15: T.class_of(T) = alias <C T>
    keep_for_ide$12: T.untyped = <keep-alive> keep_for_ide$12
    <castTemp>$16: TrueClass = true
    found: T::Boolean = cast(<castTemp>$16: TrueClass, T::Boolean);
    <unconditional> -> bb2

# backedges
# - bb4
bb1[firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0
# - bb5
bb2[firstDead=-1](xyz: Integer, found: T::Boolean):
    # outerLoops: 1
    found -> (T::Boolean ? bb5 : bb4)

# backedges
# - bb2
# - bb6
bb4[firstDead=3](xyz: Integer):
    <cfgAlias>$28: T.class_of(T) = alias <C T>
    <statTemp>$26: Integer = <cfgAlias>$28: T.class_of(T).reveal_type(xyz: Integer)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2
# - bb6
bb5[firstDead=-1](xyz: Integer, found: TrueClass):
    # outerLoops: 1
    found: FalseClass = false
    <arrayTemp>$23: TrueClass = true
    <arrayTemp>$24: FalseClass = false
    <magic>$25: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$22: [TrueClass, FalseClass] = <magic>$25: T.class_of(<Magic>).<build-array>(<arrayTemp>$23: TrueClass, <arrayTemp>$24: FalseClass)
    <ifTemp>$21: T::Boolean = <statTemp>$22: [TrueClass, FalseClass].sample()
    <ifTemp>$21 -> (T::Boolean ? bb6 : bb2)

# backedges
# - bb5
bb6[firstDead=-1](xyz: Integer, found: FalseClass):
    # outerLoops: 1
    found: TrueClass = true
    found -> (TrueClass ? bb5 : bb4)

}

