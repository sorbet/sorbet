method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=5]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$6: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$8: T.class_of(Test) = alias <C Test>
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$8: T.class_of(Test))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Test#test1 {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Test = cast(<self>: NilClass, Test);
    a: Integer = load_arg(a)
    b: Integer = load_arg(b)
    <argPresent>$3: T::Boolean = arg_present(c)
    <argPresent>$3 -> (T::Boolean ? bb2 : bb3)

# backedges
# - bb9(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1](a: Integer, b: Integer):
    c: Integer = load_arg(c)
    <argPresent>$6: T::Boolean = arg_present(d)
    <argPresent>$6 -> (T::Boolean ? bb4 : bb5)

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=-1](a: Integer, b: Integer):
    <statTemp>$4: Integer(10) = 10
    <castTemp>$5: Integer = cast(<statTemp>$4: Integer(10), Integer);
    c: Integer(10) = <statTemp>$4
    <unconditional> -> bb5

# backedges
# - bb2(rubyRegionId=0)
bb4[rubyRegionId=0, firstDead=-1](a: Integer, b: Integer, c: Integer):
    d: Integer = load_arg(d)
    <unconditional> -> bb6

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb5[rubyRegionId=0, firstDead=-1](a: Integer, b: Integer, c: Integer):
    x: Integer(20) = 20
    <statTemp>$7: Integer(20) = x
    <castTemp>$8: Integer = cast(<statTemp>$7: Integer(20), Integer);
    d: Integer(20) = x
    <unconditional> -> bb6

# backedges
# - bb4(rubyRegionId=0)
# - bb5(rubyRegionId=0)
bb6[rubyRegionId=0, firstDead=-1](a: Integer, b: Integer, c: Integer, d: Integer, x: T.nilable(Integer)):
    e: Integer = load_arg(e)
    <argPresent>$9: T::Boolean = arg_present(f)
    <argPresent>$9 -> (T::Boolean ? bb7 : bb8)

# backedges
# - bb6(rubyRegionId=0)
bb7[rubyRegionId=0, firstDead=-1](a: Integer, b: Integer, c: Integer, d: Integer, x: T.nilable(Integer), e: Integer):
    f: String = load_arg(f)
    <unconditional> -> bb9

# backedges
# - bb6(rubyRegionId=0)
bb8[rubyRegionId=0, firstDead=-1](a: Integer, b: Integer, c: Integer, d: Integer, x: T.nilable(Integer), e: Integer):
    <statTemp>$10: String("foo") = "foo"
    <castTemp>$11: String = cast(<statTemp>$10: String("foo"), String);
    f: String("foo") = <statTemp>$10
    <unconditional> -> bb9

# backedges
# - bb7(rubyRegionId=0)
# - bb8(rubyRegionId=0)
bb9[rubyRegionId=0, firstDead=19](a: Integer, b: Integer, c: Integer, d: Integer, x: T.nilable(Integer), e: Integer, f: String):
    blk: T.proc.void = load_arg(blk)
    <cfgAlias>$14: T.class_of(T) = alias <C T>
    <statTemp>$12: Integer = <cfgAlias>$14: T.class_of(T).reveal_type(a: Integer)
    <cfgAlias>$18: T.class_of(T) = alias <C T>
    <statTemp>$16: Integer = <cfgAlias>$18: T.class_of(T).reveal_type(b: Integer)
    <cfgAlias>$22: T.class_of(T) = alias <C T>
    <statTemp>$20: Integer = <cfgAlias>$22: T.class_of(T).reveal_type(c: Integer)
    <cfgAlias>$26: T.class_of(T) = alias <C T>
    <statTemp>$24: Integer = <cfgAlias>$26: T.class_of(T).reveal_type(d: Integer)
    <cfgAlias>$30: T.class_of(T) = alias <C T>
    <statTemp>$28: Integer = <cfgAlias>$30: T.class_of(T).reveal_type(e: Integer)
    <cfgAlias>$34: T.class_of(T) = alias <C T>
    <statTemp>$32: String = <cfgAlias>$34: T.class_of(T).reveal_type(f: String)
    <cfgAlias>$38: T.class_of(T) = alias <C T>
    <statTemp>$36: T.proc.void = <cfgAlias>$38: T.class_of(T).reveal_type(blk: T.proc.void)
    <statTemp>$40: Sorbet::Private::Static::Void = blk: T.proc.void.call()
    <cfgAlias>$43: T.class_of(T) = alias <C T>
    <returnMethodTemp>$2: T.nilable(Integer) = <cfgAlias>$43: T.class_of(T).reveal_type(x: T.nilable(Integer))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(Integer)
    <unconditional> -> bb1

}

method ::Test#test2 {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Test = cast(<self>: NilClass, Test);
    <argPresent>$3: T::Boolean = arg_present(x)
    <argPresent>$3 -> (T::Boolean ? bb2 : bb3)

# backedges
# - bb4(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1]():
    x: Integer = load_arg(x)
    <unconditional> -> bb4

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=-1]():
    <statTemp>$4: Integer(10) = 10
    <castTemp>$5: Integer = cast(<statTemp>$4: Integer(10), Integer);
    x: Integer(10) = <statTemp>$4
    <unconditional> -> bb4

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb4[rubyRegionId=0, firstDead=9](x: Integer):
    rest: T::Array[Integer] = load_arg(rest)
    blk: T.proc.void = load_arg(blk)
    <cfgAlias>$8: T.class_of(T) = alias <C T>
    <statTemp>$6: Integer = <cfgAlias>$8: T.class_of(T).reveal_type(x: Integer)
    <cfgAlias>$12: T.class_of(T) = alias <C T>
    <statTemp>$10: T::Array[Integer] = <cfgAlias>$12: T.class_of(T).reveal_type(rest: T::Array[Integer])
    <cfgAlias>$15: T.class_of(T) = alias <C T>
    <returnMethodTemp>$2: T.proc.void = <cfgAlias>$15: T.class_of(T).reveal_type(blk: T.proc.void)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.proc.void
    <unconditional> -> bb1

}

method ::Test#test3 {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Test = cast(<self>: NilClass, Test);
    <argPresent>$3: T::Boolean = arg_present(x)
    <argPresent>$3 -> (T::Boolean ? bb2 : bb3)

# backedges
# - bb4(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1]():
    x: Integer = load_arg(x)
    <unconditional> -> bb4

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=-1]():
    <statTemp>$4: Integer(10) = 10
    <castTemp>$5: Integer = cast(<statTemp>$4: Integer(10), Integer);
    x: Integer(10) = <statTemp>$4
    <unconditional> -> bb4

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb4[rubyRegionId=0, firstDead=9](x: Integer):
    rest: T::Hash[Symbol, Integer] = load_arg(rest)
    blk: T.proc.void = load_arg(blk)
    <cfgAlias>$8: T.class_of(T) = alias <C T>
    <statTemp>$6: Integer = <cfgAlias>$8: T.class_of(T).reveal_type(x: Integer)
    <cfgAlias>$12: T.class_of(T) = alias <C T>
    <statTemp>$10: T::Hash[Symbol, Integer] = <cfgAlias>$12: T.class_of(T).reveal_type(rest: T::Hash[Symbol, Integer])
    <cfgAlias>$15: T.class_of(T) = alias <C T>
    <returnMethodTemp>$2: T.proc.void = <cfgAlias>$15: T.class_of(T).reveal_type(blk: T.proc.void)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.proc.void
    <unconditional> -> bb1

}

method ::<Class:Test>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(Test) = cast(<self>: NilClass, T.class_of(Test));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$7: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(Test))
    <selfRestore>$8: T.class_of(Test) = <self>
    <unconditional> -> bb2

# backedges
# - bb11(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(Test), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(Test)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(Test)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$7, sig>
    <self>: T.class_of(Test) = <selfRestore>$8
    <cfgAlias>$39: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$41: Sorbet::Private::Static::Void = <cfgAlias>$39: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(Test))
    <selfRestore>$42: T.class_of(Test) = <self>
    <unconditional> -> bb6

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=20](<self>: T.class_of(Test), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(Test)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$13: Symbol(:a) = :a
    <cfgAlias>$15: T.class_of(Integer) = alias <C Integer>
    <hashTemp>$16: Symbol(:b) = :b
    <cfgAlias>$18: T.class_of(Integer) = alias <C Integer>
    <hashTemp>$19: Symbol(:c) = :c
    <cfgAlias>$21: T.class_of(Integer) = alias <C Integer>
    <hashTemp>$22: Symbol(:d) = :d
    <cfgAlias>$24: T.class_of(Integer) = alias <C Integer>
    <hashTemp>$25: Symbol(:e) = :e
    <cfgAlias>$27: T.class_of(Integer) = alias <C Integer>
    <hashTemp>$28: Symbol(:f) = :f
    <cfgAlias>$30: T.class_of(String) = alias <C String>
    <hashTemp>$31: Symbol(:blk) = :blk
    <cfgAlias>$35: T.class_of(T) = alias <C T>
    <statTemp>$33: T.class_of(T.proc) = <cfgAlias>$35: T.class_of(T).proc()
    <hashTemp>$32: T.class_of(T.proc) = <statTemp>$33: T.class_of(T.proc).void()
    <statTemp>$11: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$13: Symbol(:a), <cfgAlias>$15: T.class_of(Integer), <hashTemp>$16: Symbol(:b), <cfgAlias>$18: T.class_of(Integer), <hashTemp>$19: Symbol(:c), <cfgAlias>$21: T.class_of(Integer), <hashTemp>$22: Symbol(:d), <cfgAlias>$24: T.class_of(Integer), <hashTemp>$25: Symbol(:e), <cfgAlias>$27: T.class_of(Integer), <hashTemp>$28: Symbol(:f), <cfgAlias>$30: T.class_of(String), <hashTemp>$31: Symbol(:blk), <hashTemp>$32: T.class_of(T.proc))
    <blockReturnTemp>$10: T::Private::Methods::DeclBuilder = <statTemp>$11: T::Private::Methods::DeclBuilder.void()
    <blockReturnTemp>$36: T.noreturn = blockreturn<sig> <blockReturnTemp>$10: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
# - bb9(rubyRegionId=2)
bb6[rubyRegionId=2, firstDead=-1](<self>: T.class_of(Test), <block-pre-call-temp>$41: Sorbet::Private::Static::Void, <selfRestore>$42: T.class_of(Test)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb9 : bb7)

# backedges
# - bb6(rubyRegionId=2)
bb7[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$41: Sorbet::Private::Static::Void, <selfRestore>$42: T.class_of(Test)):
    <statTemp>$37: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$41, sig>
    <self>: T.class_of(Test) = <selfRestore>$42
    <cfgAlias>$61: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$63: Sorbet::Private::Static::Void = <cfgAlias>$61: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(Test))
    <selfRestore>$64: T.class_of(Test) = <self>
    <unconditional> -> bb10

# backedges
# - bb6(rubyRegionId=2)
bb9[rubyRegionId=2, firstDead=12](<self>: T.class_of(Test), <block-pre-call-temp>$41: Sorbet::Private::Static::Void, <selfRestore>$42: T.class_of(Test)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$47: Symbol(:x) = :x
    <cfgAlias>$49: T.class_of(Integer) = alias <C Integer>
    <hashTemp>$50: Symbol(:rest) = :rest
    <cfgAlias>$52: T.class_of(Integer) = alias <C Integer>
    <hashTemp>$53: Symbol(:blk) = :blk
    <cfgAlias>$57: T.class_of(T) = alias <C T>
    <statTemp>$55: T.class_of(T.proc) = <cfgAlias>$57: T.class_of(T).proc()
    <hashTemp>$54: T.class_of(T.proc) = <statTemp>$55: T.class_of(T.proc).void()
    <statTemp>$45: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$47: Symbol(:x), <cfgAlias>$49: T.class_of(Integer), <hashTemp>$50: Symbol(:rest), <cfgAlias>$52: T.class_of(Integer), <hashTemp>$53: Symbol(:blk), <hashTemp>$54: T.class_of(T.proc))
    <blockReturnTemp>$44: T::Private::Methods::DeclBuilder = <statTemp>$45: T::Private::Methods::DeclBuilder.void()
    <blockReturnTemp>$58: T.noreturn = blockreturn<sig> <blockReturnTemp>$44: T::Private::Methods::DeclBuilder
    <unconditional> -> bb6

# backedges
# - bb7(rubyRegionId=0)
# - bb13(rubyRegionId=3)
bb10[rubyRegionId=3, firstDead=-1](<self>: T.class_of(Test), <block-pre-call-temp>$63: Sorbet::Private::Static::Void, <selfRestore>$64: T.class_of(Test)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb13 : bb11)

# backedges
# - bb10(rubyRegionId=3)
bb11[rubyRegionId=0, firstDead=6](<block-pre-call-temp>$63: Sorbet::Private::Static::Void, <selfRestore>$64: T.class_of(Test)):
    <statTemp>$59: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$63, sig>
    <self>: T.class_of(Test) = <selfRestore>$64
    <cfgAlias>$84: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$86: T.class_of(T) = alias <C T>
    <statTemp>$81: T.class_of(Test) = <self>: T.class_of(Test).extend(<cfgAlias>$84: T.class_of(T::Sig))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb10(rubyRegionId=3)
bb13[rubyRegionId=3, firstDead=12](<self>: T.class_of(Test), <block-pre-call-temp>$63: Sorbet::Private::Static::Void, <selfRestore>$64: T.class_of(Test)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$69: Symbol(:x) = :x
    <cfgAlias>$71: T.class_of(Integer) = alias <C Integer>
    <hashTemp>$72: Symbol(:rest) = :rest
    <cfgAlias>$74: T.class_of(Integer) = alias <C Integer>
    <hashTemp>$75: Symbol(:blk) = :blk
    <cfgAlias>$79: T.class_of(T) = alias <C T>
    <statTemp>$77: T.class_of(T.proc) = <cfgAlias>$79: T.class_of(T).proc()
    <hashTemp>$76: T.class_of(T.proc) = <statTemp>$77: T.class_of(T.proc).void()
    <statTemp>$67: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$69: Symbol(:x), <cfgAlias>$71: T.class_of(Integer), <hashTemp>$72: Symbol(:rest), <cfgAlias>$74: T.class_of(Integer), <hashTemp>$75: Symbol(:blk), <hashTemp>$76: T.class_of(T.proc))
    <blockReturnTemp>$66: T::Private::Methods::DeclBuilder = <statTemp>$67: T::Private::Methods::DeclBuilder.void()
    <blockReturnTemp>$80: T.noreturn = blockreturn<sig> <blockReturnTemp>$66: T::Private::Methods::DeclBuilder
    <unconditional> -> bb10

}

