method ::Object#foo {

bb0[firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    <exceptionValue>$3: T.nilable(Exception) = <get-current-exception>
    <exceptionValue>$3 -> (T.nilable(Exception) ? bb3 : bb4)

# backedges
# - bb6
# - bb7
# - bb8
# - bb9
bb1[firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0
# - bb4
bb3[firstDead=-1](<returnMethodTemp>$2: NilClass, <exceptionValue>$3: Exception):
    <cfgAlias>$12: T.class_of(MyException) = alias <C MyException>
    <statTemp>$10: MyException = <cfgAlias>$12: T.class_of(MyException).new()
    <exceptionClassTemp>$9: T.class_of(MyException) = <statTemp>$10: MyException.class()
    <isaCheckTemp>$13: T::Boolean = <exceptionClassTemp>$9: T.class_of(MyException).===(<exceptionValue>$3: Exception)
    <isaCheckTemp>$13 -> (T::Boolean ? bb7 : bb8)

# backedges
# - bb0
bb4[firstDead=3](<self>: Object):
    <cfgAlias>$7: T.class_of(MyException) = alias <C MyException>
    <statTemp>$5: MyException = <cfgAlias>$7: T.class_of(MyException).new()
    <returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$5: MyException)
    <exceptionValue>$3 = <get-current-exception>
    <exceptionValue>$3 -> (<nullptr> ? bb3 : bb6)

# backedges
# - bb4
bb6[firstDead=0](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$14: NilClass):
    <gotoDeadTemp>$14 -> (<nullptr> ? bb1 : bb9)

# backedges
# - bb3
bb7[firstDead=-1](<exceptionValue>$3: MyException):
    <exceptionValue>$3: NilClass = nil
    <keepForCfgTemp>$8: T.untyped = <keep-alive> <exceptionValue>$3
    <returnMethodTemp>$2: Integer(3) = 3
    <gotoDeadTemp>$14 -> (NilClass ? bb1 : bb9)

# backedges
# - bb3
bb8[firstDead=-1](<returnMethodTemp>$2: NilClass):
    <gotoDeadTemp>$14: TrueClass = true
    <gotoDeadTemp>$14 -> (TrueClass ? bb1 : bb9)

# backedges
# - bb6
# - bb7
# - bb8
bb9[firstDead=1](<returnMethodTemp>$2: Integer(3)):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(3)
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[firstDead=4]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <statTemp>$6: T.untyped = <self>: T.class_of(<root>).foo()
    <statTemp>$4: NilClass = <self>: T.class_of(<root>).puts(<statTemp>$6: T.untyped)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0
bb1[firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:MyException>#<static-init> {

bb0[firstDead=2]():
    <self>: T.class_of(MyException) = cast(<self>: NilClass, T.class_of(MyException));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0
bb1[firstDead=-1]():
    <unconditional> -> bb1

}

