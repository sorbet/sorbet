method ::Object#foo {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    <magic>$8: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$3: T.nilable(Exception) = <get-current-exception>
    <exceptionValue>$3 -> (T.nilable(Exception) ? bb3 : bb4)

# backedges
# - bb6(rubyRegionId=3)
# - bb9(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb4(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1](<returnMethodTemp>$2: NilClass, <exceptionValue>$3: Exception, <magic>$8: T.class_of(<Magic>)):
    <cfgAlias>$13: T.class_of(MyException) = alias <C MyException>
    <statTemp>$11: MyException = <cfgAlias>$13: T.class_of(MyException).new()
    <exceptionClassTemp>$10: T.class_of(MyException) = <statTemp>$11: MyException.class()
    <isaCheckTemp>$14: T::Boolean = <exceptionClassTemp>$10: T.class_of(MyException).===(<exceptionValue>$3: Exception)
    <isaCheckTemp>$14 -> (T::Boolean ? bb7 : bb8)

# backedges
# - bb0(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=3](<self>: Object, <magic>$8: T.class_of(<Magic>)):
    <cfgAlias>$7: T.class_of(MyException) = alias <C MyException>
    <statTemp>$5: MyException = <cfgAlias>$7: T.class_of(MyException).new()
    <returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$5: MyException)
    <exceptionValue>$3 = <get-current-exception>
    <exceptionValue>$3 -> (<nullptr> ? bb3 : bb5)

# backedges
# - bb4(rubyRegionId=1)
bb5[rubyRegionId=4, firstDead=0](<returnMethodTemp>$2: NilClass):
    <unconditional> -> bb6

# backedges
# - bb5(rubyRegionId=4)
# - bb7(rubyRegionId=2)
# - bb8(rubyRegionId=2)
bb6[rubyRegionId=3, firstDead=-1](<returnMethodTemp>$2: T.nilable(Integer), <gotoDeadTemp>$15: T.nilable(TrueClass)):
    <gotoDeadTemp>$15 -> (T.nilable(TrueClass) ? bb1 : bb9)

# backedges
# - bb3(rubyRegionId=2)
bb7[rubyRegionId=2, firstDead=-1](<exceptionValue>$3: MyException, <magic>$8: T.class_of(<Magic>)):
    <exceptionValue>$3: NilClass = nil
    <keepForCfgTemp>$9: Sorbet::Private::Static::Void = <magic>$8: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$3: NilClass)
    <returnMethodTemp>$2: Integer(3) = 3
    <unconditional> -> bb6

# backedges
# - bb3(rubyRegionId=2)
bb8[rubyRegionId=2, firstDead=-1](<returnMethodTemp>$2: NilClass):
    <gotoDeadTemp>$15: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb6(rubyRegionId=3)
bb9[rubyRegionId=0, firstDead=1](<returnMethodTemp>$2: Integer(3)):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(3)
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=4]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <statTemp>$6: T.untyped = <self>: T.class_of(<root>).foo()
    <statTemp>$4: NilClass = <self>: T.class_of(<root>).puts(<statTemp>$6: T.untyped)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:MyException>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(MyException) = cast(<self>: NilClass, T.class_of(MyException));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

