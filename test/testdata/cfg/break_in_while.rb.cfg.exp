digraph "break_in_while.rb" {
subgraph "cluster_::Object#foo" {
    label = "::Object#foo";
    color = blue;

    "bb::Object#foo_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\l<unconditional>\l"
    ];

    "bb::Object#foo_0" -> "bb::Object#foo_2" [style="bold"];
    "bb::Object#foo_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0](<self>)\l<statTemp>$11 = <self>\l<statTemp>$4 = <statTemp>$11.dead()\l<unconditional>\l"
    ];

    "bb::Object#foo_1" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=0]()\louterLoops: 1\l<whileTemp>$3: TrueClass = true\l<whileTemp>$3: TrueClass\l"
    ];

    "bb::Object#foo_2" -> "bb::Object#foo_5" [style="bold"];
    "bb::Object#foo_2" -> "bb::Object#foo_3" [style="tapered"];

    "bb::Object#foo_3" [
        shape = rectangle;
        color = red;
        label = "block[id=3, rubyBlockId=0]()\l<returnMethodTemp>$2 = nil\l<unconditional>\l"
    ];

    "bb::Object#foo_3" -> "bb::Object#foo_4" [style="bold"];
    "bb::Object#foo_4" [
        shape = rectangle;
        color = black;
        label = "block[id=4, rubyBlockId=0](<returnMethodTemp>$2: Integer(2))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(2)\l<unconditional>\l"
    ];

    "bb::Object#foo_4" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_5" [
        shape = rectangle;
        color = black;
        label = "block[id=5, rubyBlockId=0]()\louterLoops: 1\l<returnTemp>$7: Integer(2) = 2\l<block-break-assign>$8: Integer(2) = <returnTemp>$7\l<magic>$9: T.class_of(<Magic>) = alias <C <Magic>>\l<block-break>$10: T.untyped = <magic>$9: T.class_of(<Magic>).<block-break>(<returnTemp>$7: Integer(2))\l<returnMethodTemp>$2: Integer(2) = <block-break-assign>$8\l<unconditional>\l"
    ];

    "bb::Object#foo_5" -> "bb::Object#foo_4" [style="bold"];
}

subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;

    "bb::<Class:<root>>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$7: Symbol(:foo) = :foo\l<statTemp>$8: Symbol(:normal) = :normal\l<statTemp>$3: Symbol(:foo) = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$7: Symbol(:foo), <statTemp>$8: Symbol(:normal))\l<statTemp>$11: T.untyped = <self>: T.class_of(<root>).foo()\l<statTemp>$9: NilClass = <self>: T.class_of(<root>).puts(<statTemp>$11: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

}

