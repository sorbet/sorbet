method ::Object#foo {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    <arrayTemp>$4: Integer(1) = 1
    <statTemp>$3: [Integer(1)] = [<arrayTemp>$4]
    <block-pre-call-temp>$5: Sorbet::Private::Static::Void = <statTemp>$3: [Integer(1)].map()
    <selfRestore>$6: Object = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1](<self>):
    <statTemp>$14 = <self>
    <blockReturnTemp>$8 = <statTemp>$14.bad()
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: Object, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Object):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=3](<block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Object):
    <returnMethodTemp>$2: T::Array[Integer] = Solve<<block-pre-call-temp>$5, map>
    <self>: Object = <selfRestore>$6
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T::Array[Integer]
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=6](<self>: Object, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Object):
    # outerLoops: 1
    <self>: Object = loadSelf(map)
    <blk>$7: [Integer] = load_yield_params(map)
    x$1: Integer = yield_load_arg(0, <blk>$7: [Integer])
    <statTemp>$9: T.untyped = <self>: Object.good()
    <nextTemp>$12: Integer = x$1
    <nextTemp>$13: T.noreturn = blockreturn<map> <nextTemp>$12: Integer
    <unconditional> -> bb2

}

method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <returnMethodTemp>$2: Symbol(:foo) = :foo
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:foo)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

