method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::BlockTest#blockPass {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: BlockTest = cast(<self>: NilClass, BlockTest);
    <statTemp>$4: Integer(1) = 1
    <statTemp>$5: Integer(2) = 2
    <statTemp>$6: Integer(3) = 3
    <block-pre-call-temp>$7: Sorbet::Private::Static::Void = <self>: BlockTest.foo(<statTemp>$4: Integer(1), <statTemp>$5: Integer(2), <statTemp>$6: Integer(3))
    <selfRestore>$8: BlockTest = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: BlockTest, <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: BlockTest):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=2](<block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: BlockTest):
    <returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$7, foo>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=6](<self>: BlockTest, <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: BlockTest):
    # outerLoops: 1
    <self>: BlockTest = loadSelf(foo)
    <blk>$9: T.untyped = load_yield_params(foo)
    x$1: T.untyped = yield_load_arg(0, <blk>$9: T.untyped)
    y$1: T.untyped = yield_load_arg(1, <blk>$9: T.untyped)
    <blockReturnTemp>$10: T.untyped = x$1
    <blockReturnTemp>$11: T.noreturn = blockreturn<foo> <blockReturnTemp>$10: T.untyped
    <unconditional> -> bb2

}

method ::<Class:BlockTest>#<static-init> {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: T.class_of(BlockTest) = cast(<self>: NilClass, T.class_of(BlockTest));
    <returnMethodTemp>$2: Symbol(:blockPass) = :blockPass
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:blockPass)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

