method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <unconditional> -> bb2

# backedges
# - bb20(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>)):
    # outerLoops: 1
    <whileTemp>$4: TrueClass = true
    <whileTemp>$4 -> (TrueClass ? bb5 : bb8)

# backedges
# - bb2(rubyRegionId=0)
bb5[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>)):
    # outerLoops: 1
    <statTemp>$8: Integer(2) = 2
    <statTemp>$6: NilClass = <self>: T.class_of(<root>).puts(<statTemp>$8: Integer(2))
    <statTemp>$10: FalseClass = false
    <ifTemp>$9: TrueClass = <statTemp>$10: FalseClass.!()
    <ifTemp>$9 -> (TrueClass ? bb6 : bb2)

# backedges
# - bb5(rubyRegionId=0)
bb6[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>)):
    # outerLoops: 1
    <block-break-assign>$12: NilClass = <returnTemp>$11
    <unconditional> -> bb8

# backedges
# - bb2(rubyRegionId=0)
# - bb6(rubyRegionId=0)
# - bb11(rubyRegionId=0)
bb8[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>)):
    # outerLoops: 1
    <whileTemp>$14: TrueClass = true
    <whileTemp>$14 -> (TrueClass ? bb11 : bb10)

# backedges
# - bb8(rubyRegionId=0)
# - bb12(rubyRegionId=0)
bb10[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>)):
    x: Integer(0) = 0
    <unconditional> -> bb14

# backedges
# - bb8(rubyRegionId=0)
bb11[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>)):
    # outerLoops: 1
    <statTemp>$18: Integer(2) = 2
    <statTemp>$16: NilClass = <self>: T.class_of(<root>).puts(<statTemp>$18: Integer(2))
    <ifTemp>$19: TrueClass = true
    <ifTemp>$19 -> (TrueClass ? bb12 : bb8)

# backedges
# - bb11(rubyRegionId=0)
bb12[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>)):
    # outerLoops: 1
    <block-break-assign>$21: NilClass = <returnTemp>$20
    <unconditional> -> bb10

# backedges
# - bb10(rubyRegionId=0)
# - bb17(rubyRegionId=0)
bb14[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>), x: Integer(0)):
    # outerLoops: 1
    <whileTemp>$24: FalseClass = false
    <whileTemp>$24 -> (FalseClass ? bb17 : bb16)

# backedges
# - bb14(rubyRegionId=0)
bb16[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>), x: Integer(0)):
    y: Integer(0) = 0
    <unconditional> -> bb18

# backedges
# - bb14(rubyRegionId=0)
bb17[rubyRegionId=0, firstDead=0](<self>: T.class_of(<root>), x: Integer(0)):
    # outerLoops: 1
    <statTemp>$28 = 2
    <statTemp>$26 = <self>.puts(<statTemp>$28)
    x = 1
    <unconditional> -> bb14

# backedges
# - bb16(rubyRegionId=0)
# - bb21(rubyRegionId=0)
bb18[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>), x: Integer(0), y: Integer(0)):
    # outerLoops: 1
    <statTemp>$32: TrueClass = true
    <whileTemp>$31: FalseClass = <statTemp>$32: TrueClass.!()
    <whileTemp>$31 -> (FalseClass ? bb21 : bb20)

# backedges
# - bb18(rubyRegionId=0)
bb20[rubyRegionId=0, firstDead=2](<self>: T.class_of(<root>), x: Integer(0), y: Integer(0)):
    <statTemp>$37: NilClass = <self>: T.class_of(<root>).puts(x: Integer(0), y: Integer(0))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb18(rubyRegionId=0)
bb21[rubyRegionId=0, firstDead=0](<self>: T.class_of(<root>), x: Integer(0), y: Integer(0)):
    # outerLoops: 1
    <statTemp>$36 = 2
    <statTemp>$34 = <self>.puts(<statTemp>$36)
    y = 1
    <unconditional> -> bb18

}

