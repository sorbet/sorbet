method ::<Class:<root>>#<static-init> {

bb0[rubyBlockId=0, firstDead=-1]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <statTemp>$3: Integer(2) = 2
    <block-pre-call-temp>$4: Sorbet::Private::Static::Void = <statTemp>$3: Integer(2).times()
    <unconditional> -> bb2

# backedges
# - bb3(rubyBlockId=0)
# - bb5(rubyBlockId=1)
bb1[rubyBlockId=0, firstDead=-1]():
    x$1 = 10
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb2[rubyBlockId=1, firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$4: Sorbet::Private::Static::Void):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyBlockId=1)
bb3[rubyBlockId=0, firstDead=3](<self>: T.class_of(<root>), <block-pre-call-temp>$4: Sorbet::Private::Static::Void):
    <returnMethodTemp>$2: Integer = Solve<<block-pre-call-temp>$4, times>
    <self>: T.class_of(<root>) = <self>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer
    <unconditional> -> bb1

# backedges
# - bb2(rubyBlockId=1)
bb5[rubyBlockId=1, firstDead=4](<self>: T.class_of(<root>)):
    # outerLoops: 1
    <self>: T.class_of(<root>) = loadSelf
    x$1: Integer(1) = 1
    <returnTemp>$10: Integer(1) = 1
    <statTemp>$9: T.noreturn = return <returnTemp>$10: Integer(1)
    <unconditional> -> bb1

}

