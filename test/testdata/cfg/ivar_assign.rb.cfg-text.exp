method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=5]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$6: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$8: T.class_of(TestIVar) = alias <C TestIVar>
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$8: T.class_of(TestIVar))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestIVar#initialize {

bb0[rubyRegionId=0, firstDead=9]():
    @foo$3: Integer = alias @foo
    <self>: TestIVar = cast(<self>: NilClass, TestIVar);
    <cfgAlias>$5: T.class_of(Integer) = alias <C Integer>
    keep_for_ide$4: T.class_of(Integer) = <cfgAlias>$5
    keep_for_ide$4: T.untyped = <keep-alive> keep_for_ide$4
    <castTemp>$6: Integer(0) = 0
    @foo$3: Integer = cast(<castTemp>$6: Integer(0), Integer);
    <returnMethodTemp>$2: Integer = @foo$3
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestIVar#test {

bb0[rubyRegionId=0, firstDead=5]():
    @foo$3: Integer = alias @foo
    <self>: TestIVar = cast(<self>: NilClass, TestIVar);
    @foo$3: Integer = nil
    <returnMethodTemp>$2: Integer = @foo$3
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:TestIVar>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(TestIVar) = cast(<self>: NilClass, T.class_of(TestIVar));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

