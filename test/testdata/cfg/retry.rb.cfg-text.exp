method ::Object#main {

bb0[rubyBlockId=0, firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    try: Integer(0) = 0
    <magic>$13: T.class_of(<Magic>) = alias <C <Magic>>
    <unconditional> -> bb2

# backedges
# - bb9(rubyBlockId=3)
# - bb12(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
# - bb10(rubyBlockId=2)
bb2[rubyBlockId=0, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$13: T.class_of(<Magic>)):
    <exceptionValue>$4: T.untyped = <get-current-exception>
    <exceptionValue>$4 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb2(rubyBlockId=0)
# - bb7(rubyBlockId=1)
bb3[rubyBlockId=2, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <exceptionValue>$4: T.untyped, <magic>$13: T.class_of(<Magic>)):
    <cfgAlias>$16: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$17: T.untyped = <exceptionValue>$4: T.untyped.is_a?(<cfgAlias>$16: T.class_of(StandardError))
    <isaCheckTemp>$17 -> (T.untyped ? bb10 : bb11)

# backedges
# - bb2(rubyBlockId=0)
bb4[rubyBlockId=1, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$13: T.class_of(<Magic>)):
    <statTemp>$7: Integer(3) = 3
    <ifTemp>$5: T::Boolean = try: Integer(0).<(<statTemp>$7: Integer(3))
    <ifTemp>$5 -> (T::Boolean ? bb5 : bb7)

# backedges
# - bb4(rubyBlockId=1)
bb5[rubyBlockId=1, firstDead=5](<self>: Object, try: Integer(0), <magic>$13: T.class_of(<Magic>)):
    <statTemp>$9: Integer(0) = try
    <statTemp>$10: Integer(1) = 1
    try: Integer = <statTemp>$9: Integer(0).+(<statTemp>$10: Integer(1))
    <statTemp>$12: String("e") = "e"
    <returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$12: String("e"))
    <unconditional> -> bb7

# backedges
# - bb4(rubyBlockId=1)
# - bb5(rubyBlockId=1)
bb7[rubyBlockId=1, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$13: T.class_of(<Magic>)):
    <exceptionValue>$4: T.untyped = <get-current-exception>
    <exceptionValue>$4 -> (T.untyped ? bb3 : bb8)

# backedges
# - bb7(rubyBlockId=1)
bb8[rubyBlockId=4, firstDead=-1](<returnMethodTemp>$2: NilClass):
    <unconditional> -> bb9

# backedges
# - bb8(rubyBlockId=4)
# - bb11(rubyBlockId=2)
bb9[rubyBlockId=3, firstDead=-1](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$24: T.nilable(TrueClass)):
    <gotoDeadTemp>$24 -> (T.nilable(TrueClass) ? bb1 : bb12)

# backedges
# - bb3(rubyBlockId=2)
bb10[rubyBlockId=2, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$13: T.class_of(<Magic>)):
    <exceptionValue>$4: NilClass = nil
    <keepForCfgTemp>$14: Sorbet::Private::Static::Void = <magic>$13: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$4: NilClass)
    <statTemp>$20: String("rescue") = "rescue"
    <statTemp>$18: NilClass = <self>: Object.puts(<statTemp>$20: String("rescue"))
    <magic>$22: T.class_of(<Magic>) = alias <C <Magic>>
    <retryTemp>$23: Sorbet::Private::Static::Void = <magic>$22: T.class_of(<Magic>).<retry>()
    <unconditional> -> bb2

# backedges
# - bb3(rubyBlockId=2)
bb11[rubyBlockId=2, firstDead=-1](<returnMethodTemp>$2: NilClass):
    <gotoDeadTemp>$24: TrueClass = true
    <unconditional> -> bb9

# backedges
# - bb9(rubyBlockId=3)
bb12[rubyBlockId=0, firstDead=1](<returnMethodTemp>$2: NilClass):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[rubyBlockId=0, firstDead=7]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$7: Symbol(:main) = :main
    <statTemp>$8: Symbol(:normal) = :normal
    <statTemp>$3: Symbol(:main) = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$7: Symbol(:main), <statTemp>$8: Symbol(:normal))
    <statTemp>$9: T.untyped = <self>: T.class_of(<root>).main()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

