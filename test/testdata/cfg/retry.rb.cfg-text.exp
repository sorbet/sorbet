digraph "retry.rb" {
subgraph "cluster_::Object#main" {
    label = "::Object#main";
    color = blue;

    "bb::Object#main_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\ltry: Integer(0) = 0\l<magic>$13: T.class_of(<Magic>) = alias <C <Magic>>\l<unconditional>\l"
    ];

    "bb::Object#main_0" -> "bb::Object#main_2" [style="bold"];
    "bb::Object#main_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#main_1" -> "bb::Object#main_1" [style="bold"];
    "bb::Object#main_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=0](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$13: T.class_of(<Magic>))\l<exceptionValue>$4: T.untyped = <get-current-exception>\l<exceptionValue>$4: T.untyped\l"
    ];

    "bb::Object#main_2" -> "bb::Object#main_3" [style="bold"];
    "bb::Object#main_2" -> "bb::Object#main_4" [style="tapered"];

    "bb::Object#main_3" [
        shape = rectangle;
        color = black;
        label = "block[id=3, rubyBlockId=2](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <exceptionValue>$4: T.untyped, <magic>$13: T.class_of(<Magic>))\l<cfgAlias>$16: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$17: T.untyped = <exceptionValue>$4: T.untyped.is_a?(<cfgAlias>$16: T.class_of(StandardError))\l<isaCheckTemp>$17: T.untyped\l"
    ];

    "bb::Object#main_3" -> "bb::Object#main_10" [style="bold"];
    "bb::Object#main_3" -> "bb::Object#main_11" [style="tapered"];

    "bb::Object#main_4" [
        shape = rectangle;
        color = black;
        label = "block[id=4, rubyBlockId=1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$13: T.class_of(<Magic>))\l<statTemp>$7: Integer(3) = 3\l<ifTemp>$5: T::Boolean = try: Integer(0).<(<statTemp>$7: Integer(3))\l<ifTemp>$5: T::Boolean\l"
    ];

    "bb::Object#main_4" -> "bb::Object#main_5" [style="bold"];
    "bb::Object#main_4" -> "bb::Object#main_7" [style="tapered"];

    "bb::Object#main_5" [
        shape = rectangle;
        color = black;
        label = "block[id=5, rubyBlockId=1](<self>: Object, try: Integer(0), <magic>$13: T.class_of(<Magic>))\l<statTemp>$9: Integer(0) = try\l<statTemp>$10: Integer(1) = 1\ltry: Integer = <statTemp>$9: Integer(0).+(<statTemp>$10: Integer(1))\l<statTemp>$12: String(\"e\") = \"e\"\l<returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$12: String(\"e\"))\l<unconditional>\l"
    ];

    "bb::Object#main_5" -> "bb::Object#main_7" [style="bold"];
    "bb::Object#main_7" [
        shape = rectangle;
        color = black;
        label = "block[id=7, rubyBlockId=1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$13: T.class_of(<Magic>))\l<exceptionValue>$4: T.untyped = <get-current-exception>\l<exceptionValue>$4: T.untyped\l"
    ];

    "bb::Object#main_7" -> "bb::Object#main_3" [style="bold"];
    "bb::Object#main_7" -> "bb::Object#main_8" [style="tapered"];

    "bb::Object#main_8" [
        shape = rectangle;
        color = black;
        label = "block[id=8, rubyBlockId=4](<returnMethodTemp>$2: NilClass)\l<unconditional>\l"
    ];

    "bb::Object#main_8" -> "bb::Object#main_9" [style="bold"];
    "bb::Object#main_9" [
        shape = rectangle;
        color = black;
        label = "block[id=9, rubyBlockId=3](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$24: T.nilable(TrueClass))\l<gotoDeadTemp>$24: T.nilable(TrueClass)\l"
    ];

    "bb::Object#main_9" -> "bb::Object#main_1" [style="bold"];
    "bb::Object#main_9" -> "bb::Object#main_12" [style="tapered"];

    "bb::Object#main_10" [
        shape = rectangle;
        color = black;
        label = "block[id=10, rubyBlockId=2](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$13: T.class_of(<Magic>))\l<exceptionValue>$4: NilClass = nil\l<keepForCfgTemp>$14: Sorbet::Private::Static::Void = <magic>$13: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$4: NilClass)\l<statTemp>$20: String(\"rescue\") = \"rescue\"\l<statTemp>$18: NilClass = <self>: Object.puts(<statTemp>$20: String(\"rescue\"))\l<magic>$22: T.class_of(<Magic>) = alias <C <Magic>>\l<retryTemp>$23: Sorbet::Private::Static::Void = <magic>$22: T.class_of(<Magic>).<retry>()\l<unconditional>\l"
    ];

    "bb::Object#main_10" -> "bb::Object#main_2" [style="bold"];
    "bb::Object#main_11" [
        shape = rectangle;
        color = black;
        label = "block[id=11, rubyBlockId=2](<returnMethodTemp>$2: NilClass)\l<gotoDeadTemp>$24: TrueClass = true\l<unconditional>\l"
    ];

    "bb::Object#main_11" -> "bb::Object#main_9" [style="bold"];
    "bb::Object#main_12" [
        shape = rectangle;
        color = black;
        label = "block[id=12, rubyBlockId=0](<returnMethodTemp>$2: NilClass)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Object#main_12" -> "bb::Object#main_1" [style="bold"];
}

subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;

    "bb::<Class:<root>>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));\l<cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$7: Symbol(:main) = :main\l<statTemp>$8: Symbol(:normal) = :normal\l<statTemp>$3: Symbol(:main) = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$7: Symbol(:main), <statTemp>$8: Symbol(:normal))\l<statTemp>$9: T.untyped = <self>: T.class_of(<root>).main()\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

}

