method ::Object#foo {

bb0[firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    <exceptionValue>$3: T.nilable(Exception) = <get-current-exception>
    <exceptionValue>$3 -> (T.nilable(Exception) ? bb3 : bb4)

# backedges
# - bb6
# - bb7
# - bb8
# - bb9
bb1[firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0
# - bb4
bb3[firstDead=-1](<returnMethodTemp>$2: NilClass, <exceptionValue>$3: Exception):
    <cfgAlias>$8: T.class_of(Exception) = alias <C Exception>
    <isaCheckTemp>$9: TrueClass = <cfgAlias>$8: T.class_of(Exception).===(<exceptionValue>$3: Exception)
    <isaCheckTemp>$9 -> (TrueClass ? bb7 : bb8)

# backedges
# - bb0
bb4[firstDead=2](<self>: Object):
    <statTemp>$5: String("boop") = "boop"
    <returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$5: String("boop"))
    <exceptionValue>$3 = <get-current-exception>
    <exceptionValue>$3 -> (<nullptr> ? bb3 : bb6)

# backedges
# - bb4
bb6[firstDead=0](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$15: NilClass):
    <gotoDeadTemp>$15 -> (<nullptr> ? bb1 : bb9)

# backedges
# - bb3
bb7[firstDead=-1](<exceptionValue>$3: Exception):
    <rescueTemp>$2: Exception = <exceptionValue>$3
    <exceptionValue>$3: NilClass = nil
    <keepForCfgTemp>$6: T.untyped = <keep-alive> <exceptionValue>$3
    <cfgAlias>$13: T.class_of(MyClass) = alias <C MyClass>
    <statTemp>$11: MyClass = <cfgAlias>$13: T.class_of(MyClass).new()
    <statTemp>$10: Exception = <statTemp>$11: MyClass.foo=(<rescueTemp>$2: Exception)
    <returnMethodTemp>$2: Integer(3) = 3
    <gotoDeadTemp>$15 -> (NilClass ? bb1 : bb9)

# backedges
# - bb3
bb8[firstDead=0](<returnMethodTemp>$2: NilClass):
    <gotoDeadTemp>$15 = true
    <gotoDeadTemp>$15 -> (<nullptr> ? bb1 : bb9)

# backedges
# - bb6
# - bb7
# - bb8
bb9[firstDead=1](<returnMethodTemp>$2: Integer(3)):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(3)
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[firstDead=4]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <statTemp>$6: T.untyped = <self>: T.class_of(<root>).foo()
    <statTemp>$4: NilClass = <self>: T.class_of(<root>).puts(<statTemp>$6: T.untyped)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0
bb1[firstDead=-1]():
    <unconditional> -> bb1

}

method ::MyClass#foo= {

bb0[firstDead=2]():
    <self>: MyClass = cast(<self>: NilClass, MyClass);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0
bb1[firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:MyClass>#<static-init> {

bb0[firstDead=3]():
    <self>: T.class_of(MyClass) = cast(<self>: NilClass, T.class_of(MyClass));
    <returnMethodTemp>$2: Symbol(:foo=) = :foo=
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:foo=)
    <unconditional> -> bb1

# backedges
# - bb0
bb1[firstDead=-1]():
    <unconditional> -> bb1

}

