method ::Object#main {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    <cfgAlias>$6: T.class_of(T) = alias <C T>
    <cfgAlias>$8: T.class_of(String) = alias <C String>
    keep_for_ide$4: Runtime object representing type: T.nilable(String) = <cfgAlias>$6: T.class_of(T).nilable(<cfgAlias>$8: T.class_of(String))
    keep_for_ide$4: T.untyped = <keep-alive> keep_for_ide$4
    <castTemp>$9: NilClass = nil
    name: T.nilable(String) = cast(<castTemp>$9: NilClass, T.nilable(String));
    <ifTemp>$11: T::Boolean = name: T.nilable(String).nil?()
    <ifTemp>$11 -> (T::Boolean ? bb2 : bb3)

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=2]():
    <returnTemp>$13: String("missing name") = "missing name"
    <statTemp>$10: T.noreturn = return <returnTemp>$13: String("missing name")
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=3](name: String):
    <statTemp>$15: String("foo") = "foo"
    <returnMethodTemp>$2: T::Boolean = name: String.include?(<statTemp>$15: String("foo"))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T::Boolean
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <returnMethodTemp>$2: Symbol(:main) = :main
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:main)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

