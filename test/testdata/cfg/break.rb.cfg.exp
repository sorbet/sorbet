digraph "break.rb" {
subgraph "cluster_::Object#foo" {
    label = "::Object#foo";
    color = blue;

    "bb::Object#foo_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\l<arrayTemp>$5: Integer(1) = 1\l<arrayTemp>$6: Integer(2) = 2\l<magic>$7: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$4: [Integer(1), Integer(2)] = <magic>$7: T.class_of(<Magic>).<build-array>(<arrayTemp>$5: Integer(1), <arrayTemp>$6: Integer(2))\l<block-pre-call-temp>$8: Sorbet::Private::Static::Void = <statTemp>$4: [Integer(1), Integer(2)].map()\l<selfRestore>$9: Object = <self>\l<unconditional>\l"
    ];

    "bb::Object#foo_0" -> "bb::Object#foo_2" [style="bold"];
    "bb::Object#foo_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#foo_1" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=1](<self>: Object, <block-pre-call-temp>$8: Sorbet::Private::Static::Void, <selfRestore>$9: Object)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Object#foo_2" -> "bb::Object#foo_5" [style="bold"];
    "bb::Object#foo_2" -> "bb::Object#foo_3" [style="tapered"];

    "bb::Object#foo_3" [
        shape = rectangle;
        color = black;
        label = "block[id=3, rubyBlockId=0](<block-pre-call-temp>$8: Sorbet::Private::Static::Void, <selfRestore>$9: Object)\ltarget: T::Array[T.noreturn] = Solve<<block-pre-call-temp>$8, map>\l<unconditional>\l"
    ];

    "bb::Object#foo_3" -> "bb::Object#foo_4" [style="bold"];
    "bb::Object#foo_4" [
        shape = rectangle;
        color = black;
        label = "block[id=4, rubyBlockId=0](target: T.any(T::Array[T.noreturn], Integer), <selfRestore>$9: Object)\l<cfgAlias>$20: T.class_of(T) = alias <C T>\l<returnMethodTemp>$2: T.any(T::Array[T.noreturn], Integer) = <cfgAlias>$20: T.class_of(T).reveal_type(target: T.any(T::Array[T.noreturn], Integer))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.any(T::Array[T.noreturn], Integer)\l<unconditional>\l"
    ];

    "bb::Object#foo_4" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_5" [
        shape = rectangle;
        color = black;
        label = "block[id=5, rubyBlockId=1](<self>: Object, <selfRestore>$9: Object)\louterLoops: 1\l<self>: Object = loadSelf\l<blk>$10: [Integer] = load_yield_params(map)\l<blk>$11: Integer(0) = 0\lx$1: Integer = <blk>$10: [Integer].[](<blk>$11: Integer(0))\l<returnTemp>$15: Integer = x$1\l<block-break-assign>$16: Integer = x$1\l<magic>$17: T.class_of(<Magic>) = alias <C <Magic>>\l<block-break>$18: T.untyped = <magic>$17: T.class_of(<Magic>).<block-break>(<returnTemp>$15: Integer)\ltarget: Integer = <block-break-assign>$16\l<unconditional>\l"
    ];

    "bb::Object#foo_5" -> "bb::Object#foo_4" [style="bold"];
}

subgraph "cluster_::Object#bar" {
    label = "::Object#bar";
    color = blue;

    "bb::Object#bar_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\l<returnMethodTemp>$2: String(\"foo bar\") = \"foo bar\"\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: String(\"foo bar\")\l<unconditional>\l"
    ];

    "bb::Object#bar_0" -> "bb::Object#bar_1" [style="bold"];
    "bb::Object#bar_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#bar_1" -> "bb::Object#bar_1" [style="bold"];
}

subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;

    "bb::<Class:<root>>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>\l<statTemp>$7: FalseClass = false\l<statTemp>$8: Symbol(:bar) = :bar\l<block-pre-call-temp>$9: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(<root>), <statTemp>$7: FalseClass, <statTemp>$8: Symbol(:bar))\l<selfRestore>$10: T.class_of(<root>) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_2" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=1](<self>: T.class_of(<root>), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(<root>))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:<root>>#<static-init>_2" -> "bb::<Class:<root>>#<static-init>_5" [style="bold"];
    "bb::<Class:<root>>#<static-init>_2" -> "bb::<Class:<root>>#<static-init>_3" [style="tapered"];

    "bb::<Class:<root>>#<static-init>_3" [
        shape = rectangle;
        color = black;
        label = "block[id=3, rubyBlockId=0](<block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(<root>))\l<statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$9, sig>\l<self>: T.class_of(<root>) = <selfRestore>$10\l<cfgAlias>$33: T.class_of(T::Sig) = alias <C Sig>\l<cfgAlias>$35: T.class_of(T) = alias <C T>\l<statTemp>$30: T.class_of(<root>) = <self>: T.class_of(<root>).extend(<cfgAlias>$33: T.class_of(T::Sig))\l<cfgAlias>$38: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$40: Symbol(:foo) = :foo\l<statTemp>$41: Symbol(:normal) = :normal\l<statTemp>$36: Symbol(:foo) = <cfgAlias>$38: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$40: Symbol(:foo), <statTemp>$41: Symbol(:normal))\l<statTemp>$44: T.untyped = <self>: T.class_of(<root>).foo()\l<statTemp>$42: NilClass = <self>: T.class_of(<root>).puts(<statTemp>$44: T.untyped)\l<cfgAlias>$48: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$50: Symbol(:bar) = :bar\l<statTemp>$51: Symbol(:normal) = :normal\l<statTemp>$46: Symbol(:bar) = <cfgAlias>$48: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$50: Symbol(:bar), <statTemp>$51: Symbol(:normal))\l<block-pre-call-temp>$54: Sorbet::Private::Static::Void = <self>: T.class_of(<root>).bar()\l<selfRestore>$55: T.class_of(<root>) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_3" -> "bb::<Class:<root>>#<static-init>_6" [style="bold"];
    "bb::<Class:<root>>#<static-init>_5" [
        shape = rectangle;
        color = black;
        label = "block[id=5, rubyBlockId=1](<self>: T.class_of(<root>), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(<root>))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$16: Symbol(:blk) = :blk\l<cfgAlias>$21: T.class_of(T) = alias <C T>\l<statTemp>$19: T.class_of(T.proc) = <cfgAlias>$21: T.class_of(T).proc()\l<hashTemp>$22: Symbol(:x) = :x\l<cfgAlias>$24: T.class_of(Integer) = alias <C Integer>\l<statTemp>$18: T.class_of(T.proc) = <statTemp>$19: T.class_of(T.proc).params(<hashTemp>$22: Symbol(:x), <cfgAlias>$24: T.class_of(Integer))\l<cfgAlias>$26: T.class_of(String) = alias <C String>\l<hashTemp>$17: T.class_of(T.proc) = <statTemp>$18: T.class_of(T.proc).returns(<cfgAlias>$26: T.class_of(String))\l<statTemp>$14: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$16: Symbol(:blk), <hashTemp>$17: T.class_of(T.proc))\l<cfgAlias>$28: T.class_of(String) = alias <C String>\l<blockReturnTemp>$13: T::Private::Methods::DeclBuilder = <statTemp>$14: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$28: T.class_of(String))\l<blockReturnTemp>$29: T.noreturn = blockreturn<sig> <blockReturnTemp>$13: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_5" -> "bb::<Class:<root>>#<static-init>_2" [style="bold"];
    "bb::<Class:<root>>#<static-init>_6" [
        shape = rectangle;
        color = black;
        label = "block[id=6, rubyBlockId=2](<self>: T.class_of(<root>), <block-pre-call-temp>$54: Sorbet::Private::Static::Void, <selfRestore>$55: T.class_of(<root>))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:<root>>#<static-init>_6" -> "bb::<Class:<root>>#<static-init>_9" [style="bold"];
    "bb::<Class:<root>>#<static-init>_6" -> "bb::<Class:<root>>#<static-init>_7" [style="tapered"];

    "bb::<Class:<root>>#<static-init>_7" [
        shape = rectangle;
        color = black;
        label = "block[id=7, rubyBlockId=0](<block-pre-call-temp>$54: Sorbet::Private::Static::Void, <selfRestore>$55: T.class_of(<root>))\la: String = Solve<<block-pre-call-temp>$54, bar>\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_7" -> "bb::<Class:<root>>#<static-init>_8" [style="bold"];
    "bb::<Class:<root>>#<static-init>_8" [
        shape = rectangle;
        color = black;
        label = "block[id=8, rubyBlockId=0](a: T.any(String, Integer), <selfRestore>$55: T.class_of(<root>))\l<self>: T.class_of(<root>) = <selfRestore>$55\l<cfgAlias>$70: T.class_of(T) = alias <C T>\l<statTemp>$68: T.any(String, Integer) = <cfgAlias>$70: T.class_of(T).reveal_type(a: T.any(String, Integer))\l<block-pre-call-temp>$74: Sorbet::Private::Static::Void = <self>: T.class_of(<root>).bar()\l<selfRestore>$75: T.class_of(<root>) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_8" -> "bb::<Class:<root>>#<static-init>_12" [style="bold"];
    "bb::<Class:<root>>#<static-init>_9" [
        shape = rectangle;
        color = black;
        label = "block[id=9, rubyBlockId=2](<self>: T.class_of(<root>), <block-pre-call-temp>$54: Sorbet::Private::Static::Void, <selfRestore>$55: T.class_of(<root>))\louterLoops: 1\l<self>: T.class_of(<root>) = loadSelf\l<blk>$56: [Integer] = load_yield_params(bar)\l<blk>$57: Integer(0) = 0\lx$2: Integer = <blk>$56: [Integer].[](<blk>$57: Integer(0))\l<statTemp>$62: Integer(5) = 5\l<ifTemp>$60: T::Boolean = x$2: Integer.>(<statTemp>$62: Integer(5))\l<ifTemp>$60: T::Boolean\l"
    ];

    "bb::<Class:<root>>#<static-init>_9" -> "bb::<Class:<root>>#<static-init>_10" [style="bold"];
    "bb::<Class:<root>>#<static-init>_9" -> "bb::<Class:<root>>#<static-init>_11" [style="tapered"];

    "bb::<Class:<root>>#<static-init>_10" [
        shape = rectangle;
        color = black;
        label = "block[id=10, rubyBlockId=2](<selfRestore>$55: T.class_of(<root>))\louterLoops: 1\l<returnTemp>$63: Integer(10) = 10\l<block-break-assign>$64: Integer(10) = <returnTemp>$63\l<magic>$65: T.class_of(<Magic>) = alias <C <Magic>>\l<block-break>$66: T.untyped = <magic>$65: T.class_of(<Magic>).<block-break>(<returnTemp>$63: Integer(10))\la: Integer(10) = <block-break-assign>$64\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_10" -> "bb::<Class:<root>>#<static-init>_8" [style="bold"];
    "bb::<Class:<root>>#<static-init>_11" [
        shape = rectangle;
        color = black;
        label = "block[id=11, rubyBlockId=2](<self>: T.class_of(<root>), <block-pre-call-temp>$54: Sorbet::Private::Static::Void, <selfRestore>$55: T.class_of(<root>))\louterLoops: 1\l<blockReturnTemp>$58: String(\"test\") = \"test\"\l<blockReturnTemp>$67: T.noreturn = blockreturn<bar> <blockReturnTemp>$58: String(\"test\")\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_11" -> "bb::<Class:<root>>#<static-init>_6" [style="bold"];
    "bb::<Class:<root>>#<static-init>_12" [
        shape = rectangle;
        color = black;
        label = "block[id=12, rubyBlockId=3](<self>: T.class_of(<root>), <block-pre-call-temp>$74: Sorbet::Private::Static::Void, <selfRestore>$75: T.class_of(<root>))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:<root>>#<static-init>_12" -> "bb::<Class:<root>>#<static-init>_15" [style="bold"];
    "bb::<Class:<root>>#<static-init>_12" -> "bb::<Class:<root>>#<static-init>_13" [style="tapered"];

    "bb::<Class:<root>>#<static-init>_13" [
        shape = rectangle;
        color = black;
        label = "block[id=13, rubyBlockId=0](<block-pre-call-temp>$74: Sorbet::Private::Static::Void, <selfRestore>$75: T.class_of(<root>))\lb: String = Solve<<block-pre-call-temp>$74, bar>\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_13" -> "bb::<Class:<root>>#<static-init>_14" [style="bold"];
    "bb::<Class:<root>>#<static-init>_14" [
        shape = rectangle;
        color = black;
        label = "block[id=14, rubyBlockId=0](b: T.nilable(String), <selfRestore>$75: T.class_of(<root>))\l<cfgAlias>$90: T.class_of(T) = alias <C T>\l<statTemp>$88: T.nilable(String) = <cfgAlias>$90: T.class_of(T).reveal_type(b: T.nilable(String))\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_14" -> "bb::<Class:<root>>#<static-init>_18" [style="bold"];
    "bb::<Class:<root>>#<static-init>_15" [
        shape = rectangle;
        color = black;
        label = "block[id=15, rubyBlockId=3](<self>: T.class_of(<root>), <block-pre-call-temp>$74: Sorbet::Private::Static::Void, <selfRestore>$75: T.class_of(<root>))\louterLoops: 1\l<self>: T.class_of(<root>) = loadSelf\l<blk>$76: [Integer] = load_yield_params(bar)\l<blk>$77: Integer(0) = 0\lx$3: Integer = <blk>$76: [Integer].[](<blk>$77: Integer(0))\l<statTemp>$82: Integer(5) = 5\l<ifTemp>$80: T::Boolean = x$3: Integer.>(<statTemp>$82: Integer(5))\l<ifTemp>$80: T::Boolean\l"
    ];

    "bb::<Class:<root>>#<static-init>_15" -> "bb::<Class:<root>>#<static-init>_16" [style="bold"];
    "bb::<Class:<root>>#<static-init>_15" -> "bb::<Class:<root>>#<static-init>_17" [style="tapered"];

    "bb::<Class:<root>>#<static-init>_16" [
        shape = rectangle;
        color = black;
        label = "block[id=16, rubyBlockId=3](<selfRestore>$75: T.class_of(<root>))\louterLoops: 1\l<block-break-assign>$84: NilClass = <returnTemp>$83\l<magic>$85: T.class_of(<Magic>) = alias <C <Magic>>\l<block-break>$86: T.untyped = <magic>$85: T.class_of(<Magic>).<block-break>(<returnTemp>$83: NilClass)\lb: NilClass = <block-break-assign>$84\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_16" -> "bb::<Class:<root>>#<static-init>_14" [style="bold"];
    "bb::<Class:<root>>#<static-init>_17" [
        shape = rectangle;
        color = black;
        label = "block[id=17, rubyBlockId=3](<self>: T.class_of(<root>), <block-pre-call-temp>$74: Sorbet::Private::Static::Void, <selfRestore>$75: T.class_of(<root>))\louterLoops: 1\l<blockReturnTemp>$78: String(\"test\") = \"test\"\l<blockReturnTemp>$87: T.noreturn = blockreturn<bar> <blockReturnTemp>$78: String(\"test\")\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_17" -> "bb::<Class:<root>>#<static-init>_12" [style="bold"];
    "bb::<Class:<root>>#<static-init>_18" [
        shape = rectangle;
        color = black;
        label = "block[id=18, rubyBlockId=0]()\louterLoops: 1\l<statTemp>$95: Integer(1) = 1\l<statTemp>$94: String = <statTemp>$95: Integer(1).to_s()\l<statTemp>$96: String(\"\") = \"\"\l<whileTemp>$93: T::Boolean = <statTemp>$94: String.==(<statTemp>$96: String(\"\"))\l<whileTemp>$93: T::Boolean\l"
    ];

    "bb::<Class:<root>>#<static-init>_18" -> "bb::<Class:<root>>#<static-init>_21" [style="bold"];
    "bb::<Class:<root>>#<static-init>_18" -> "bb::<Class:<root>>#<static-init>_19" [style="tapered"];

    "bb::<Class:<root>>#<static-init>_19" [
        shape = rectangle;
        color = black;
        label = "block[id=19, rubyBlockId=0]()\lc: NilClass = nil\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_19" -> "bb::<Class:<root>>#<static-init>_20" [style="bold"];
    "bb::<Class:<root>>#<static-init>_20" [
        shape = rectangle;
        color = black;
        label = "block[id=20, rubyBlockId=0](c: T.nilable(Symbol))\l<cfgAlias>$108: T.class_of(T) = alias <C T>\l<statTemp>$106: T.nilable(Symbol) = <cfgAlias>$108: T.class_of(T).reveal_type(c: T.nilable(Symbol))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_20" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_21" [
        shape = rectangle;
        color = black;
        label = "block[id=21, rubyBlockId=0]()\louterLoops: 1\l<statTemp>$100: Integer(1) = 1\l<statTemp>$99: String = <statTemp>$100: Integer(1).to_s()\l<statTemp>$101: String(\"\") = \"\"\l<ifTemp>$98: T::Boolean = <statTemp>$99: String.==(<statTemp>$101: String(\"\"))\l<ifTemp>$98: T::Boolean\l"
    ];

    "bb::<Class:<root>>#<static-init>_21" -> "bb::<Class:<root>>#<static-init>_22" [style="bold"];
    "bb::<Class:<root>>#<static-init>_21" -> "bb::<Class:<root>>#<static-init>_18" [style="tapered"];

    "bb::<Class:<root>>#<static-init>_22" [
        shape = rectangle;
        color = black;
        label = "block[id=22, rubyBlockId=0]()\louterLoops: 1\l<returnTemp>$102: Symbol(:abc) = :abc\l<block-break-assign>$103: Symbol(:abc) = <returnTemp>$102\l<magic>$104: T.class_of(<Magic>) = alias <C <Magic>>\l<block-break>$105: T.untyped = <magic>$104: T.class_of(<Magic>).<block-break>(<returnTemp>$102: Symbol(:abc))\lc: Symbol(:abc) = <block-break-assign>$103\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_22" -> "bb::<Class:<root>>#<static-init>_20" [style="bold"];
}

}

