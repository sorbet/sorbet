method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=5]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$6: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$8: T.class_of(A) = alias <C A>
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$8: T.class_of(A))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::A#initialize {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: A = cast(<self>: NilClass, A);
    <statTemp>$3: T.untyped = <self>: A.spec_list()
    <block-pre-call-temp>$5: Sorbet::Private::Static::Void = <statTemp>$3: T.untyped.map()
    <selfRestore>$6: A = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
# - bb10(rubyRegionId=4)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb13(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$7: NilClass, se$1: NilClass, <gotoDeadTemp>$15: NilClass):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=2](<block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A):
    <returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$5, map>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=-1](<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$7: NilClass, se$1: NilClass, <gotoDeadTemp>$15: NilClass):
    # outerLoops: 1
    <self>: A = loadSelf(map)
    <magic>$10: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$8: T.untyped = <get-current-exception>
    <exceptionValue>$8 -> (T.untyped ? bb7 : bb8)

# backedges
# - bb5(rubyRegionId=1)
# - bb8(rubyRegionId=2)
bb7[rubyRegionId=3, firstDead=-1](<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$7: T.nilable(Integer), <exceptionValue>$8: T.untyped, <magic>$10: T.class_of(<Magic>), se$1: NilClass, <gotoDeadTemp>$15: NilClass):
    # outerLoops: 1
    <cfgAlias>$13: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$14: T::Boolean = <cfgAlias>$13: T.class_of(StandardError).===(<exceptionValue>$8: T.untyped)
    <isaCheckTemp>$14 -> (T::Boolean ? bb11 : bb12)

# backedges
# - bb5(rubyRegionId=1)
bb8[rubyRegionId=2, firstDead=-1](<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <magic>$10: T.class_of(<Magic>), se$1: NilClass, <gotoDeadTemp>$15: NilClass):
    # outerLoops: 1
    <blockReturnTemp>$7: Integer(1) = 1
    <exceptionValue>$8: T.untyped = <get-current-exception>
    <exceptionValue>$8 -> (T.untyped ? bb7 : bb9)

# backedges
# - bb8(rubyRegionId=2)
bb9[rubyRegionId=5, firstDead=-1](<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$7: Integer(1), se$1: NilClass, <gotoDeadTemp>$15: NilClass):
    # outerLoops: 1
    <unconditional> -> bb10

# backedges
# - bb9(rubyRegionId=5)
# - bb11(rubyRegionId=3)
# - bb12(rubyRegionId=3)
bb10[rubyRegionId=4, firstDead=-1](<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$7: T.nilable(Integer), se$1: T.nilable(StandardError), <gotoDeadTemp>$15: T.nilable(TrueClass)):
    # outerLoops: 1
    <rescueTAliasTemp>$9: T.class_of(T) = alias <C T>
    se$1: T.untyped = <rescueTAliasTemp>$9: T.class_of(T).unsafe(se$1: T.nilable(StandardError))
    <gotoDeadTemp>$15 -> (T.nilable(TrueClass) ? bb1 : bb13)

# backedges
# - bb7(rubyRegionId=3)
bb11[rubyRegionId=3, firstDead=-1](<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <exceptionValue>$8: StandardError, <magic>$10: T.class_of(<Magic>), <gotoDeadTemp>$15: NilClass):
    # outerLoops: 1
    se$1: StandardError = <exceptionValue>$8
    <exceptionValue>$8: NilClass = nil
    <keepForCfgTemp>$11: Sorbet::Private::Static::Void = <magic>$10: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$8: NilClass)
    <blockReturnTemp>$7: Integer(2) = 2
    <unconditional> -> bb10

# backedges
# - bb7(rubyRegionId=3)
bb12[rubyRegionId=3, firstDead=-1](<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$7: T.nilable(Integer), se$1: NilClass):
    # outerLoops: 1
    <gotoDeadTemp>$15: TrueClass = true
    <unconditional> -> bb10

# backedges
# - bb10(rubyRegionId=4)
bb13[rubyRegionId=1, firstDead=1](<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$7: Integer, se$1: T.untyped, <gotoDeadTemp>$15: NilClass):
    # outerLoops: 1
    <blockReturnTemp>$17: T.noreturn = blockreturn<map> <blockReturnTemp>$7: Integer
    <unconditional> -> bb2

}

method ::<Class:A>#<static-init> {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: T.class_of(A) = cast(<self>: NilClass, T.class_of(A));
    <returnMethodTemp>$2: Symbol(:initialize) = :initialize
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:initialize)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

