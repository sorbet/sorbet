method ::<Class:<root>>#<static-init> {

bb0[firstDead=2]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0
bb1[firstDead=-1]():
    <unconditional> -> bb1

}

method ::A#initialize {

bb0[firstDead=-1]():
    <self>: A = cast(<self>: NilClass, A);
    <statTemp>$3: T.untyped = <self>: A.spec_list()
    <block-pre-call-temp>$5: Sorbet::Private::Static::Void = <statTemp>$3: T.untyped.map()
    <selfRestore>$6: A = <self>
    <unconditional> -> bb2

# backedges
# - bb3
# - bb10
# - bb11
# - bb12
bb1[firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0
# - bb13
bb2[firstDead=-1](<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$7: NilClass, <gotoDeadTemp>$13: NilClass):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2
bb3[firstDead=2](<block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A):
    <returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$5, map>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb2
bb5[firstDead=-1](<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$7: NilClass, <gotoDeadTemp>$13: NilClass):
    # outerLoops: 1
    <self>: A = loadSelf(map)
    <exceptionValue>$8: T.nilable(Exception) = <get-current-exception>
    <exceptionValue>$8 -> (T.nilable(Exception) ? bb7 : bb8)

# backedges
# - bb5
# - bb8
bb7[firstDead=-1](<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$7: T.nilable(Integer), <exceptionValue>$8: Exception, <gotoDeadTemp>$13: NilClass):
    # outerLoops: 1
    <cfgAlias>$11: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$12: T::Boolean = <cfgAlias>$11: T.class_of(StandardError).===(<exceptionValue>$8: Exception)
    <isaCheckTemp>$12 -> (T::Boolean ? bb11 : bb12)

# backedges
# - bb5
bb8[firstDead=-1](<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <gotoDeadTemp>$13: NilClass):
    # outerLoops: 1
    <blockReturnTemp>$7: Integer(1) = 1
    <exceptionValue>$8: T.nilable(Exception) = <get-current-exception>
    <exceptionValue>$8 -> (T.nilable(Exception) ? bb7 : bb10)

# backedges
# - bb8
bb10[firstDead=-1](<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$7: Integer(1), <gotoDeadTemp>$13: NilClass):
    # outerLoops: 1
    <gotoDeadTemp>$13 -> (NilClass ? bb1 : bb13)

# backedges
# - bb7
bb11[firstDead=-1](<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <exceptionValue>$8: StandardError, <gotoDeadTemp>$13: NilClass):
    # outerLoops: 1
    <exceptionValue>$8: NilClass = nil
    <keepForCfgTemp>$9: T.untyped = <keep-alive> <exceptionValue>$8
    <blockReturnTemp>$7: Integer(2) = 2
    <gotoDeadTemp>$13 -> (NilClass ? bb1 : bb13)

# backedges
# - bb7
bb12[firstDead=-1](<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$7: T.nilable(Integer)):
    # outerLoops: 1
    <gotoDeadTemp>$13: TrueClass = true
    <gotoDeadTemp>$13 -> (TrueClass ? bb1 : bb13)

# backedges
# - bb10
# - bb11
# - bb12
bb13[firstDead=1](<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$7: Integer, <gotoDeadTemp>$13: NilClass):
    # outerLoops: 1
    <blockReturnTemp>$15: T.noreturn = blockreturn<map> <blockReturnTemp>$7: Integer
    <unconditional> -> bb2

}

method ::<Class:A>#<static-init> {

bb0[firstDead=3]():
    <self>: T.class_of(A) = cast(<self>: NilClass, T.class_of(A));
    <returnMethodTemp>$2: Symbol(:initialize) = :initialize
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:initialize)
    <unconditional> -> bb1

# backedges
# - bb0
bb1[firstDead=-1]():
    <unconditional> -> bb1

}

