method ::Object#foo {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    <block-pre-call-temp>$4: Sorbet::Private::Static::Void = <self>: Object.outer()
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb1[rubyRegionId=0, firstDead=-1](<self>):
    <statTemp>$9 = <self>
    <block-pre-call-temp>$10 = <statTemp>$9.inner()
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=1, firstDead=-1](<self>: Object, <block-pre-call-temp>$4: Sorbet::Private::Static::Void):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=3](<self>: Object, <block-pre-call-temp>$4: Sorbet::Private::Static::Void):
    <returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$4, outer>
    <self>: Object = <self>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=2](<self>: Object):
    # outerLoops: 1
    <self>: Object = loadSelf(outer)
    <statTemp>$7: T.noreturn = return <returnTemp>$8: NilClass
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <returnMethodTemp>$2: Symbol(:foo) = :foo
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:foo)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

