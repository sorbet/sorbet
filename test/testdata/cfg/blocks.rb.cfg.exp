digraph "blocks.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;

    "bb::<Class:<root>>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));\l<cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$7: T.class_of(BlockTest) = alias <C BlockTest>\l<statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(BlockTest))\l<cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$12: T.class_of(BlockTest) = alias <C BlockTest>\l<statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(BlockTest))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::BlockTest#blockPass" {
    label = "::BlockTest#blockPass";
    color = blue;

    "bb::BlockTest#blockPass_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: BlockTest = cast(<self>: NilClass, BlockTest);\l<statTemp>$4: Integer(1) = 1\l<statTemp>$5: Integer(2) = 2\l<statTemp>$6: Integer(3) = 3\l<block-pre-call-temp>$7: Sorbet::Private::Static::Void = <self>: BlockTest.foo(<statTemp>$4: Integer(1), <statTemp>$5: Integer(2), <statTemp>$6: Integer(3))\l<selfRestore>$8: BlockTest = <self>\l<unconditional>\l"
    ];

    "bb::BlockTest#blockPass_0" -> "bb::BlockTest#blockPass_2" [style="bold"];
    "bb::BlockTest#blockPass_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::BlockTest#blockPass_1" -> "bb::BlockTest#blockPass_1" [style="bold"];
    "bb::BlockTest#blockPass_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=1](<self>: BlockTest, <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: BlockTest)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::BlockTest#blockPass_2" -> "bb::BlockTest#blockPass_5" [style="bold"];
    "bb::BlockTest#blockPass_2" -> "bb::BlockTest#blockPass_3" [style="tapered"];

    "bb::BlockTest#blockPass_3" [
        shape = rectangle;
        color = black;
        label = "block[id=3, rubyBlockId=0](<block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: BlockTest)\l<returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$7, foo>\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::BlockTest#blockPass_3" -> "bb::BlockTest#blockPass_1" [style="bold"];
    "bb::BlockTest#blockPass_5" [
        shape = rectangle;
        color = black;
        label = "block[id=5, rubyBlockId=1](<self>: BlockTest, <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: BlockTest)\louterLoops: 1\l<self>: BlockTest = loadSelf\l<blk>$9: T.untyped = load_yield_params(foo)\lx$1: T.untyped = yield_load_arg(0)\ly$1: T.untyped = yield_load_arg(1)\l<blockReturnTemp>$10: T.untyped = x$1\l<blockReturnTemp>$11: T.noreturn = blockreturn<foo> <blockReturnTemp>$10: T.untyped\l<unconditional>\l"
    ];

    "bb::BlockTest#blockPass_5" -> "bb::BlockTest#blockPass_2" [style="bold"];
}

subgraph "cluster_::<Class:BlockTest>#<static-init>" {
    label = "::<Class:BlockTest>#<static-init>";
    color = blue;

    "bb::<Class:BlockTest>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(BlockTest) = cast(<self>: NilClass, T.class_of(BlockTest));\l<cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: Symbol(:blockPass) = :blockPass\l<statTemp>$7: Symbol(:normal) = :normal\l<returnMethodTemp>$2: Symbol(:blockPass) = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(BlockTest), <statTemp>$6: Symbol(:blockPass), <statTemp>$7: Symbol(:normal))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:blockPass)\l<unconditional>\l"
    ];

    "bb::<Class:BlockTest>#<static-init>_0" -> "bb::<Class:BlockTest>#<static-init>_1" [style="bold"];
    "bb::<Class:BlockTest>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:BlockTest>#<static-init>_1" -> "bb::<Class:BlockTest>#<static-init>_1" [style="bold"];
}

}

