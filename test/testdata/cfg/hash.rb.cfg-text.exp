method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=5]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$6: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$8: T.class_of(TestHash) = alias <C TestHash>
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$8: T.class_of(TestHash))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestHash#something {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: TestHash = cast(<self>: NilClass, TestHash);
    <returnMethodTemp>$2: Integer(17) = 17
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(17)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestHash#test {

bb0[rubyRegionId=0, firstDead=9]():
    <self>: TestHash = cast(<self>: NilClass, TestHash);
    <hashTemp>$3: T.untyped = <self>: TestHash.something()
    <hashTemp>$4: Symbol(:bar) = :bar
    <statTemp>$8: Integer(1) = 1
    <statTemp>$9: Integer(2) = 2
    <hashTemp>$6: Integer = <statTemp>$8: Integer(1).+(<statTemp>$9: Integer(2))
    <hashTemp>$7: Integer(2) = 2
    <returnMethodTemp>$2: T::Hash[T.untyped, T.untyped] = {<hashTemp>$3, <hashTemp>$4, <hashTemp>$6, <hashTemp>$7}
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T::Hash[T.untyped, T.untyped]
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestHash#test_shaped {

bb0[rubyRegionId=0, firstDead=11]():
    <self>: TestHash = cast(<self>: NilClass, TestHash);
    <hashTemp>$3: Integer(1) = 1
    <hashTemp>$4: Integer(2) = 2
    <hashTemp>$5: Integer(2) = 2
    <hashTemp>$6: Integer(3) = 3
    <hashTemp>$7: Symbol(:foo) = :foo
    <hashTemp>$8: Symbol(:bar) = :bar
    <hashTemp>$9: Symbol(:baz) = :baz
    <hashTemp>$10: T.untyped = <self>: TestHash.something()
    <returnMethodTemp>$2: {Integer(1) => Integer(2), Integer(2) => Integer(3), foo: Symbol(:bar), baz: T.untyped} = {<hashTemp>$3, <hashTemp>$4, <hashTemp>$5, <hashTemp>$6, <hashTemp>$7, <hashTemp>$8, <hashTemp>$9, <hashTemp>$10}
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: {Integer(1) => Integer(2), Integer(2) => Integer(3), foo: Symbol(:bar), baz: T.untyped}
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:TestHash>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(TestHash) = cast(<self>: NilClass, T.class_of(TestHash));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

