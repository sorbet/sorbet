method ::<Class:<root>>#<static-init> {

bb0[firstDead=2]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0
bb1[firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestArray#an_int {

bb0[firstDead=3]():
    <self>: TestArray = cast(<self>: NilClass, TestArray);
    <returnMethodTemp>$2: Integer(0) = 0
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(0)
    <unconditional> -> bb1

# backedges
# - bb0
bb1[firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestArray#a_string {

bb0[firstDead=3]():
    <self>: TestArray = cast(<self>: NilClass, TestArray);
    <returnMethodTemp>$2: String("str") = "str"
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: String("str")
    <unconditional> -> bb1

# backedges
# - bb0
bb1[firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestArray#test_arrays {

bb0[firstDead=14]():
    <self>: TestArray = cast(<self>: NilClass, TestArray);
    <magic>$4: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$3: [] = <magic>$4: T.class_of(<Magic>).<build-array>()
    <arrayTemp>$6: Integer(1) = 1
    <arrayTemp>$7: Integer(2) = 2
    <magic>$8: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$5: [Integer(1), Integer(2)] = <magic>$8: T.class_of(<Magic>).<build-array>(<arrayTemp>$6: Integer(1), <arrayTemp>$7: Integer(2))
    <arrayTemp>$9: Integer = <self>: TestArray.an_int()
    <arrayTemp>$11: String = <self>: TestArray.a_string()
    <magic>$14: T.class_of(<Magic>) = alias <C <Magic>>
    <arrayTemp>$13: [] = <magic>$14: T.class_of(<Magic>).<build-array>()
    <magic>$15: T.class_of(<Magic>) = alias <C <Magic>>
    <returnMethodTemp>$2: [Integer, String, []] = <magic>$15: T.class_of(<Magic>).<build-array>(<arrayTemp>$9: Integer, <arrayTemp>$11: String, <arrayTemp>$13: [])
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: [Integer, String, []]
    <unconditional> -> bb1

# backedges
# - bb0
bb1[firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:TestArray>#<static-init> {

bb0[firstDead=-1]():
    <self>: T.class_of(TestArray) = cast(<self>: NilClass, T.class_of(TestArray));
    <block-pre-call-temp>$5: Sorbet::Private::Static::Void = <self>: T.class_of(TestArray).sig()
    <selfRestore>$6: T.class_of(TestArray) = <self>
    <unconditional> -> bb2

# backedges
# - bb7
bb1[firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0
# - bb5
bb2[firstDead=-1](<self>: T.class_of(TestArray), <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: T.class_of(TestArray)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2
bb3[firstDead=-1](<block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: T.class_of(TestArray)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$5, sig>
    <self>: T.class_of(TestArray) = <selfRestore>$6
    <block-pre-call-temp>$14: Sorbet::Private::Static::Void = <self>: T.class_of(TestArray).sig()
    <selfRestore>$15: T.class_of(TestArray) = <self>
    <unconditional> -> bb6

# backedges
# - bb2
bb5[firstDead=4](<self>: T.class_of(TestArray), <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: T.class_of(TestArray)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <cfgAlias>$10: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$7: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$10: T.class_of(Integer))
    <blockReturnTemp>$11: T.noreturn = blockreturn<sig> <blockReturnTemp>$7: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

# backedges
# - bb3
# - bb9
bb6[firstDead=-1](<self>: T.class_of(TestArray), <block-pre-call-temp>$14: Sorbet::Private::Static::Void, <selfRestore>$15: T.class_of(TestArray)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb9 : bb7)

# backedges
# - bb6
bb7[firstDead=6](<block-pre-call-temp>$14: Sorbet::Private::Static::Void, <selfRestore>$15: T.class_of(TestArray)):
    <statTemp>$12: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$14, sig>
    <self>: T.class_of(TestArray) = <selfRestore>$15
    <cfgAlias>$24: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$26: T.class_of(T) = alias <C T>
    <statTemp>$21: T.class_of(TestArray) = <self>: T.class_of(TestArray).extend(<cfgAlias>$24: T.class_of(T::Sig))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb6
bb9[firstDead=4](<self>: T.class_of(TestArray), <block-pre-call-temp>$14: Sorbet::Private::Static::Void, <selfRestore>$15: T.class_of(TestArray)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <cfgAlias>$19: T.class_of(String) = alias <C String>
    <blockReturnTemp>$16: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$19: T.class_of(String))
    <blockReturnTemp>$20: T.noreturn = blockreturn<sig> <blockReturnTemp>$16: T::Private::Methods::DeclBuilder
    <unconditional> -> bb6

}

