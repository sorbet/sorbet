digraph "array.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;

    "bb::<Class:<root>>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));\l<cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$7: T.class_of(TestArray) = alias <C TestArray>\l<statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(TestArray))\l<cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$12: T.class_of(TestArray) = alias <C TestArray>\l<statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(TestArray))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::TestArray#an_int" {
    label = "::TestArray#an_int";
    color = blue;

    "bb::TestArray#an_int_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestArray = cast(<self>: NilClass, TestArray);\l<returnMethodTemp>$2: Integer(0) = 0\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(0)\l<unconditional>\l"
    ];

    "bb::TestArray#an_int_0" -> "bb::TestArray#an_int_1" [style="bold"];
    "bb::TestArray#an_int_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestArray#an_int_1" -> "bb::TestArray#an_int_1" [style="bold"];
}

subgraph "cluster_::TestArray#a_string" {
    label = "::TestArray#a_string";
    color = blue;

    "bb::TestArray#a_string_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestArray = cast(<self>: NilClass, TestArray);\l<returnMethodTemp>$2: String(\"str\") = \"str\"\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: String(\"str\")\l<unconditional>\l"
    ];

    "bb::TestArray#a_string_0" -> "bb::TestArray#a_string_1" [style="bold"];
    "bb::TestArray#a_string_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestArray#a_string_1" -> "bb::TestArray#a_string_1" [style="bold"];
}

subgraph "cluster_::TestArray#test_arrays" {
    label = "::TestArray#test_arrays";
    color = blue;

    "bb::TestArray#test_arrays_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestArray = cast(<self>: NilClass, TestArray);\l<magic>$4: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$3: [] = <magic>$4: T.class_of(<Magic>).<build-array>()\l<arrayTemp>$6: Integer(1) = 1\l<arrayTemp>$7: Integer(2) = 2\l<magic>$8: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$5: [Integer(1), Integer(2)] = <magic>$8: T.class_of(<Magic>).<build-array>(<arrayTemp>$6: Integer(1), <arrayTemp>$7: Integer(2))\l<arrayTemp>$9: Integer = <self>: TestArray.an_int()\l<arrayTemp>$11: String = <self>: TestArray.a_string()\l<magic>$14: T.class_of(<Magic>) = alias <C <Magic>>\l<arrayTemp>$13: [] = <magic>$14: T.class_of(<Magic>).<build-array>()\l<magic>$15: T.class_of(<Magic>) = alias <C <Magic>>\l<returnMethodTemp>$2: [Integer, String, []] = <magic>$15: T.class_of(<Magic>).<build-array>(<arrayTemp>$9: Integer, <arrayTemp>$11: String, <arrayTemp>$13: [])\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: [Integer, String, []]\l<unconditional>\l"
    ];

    "bb::TestArray#test_arrays_0" -> "bb::TestArray#test_arrays_1" [style="bold"];
    "bb::TestArray#test_arrays_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestArray#test_arrays_1" -> "bb::TestArray#test_arrays_1" [style="bold"];
}

subgraph "cluster_::<Class:TestArray>#<static-init>" {
    label = "::<Class:TestArray>#<static-init>";
    color = blue;

    "bb::<Class:TestArray>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(TestArray) = cast(<self>: NilClass, T.class_of(TestArray));\l<cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>\l<statTemp>$7: FalseClass = false\l<statTemp>$8: Symbol(:an_int) = :an_int\l<block-pre-call-temp>$9: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(TestArray), <statTemp>$7: FalseClass, <statTemp>$8: Symbol(:an_int))\l<selfRestore>$10: T.class_of(TestArray) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:TestArray>#<static-init>_0" -> "bb::<Class:TestArray>#<static-init>_2" [style="bold"];
    "bb::<Class:TestArray>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:TestArray>#<static-init>_1" -> "bb::<Class:TestArray>#<static-init>_1" [style="bold"];
    "bb::<Class:TestArray>#<static-init>_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=1](<self>: T.class_of(TestArray), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(TestArray))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:TestArray>#<static-init>_2" -> "bb::<Class:TestArray>#<static-init>_5" [style="bold"];
    "bb::<Class:TestArray>#<static-init>_2" -> "bb::<Class:TestArray>#<static-init>_3" [style="tapered"];

    "bb::<Class:TestArray>#<static-init>_3" [
        shape = rectangle;
        color = black;
        label = "block[id=3, rubyBlockId=0](<block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(TestArray))\l<statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$9, sig>\l<self>: T.class_of(TestArray) = <selfRestore>$10\l<cfgAlias>$19: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>\l<statTemp>$21: FalseClass = false\l<statTemp>$22: Symbol(:a_string) = :a_string\l<block-pre-call-temp>$23: Sorbet::Private::Static::Void = <cfgAlias>$19: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(TestArray), <statTemp>$21: FalseClass, <statTemp>$22: Symbol(:a_string))\l<selfRestore>$24: T.class_of(TestArray) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:TestArray>#<static-init>_3" -> "bb::<Class:TestArray>#<static-init>_6" [style="bold"];
    "bb::<Class:TestArray>#<static-init>_5" [
        shape = rectangle;
        color = black;
        label = "block[id=5, rubyBlockId=1](<self>: T.class_of(TestArray), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(TestArray))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<cfgAlias>$15: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$12: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$15: T.class_of(Integer))\l<blockReturnTemp>$16: T.noreturn = blockreturn<sig> <blockReturnTemp>$12: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:TestArray>#<static-init>_5" -> "bb::<Class:TestArray>#<static-init>_2" [style="bold"];
    "bb::<Class:TestArray>#<static-init>_6" [
        shape = rectangle;
        color = black;
        label = "block[id=6, rubyBlockId=2](<self>: T.class_of(TestArray), <block-pre-call-temp>$23: Sorbet::Private::Static::Void, <selfRestore>$24: T.class_of(TestArray))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:TestArray>#<static-init>_6" -> "bb::<Class:TestArray>#<static-init>_9" [style="bold"];
    "bb::<Class:TestArray>#<static-init>_6" -> "bb::<Class:TestArray>#<static-init>_7" [style="tapered"];

    "bb::<Class:TestArray>#<static-init>_7" [
        shape = rectangle;
        color = black;
        label = "block[id=7, rubyBlockId=0](<block-pre-call-temp>$23: Sorbet::Private::Static::Void, <selfRestore>$24: T.class_of(TestArray))\l<statTemp>$17: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$23, sig>\l<self>: T.class_of(TestArray) = <selfRestore>$24\l<cfgAlias>$34: T.class_of(T::Sig) = alias <C Sig>\l<cfgAlias>$36: T.class_of(T) = alias <C T>\l<statTemp>$31: T.class_of(TestArray) = <self>: T.class_of(TestArray).extend(<cfgAlias>$34: T.class_of(T::Sig))\l<cfgAlias>$39: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$41: Symbol(:an_int) = :an_int\l<statTemp>$42: Symbol(:normal) = :normal\l<statTemp>$37: Symbol(:an_int) = <cfgAlias>$39: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestArray), <statTemp>$41: Symbol(:an_int), <statTemp>$42: Symbol(:normal))\l<cfgAlias>$45: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$47: Symbol(:a_string) = :a_string\l<statTemp>$48: Symbol(:normal) = :normal\l<statTemp>$43: Symbol(:a_string) = <cfgAlias>$45: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestArray), <statTemp>$47: Symbol(:a_string), <statTemp>$48: Symbol(:normal))\l<cfgAlias>$51: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$53: Symbol(:test_arrays) = :test_arrays\l<statTemp>$54: Symbol(:normal) = :normal\l<statTemp>$49: Symbol(:test_arrays) = <cfgAlias>$51: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestArray), <statTemp>$53: Symbol(:test_arrays), <statTemp>$54: Symbol(:normal))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:TestArray>#<static-init>_7" -> "bb::<Class:TestArray>#<static-init>_1" [style="bold"];
    "bb::<Class:TestArray>#<static-init>_9" [
        shape = rectangle;
        color = black;
        label = "block[id=9, rubyBlockId=2](<self>: T.class_of(TestArray), <block-pre-call-temp>$23: Sorbet::Private::Static::Void, <selfRestore>$24: T.class_of(TestArray))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<cfgAlias>$29: T.class_of(String) = alias <C String>\l<blockReturnTemp>$26: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$29: T.class_of(String))\l<blockReturnTemp>$30: T.noreturn = blockreturn<sig> <blockReturnTemp>$26: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:TestArray>#<static-init>_9" -> "bb::<Class:TestArray>#<static-init>_6" [style="bold"];
}

}

