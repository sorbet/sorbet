method ::<Class:<root>>#<static-init> {

bb0[rubyBlockId=0, firstDead=8]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$7: T.class_of(TestArray) = alias <C TestArray>
    <statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(TestArray))
    <cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$12: T.class_of(TestArray) = alias <C TestArray>
    <statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(TestArray))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestArray#an_int {

bb0[rubyBlockId=0, firstDead=3]():
    <self>: TestArray = cast(<self>: NilClass, TestArray);
    <returnMethodTemp>$2: Integer(0) = 0
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(0)
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestArray#a_string {

bb0[rubyBlockId=0, firstDead=3]():
    <self>: TestArray = cast(<self>: NilClass, TestArray);
    <returnMethodTemp>$2: String("str") = "str"
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: String("str")
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestArray#test_arrays {

bb0[rubyBlockId=0, firstDead=14]():
    <self>: TestArray = cast(<self>: NilClass, TestArray);
    <magic>$4: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$3: [] = <magic>$4: T.class_of(<Magic>).<build-array>()
    <arrayTemp>$6: Integer(1) = 1
    <arrayTemp>$7: Integer(2) = 2
    <magic>$8: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$5: [Integer(1), Integer(2)] = <magic>$8: T.class_of(<Magic>).<build-array>(<arrayTemp>$6: Integer(1), <arrayTemp>$7: Integer(2))
    <arrayTemp>$9: Integer = <self>: TestArray.an_int()
    <arrayTemp>$11: String = <self>: TestArray.a_string()
    <magic>$14: T.class_of(<Magic>) = alias <C <Magic>>
    <arrayTemp>$13: [] = <magic>$14: T.class_of(<Magic>).<build-array>()
    <magic>$15: T.class_of(<Magic>) = alias <C <Magic>>
    <returnMethodTemp>$2: [Integer, String, []] = <magic>$15: T.class_of(<Magic>).<build-array>(<arrayTemp>$9: Integer, <arrayTemp>$11: String, <arrayTemp>$13: [])
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: [Integer, String, []]
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:TestArray>#<static-init> {

bb0[rubyBlockId=0, firstDead=-1]():
    <self>: T.class_of(TestArray) = cast(<self>: NilClass, T.class_of(TestArray));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$7: FalseClass = false
    <statTemp>$8: Symbol(:an_int) = :an_int
    <block-pre-call-temp>$9: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(TestArray), <statTemp>$7: FalseClass, <statTemp>$8: Symbol(:an_int))
    <selfRestore>$10: T.class_of(TestArray) = <self>
    <unconditional> -> bb2

# backedges
# - bb7(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
# - bb5(rubyBlockId=1)
bb2[rubyBlockId=1, firstDead=-1](<self>: T.class_of(TestArray), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(TestArray)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyBlockId=1)
bb3[rubyBlockId=0, firstDead=-1](<block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(TestArray)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$9, sig>
    <self>: T.class_of(TestArray) = <selfRestore>$10
    <cfgAlias>$19: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$21: FalseClass = false
    <statTemp>$22: Symbol(:a_string) = :a_string
    <block-pre-call-temp>$23: Sorbet::Private::Static::Void = <cfgAlias>$19: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(TestArray), <statTemp>$21: FalseClass, <statTemp>$22: Symbol(:a_string))
    <selfRestore>$24: T.class_of(TestArray) = <self>
    <unconditional> -> bb6

# backedges
# - bb2(rubyBlockId=1)
bb5[rubyBlockId=1, firstDead=4](<self>: T.class_of(TestArray), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(TestArray)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf
    <cfgAlias>$15: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$12: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$15: T.class_of(Integer))
    <blockReturnTemp>$16: T.noreturn = blockreturn<sig> <blockReturnTemp>$12: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

# backedges
# - bb3(rubyBlockId=0)
# - bb9(rubyBlockId=2)
bb6[rubyBlockId=2, firstDead=-1](<self>: T.class_of(TestArray), <block-pre-call-temp>$23: Sorbet::Private::Static::Void, <selfRestore>$24: T.class_of(TestArray)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb9 : bb7)

# backedges
# - bb6(rubyBlockId=2)
bb7[rubyBlockId=0, firstDead=18](<block-pre-call-temp>$23: Sorbet::Private::Static::Void, <selfRestore>$24: T.class_of(TestArray)):
    <statTemp>$17: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$23, sig>
    <self>: T.class_of(TestArray) = <selfRestore>$24
    <cfgAlias>$34: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$36: T.class_of(T) = alias <C T>
    <statTemp>$31: T.class_of(TestArray) = <self>: T.class_of(TestArray).extend(<cfgAlias>$34: T.class_of(T::Sig))
    <cfgAlias>$39: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$41: Symbol(:an_int) = :an_int
    <statTemp>$42: Symbol(:normal) = :normal
    <statTemp>$37: Symbol(:an_int) = <cfgAlias>$39: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestArray), <statTemp>$41: Symbol(:an_int), <statTemp>$42: Symbol(:normal))
    <cfgAlias>$45: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$47: Symbol(:a_string) = :a_string
    <statTemp>$48: Symbol(:normal) = :normal
    <statTemp>$43: Symbol(:a_string) = <cfgAlias>$45: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestArray), <statTemp>$47: Symbol(:a_string), <statTemp>$48: Symbol(:normal))
    <cfgAlias>$51: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$53: Symbol(:test_arrays) = :test_arrays
    <statTemp>$54: Symbol(:normal) = :normal
    <statTemp>$49: Symbol(:test_arrays) = <cfgAlias>$51: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestArray), <statTemp>$53: Symbol(:test_arrays), <statTemp>$54: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb6(rubyBlockId=2)
bb9[rubyBlockId=2, firstDead=4](<self>: T.class_of(TestArray), <block-pre-call-temp>$23: Sorbet::Private::Static::Void, <selfRestore>$24: T.class_of(TestArray)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf
    <cfgAlias>$29: T.class_of(String) = alias <C String>
    <blockReturnTemp>$26: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$29: T.class_of(String))
    <blockReturnTemp>$30: T.noreturn = blockreturn<sig> <blockReturnTemp>$26: T::Private::Methods::DeclBuilder
    <unconditional> -> bb6

}

