method ::Object#a {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    <magic>$7: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$4: T.untyped = <get-current-exception>
    <exceptionValue>$4 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb4(rubyRegionId=1)
# - bb6(rubyRegionId=3)
# - bb9(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <exceptionValue>$4 = <get-current-exception>
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=2, firstDead=-1](<exceptionValue>$4: T.untyped, <magic>$7: T.class_of(<Magic>)):
    <cfgAlias>$10: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$11: T::Boolean = <cfgAlias>$10: T.class_of(StandardError).===(<exceptionValue>$4: T.untyped)
    <isaCheckTemp>$11 -> (T::Boolean ? bb7 : bb8)

# backedges
# - bb0(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=2]():
    <returnTemp>$5: Integer(1) = 1
    <statTemp>$3: T.noreturn = return <returnTemp>$5: Integer(1)
    <unconditional> -> bb1

# backedges
# - bb7(rubyRegionId=2)
# - bb8(rubyRegionId=2)
bb6[rubyRegionId=3, firstDead=-1](<rescueTemp>$2: T.nilable(StandardError), a: T.nilable(Integer), <gotoDeadTemp>$12: T.nilable(TrueClass)):
    <rescueTAliasTemp>$6: T.class_of(T) = alias <C T>
    <rescueTemp>$2: T.untyped = <rescueTAliasTemp>$6: T.class_of(T).unsafe(<rescueTemp>$2: T.nilable(StandardError))
    <gotoDeadTemp>$12 -> (T.nilable(TrueClass) ? bb1 : bb9)

# backedges
# - bb3(rubyRegionId=2)
bb7[rubyRegionId=2, firstDead=-1](<exceptionValue>$4: StandardError, <magic>$7: T.class_of(<Magic>)):
    <rescueTemp>$2: StandardError = <exceptionValue>$4
    <exceptionValue>$4: NilClass = nil
    <keepForCfgTemp>$8: Sorbet::Private::Static::Void = <magic>$7: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$4: NilClass)
    a: Integer(2) = 2
    <unconditional> -> bb6

# backedges
# - bb3(rubyRegionId=2)
bb8[rubyRegionId=2, firstDead=-1]():
    <gotoDeadTemp>$12: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb6(rubyRegionId=3)
bb9[rubyRegionId=0, firstDead=3](a: Integer(2)):
    <statTemp>$15: Integer(3) = 3
    <returnMethodTemp>$2: Integer = a: Integer(2).+(<statTemp>$15: Integer(3))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <returnMethodTemp>$2: Symbol(:a) = :a
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:a)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

