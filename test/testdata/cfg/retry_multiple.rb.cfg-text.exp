method ::Object#main {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    try: Integer(0) = 0
    <magic>$25: T.class_of(<Magic>) = alias <C <Magic>>
    <unconditional> -> bb2

# backedges
# - bb12(rubyRegionId=3)
# - bb17(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb13(rubyRegionId=2)
# - bb15(rubyRegionId=2)
bb2[rubyRegionId=0, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$25: T.class_of(<Magic>)):
    <exceptionValue>$4: T.nilable(Exception) = <get-current-exception>
    <exceptionValue>$4 -> (T.nilable(Exception) ? bb3 : bb4)

# backedges
# - bb2(rubyRegionId=0)
# - bb10(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <exceptionValue>$4: Exception, <magic>$25: T.class_of(<Magic>)):
    <cfgAlias>$28: T.class_of(A) = alias <C A>
    <isaCheckTemp>$29: T::Boolean = <cfgAlias>$28: T.class_of(A).===(<exceptionValue>$4: Exception)
    <isaCheckTemp>$29 -> (T::Boolean ? bb13 : bb14)

# backedges
# - bb2(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$25: T.class_of(<Magic>)):
    <statTemp>$7: Integer(3) = 3
    <ifTemp>$5: T::Boolean = try: Integer(0).<(<statTemp>$7: Integer(3))
    <ifTemp>$5 -> (T::Boolean ? bb5 : bb6)

# backedges
# - bb4(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=6](<self>: Object, try: Integer(0), <magic>$25: T.class_of(<Magic>)):
    <statTemp>$9: Integer(0) = try
    <statTemp>$10: Integer(1) = 1
    try: Integer = <statTemp>$9: Integer(0).+(<statTemp>$10: Integer(1))
    <cfgAlias>$14: T.class_of(A) = alias <C A>
    <statTemp>$12: A = <cfgAlias>$14: T.class_of(A).new()
    <returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$12: A)
    <unconditional> -> bb10

# backedges
# - bb4(rubyRegionId=1)
bb6[rubyRegionId=1, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$25: T.class_of(<Magic>)):
    <statTemp>$17: Integer(6) = 6
    <ifTemp>$15: T::Boolean = try: Integer(0).<(<statTemp>$17: Integer(6))
    <ifTemp>$15 -> (T::Boolean ? bb7 : bb10)

# backedges
# - bb6(rubyRegionId=1)
bb7[rubyRegionId=1, firstDead=6](<self>: Object, try: Integer(0), <magic>$25: T.class_of(<Magic>)):
    <statTemp>$19: Integer(0) = try
    <statTemp>$20: Integer(1) = 1
    try: Integer = <statTemp>$19: Integer(0).+(<statTemp>$20: Integer(1))
    <cfgAlias>$24: T.class_of(B) = alias <C B>
    <statTemp>$22: B = <cfgAlias>$24: T.class_of(B).new()
    <returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$22: B)
    <unconditional> -> bb10

# backedges
# - bb5(rubyRegionId=1)
# - bb6(rubyRegionId=1)
# - bb7(rubyRegionId=1)
bb10[rubyRegionId=1, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$25: T.class_of(<Magic>)):
    <exceptionValue>$4: T.nilable(Exception) = <get-current-exception>
    <exceptionValue>$4 -> (T.nilable(Exception) ? bb3 : bb11)

# backedges
# - bb10(rubyRegionId=1)
bb11[rubyRegionId=4, firstDead=-1](<returnMethodTemp>$2: NilClass):
    <unconditional> -> bb12

# backedges
# - bb11(rubyRegionId=4)
# - bb16(rubyRegionId=2)
bb12[rubyRegionId=3, firstDead=-1](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$46: T.nilable(TrueClass)):
    <gotoDeadTemp>$46 -> (T.nilable(TrueClass) ? bb1 : bb17)

# backedges
# - bb3(rubyRegionId=2)
bb13[rubyRegionId=2, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <exceptionValue>$4: A, <magic>$25: T.class_of(<Magic>)):
    <exceptionValue>$4: NilClass = nil
    <keepForCfgTemp>$26: Sorbet::Private::Static::Void = <magic>$25: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$4: NilClass)
    <statTemp>$32: String("rescue A ") = "rescue A "
    <statTemp>$30: NilClass = <self>: Object.puts(<statTemp>$32: String("rescue A "))
    <magic>$34: T.class_of(<Magic>) = alias <C <Magic>>
    <retryTemp>$35: Sorbet::Private::Static::Void = <magic>$34: T.class_of(<Magic>).<retry>()
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=2)
bb14[rubyRegionId=2, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <exceptionValue>$4: Exception, <magic>$25: T.class_of(<Magic>)):
    <cfgAlias>$38: T.class_of(B) = alias <C B>
    <isaCheckTemp>$39: T::Boolean = <cfgAlias>$38: T.class_of(B).===(<exceptionValue>$4: Exception)
    <isaCheckTemp>$39 -> (T::Boolean ? bb15 : bb16)

# backedges
# - bb14(rubyRegionId=2)
bb15[rubyRegionId=2, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <exceptionValue>$4: B, <magic>$25: T.class_of(<Magic>)):
    <exceptionValue>$4: NilClass = nil
    <keepForCfgTemp>$36: Sorbet::Private::Static::Void = <magic>$25: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$4: NilClass)
    <statTemp>$42: String("rescue B ") = "rescue B "
    <statTemp>$40: NilClass = <self>: Object.puts(<statTemp>$42: String("rescue B "))
    <magic>$44: T.class_of(<Magic>) = alias <C <Magic>>
    <retryTemp>$45: Sorbet::Private::Static::Void = <magic>$44: T.class_of(<Magic>).<retry>()
    <unconditional> -> bb2

# backedges
# - bb14(rubyRegionId=2)
bb16[rubyRegionId=2, firstDead=-1](<returnMethodTemp>$2: NilClass):
    <gotoDeadTemp>$46: TrueClass = true
    <unconditional> -> bb12

# backedges
# - bb12(rubyRegionId=3)
bb17[rubyRegionId=0, firstDead=1](<returnMethodTemp>$2: NilClass):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <statTemp>$4: T.untyped = <self>: T.class_of(<root>).main()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:A>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(A) = cast(<self>: NilClass, T.class_of(A));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:B>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(B) = cast(<self>: NilClass, T.class_of(B));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

