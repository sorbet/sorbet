method ::Object#main {

bb0[firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    try: Integer(0) = 0
    <unconditional> -> bb2

# backedges
# - bb12
# - bb16
# - bb17
bb1[firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0
# - bb13
# - bb15
bb2[firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0)):
    <exceptionValue>$4: T.nilable(Exception) = <get-current-exception>
    <exceptionValue>$4 -> (T.nilable(Exception) ? bb3 : bb4)

# backedges
# - bb2
# - bb10
bb3[firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <exceptionValue>$4: Exception):
    <cfgAlias>$27: T.class_of(A) = alias <C A>
    <isaCheckTemp>$28: T::Boolean = <cfgAlias>$27: T.class_of(A).===(<exceptionValue>$4: Exception)
    <isaCheckTemp>$28 -> (T::Boolean ? bb13 : bb14)

# backedges
# - bb2
bb4[firstDead=-1](<self>: Object, try: Integer(0)):
    <statTemp>$7: Integer(3) = 3
    <ifTemp>$5: T::Boolean = try: Integer(0).<(<statTemp>$7: Integer(3))
    <ifTemp>$5 -> (T::Boolean ? bb5 : bb6)

# backedges
# - bb4
bb5[firstDead=6](<self>: Object, try: Integer(0)):
    <statTemp>$9: Integer(0) = try
    <statTemp>$10: Integer(1) = 1
    try: Integer = <statTemp>$9: Integer(0).+(<statTemp>$10: Integer(1))
    <cfgAlias>$14: T.class_of(A) = alias <C A>
    <statTemp>$12: A = <cfgAlias>$14: T.class_of(A).new()
    <returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$12: A)
    <unconditional> -> bb10

# backedges
# - bb4
bb6[firstDead=-1](<self>: Object, try: Integer(0)):
    <statTemp>$17: Integer(6) = 6
    <ifTemp>$15: T::Boolean = try: Integer(0).<(<statTemp>$17: Integer(6))
    <ifTemp>$15 -> (T::Boolean ? bb7 : bb8)

# backedges
# - bb6
bb7[firstDead=6](<self>: Object, try: Integer(0)):
    <statTemp>$19: Integer(0) = try
    <statTemp>$20: Integer(1) = 1
    try: Integer = <statTemp>$19: Integer(0).+(<statTemp>$20: Integer(1))
    <cfgAlias>$24: T.class_of(B) = alias <C B>
    <statTemp>$22: B = <cfgAlias>$24: T.class_of(B).new()
    <returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$22: B)
    <unconditional> -> bb10

# backedges
# - bb6
bb8[firstDead=-1](<self>: Object, try: Integer(0)):
    <returnMethodTemp>$2: NilClass = nil
    <unconditional> -> bb10

# backedges
# - bb5
# - bb7
# - bb8
bb10[firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0)):
    <exceptionValue>$4: T.nilable(Exception) = <get-current-exception>
    <exceptionValue>$4 -> (T.nilable(Exception) ? bb3 : bb12)

# backedges
# - bb10
bb12[firstDead=-1](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$45: NilClass):
    <gotoDeadTemp>$45 -> (NilClass ? bb1 : bb17)

# backedges
# - bb3
bb13[firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <exceptionValue>$4: A):
    <exceptionValue>$4: NilClass = nil
    <keepForCfgTemp>$25: T.untyped = <keep-alive> <exceptionValue>$4
    <statTemp>$31: String("rescue A ") = "rescue A "
    <statTemp>$29: NilClass = <self>: Object.puts(<statTemp>$31: String("rescue A "))
    <magic>$33: T.class_of(<Magic>) = alias <C <Magic>>
    <retryTemp>$34: Sorbet::Private::Static::Void = <magic>$33: T.class_of(<Magic>).<retry>()
    <unconditional> -> bb2

# backedges
# - bb3
bb14[firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <exceptionValue>$4: Exception):
    <cfgAlias>$37: T.class_of(B) = alias <C B>
    <isaCheckTemp>$38: T::Boolean = <cfgAlias>$37: T.class_of(B).===(<exceptionValue>$4: Exception)
    <isaCheckTemp>$38 -> (T::Boolean ? bb15 : bb16)

# backedges
# - bb14
bb15[firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <exceptionValue>$4: B):
    <exceptionValue>$4: NilClass = nil
    <keepForCfgTemp>$35: T.untyped = <keep-alive> <exceptionValue>$4
    <statTemp>$41: String("rescue B ") = "rescue B "
    <statTemp>$39: NilClass = <self>: Object.puts(<statTemp>$41: String("rescue B "))
    <magic>$43: T.class_of(<Magic>) = alias <C <Magic>>
    <retryTemp>$44: Sorbet::Private::Static::Void = <magic>$43: T.class_of(<Magic>).<retry>()
    <unconditional> -> bb2

# backedges
# - bb14
bb16[firstDead=-1](<returnMethodTemp>$2: NilClass):
    <gotoDeadTemp>$45: TrueClass = true
    <gotoDeadTemp>$45 -> (TrueClass ? bb1 : bb17)

# backedges
# - bb12
# - bb16
bb17[firstDead=1](<returnMethodTemp>$2: NilClass):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[firstDead=3]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <statTemp>$4: T.untyped = <self>: T.class_of(<root>).main()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0
bb1[firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:A>#<static-init> {

bb0[firstDead=2]():
    <self>: T.class_of(A) = cast(<self>: NilClass, T.class_of(A));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0
bb1[firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:B>#<static-init> {

bb0[firstDead=2]():
    <self>: T.class_of(B) = cast(<self>: NilClass, T.class_of(B));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0
bb1[firstDead=-1]():
    <unconditional> -> bb1

}

