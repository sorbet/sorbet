begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        <emptyTree>
        ::Sorbet::Private::Static.keep_for_ide(::TestCasts)
        <emptyTree>
      end
    end
  end
  class ::TestCasts<<C TestCasts>> < (::<todo sym>)
    def untyped(<blk>)
      <emptyTree>
    end

    def test_casts(<blk>)
      begin
        t = begin
          ::Sorbet::Private::Static.keep_for_typechecking(::Integer)
          T.assert_type!(<self>.untyped(), Integer)
        end
        t.+(4)
        t1 = begin
          ::Sorbet::Private::Static.keep_for_typechecking(::Integer)
          T.assert_type!("hi", Integer)
        end
        t1.+(1)
        s = begin
          ::Sorbet::Private::Static.keep_for_typechecking(::String)
          T.cast(<self>.untyped(), String)
        end
        s.+("hi")
        s = begin
          ::Sorbet::Private::Static.keep_for_typechecking(::String)
          T.cast(6, String)
        end
        s.+("hi")
        s.+(3)
        s = begin
          ::Sorbet::Private::Static.keep_for_typechecking(::Integer)
          T.cast(6, Integer)
        end
        s = begin
          ::Sorbet::Private::Static.keep_for_typechecking(::T.untyped())
          T.cast(6, T.untyped)
        end
        s = begin
          ::Sorbet::Private::Static.keep_for_typechecking(7)
          T.cast(6, Integer)
        end
        s.+("hi")
        s.+(3)
        f = begin
          ::Sorbet::Private::Static.keep_for_typechecking(7.000000)
          T.cast(6.000000, Float)
        end
        str = begin
          ::Sorbet::Private::Static.keep_for_typechecking("y")
          T.cast("x", String)
        end
        sym = begin
          ::Sorbet::Private::Static.keep_for_typechecking(:y)
          T.cast(:x, Symbol)
        end
      end
    end

    def self.<static-init>(<blk>)
      begin
        :untyped
        :test_casts
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
