digraph "isa_generic.rb" {
subgraph "cluster_::Object#f" {
    label = "::Object#f";
    color = blue;

    "bb::Object#f_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\lx: T.any(Concrete, Other) = load_arg(x)\l<cfgAlias>$7: T.class_of(Concrete) = alias <C Concrete>\l<ifTemp>$5: T::Boolean = <cfgAlias>$7: T.class_of(Concrete).===(x: T.any(Concrete, Other))\l<ifTemp>$5: T::Boolean\l"
    ];

    "bb::Object#f_0" -> "bb::Object#f_2" [style="bold"];
    "bb::Object#f_0" -> "bb::Object#f_3" [style="tapered"];

    "bb::Object#f_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#f_1" -> "bb::Object#f_1" [style="bold"];
    "bb::Object#f_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=0](x: Concrete)\l<cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$13: T.class_of(Concrete) = alias <C Concrete>\l<statTemp>$9: Sorbet::Private::Static::Void = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$13: T.class_of(Concrete))\l<castTemp>$14: Concrete = x\l<statTemp>$3: Concrete = cast(<castTemp>$14: Concrete, Concrete);\l<unconditional>\l"
    ];

    "bb::Object#f_2" -> "bb::Object#f_7" [style="bold"];
    "bb::Object#f_3" [
        shape = rectangle;
        color = black;
        label = "block[id=3, rubyBlockId=0](x: Other)\l<cfgAlias>$17: T.class_of(Other) = alias <C Other>\l<ifTemp>$15: TrueClass = <cfgAlias>$17: T.class_of(Other).===(x: Other)\l<ifTemp>$15: TrueClass\l"
    ];

    "bb::Object#f_3" -> "bb::Object#f_4" [style="bold"];
    "bb::Object#f_3" -> "bb::Object#f_7" [style="tapered"];

    "bb::Object#f_4" [
        shape = rectangle;
        color = black;
        label = "block[id=4, rubyBlockId=0](x: Other)\l<cfgAlias>$21: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$23: T.class_of(Other) = alias <C Other>\l<statTemp>$19: Sorbet::Private::Static::Void = <cfgAlias>$21: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$23: T.class_of(Other))\l<castTemp>$24: Other = x\l<statTemp>$3: Other = cast(<castTemp>$24: Other, Other);\l<unconditional>\l"
    ];

    "bb::Object#f_4" -> "bb::Object#f_7" [style="bold"];
    "bb::Object#f_7" [
        shape = rectangle;
        color = black;
        label = "block[id=7, rubyBlockId=0](x: T.any(Concrete, Other))\l<cfgAlias>$29: T.class_of(Concrete) = alias <C Concrete>\l<ifTemp>$26: T::Boolean = x: T.any(Concrete, Other).is_a?(<cfgAlias>$29: T.class_of(Concrete))\l<ifTemp>$26: T::Boolean\l"
    ];

    "bb::Object#f_7" -> "bb::Object#f_8" [style="bold"];
    "bb::Object#f_7" -> "bb::Object#f_10" [style="tapered"];

    "bb::Object#f_8" [
        shape = rectangle;
        color = black;
        label = "block[id=8, rubyBlockId=0](x: Concrete)\l<cfgAlias>$32: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$34: T.class_of(Concrete) = alias <C Concrete>\l<statTemp>$30: Sorbet::Private::Static::Void = <cfgAlias>$32: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$34: T.class_of(Concrete))\l<castTemp>$35: Concrete = x\l<statTemp>$25: Concrete = cast(<castTemp>$35: Concrete, Concrete);\l<unconditional>\l"
    ];

    "bb::Object#f_8" -> "bb::Object#f_10" [style="bold"];
    "bb::Object#f_10" [
        shape = rectangle;
        color = black;
        label = "block[id=10, rubyBlockId=0](x: T.any(Other, Concrete))\l<cfgAlias>$39: T.class_of(Other) = alias <C Other>\l<ifTemp>$36: T::Boolean = x: T.any(Other, Concrete).is_a?(<cfgAlias>$39: T.class_of(Other))\l<ifTemp>$36: T::Boolean\l"
    ];

    "bb::Object#f_10" -> "bb::Object#f_13" [style="bold"];
    "bb::Object#f_10" -> "bb::Object#f_12" [style="tapered"];

    "bb::Object#f_12" [
        shape = rectangle;
        color = black;
        label = "block[id=12, rubyBlockId=0](x: Concrete)\l<cfgAlias>$42: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$44: T.class_of(Concrete) = alias <C Concrete>\l<statTemp>$40: Sorbet::Private::Static::Void = <cfgAlias>$42: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$44: T.class_of(Concrete))\l<castTemp>$45: Concrete = x\l<returnMethodTemp>$2: Concrete = cast(<castTemp>$45: Concrete, Concrete);\l<unconditional>\l"
    ];

    "bb::Object#f_12" -> "bb::Object#f_13" [style="bold"];
    "bb::Object#f_13" [
        shape = rectangle;
        color = black;
        label = "block[id=13, rubyBlockId=0](<returnMethodTemp>$2: T.nilable(Concrete))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(Concrete)\l<unconditional>\l"
    ];

    "bb::Object#f_13" -> "bb::Object#f_1" [style="bold"];
}

subgraph "cluster_::Object#f2" {
    label = "::Object#f2";
    color = blue;

    "bb::Object#f2_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\lx: T.any(Base, Other) = load_arg(x)\l<cfgAlias>$6: T.class_of(Base)[T.untyped] = alias <C Base>\l<ifTemp>$3: T::Boolean = x: T.any(Base, Other).is_a?(<cfgAlias>$6: T.class_of(Base)[T.untyped])\l<ifTemp>$3: T::Boolean\l"
    ];

    "bb::Object#f2_0" -> "bb::Object#f2_2" [style="bold"];
    "bb::Object#f2_0" -> "bb::Object#f2_4" [style="tapered"];

    "bb::Object#f2_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#f2_1" -> "bb::Object#f2_1" [style="bold"];
    "bb::Object#f2_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=0](x: Base)\l<cfgAlias>$8: T.class_of(T) = alias <C T>\l<returnMethodTemp>$2: Base = <cfgAlias>$8: T.class_of(T).reveal_type(x: Base)\l<unconditional>\l"
    ];

    "bb::Object#f2_2" -> "bb::Object#f2_4" [style="bold"];
    "bb::Object#f2_4" [
        shape = rectangle;
        color = black;
        label = "block[id=4, rubyBlockId=0](<returnMethodTemp>$2: T.nilable(Base))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(Base)\l<unconditional>\l"
    ];

    "bb::Object#f2_4" -> "bb::Object#f2_1" [style="bold"];
}

subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;

    "bb::<Class:<root>>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>\l<statTemp>$7: FalseClass = false\l<statTemp>$8: Symbol(:f) = :f\l<block-pre-call-temp>$9: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(<root>), <statTemp>$7: FalseClass, <statTemp>$8: Symbol(:f))\l<selfRestore>$10: T.class_of(<root>) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_2" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=1](<self>: T.class_of(<root>), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(<root>))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:<root>>#<static-init>_2" -> "bb::<Class:<root>>#<static-init>_5" [style="bold"];
    "bb::<Class:<root>>#<static-init>_2" -> "bb::<Class:<root>>#<static-init>_3" [style="tapered"];

    "bb::<Class:<root>>#<static-init>_3" [
        shape = rectangle;
        color = black;
        label = "block[id=3, rubyBlockId=0](<block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(<root>))\l<statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$9, sig>\l<self>: T.class_of(<root>) = <selfRestore>$10\l<cfgAlias>$26: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>\l<statTemp>$28: FalseClass = false\l<statTemp>$29: Symbol(:f2) = :f2\l<block-pre-call-temp>$30: Sorbet::Private::Static::Void = <cfgAlias>$26: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(<root>), <statTemp>$28: FalseClass, <statTemp>$29: Symbol(:f2))\l<selfRestore>$31: T.class_of(<root>) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_3" -> "bb::<Class:<root>>#<static-init>_6" [style="bold"];
    "bb::<Class:<root>>#<static-init>_5" [
        shape = rectangle;
        color = black;
        label = "block[id=5, rubyBlockId=1](<self>: T.class_of(<root>), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(<root>))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$15: Symbol(:x) = :x\l<cfgAlias>$18: T.class_of(T) = alias <C T>\l<cfgAlias>$20: T.class_of(Concrete) = alias <C Concrete>\l<cfgAlias>$22: T.class_of(Other) = alias <C Other>\l<hashTemp>$16: <Type: T.any(Concrete, Other)> = <cfgAlias>$18: T.class_of(T).any(<cfgAlias>$20: T.class_of(Concrete), <cfgAlias>$22: T.class_of(Other))\l<statTemp>$13: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$15: Symbol(:x), <hashTemp>$16: <Type: T.any(Concrete, Other)>)\l<blockReturnTemp>$12: T::Private::Methods::DeclBuilder = <statTemp>$13: T::Private::Methods::DeclBuilder.void()\l<blockReturnTemp>$23: T.noreturn = blockreturn<sig> <blockReturnTemp>$12: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_5" -> "bb::<Class:<root>>#<static-init>_2" [style="bold"];
    "bb::<Class:<root>>#<static-init>_6" [
        shape = rectangle;
        color = black;
        label = "block[id=6, rubyBlockId=2](<self>: T.class_of(<root>), <block-pre-call-temp>$30: Sorbet::Private::Static::Void, <selfRestore>$31: T.class_of(<root>))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:<root>>#<static-init>_6" -> "bb::<Class:<root>>#<static-init>_9" [style="bold"];
    "bb::<Class:<root>>#<static-init>_6" -> "bb::<Class:<root>>#<static-init>_7" [style="tapered"];

    "bb::<Class:<root>>#<static-init>_7" [
        shape = rectangle;
        color = black;
        label = "block[id=7, rubyBlockId=0](<block-pre-call-temp>$30: Sorbet::Private::Static::Void, <selfRestore>$31: T.class_of(<root>))\l<statTemp>$24: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$30, sig>\l<self>: T.class_of(<root>) = <selfRestore>$31\l<cfgAlias>$48: T.class_of(T::Sig) = alias <C Sig>\l<cfgAlias>$50: T.class_of(T) = alias <C T>\l<statTemp>$45: T.class_of(<root>) = <self>: T.class_of(<root>).extend(<cfgAlias>$48: T.class_of(T::Sig))\l<cfgAlias>$54: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$56: T.class_of(Base)[T.untyped] = alias <C Base>\l<statTemp>$52: Sorbet::Private::Static::Void = <cfgAlias>$54: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$56: T.class_of(Base)[T.untyped])\l<cfgAlias>$59: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$61: T.class_of(Base)[T.untyped] = alias <C Base>\l<statTemp>$57: Sorbet::Private::Static::Void = <cfgAlias>$59: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$61: T.class_of(Base)[T.untyped])\l<cfgAlias>$65: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$67: T.class_of(Concrete) = alias <C Concrete>\l<statTemp>$63: Sorbet::Private::Static::Void = <cfgAlias>$65: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$67: T.class_of(Concrete))\l<cfgAlias>$70: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$72: T.class_of(Concrete) = alias <C Concrete>\l<statTemp>$68: Sorbet::Private::Static::Void = <cfgAlias>$70: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$72: T.class_of(Concrete))\l<cfgAlias>$75: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$77: T.class_of(Base)[T.untyped] = alias <C Base>\l<statTemp>$73: Sorbet::Private::Static::Void = <cfgAlias>$75: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$77: T.class_of(Base)[T.untyped])\l<cfgAlias>$81: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$83: T.class_of(Other) = alias <C Other>\l<statTemp>$79: Sorbet::Private::Static::Void = <cfgAlias>$81: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$83: T.class_of(Other))\l<cfgAlias>$86: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$88: T.class_of(Other) = alias <C Other>\l<statTemp>$84: Sorbet::Private::Static::Void = <cfgAlias>$86: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$88: T.class_of(Other))\l<cfgAlias>$91: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$93: Symbol(:f) = :f\l<statTemp>$94: Symbol(:normal) = :normal\l<statTemp>$89: Symbol(:f) = <cfgAlias>$91: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$93: Symbol(:f), <statTemp>$94: Symbol(:normal))\l<cfgAlias>$97: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$99: Symbol(:f2) = :f2\l<statTemp>$100: Symbol(:normal) = :normal\l<statTemp>$95: Symbol(:f2) = <cfgAlias>$97: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$99: Symbol(:f2), <statTemp>$100: Symbol(:normal))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_7" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_9" [
        shape = rectangle;
        color = black;
        label = "block[id=9, rubyBlockId=2](<self>: T.class_of(<root>), <block-pre-call-temp>$30: Sorbet::Private::Static::Void, <selfRestore>$31: T.class_of(<root>))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$36: Symbol(:x) = :x\l<cfgAlias>$39: T.class_of(T) = alias <C T>\l<cfgAlias>$41: T.class_of(Base)[T.untyped] = alias <C Base>\l<cfgAlias>$43: T.class_of(Other) = alias <C Other>\l<hashTemp>$37: <Type: T.any(Base, Other)> = <cfgAlias>$39: T.class_of(T).any(<cfgAlias>$41: T.class_of(Base)[T.untyped], <cfgAlias>$43: T.class_of(Other))\l<statTemp>$34: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$36: Symbol(:x), <hashTemp>$37: <Type: T.any(Base, Other)>)\l<blockReturnTemp>$33: T::Private::Methods::DeclBuilder = <statTemp>$34: T::Private::Methods::DeclBuilder.void()\l<blockReturnTemp>$44: T.noreturn = blockreturn<sig> <blockReturnTemp>$33: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_9" -> "bb::<Class:<root>>#<static-init>_6" [style="bold"];
}

subgraph "cluster_::<Class:Base>#<static-init>" {
    label = "::<Class:Base>#<static-init>";
    color = blue;

    "bb::<Class:Base>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<C Klass>$10: <Type: T.class_of(Base)::Klass> = alias <C Klass>\l<self>: T.class_of(Base)[T.class_of(Base)::Klass] = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Base>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Base>> $1><C <U <AttachedClass>>>)\l    <C <U Klass>> = SelfTypeParam(<S <C <U Base>> $1><C <U Klass>>)\l  ]\l});\l<cfgAlias>$6: T.class_of(T::Generic) = alias <C Generic>\l<cfgAlias>$8: T.class_of(T) = alias <C T>\l<statTemp>$3: T.class_of(Base)[T.class_of(Base)::Klass] = <self>: T.class_of(Base)[T.class_of(Base)::Klass].extend(<cfgAlias>$6: T.class_of(T::Generic))\l<C Klass>$10: T.untyped = <self>: T.class_of(Base)[T.class_of(Base)::Klass].type_template()\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Base>#<static-init>_0" -> "bb::<Class:Base>#<static-init>_1" [style="bold"];
    "bb::<Class:Base>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Base>#<static-init>_1" -> "bb::<Class:Base>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:Concrete>#<static-init>" {
    label = "::<Class:Concrete>#<static-init>";
    color = blue;

    "bb::<Class:Concrete>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<C Klass>$10: <Type: String> = alias <C Klass>\l<self>: T.class_of(Concrete) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Concrete>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Concrete>> $1><C <U <AttachedClass>>>)\l    <C <U Klass>> = String\l  ]\l});\l<cfgAlias>$6: T.class_of(T::Generic) = alias <C Generic>\l<cfgAlias>$8: T.class_of(T) = alias <C T>\l<statTemp>$3: T.class_of(Concrete) = <self>: T.class_of(Concrete).extend(<cfgAlias>$6: T.class_of(T::Generic))\l<hashTemp>$12: Symbol(:fixed) = :fixed\l<cfgAlias>$14: T.class_of(String) = alias <C String>\l<C Klass>$10: T.untyped = <self>: T.class_of(Concrete).type_template(<hashTemp>$12: Symbol(:fixed), <cfgAlias>$14: T.class_of(String))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Concrete>#<static-init>_0" -> "bb::<Class:Concrete>#<static-init>_1" [style="bold"];
    "bb::<Class:Concrete>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Concrete>#<static-init>_1" -> "bb::<Class:Concrete>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:Other>#<static-init>" {
    label = "::<Class:Other>#<static-init>";
    color = blue;

    "bb::<Class:Other>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Other) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Other>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Other>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Other>#<static-init>_0" -> "bb::<Class:Other>#<static-init>_1" [style="bold"];
    "bb::<Class:Other>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Other>#<static-init>_1" -> "bb::<Class:Other>#<static-init>_1" [style="bold"];
}

}

