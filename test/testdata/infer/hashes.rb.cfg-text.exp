method ::<Class:<root>>#<static-init> {

bb0[rubyBlockId=0, firstDead=8]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$7: T.class_of(Foo) = alias <C Foo>
    <statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(Foo))
    <cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$12: T.class_of(Foo) = alias <C Foo>
    <statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(Foo))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Foo#bar {

bb0[rubyBlockId=0, firstDead=-1]():
    <self>: Foo = cast(<self>: NilClass, Foo);
    cond: T.untyped = load_arg(cond)
    cond -> (T.untyped ? bb2 : bb3)

# backedges
# - bb4(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb2[rubyBlockId=0, firstDead=-1]():
    <magic>$5: T.class_of(<Magic>) = alias <C <Magic>>
    s: {} = <magic>$5: T.class_of(<Magic>).<build-hash>()
    <unconditional> -> bb4

# backedges
# - bb0(rubyBlockId=0)
bb3[rubyBlockId=0, firstDead=-1]():
    <magic>$6: T.class_of(<Magic>) = alias <C <Magic>>
    s: {} = <magic>$6: T.class_of(<Magic>).<build-hash>()
    <unconditional> -> bb4

# backedges
# - bb2(rubyBlockId=0)
# - bb3(rubyBlockId=0)
bb4[rubyBlockId=0, firstDead=2](s: {}):
    r: {} = s
    <returnMethodTemp>$2: T.noreturn = return r: {}
    <unconditional> -> bb1

}

method ::<Class:Foo>#<static-init> {

bb0[rubyBlockId=0, firstDead=6]():
    <self>: T.class_of(Foo) = cast(<self>: NilClass, T.class_of(Foo));
    <cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$6: Symbol(:bar) = :bar
    <statTemp>$7: Symbol(:normal) = :normal
    <returnMethodTemp>$2: Symbol(:bar) = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Foo), <statTemp>$6: Symbol(:bar), <statTemp>$7: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:bar)
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

