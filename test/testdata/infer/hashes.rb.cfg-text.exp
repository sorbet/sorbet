method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=5]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$6: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$8: T.class_of(Foo) = alias <C Foo>
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$8: T.class_of(Foo))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Foo#bar {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Foo = cast(<self>: NilClass, Foo);
    cond: T.untyped = load_arg(cond)
    cond -> (T.untyped ? bb2 : bb3)

# backedges
# - bb4(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1]():
    <magic>$5: T.class_of(<Magic>) = alias <C <Magic>>
    s: {} = <magic>$5: T.class_of(<Magic>).<build-hash>()
    <unconditional> -> bb4

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=-1]():
    <magic>$6: T.class_of(<Magic>) = alias <C <Magic>>
    s: {} = <magic>$6: T.class_of(<Magic>).<build-hash>()
    <unconditional> -> bb4

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb4[rubyRegionId=0, firstDead=2](s: {}):
    r: {} = s
    <returnMethodTemp>$2: T.noreturn = return r: {}
    <unconditional> -> bb1

}

method ::<Class:Foo>#<static-init> {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: T.class_of(Foo) = cast(<self>: NilClass, T.class_of(Foo));
    <returnMethodTemp>$2: Symbol(:bar) = :bar
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:bar)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

