method ::Object#f {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    x: T.any(Concrete, Other) = load_arg(x)
    <cfgAlias>$7: T.class_of(Concrete) = alias <C Concrete>
    <ifTemp>$5: T::Boolean = <cfgAlias>$7: T.class_of(Concrete).===(x: T.any(Concrete, Other))
    <ifTemp>$5 -> (T::Boolean ? bb2 : bb3)

# backedges
# - bb13(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1](x: Concrete):
    <cfgAlias>$10: T.class_of(Concrete) = alias <C Concrete>
    keep_for_ide$9: T.class_of(Concrete) = <cfgAlias>$10
    keep_for_ide$9: T.untyped = <keep-alive> keep_for_ide$9
    <castTemp>$11: Concrete = x
    <statTemp>$3: Concrete = cast(<castTemp>$11: Concrete, Concrete);
    <unconditional> -> bb7

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=-1](x: Other):
    <cfgAlias>$14: T.class_of(Other) = alias <C Other>
    <ifTemp>$12: TrueClass = <cfgAlias>$14: T.class_of(Other).===(x: Other)
    <ifTemp>$12 -> (TrueClass ? bb4 : bb7)

# backedges
# - bb3(rubyRegionId=0)
bb4[rubyRegionId=0, firstDead=-1](x: Other):
    <cfgAlias>$17: T.class_of(Other) = alias <C Other>
    keep_for_ide$16: T.class_of(Other) = <cfgAlias>$17
    keep_for_ide$16: T.untyped = <keep-alive> keep_for_ide$16
    <castTemp>$18: Other = x
    <statTemp>$3: Other = cast(<castTemp>$18: Other, Other);
    <unconditional> -> bb7

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
# - bb4(rubyRegionId=0)
bb7[rubyRegionId=0, firstDead=-1](x: T.any(Concrete, Other)):
    <cfgAlias>$23: T.class_of(Concrete) = alias <C Concrete>
    <ifTemp>$20: T::Boolean = x: T.any(Concrete, Other).is_a?(<cfgAlias>$23: T.class_of(Concrete))
    <ifTemp>$20 -> (T::Boolean ? bb8 : bb10)

# backedges
# - bb7(rubyRegionId=0)
bb8[rubyRegionId=0, firstDead=-1](x: Concrete):
    <cfgAlias>$25: T.class_of(Concrete) = alias <C Concrete>
    keep_for_ide$24: T.class_of(Concrete) = <cfgAlias>$25
    keep_for_ide$24: T.untyped = <keep-alive> keep_for_ide$24
    <castTemp>$26: Concrete = x
    <statTemp>$19: Concrete = cast(<castTemp>$26: Concrete, Concrete);
    <unconditional> -> bb10

# backedges
# - bb7(rubyRegionId=0)
# - bb8(rubyRegionId=0)
bb10[rubyRegionId=0, firstDead=-1](x: T.any(Other, Concrete)):
    <cfgAlias>$30: T.class_of(Other) = alias <C Other>
    <ifTemp>$27: T::Boolean = x: T.any(Other, Concrete).is_a?(<cfgAlias>$30: T.class_of(Other))
    <ifTemp>$27 -> (T::Boolean ? bb13 : bb12)

# backedges
# - bb10(rubyRegionId=0)
bb12[rubyRegionId=0, firstDead=-1](x: Concrete):
    <cfgAlias>$32: T.class_of(Concrete) = alias <C Concrete>
    keep_for_ide$31: T.class_of(Concrete) = <cfgAlias>$32
    keep_for_ide$31: T.untyped = <keep-alive> keep_for_ide$31
    <castTemp>$33: Concrete = x
    <returnMethodTemp>$2: Concrete = cast(<castTemp>$33: Concrete, Concrete);
    <unconditional> -> bb13

# backedges
# - bb10(rubyRegionId=0)
# - bb12(rubyRegionId=0)
bb13[rubyRegionId=0, firstDead=1](<returnMethodTemp>$2: T.nilable(Concrete)):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(Concrete)
    <unconditional> -> bb1

}

method ::Object#f2 {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    x: T.any(Base, Other) = load_arg(x)
    <cfgAlias>$6: T.class_of(Base)[Base, T.untyped] = alias <C Base>
    <ifTemp>$3: T::Boolean = x: T.any(Base, Other).is_a?(<cfgAlias>$6: T.class_of(Base)[Base, T.untyped])
    <ifTemp>$3 -> (T::Boolean ? bb2 : bb4)

# backedges
# - bb4(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1](x: Base):
    <cfgAlias>$8: T.class_of(T) = alias <C T>
    <returnMethodTemp>$2: Base = <cfgAlias>$8: T.class_of(T).reveal_type(x: Base)
    <unconditional> -> bb4

# backedges
# - bb0(rubyRegionId=0)
# - bb2(rubyRegionId=0)
bb4[rubyRegionId=0, firstDead=1](<returnMethodTemp>$2: T.nilable(Base)):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(Base)
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$7: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(<root>))
    <selfRestore>$8: T.class_of(<root>) = <self>
    <unconditional> -> bb2

# backedges
# - bb7(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(<root>)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(<root>)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$7, sig>
    <self>: T.class_of(<root>) = <selfRestore>$8
    <cfgAlias>$23: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$25: Sorbet::Private::Static::Void = <cfgAlias>$23: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(<root>))
    <selfRestore>$26: T.class_of(<root>) = <self>
    <unconditional> -> bb6

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=9](<self>: T.class_of(<root>), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(<root>)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$12: Symbol(:x) = :x
    <cfgAlias>$15: T.class_of(T) = alias <C T>
    <cfgAlias>$17: T.class_of(Concrete) = alias <C Concrete>
    <cfgAlias>$19: T.class_of(Other) = alias <C Other>
    <hashTemp>$13: Runtime object representing type: T.any(Concrete, Other) = <cfgAlias>$15: T.class_of(T).any(<cfgAlias>$17: T.class_of(Concrete), <cfgAlias>$19: T.class_of(Other))
    <statTemp>$10: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$12: Symbol(:x), <hashTemp>$13: Runtime object representing type: T.any(Concrete, Other))
    <blockReturnTemp>$9: T::Private::Methods::DeclBuilder = <statTemp>$10: T::Private::Methods::DeclBuilder.void()
    <blockReturnTemp>$20: T.noreturn = blockreturn<sig> <blockReturnTemp>$9: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
# - bb9(rubyRegionId=2)
bb6[rubyRegionId=2, firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$25: Sorbet::Private::Static::Void, <selfRestore>$26: T.class_of(<root>)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb9 : bb7)

# backedges
# - bb6(rubyRegionId=2)
bb7[rubyRegionId=0, firstDead=6](<block-pre-call-temp>$25: Sorbet::Private::Static::Void, <selfRestore>$26: T.class_of(<root>)):
    <statTemp>$21: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$25, sig>
    <self>: T.class_of(<root>) = <selfRestore>$26
    <cfgAlias>$42: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$44: T.class_of(T) = alias <C T>
    <statTemp>$39: T.class_of(<root>) = <self>: T.class_of(<root>).extend(<cfgAlias>$42: T.class_of(T::Sig))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb6(rubyRegionId=2)
bb9[rubyRegionId=2, firstDead=9](<self>: T.class_of(<root>), <block-pre-call-temp>$25: Sorbet::Private::Static::Void, <selfRestore>$26: T.class_of(<root>)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$30: Symbol(:x) = :x
    <cfgAlias>$33: T.class_of(T) = alias <C T>
    <cfgAlias>$35: T.class_of(Base)[Base, T.untyped] = alias <C Base>
    <cfgAlias>$37: T.class_of(Other) = alias <C Other>
    <hashTemp>$31: Runtime object representing type: T.any(Base, Other) = <cfgAlias>$33: T.class_of(T).any(<cfgAlias>$35: T.class_of(Base)[Base, T.untyped], <cfgAlias>$37: T.class_of(Other))
    <statTemp>$28: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$30: Symbol(:x), <hashTemp>$31: Runtime object representing type: T.any(Base, Other))
    <blockReturnTemp>$27: T::Private::Methods::DeclBuilder = <statTemp>$28: T::Private::Methods::DeclBuilder.void()
    <blockReturnTemp>$38: T.noreturn = blockreturn<sig> <blockReturnTemp>$27: T::Private::Methods::DeclBuilder
    <unconditional> -> bb6

}

method ::<Class:Base>#<static-init> {

bb0[rubyRegionId=0, firstDead=7]():
    <C Klass>$10: Runtime object representing type: T.class_of(Base)::Klass = alias <C Klass>
    <self>: T.class_of(Base)[T.attached_class (of Base), T.class_of(Base)::Klass] = cast(<self>: NilClass, T.class_of(Base)[T.attached_class (of Base), T.class_of(Base)::Klass]);
    <cfgAlias>$6: T.class_of(T::Generic) = alias <C Generic>
    <cfgAlias>$8: T.class_of(T) = alias <C T>
    <statTemp>$3: T.class_of(Base)[T.attached_class (of Base), T.class_of(Base)::Klass] = <self>: T.class_of(Base)[T.attached_class (of Base), T.class_of(Base)::Klass].extend(<cfgAlias>$6: T.class_of(T::Generic))
    <C Klass>$10: T::Types::TypeTemplate = <self>: T.class_of(Base)[T.attached_class (of Base), T.class_of(Base)::Klass].type_template()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Concrete>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <C Klass>$10: Runtime object representing type: String = alias <C Klass>
    <self>: T.class_of(Concrete) = cast(<self>: NilClass, T.class_of(Concrete));
    <cfgAlias>$6: T.class_of(T::Generic) = alias <C Generic>
    <cfgAlias>$8: T.class_of(T) = alias <C T>
    <statTemp>$3: T.class_of(Concrete) = <self>: T.class_of(Concrete).extend(<cfgAlias>$6: T.class_of(T::Generic))
    <block-pre-call-temp>$12: Sorbet::Private::Static::Void = <self>: T.class_of(Concrete).type_template()
    <selfRestore>$13: T.class_of(Concrete) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(Concrete), <block-pre-call-temp>$12: Sorbet::Private::Static::Void, <selfRestore>$13: T.class_of(Concrete)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=2](<block-pre-call-temp>$12: Sorbet::Private::Static::Void, <selfRestore>$13: T.class_of(Concrete)):
    <C Klass>$10: T::Types::TypeTemplate = Solve<<block-pre-call-temp>$12, type_template>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=6](<self>: T.class_of(Concrete), <block-pre-call-temp>$12: Sorbet::Private::Static::Void, <selfRestore>$13: T.class_of(Concrete)):
    # outerLoops: 1
    <self>: T.class_of(Concrete) = loadSelf(type_template)
    <hashTemp>$15: Symbol(:fixed) = :fixed
    <cfgAlias>$17: T.class_of(String) = alias <C String>
    <magic>$18: T.class_of(<Magic>) = alias <C <Magic>>
    <blockReturnTemp>$14: {fixed: T.class_of(String)} = <magic>$18: T.class_of(<Magic>).<build-hash>(<hashTemp>$15: Symbol(:fixed), <cfgAlias>$17: T.class_of(String))
    <blockReturnTemp>$19: T.noreturn = blockreturn<type_template> <blockReturnTemp>$14: {fixed: T.class_of(String)}
    <unconditional> -> bb2

}

method ::<Class:Other>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(Other) = cast(<self>: NilClass, T.class_of(Other));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

