method ::Object#f {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    x: T.any(Concrete, Other) = load_arg(x)
    <cfgAlias>$7: T.class_of(Concrete) = alias <C Concrete>
    <ifTemp>$5: T::Boolean = <cfgAlias>$7: T.class_of(Concrete).===(x: T.any(Concrete, Other))
    <ifTemp>$5 -> (T::Boolean ? bb2 : bb3)

# backedges
# - bb13(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1](x: Concrete):
    <cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$13: T.class_of(Concrete) = alias <C Concrete>
    <statTemp>$9: Sorbet::Private::Static::Void = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$13: T.class_of(Concrete))
    <castTemp>$14: Concrete = x
    <statTemp>$3: Concrete = cast(<castTemp>$14: Concrete, Concrete);
    <unconditional> -> bb7

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=-1](x: Other):
    <cfgAlias>$17: T.class_of(Other) = alias <C Other>
    <ifTemp>$15: TrueClass = <cfgAlias>$17: T.class_of(Other).===(x: Other)
    <ifTemp>$15 -> (TrueClass ? bb4 : bb7)

# backedges
# - bb3(rubyRegionId=0)
bb4[rubyRegionId=0, firstDead=-1](x: Other):
    <cfgAlias>$21: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$23: T.class_of(Other) = alias <C Other>
    <statTemp>$19: Sorbet::Private::Static::Void = <cfgAlias>$21: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$23: T.class_of(Other))
    <castTemp>$24: Other = x
    <statTemp>$3: Other = cast(<castTemp>$24: Other, Other);
    <unconditional> -> bb7

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
# - bb4(rubyRegionId=0)
bb7[rubyRegionId=0, firstDead=-1](x: T.any(Concrete, Other)):
    <cfgAlias>$29: T.class_of(Concrete) = alias <C Concrete>
    <ifTemp>$26: T::Boolean = x: T.any(Concrete, Other).is_a?(<cfgAlias>$29: T.class_of(Concrete))
    <ifTemp>$26 -> (T::Boolean ? bb8 : bb10)

# backedges
# - bb7(rubyRegionId=0)
bb8[rubyRegionId=0, firstDead=-1](x: Concrete):
    <cfgAlias>$32: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$34: T.class_of(Concrete) = alias <C Concrete>
    <statTemp>$30: Sorbet::Private::Static::Void = <cfgAlias>$32: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$34: T.class_of(Concrete))
    <castTemp>$35: Concrete = x
    <statTemp>$25: Concrete = cast(<castTemp>$35: Concrete, Concrete);
    <unconditional> -> bb10

# backedges
# - bb7(rubyRegionId=0)
# - bb8(rubyRegionId=0)
bb10[rubyRegionId=0, firstDead=-1](x: T.any(Other, Concrete)):
    <cfgAlias>$39: T.class_of(Other) = alias <C Other>
    <ifTemp>$36: T::Boolean = x: T.any(Other, Concrete).is_a?(<cfgAlias>$39: T.class_of(Other))
    <ifTemp>$36 -> (T::Boolean ? bb13 : bb12)

# backedges
# - bb10(rubyRegionId=0)
bb12[rubyRegionId=0, firstDead=-1](x: Concrete):
    <cfgAlias>$42: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$44: T.class_of(Concrete) = alias <C Concrete>
    <statTemp>$40: Sorbet::Private::Static::Void = <cfgAlias>$42: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$44: T.class_of(Concrete))
    <castTemp>$45: Concrete = x
    <returnMethodTemp>$2: Concrete = cast(<castTemp>$45: Concrete, Concrete);
    <unconditional> -> bb13

# backedges
# - bb10(rubyRegionId=0)
# - bb12(rubyRegionId=0)
bb13[rubyRegionId=0, firstDead=1](<returnMethodTemp>$2: T.nilable(Concrete)):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(Concrete)
    <unconditional> -> bb1

}

method ::Object#f2 {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    x: T.any(Base, Other) = load_arg(x)
    <cfgAlias>$6: T.class_of(Base)[T.untyped] = alias <C Base>
    <ifTemp>$3: T::Boolean = x: T.any(Base, Other).is_a?(<cfgAlias>$6: T.class_of(Base)[T.untyped])
    <ifTemp>$3 -> (T::Boolean ? bb2 : bb4)

# backedges
# - bb4(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1](x: Base):
    <cfgAlias>$8: T.class_of(T) = alias <C T>
    <returnMethodTemp>$2: Base = <cfgAlias>$8: T.class_of(T).reveal_type(x: Base)
    <unconditional> -> bb4

# backedges
# - bb0(rubyRegionId=0)
# - bb2(rubyRegionId=0)
bb4[rubyRegionId=0, firstDead=1](<returnMethodTemp>$2: T.nilable(Base)):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(Base)
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$7: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(<root>))
    <selfRestore>$8: T.class_of(<root>) = <self>
    <unconditional> -> bb2

# backedges
# - bb7(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(<root>)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(<root>)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$7, sig>
    <self>: T.class_of(<root>) = <selfRestore>$8
    <cfgAlias>$24: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$26: Sorbet::Private::Static::Void = <cfgAlias>$24: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(<root>))
    <selfRestore>$27: T.class_of(<root>) = <self>
    <unconditional> -> bb6

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=9](<self>: T.class_of(<root>), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(<root>)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$13: Symbol(:x) = :x
    <cfgAlias>$16: T.class_of(T) = alias <C T>
    <cfgAlias>$18: T.class_of(Concrete) = alias <C Concrete>
    <cfgAlias>$20: T.class_of(Other) = alias <C Other>
    <hashTemp>$14: Runtime object representing type: T.any(Concrete, Other) = <cfgAlias>$16: T.class_of(T).any(<cfgAlias>$18: T.class_of(Concrete), <cfgAlias>$20: T.class_of(Other))
    <statTemp>$11: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$13: Symbol(:x), <hashTemp>$14: Runtime object representing type: T.any(Concrete, Other))
    <blockReturnTemp>$10: T::Private::Methods::DeclBuilder = <statTemp>$11: T::Private::Methods::DeclBuilder.void()
    <blockReturnTemp>$21: T.noreturn = blockreturn<sig> <blockReturnTemp>$10: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
# - bb9(rubyRegionId=2)
bb6[rubyRegionId=2, firstDead=-1](<self>: T.class_of(<root>), <block-pre-call-temp>$26: Sorbet::Private::Static::Void, <selfRestore>$27: T.class_of(<root>)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb9 : bb7)

# backedges
# - bb6(rubyRegionId=2)
bb7[rubyRegionId=0, firstDead=18](<block-pre-call-temp>$26: Sorbet::Private::Static::Void, <selfRestore>$27: T.class_of(<root>)):
    <statTemp>$22: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$26, sig>
    <self>: T.class_of(<root>) = <selfRestore>$27
    <cfgAlias>$44: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$46: T.class_of(T) = alias <C T>
    <statTemp>$41: T.class_of(<root>) = <self>: T.class_of(<root>).extend(<cfgAlias>$44: T.class_of(T::Sig))
    <cfgAlias>$51: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$53: T.class_of(Base)[T.untyped] = alias <C Base>
    <statTemp>$49: Sorbet::Private::Static::Void = <cfgAlias>$51: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$53: T.class_of(Base)[T.untyped])
    <cfgAlias>$58: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$60: T.class_of(Concrete) = alias <C Concrete>
    <statTemp>$56: Sorbet::Private::Static::Void = <cfgAlias>$58: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$60: T.class_of(Concrete))
    <cfgAlias>$63: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$65: T.class_of(Base)[T.untyped] = alias <C Base>
    <statTemp>$61: Sorbet::Private::Static::Void = <cfgAlias>$63: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$65: T.class_of(Base)[T.untyped])
    <cfgAlias>$70: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$72: T.class_of(Other) = alias <C Other>
    <statTemp>$68: Sorbet::Private::Static::Void = <cfgAlias>$70: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$72: T.class_of(Other))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb6(rubyRegionId=2)
bb9[rubyRegionId=2, firstDead=9](<self>: T.class_of(<root>), <block-pre-call-temp>$26: Sorbet::Private::Static::Void, <selfRestore>$27: T.class_of(<root>)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$32: Symbol(:x) = :x
    <cfgAlias>$35: T.class_of(T) = alias <C T>
    <cfgAlias>$37: T.class_of(Base)[T.untyped] = alias <C Base>
    <cfgAlias>$39: T.class_of(Other) = alias <C Other>
    <hashTemp>$33: Runtime object representing type: T.any(Base, Other) = <cfgAlias>$35: T.class_of(T).any(<cfgAlias>$37: T.class_of(Base)[T.untyped], <cfgAlias>$39: T.class_of(Other))
    <statTemp>$30: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$32: Symbol(:x), <hashTemp>$33: Runtime object representing type: T.any(Base, Other))
    <blockReturnTemp>$29: T::Private::Methods::DeclBuilder = <statTemp>$30: T::Private::Methods::DeclBuilder.void()
    <blockReturnTemp>$40: T.noreturn = blockreturn<sig> <blockReturnTemp>$29: T::Private::Methods::DeclBuilder
    <unconditional> -> bb6

}

method ::<Class:Base>#<static-init> {

bb0[rubyRegionId=0, firstDead=7]():
    <C Klass>$10: Runtime object representing type: T.class_of(Base)::Klass = alias <C Klass>
    <self>: T.class_of(Base)[T.class_of(Base)::Klass] = cast(<self>: NilClass, T.class_of(Base)[T.class_of(Base)::Klass]);
    <cfgAlias>$6: T.class_of(T::Generic) = alias <C Generic>
    <cfgAlias>$8: T.class_of(T) = alias <C T>
    <statTemp>$3: T.class_of(Base)[T.class_of(Base)::Klass] = <self>: T.class_of(Base)[T.class_of(Base)::Klass].extend(<cfgAlias>$6: T.class_of(T::Generic))
    <C Klass>$10: T::Types::TypeTemplate = <self>: T.class_of(Base)[T.class_of(Base)::Klass].type_template()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Concrete>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <C Klass>$10: Runtime object representing type: String = alias <C Klass>
    <self>: T.class_of(Concrete) = cast(<self>: NilClass, T.class_of(Concrete));
    <cfgAlias>$6: T.class_of(T::Generic) = alias <C Generic>
    <cfgAlias>$8: T.class_of(T) = alias <C T>
    <statTemp>$3: T.class_of(Concrete) = <self>: T.class_of(Concrete).extend(<cfgAlias>$6: T.class_of(T::Generic))
    <block-pre-call-temp>$12: Sorbet::Private::Static::Void = <self>: T.class_of(Concrete).type_template()
    <selfRestore>$13: T.class_of(Concrete) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(Concrete), <block-pre-call-temp>$12: Sorbet::Private::Static::Void, <selfRestore>$13: T.class_of(Concrete)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=2](<block-pre-call-temp>$12: Sorbet::Private::Static::Void, <selfRestore>$13: T.class_of(Concrete)):
    <C Klass>$10: T::Types::TypeTemplate = Solve<<block-pre-call-temp>$12, type_template>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=6](<self>: T.class_of(Concrete), <block-pre-call-temp>$12: Sorbet::Private::Static::Void, <selfRestore>$13: T.class_of(Concrete)):
    # outerLoops: 1
    <self>: T.class_of(Concrete) = loadSelf(type_template)
    <hashTemp>$16: Symbol(:fixed) = :fixed
    <cfgAlias>$18: T.class_of(String) = alias <C String>
    <magic>$19: T.class_of(<Magic>) = alias <C <Magic>>
    <blockReturnTemp>$15: {fixed: T.class_of(String)} = <magic>$19: T.class_of(<Magic>).<build-hash>(<hashTemp>$16: Symbol(:fixed), <cfgAlias>$18: T.class_of(String))
    <blockReturnTemp>$20: T.noreturn = blockreturn<type_template> <blockReturnTemp>$15: {fixed: T.class_of(String)}
    <unconditional> -> bb2

}

method ::<Class:Other>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(Other) = cast(<self>: NilClass, T.class_of(Other));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

