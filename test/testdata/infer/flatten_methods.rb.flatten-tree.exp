begin
  class <emptyTree><<C <root>>> < (::<todo sym>)
    <emptyTree>

    <emptyTree>

    def self.<static-init><<static-init>$CENSORED>(<blk>)
      <emptyTree>
    end
  end
  class ::Parent<<C Parent>> < (::<todo sym>)
    def self.takes_integer_static(x, <blk>)
      <emptyTree>
    end

    def takes_integer_instance(x, <blk>)
      <emptyTree>
    end

    def self.<static-init>(<blk>)
      begin
        ::Sorbet::Private::Static.sig(<self>) do ||
          <self>.params(:x, ::Integer).void()
        end
        ::Sorbet::Private::Static.sig(<self>) do ||
          <self>.params(:x, ::Integer).void()
        end
        <self>.extend(::T::Sig)
        <runtime method definition of self.takes_integer_static>
        <runtime method definition of takes_integer_instance>
        <emptyTree>
      end
    end
  end
  class ::Child<<C Child>> < (::Parent)
    def self.outer_static(<blk>)
      <self>.takes_integer_static(<runtime method definition of self.inner_static>)
    end

    def self.inner_static(<blk>)
      <emptyTree>
    end

    def outer_instance(<blk>)
      <self>.takes_integer_instance(<runtime method definition of inner_instance>)
    end

    def inner_instance(<blk>)
      <emptyTree>
    end

    def self.<static-init>(<blk>)
      begin
        <self>.takes_integer_static(<runtime method definition of self.outer_static>)
        <self>.takes_integer_static(<runtime method definition of outer_instance>)
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
