begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::Parent)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::Child)
          ::Sorbet::Private::Static.keep_for_ide(::Parent)
          <emptyTree>
        end
        <emptyTree>
      end
    end
  end
  class ::Parent<<C Parent>> < (::<todo sym>)
    def self.takes_integer_static(x, <blk>)
      <emptyTree>
    end

    def takes_integer_instance(x, <blk>)
      <emptyTree>
    end

    def self.<static-init>(<blk>)
      begin
        ::Sorbet::Private::Static::ResolvedSig.sig(<self>, true, :takes_integer_static) do ||
          <self>.params(:x, ::Integer).void()
        end
        ::Sorbet::Private::Static::ResolvedSig.sig(<self>, false, :takes_integer_instance) do ||
          <self>.params(:x, ::Integer).void()
        end
        <self>.extend(::T::Sig)
        :takes_integer_static
        :takes_integer_instance
        <emptyTree>
      end
    end
  end
  class ::Child<<C Child>> < (::Parent)
    def self.outer_static(<blk>)
      <self>.takes_integer_static(:inner_static)
    end

    def self.inner_static(<blk>)
      <emptyTree>
    end

    def outer_instance(<blk>)
      <self>.takes_integer_instance(:inner_instance)
    end

    def inner_instance(<blk>)
      <emptyTree>
    end

    def self.<static-init>(<blk>)
      begin
        <self>.takes_integer_static(:outer_static)
        <self>.takes_integer_static(:outer_instance)
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
