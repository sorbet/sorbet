method ::<Class:<root>>#<static-init> {

bb0[rubyBlockId=0, firstDead=8]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$7: T.class_of(Foo) = alias <C Foo>
    <statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(Foo))
    <cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$12: T.class_of(Foo) = alias <C Foo>
    <statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(Foo))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Foo#bar {

bb0[rubyBlockId=0, firstDead=5]():
    <self>: Foo = cast(<self>: NilClass, Foo);
    <blk>: T.untyped = load_arg(<blk>)
    <statTemp>$4: Integer(1) = 1
    <returnMethodTemp>$2: T.untyped = <blk>: T.untyped.call(<statTemp>$4: Integer(1))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Foo#baz {

bb0[rubyBlockId=0, firstDead=-1]():
    <self>: Foo = cast(<self>: NilClass, Foo);
    <block-pre-call-temp>$4: Sorbet::Private::Static::Void = <self>: Foo.bar()
    <selfRestore>$5: Foo = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
# - bb5(rubyBlockId=1)
bb2[rubyBlockId=1, firstDead=-1](<self>: Foo, <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: Foo):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyBlockId=1)
bb3[rubyBlockId=0, firstDead=2](<block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: Foo):
    <returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$4, bar>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb2(rubyBlockId=1)
bb5[rubyBlockId=1, firstDead=5](<self>: Foo, <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: Foo):
    # outerLoops: 1
    <self>: Foo = loadSelf
    <blk>$6: T.untyped = load_yield_params(bar)
    r$1: T.untyped = yield_load_arg(0)
    <blockReturnTemp>$7: NilClass = <self>: Foo.puts(r$1: T.untyped)
    <blockReturnTemp>$10: T.noreturn = blockreturn<bar> <blockReturnTemp>$7: NilClass
    <unconditional> -> bb2

}

method ::<Class:Foo>#<static-init> {

bb0[rubyBlockId=0, firstDead=10]():
    <self>: T.class_of(Foo) = cast(<self>: NilClass, T.class_of(Foo));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$7: Symbol(:bar) = :bar
    <statTemp>$8: Symbol(:normal) = :normal
    <statTemp>$3: Symbol(:bar) = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Foo), <statTemp>$7: Symbol(:bar), <statTemp>$8: Symbol(:normal))
    <cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$13: Symbol(:baz) = :baz
    <statTemp>$14: Symbol(:normal) = :normal
    <statTemp>$9: Symbol(:baz) = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Foo), <statTemp>$13: Symbol(:baz), <statTemp>$14: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

