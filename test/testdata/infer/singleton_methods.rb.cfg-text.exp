method ::<Class:<root>>#<static-init> {

bb0[rubyBlockId=0, firstDead=14]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$6: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$8: T.class_of(Foo) = alias <C Foo>
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$8: T.class_of(Foo))
    <cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$13: T.class_of(Foo) = alias <C Foo>
    <statTemp>$9: Sorbet::Private::Static::Void = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$13: T.class_of(Foo))
    <cfgAlias>$17: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$19: T.class_of(Bar) = alias <C Bar>
    <statTemp>$15: Sorbet::Private::Static::Void = <cfgAlias>$17: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$19: T.class_of(Bar))
    <cfgAlias>$22: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$24: T.class_of(Bar) = alias <C Bar>
    <statTemp>$20: Sorbet::Private::Static::Void = <cfgAlias>$22: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$24: T.class_of(Bar))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Foo>#bar {

bb0[rubyBlockId=0, firstDead=3]():
    <self>: T.class_of(Foo) = cast(<self>: NilClass, T.class_of(Foo));
    <returnMethodTemp>$2: Integer(1) = 1
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(1)
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Foo>#<static-init> {

bb0[rubyBlockId=0, firstDead=6]():
    <self>: T.class_of(Foo) = cast(<self>: NilClass, T.class_of(Foo));
    <cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$6: Symbol(:bar) = :bar
    <statTemp>$7: Symbol(:normal) = :normal
    <returnMethodTemp>$2: Symbol(:bar) = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_self_def(<self>: T.class_of(Foo), <statTemp>$6: Symbol(:bar), <statTemp>$7: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:bar)
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Bar#baz {

bb0[rubyBlockId=0, firstDead=4]():
    <self>: Bar = cast(<self>: NilClass, Bar);
    <cfgAlias>$4: T.class_of(Foo) = alias <C Foo>
    <returnMethodTemp>$2: T.untyped = <cfgAlias>$4: T.class_of(Foo).bar()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Bar>#<static-init> {

bb0[rubyBlockId=0, firstDead=6]():
    <self>: T.class_of(Bar) = cast(<self>: NilClass, T.class_of(Bar));
    <cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$6: Symbol(:baz) = :baz
    <statTemp>$7: Symbol(:normal) = :normal
    <returnMethodTemp>$2: Symbol(:baz) = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Bar), <statTemp>$6: Symbol(:baz), <statTemp>$7: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:baz)
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

