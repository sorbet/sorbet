method ::Object#rnd {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: Object = cast(<self>: NilClass, Object);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$7: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$9: T.class_of(Parent) = alias <C Parent>
    <statTemp>$5: Sorbet::Private::Static::Void = <cfgAlias>$7: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$9: T.class_of(Parent))
    <cfgAlias>$14: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$16: T.class_of(Normal) = alias <C Normal>
    <statTemp>$12: Sorbet::Private::Static::Void = <cfgAlias>$14: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$16: T.class_of(Normal))
    <cfgAlias>$19: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$21: T.class_of(Parent) = alias <C Parent>
    <statTemp>$17: Sorbet::Private::Static::Void = <cfgAlias>$19: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$21: T.class_of(Parent))
    <cfgAlias>$26: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$28: T.class_of(Generic) = alias <C Generic>
    <statTemp>$24: Sorbet::Private::Static::Void = <cfgAlias>$26: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$28: T.class_of(Generic))
    <cfgAlias>$31: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$33: T.class_of(Parent) = alias <C Parent>
    <statTemp>$29: Sorbet::Private::Static::Void = <cfgAlias>$31: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$33: T.class_of(Parent))
    <cfgAlias>$37: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$39: T.class_of(Normal) = alias <C Normal>
    <statTemp>$35: Sorbet::Private::Static::Void = <cfgAlias>$37: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$39: T.class_of(Normal))
    <cfgAlias>$43: T.class_of(Normal) = alias <C Normal>
    <statTemp>$41: Normal = <cfgAlias>$43: T.class_of(Normal).new()
    <castTemp>$40: Normal = <statTemp>$41: Normal.returns_self()
    <statTemp>$34: Normal = cast(<castTemp>$40: Normal, Normal);
    <cfgAlias>$47: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$50: T.class_of(Generic) = alias <C Generic>
    <cfgAlias>$52: T.class_of(String) = alias <C String>
    <statTemp>$48: Runtime object representing type: Generic[String] = <cfgAlias>$50: T.class_of(Generic).[](<cfgAlias>$52: T.class_of(String))
    <statTemp>$45: Sorbet::Private::Static::Void = <cfgAlias>$47: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<statTemp>$48: Runtime object representing type: Generic[String])
    <cfgAlias>$57: T.class_of(Generic) = alias <C Generic>
    <cfgAlias>$59: T.class_of(String) = alias <C String>
    <statTemp>$55: Runtime object representing type: Generic[String] = <cfgAlias>$57: T.class_of(Generic).[](<cfgAlias>$59: T.class_of(String))
    <statTemp>$54: Generic[String] = <statTemp>$55: Runtime object representing type: Generic[String].new()
    <castTemp>$53: Generic[String] = <statTemp>$54: Generic[String].returns_self()
    <statTemp>$44: Generic[String] = cast(<castTemp>$53: Generic[String], Generic[String]);
    <cfgAlias>$64: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$66: T.class_of(B) = alias <C B>
    <statTemp>$62: Sorbet::Private::Static::Void = <cfgAlias>$64: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$66: T.class_of(B))
    <cfgAlias>$70: T.class_of(Generic) = alias <C Generic>
    <cfgAlias>$72: T.class_of(String) = alias <C String>
    <statTemp>$68: Runtime object representing type: Generic[String] = <cfgAlias>$70: T.class_of(Generic).[](<cfgAlias>$72: T.class_of(String))
    a: Generic[String] = <statTemp>$68: Runtime object representing type: Generic[String].new()
    <cfgAlias>$77: T.class_of(B) = alias <C B>
    <ifTemp>$74: T::Boolean = a: Generic[String].is_a?(<cfgAlias>$77: T.class_of(B))
    <ifTemp>$74 -> (T::Boolean ? bb2 : bb4)

# backedges
# - bb7(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>), a: T.all(Generic[String], B)):
    <cfgAlias>$80: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$83: T.class_of(T) = alias <C T>
    <cfgAlias>$86: T.class_of(Generic) = alias <C Generic>
    <cfgAlias>$88: T.class_of(String) = alias <C String>
    <statTemp>$84: Runtime object representing type: Generic[String] = <cfgAlias>$86: T.class_of(Generic).[](<cfgAlias>$88: T.class_of(String))
    <cfgAlias>$90: T.class_of(B) = alias <C B>
    <statTemp>$81: Runtime object representing type: T.all(Generic[String], B) = <cfgAlias>$83: T.class_of(T).all(<statTemp>$84: Runtime object representing type: Generic[String], <cfgAlias>$90: T.class_of(B))
    <statTemp>$78: Sorbet::Private::Static::Void = <cfgAlias>$80: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<statTemp>$81: Runtime object representing type: T.all(Generic[String], B))
    <castTemp>$91: T.all(Generic[String], B) = a: T.all(Generic[String], B).returns_self()
    <statTemp>$73: T.all(Generic[String], B) = cast(<castTemp>$91: T.all(Generic[String], B), T.all(Generic[String], B));
    <unconditional> -> bb4

# backedges
# - bb0(rubyRegionId=0)
# - bb2(rubyRegionId=0)
bb4[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>)):
    <cfgAlias>$97: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$99: T.class_of(Array) = alias <C Array>
    <statTemp>$95: Sorbet::Private::Static::Void = <cfgAlias>$97: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$99: T.class_of(Array))
    <cfgAlias>$103: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$106: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$108: T.class_of(Integer) = alias <C Integer>
    <magic>$109: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$104: [T.class_of(Integer), T.class_of(Integer)] = <magic>$109: T.class_of(<Magic>).<build-array>(<cfgAlias>$106: T.class_of(Integer), <cfgAlias>$108: T.class_of(Integer))
    <statTemp>$101: Sorbet::Private::Static::Void = <cfgAlias>$103: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<statTemp>$104: [T.class_of(Integer), T.class_of(Integer)])
    <arrayTemp>$112: Integer(1) = 1
    <arrayTemp>$113: Integer(2) = 2
    <magic>$114: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$111: [Integer(1), Integer(2)] = <magic>$114: T.class_of(<Magic>).<build-array>(<arrayTemp>$112: Integer(1), <arrayTemp>$113: Integer(2))
    <castTemp>$110: [Integer(1), Integer(2)] = <statTemp>$111: [Integer(1), Integer(2)].returns_self()
    <statTemp>$100: [Integer, Integer] = cast(<castTemp>$110: [Integer(1), Integer(2)], [Integer, Integer]);
    <cfgAlias>$119: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$121: T.class_of(A) = alias <C A>
    <statTemp>$117: Sorbet::Private::Static::Void = <cfgAlias>$119: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$121: T.class_of(A))
    <cfgAlias>$126: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$128: T.class_of(B) = alias <C B>
    <statTemp>$124: Sorbet::Private::Static::Void = <cfgAlias>$126: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$128: T.class_of(B))
    <cfgAlias>$131: T.class_of(A) = alias <C A>
    s: A = <cfgAlias>$131: T.class_of(A).new()
    <unconditional> -> bb5

# backedges
# - bb4(rubyRegionId=0)
# - bb8(rubyRegionId=0)
# - bb9(rubyRegionId=0)
bb5[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>), s: A):
    # outerLoops: 1
    <whileTemp>$134: T.untyped = <self>: T.class_of(<root>).rnd()
    <whileTemp>$134 -> (T.untyped ? bb8 : bb7)

# backedges
# - bb5(rubyRegionId=0)
bb7[rubyRegionId=0, firstDead=2](<self>: T.class_of(<root>), s: A):
    <statTemp>$142: NilClass = <self>: T.class_of(<root>).puts(s: A)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb5(rubyRegionId=0)
bb8[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>), s: A):
    # outerLoops: 1
    <cfgAlias>$140: T.class_of(B) = alias <C B>
    <ifTemp>$137: T::Boolean = s: A.is_a?(<cfgAlias>$140: T.class_of(B))
    <ifTemp>$137 -> (T::Boolean ? bb9 : bb5)

# backedges
# - bb8(rubyRegionId=0)
bb9[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>), s: T.all(A, B)):
    # outerLoops: 1
    <statTemp>$141: T.all(A, B) = s
    s: T.all(A, B) = <statTemp>$141: T.all(A, B).returns_self()
    <unconditional> -> bb5

}

method ::Parent#returns_self {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: Parent = cast(<self>: NilClass, Parent);
    <returnMethodTemp>$2: Parent = <self>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Parent
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Parent>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(Parent) = cast(<self>: NilClass, T.class_of(Parent));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$7: FalseClass = false
    <statTemp>$8: Symbol(:returns_self) = :returns_self
    <block-pre-call-temp>$9: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(Parent), <statTemp>$7: FalseClass, <statTemp>$8: Symbol(:returns_self))
    <selfRestore>$10: T.class_of(Parent) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(Parent), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(Parent)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=6](<block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(Parent)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$9, sig>
    <self>: T.class_of(Parent) = <selfRestore>$10
    <cfgAlias>$21: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$23: T.class_of(T) = alias <C T>
    <statTemp>$18: T.class_of(Parent) = <self>: T.class_of(Parent).extend(<cfgAlias>$21: T.class_of(T::Sig))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=5](<self>: T.class_of(Parent), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(Parent)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <cfgAlias>$16: T.class_of(T) = alias <C T>
    <statTemp>$14: Runtime object representing type: T.untyped = <cfgAlias>$16: T.class_of(T).self_type()
    <blockReturnTemp>$12: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<statTemp>$14: Runtime object representing type: T.untyped)
    <blockReturnTemp>$17: T.noreturn = blockreturn<sig> <blockReturnTemp>$12: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

}

method ::<Class:Normal>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(Normal) = cast(<self>: NilClass, T.class_of(Normal));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Generic#bad {

bb0[rubyRegionId=0, firstDead=7]():
    <self>: Generic[Generic::TM] = cast(<self>: NilClass, Generic[Generic::TM]);
    <cfgAlias>$5: T.class_of(Generic) = alias <C Generic>
    <cfgAlias>$8: T.class_of(T) = alias <C T>
    <statTemp>$6: Runtime object representing type: T.untyped = <cfgAlias>$8: T.class_of(T).untyped()
    <statTemp>$3: Runtime object representing type: Generic[T.untyped] = <cfgAlias>$5: T.class_of(Generic).[](<statTemp>$6: Runtime object representing type: T.untyped)
    <returnMethodTemp>$2: Generic[T.untyped] = <statTemp>$3: Runtime object representing type: Generic[T.untyped].new()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Generic[T.untyped]
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Generic>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <C TM>$28: Runtime object representing type: Generic::TM = alias <C TM>
    <self>: T.class_of(Generic) = cast(<self>: NilClass, T.class_of(Generic));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$7: FalseClass = false
    <statTemp>$8: Symbol(:bad) = :bad
    <block-pre-call-temp>$9: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(Generic), <statTemp>$7: FalseClass, <statTemp>$8: Symbol(:bad))
    <selfRestore>$10: T.class_of(Generic) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(Generic), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(Generic)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=7](<block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(Generic)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$9, sig>
    <self>: T.class_of(Generic) = <selfRestore>$10
    <cfgAlias>$24: T.class_of(T::Generic) = alias <C Generic>
    <cfgAlias>$26: T.class_of(T) = alias <C T>
    <statTemp>$21: T.class_of(Generic) = <self>: T.class_of(Generic).extend(<cfgAlias>$24: T.class_of(T::Generic))
    <C TM>$28: T.untyped = <self>: T.class_of(Generic).type_member()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=7](<self>: T.class_of(Generic), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(Generic)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <cfgAlias>$16: T.class_of(Generic) = alias <C Generic>
    <cfgAlias>$19: T.class_of(T) = alias <C T>
    <statTemp>$17: Runtime object representing type: T.untyped = <cfgAlias>$19: T.class_of(T).self_type()
    <statTemp>$14: Runtime object representing type: Generic[T.untyped] = <cfgAlias>$16: T.class_of(Generic).[](<statTemp>$17: Runtime object representing type: T.untyped)
    <blockReturnTemp>$12: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<statTemp>$14: Runtime object representing type: Generic[T.untyped])
    <blockReturnTemp>$20: T.noreturn = blockreturn<sig> <blockReturnTemp>$12: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

}

method ::<Class:B>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(B) = cast(<self>: NilClass, T.class_of(B));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Array#returns_self {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: T::Array[Array::Elem] = cast(<self>: NilClass, T::Array[Array::Elem]);
    <returnMethodTemp>$2: T::Array[Array::Elem] = <self>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T::Array[Array::Elem]
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Array>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(Array) = cast(<self>: NilClass, T.class_of(Array));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$7: FalseClass = false
    <statTemp>$8: Symbol(:returns_self) = :returns_self
    <block-pre-call-temp>$9: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(Array), <statTemp>$7: FalseClass, <statTemp>$8: Symbol(:returns_self))
    <selfRestore>$10: T.class_of(Array) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(Array), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(Array)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=6](<block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(Array)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$9, sig>
    <self>: T.class_of(Array) = <selfRestore>$10
    <cfgAlias>$21: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$23: T.class_of(T) = alias <C T>
    <statTemp>$18: T.class_of(Array) = <self>: T.class_of(Array).extend(<cfgAlias>$21: T.class_of(T::Sig))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=5](<self>: T.class_of(Array), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(Array)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <cfgAlias>$16: T.class_of(T) = alias <C T>
    <statTemp>$14: Runtime object representing type: T.untyped = <cfgAlias>$16: T.class_of(T).self_type()
    <blockReturnTemp>$12: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<statTemp>$14: Runtime object representing type: T.untyped)
    <blockReturnTemp>$17: T.noreturn = blockreturn<sig> <blockReturnTemp>$12: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

}

method ::<Class:A>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(A) = cast(<self>: NilClass, T.class_of(A));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::B#returns_self {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: B = cast(<self>: NilClass, B);
    <returnMethodTemp>$2: B = <self>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: B
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:B>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(B) = cast(<self>: NilClass, T.class_of(B));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$7: FalseClass = false
    <statTemp>$8: Symbol(:returns_self) = :returns_self
    <block-pre-call-temp>$9: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(B), <statTemp>$7: FalseClass, <statTemp>$8: Symbol(:returns_self))
    <selfRestore>$10: T.class_of(B) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(B), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(B)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=6](<block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(B)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$9, sig>
    <self>: T.class_of(B) = <selfRestore>$10
    <cfgAlias>$21: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$23: T.class_of(T) = alias <C T>
    <statTemp>$18: T.class_of(B) = <self>: T.class_of(B).extend(<cfgAlias>$21: T.class_of(T::Sig))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=5](<self>: T.class_of(B), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(B)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <cfgAlias>$16: T.class_of(T) = alias <C T>
    <statTemp>$14: Runtime object representing type: T.untyped = <cfgAlias>$16: T.class_of(T).self_type()
    <blockReturnTemp>$12: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<statTemp>$14: Runtime object representing type: T.untyped)
    <blockReturnTemp>$17: T.noreturn = blockreturn<sig> <blockReturnTemp>$12: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

}

