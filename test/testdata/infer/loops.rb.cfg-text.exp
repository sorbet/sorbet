method ::<Class:<root>>#<static-init> {

bb0[rubyBlockId=0, firstDead=8]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$7: T.class_of(HasLoops) = alias <C HasLoops>
    <statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(HasLoops))
    <cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$12: T.class_of(HasLoops) = alias <C HasLoops>
    <statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(HasLoops))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::HasLoops#variable_only_inside_loop {

bb0[rubyBlockId=0, firstDead=-1]():
    <self>: HasLoops = cast(<self>: NilClass, HasLoops);
    <unconditional> -> bb2

# backedges
# - bb3(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
# - bb5(rubyBlockId=0)
bb2[rubyBlockId=0, firstDead=-1]():
    # outerLoops: 1
    <whileTemp>$3: TrueClass = true
    <whileTemp>$3 -> (TrueClass ? bb5 : bb3)

# backedges
# - bb2(rubyBlockId=0)
bb3[rubyBlockId=0, firstDead=0]():
    <returnMethodTemp>$2 = nil
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb2(rubyBlockId=0)
bb5[rubyBlockId=0, firstDead=-1]():
    # outerLoops: 1
    a: Integer(1) = 1
    <unconditional> -> bb2

}

method ::HasLoops#incorrect_assignment {

bb0[rubyBlockId=0, firstDead=-1]():
    <self>: HasLoops = cast(<self>: NilClass, HasLoops);
    a: String("s") = "s"
    <unconditional> -> bb2

# backedges
# - bb3(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
# - bb5(rubyBlockId=0)
bb2[rubyBlockId=0, firstDead=-1](a: String("s")):
    # outerLoops: 1
    <whileTemp>$4: TrueClass = true
    <whileTemp>$4 -> (TrueClass ? bb5 : bb3)

# backedges
# - bb2(rubyBlockId=0)
bb3[rubyBlockId=0, firstDead=0]():
    <returnMethodTemp>$2 = nil
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb2(rubyBlockId=0)
bb5[rubyBlockId=0, firstDead=-1](a: String("s")):
    # outerLoops: 1
    a: T.untyped = 1
    <unconditional> -> bb2

}

method ::HasLoops#correct_assignment {

bb0[rubyBlockId=0, firstDead=-1]():
    <self>: HasLoops = cast(<self>: NilClass, HasLoops);
    a: String("s") = "s"
    <unconditional> -> bb2

# backedges
# - bb3(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
# - bb5(rubyBlockId=0)
bb2[rubyBlockId=0, firstDead=-1](a: String("s")):
    # outerLoops: 1
    <whileTemp>$4: TrueClass = true
    <whileTemp>$4 -> (TrueClass ? bb5 : bb3)

# backedges
# - bb2(rubyBlockId=0)
bb3[rubyBlockId=0, firstDead=0]():
    <returnMethodTemp>$2 = nil
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb2(rubyBlockId=0)
bb5[rubyBlockId=0, firstDead=-1](a: String("s")):
    # outerLoops: 1
    a: String("a") = "a"
    <unconditional> -> bb2

}

method ::<Class:HasLoops>#<static-init> {

bb0[rubyBlockId=0, firstDead=14]():
    <self>: T.class_of(HasLoops) = cast(<self>: NilClass, T.class_of(HasLoops));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$7: Symbol(:variable_only_inside_loop) = :variable_only_inside_loop
    <statTemp>$8: Symbol(:normal) = :normal
    <statTemp>$3: Symbol(:variable_only_inside_loop) = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(HasLoops), <statTemp>$7: Symbol(:variable_only_inside_loop), <statTemp>$8: Symbol(:normal))
    <cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$13: Symbol(:incorrect_assignment) = :incorrect_assignment
    <statTemp>$14: Symbol(:normal) = :normal
    <statTemp>$9: Symbol(:incorrect_assignment) = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(HasLoops), <statTemp>$13: Symbol(:incorrect_assignment), <statTemp>$14: Symbol(:normal))
    <cfgAlias>$17: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$19: Symbol(:correct_assignment) = :correct_assignment
    <statTemp>$20: Symbol(:normal) = :normal
    <statTemp>$15: Symbol(:correct_assignment) = <cfgAlias>$17: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(HasLoops), <statTemp>$19: Symbol(:correct_assignment), <statTemp>$20: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

