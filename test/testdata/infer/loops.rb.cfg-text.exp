method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::HasLoops#variable_only_inside_loop {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: HasLoops = cast(<self>: NilClass, HasLoops);
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1]():
    # outerLoops: 1
    <whileTemp>$3: TrueClass = true
    <whileTemp>$3 -> (TrueClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=0]():
    <returnMethodTemp>$2 = nil
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=0)
bb5[rubyRegionId=0, firstDead=-1]():
    # outerLoops: 1
    a: Integer(1) = 1
    <unconditional> -> bb2

}

method ::HasLoops#incorrect_assignment {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: HasLoops = cast(<self>: NilClass, HasLoops);
    a: String("s") = "s"
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1](a: String("s")):
    # outerLoops: 1
    <whileTemp>$4: TrueClass = true
    <whileTemp>$4 -> (TrueClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=0]():
    <returnMethodTemp>$2 = nil
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=0)
bb5[rubyRegionId=0, firstDead=-1](a: String("s")):
    # outerLoops: 1
    a: T.untyped = 1
    <unconditional> -> bb2

}

method ::HasLoops#correct_assignment {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: HasLoops = cast(<self>: NilClass, HasLoops);
    a: String("s") = "s"
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1](a: String("s")):
    # outerLoops: 1
    <whileTemp>$4: TrueClass = true
    <whileTemp>$4 -> (TrueClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=0]():
    <returnMethodTemp>$2 = nil
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=0)
bb5[rubyRegionId=0, firstDead=-1](a: String("s")):
    # outerLoops: 1
    a: String("a") = "a"
    <unconditional> -> bb2

}

method ::<Class:HasLoops>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(HasLoops) = cast(<self>: NilClass, T.class_of(HasLoops));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

