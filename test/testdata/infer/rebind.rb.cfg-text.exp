method ::<Class:<root>>#<static-init> {

bb0[rubyBlockId=0, firstDead=26]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$6: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$8: T.class_of(C) = alias <C C>
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$8: T.class_of(C))
    <cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$13: T.class_of(C) = alias <C C>
    <statTemp>$9: Sorbet::Private::Static::Void = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$13: T.class_of(C))
    <cfgAlias>$17: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$19: T.class_of(B) = alias <C B>
    <statTemp>$15: Sorbet::Private::Static::Void = <cfgAlias>$17: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$19: T.class_of(B))
    <cfgAlias>$22: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$24: T.class_of(B) = alias <C B>
    <statTemp>$20: Sorbet::Private::Static::Void = <cfgAlias>$22: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$24: T.class_of(B))
    <cfgAlias>$28: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$30: T.class_of(A) = alias <C A>
    <statTemp>$26: Sorbet::Private::Static::Void = <cfgAlias>$28: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$30: T.class_of(A))
    <cfgAlias>$33: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$35: T.class_of(A) = alias <C A>
    <statTemp>$31: Sorbet::Private::Static::Void = <cfgAlias>$33: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$35: T.class_of(A))
    <cfgAlias>$39: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$41: T.class_of(Use) = alias <C Use>
    <statTemp>$37: Sorbet::Private::Static::Void = <cfgAlias>$39: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$41: T.class_of(Use))
    <cfgAlias>$44: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$46: T.class_of(Use) = alias <C Use>
    <statTemp>$42: Sorbet::Private::Static::Void = <cfgAlias>$44: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$46: T.class_of(Use))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::C#only_on_C {

bb0[rubyBlockId=0, firstDead=2]():
    <self>: C = cast(<self>: NilClass, C);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:C>#<static-init> {

bb0[rubyBlockId=0, firstDead=6]():
    <self>: T.class_of(C) = cast(<self>: NilClass, T.class_of(C));
    <cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$6: Symbol(:only_on_C) = :only_on_C
    <statTemp>$7: Symbol(:normal) = :normal
    <returnMethodTemp>$2: Symbol(:only_on_C) = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(C), <statTemp>$6: Symbol(:only_on_C), <statTemp>$7: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:only_on_C)
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::B#only_on_B {

bb0[rubyBlockId=0, firstDead=2]():
    <self>: B = cast(<self>: NilClass, B);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:B>#<static-init> {

bb0[rubyBlockId=0, firstDead=-1]():
    <self>: T.class_of(B) = cast(<self>: NilClass, T.class_of(B));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$7: FalseClass = false
    <statTemp>$8: Symbol(:only_on_B) = :only_on_B
    <block-pre-call-temp>$9: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(B), <statTemp>$7: FalseClass, <statTemp>$8: Symbol(:only_on_B))
    <selfRestore>$10: T.class_of(B) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
# - bb5(rubyBlockId=1)
bb2[rubyBlockId=1, firstDead=-1](<self>: T.class_of(B), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(B)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyBlockId=1)
bb3[rubyBlockId=0, firstDead=10](<block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(B)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$9, sig>
    <self>: T.class_of(B) = <selfRestore>$10
    <cfgAlias>$27: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$29: T.class_of(T) = alias <C T>
    <statTemp>$24: T.class_of(B) = <self>: T.class_of(B).extend(<cfgAlias>$27: T.class_of(T::Sig))
    <cfgAlias>$32: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$34: Symbol(:only_on_B) = :only_on_B
    <statTemp>$35: Symbol(:normal) = :normal
    <statTemp>$30: Symbol(:only_on_B) = <cfgAlias>$32: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(B), <statTemp>$34: Symbol(:only_on_B), <statTemp>$35: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyBlockId=1)
bb5[rubyBlockId=1, firstDead=10](<self>: T.class_of(B), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(B)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf
    <hashTemp>$15: Symbol(:blk) = :blk
    <cfgAlias>$20: T.class_of(T) = alias <C T>
    <statTemp>$18: T.class_of(T.proc) = <cfgAlias>$20: T.class_of(T).proc()
    <cfgAlias>$22: T.class_of(C) = alias <C C>
    <statTemp>$17: T.class_of(T.proc) = <statTemp>$18: T.class_of(T.proc).bind(<cfgAlias>$22: T.class_of(C))
    <hashTemp>$16: T.class_of(T.proc) = <statTemp>$17: T.class_of(T.proc).void()
    <statTemp>$13: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$15: Symbol(:blk), <hashTemp>$16: T.class_of(T.proc))
    <blockReturnTemp>$12: T::Private::Methods::DeclBuilder = <statTemp>$13: T::Private::Methods::DeclBuilder.void()
    <blockReturnTemp>$23: T.noreturn = blockreturn<sig> <blockReturnTemp>$12: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

}

method ::<Class:A>#mySig {

bb0[rubyBlockId=0, firstDead=2]():
    <self>: T.class_of(A) = cast(<self>: NilClass, T.class_of(A));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:A>#<static-init> {

bb0[rubyBlockId=0, firstDead=-1]():
    <self>: T.class_of(A) = cast(<self>: NilClass, T.class_of(A));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$7: TrueClass = true
    <statTemp>$8: Symbol(:mySig) = :mySig
    <block-pre-call-temp>$9: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(A), <statTemp>$7: TrueClass, <statTemp>$8: Symbol(:mySig))
    <selfRestore>$10: T.class_of(A) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
# - bb5(rubyBlockId=1)
bb2[rubyBlockId=1, firstDead=-1](<self>: T.class_of(A), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(A)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyBlockId=1)
bb3[rubyBlockId=0, firstDead=10](<block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(A)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$9, sig>
    <self>: T.class_of(A) = <selfRestore>$10
    <cfgAlias>$27: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$29: T.class_of(T) = alias <C T>
    <statTemp>$24: T.class_of(A) = <self>: T.class_of(A).extend(<cfgAlias>$27: T.class_of(T::Sig))
    <cfgAlias>$32: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$34: Symbol(:mySig) = :mySig
    <statTemp>$35: Symbol(:normal) = :normal
    <statTemp>$30: Symbol(:mySig) = <cfgAlias>$32: T.class_of(Sorbet::Private::Static).keep_self_def(<self>: T.class_of(A), <statTemp>$34: Symbol(:mySig), <statTemp>$35: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyBlockId=1)
bb5[rubyBlockId=1, firstDead=10](<self>: T.class_of(A), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(A)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf
    <hashTemp>$15: Symbol(:blk) = :blk
    <cfgAlias>$20: T.class_of(T) = alias <C T>
    <statTemp>$18: T.class_of(T.proc) = <cfgAlias>$20: T.class_of(T).proc()
    <cfgAlias>$22: T.class_of(B) = alias <C B>
    <statTemp>$17: T.class_of(T.proc) = <statTemp>$18: T.class_of(T.proc).bind(<cfgAlias>$22: T.class_of(B))
    <hashTemp>$16: T.class_of(T.proc) = <statTemp>$17: T.class_of(T.proc).void()
    <statTemp>$13: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$15: Symbol(:blk), <hashTemp>$16: T.class_of(T.proc))
    <blockReturnTemp>$12: T::Private::Methods::DeclBuilder = <statTemp>$13: T::Private::Methods::DeclBuilder.void()
    <blockReturnTemp>$23: T.noreturn = blockreturn<sig> <blockReturnTemp>$12: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

}

method ::Use#only_on_Use {

bb0[rubyBlockId=0, firstDead=2]():
    <self>: Use = cast(<self>: NilClass, Use);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Use#shouldRemoveSelfTemp {

bb0[rubyBlockId=0, firstDead=-1]():
    <self>: Use = cast(<self>: NilClass, Use);
    <block-pre-call-temp>$4: Sorbet::Private::Static::Void = <self>: Use.only_on_Use()
    <selfRestore>$5: Use = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
# - bb5(rubyBlockId=1)
bb2[rubyBlockId=1, firstDead=-1](<self>: Use, <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: Use):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyBlockId=1)
bb3[rubyBlockId=0, firstDead=2](<block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: Use):
    <returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$4, only_on_Use>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb2(rubyBlockId=1)
bb5[rubyBlockId=1, firstDead=3](<self>: Use, <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: Use):
    # outerLoops: 1
    <self>: Use = loadSelf
    <blockReturnTemp>$7: Integer(1) = 1
    <blockReturnTemp>$8: T.noreturn = blockreturn<only_on_Use> <blockReturnTemp>$7: Integer(1)
    <unconditional> -> bb2

}

method ::Use#jumpBetweenClasses {

bb0[rubyBlockId=0, firstDead=-1]():
    <self>: Use = cast(<self>: NilClass, Use);
    <cfgAlias>$4: T.class_of(A) = alias <C A>
    <block-pre-call-temp>$5: Sorbet::Private::Static::Void = <cfgAlias>$4: T.class_of(A).mySig()
    <selfRestore>$6: Use = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
# - bb7(rubyBlockId=1)
bb2[rubyBlockId=1, firstDead=-1](<self>: Use, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Use):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyBlockId=1)
bb3[rubyBlockId=0, firstDead=2](<block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Use):
    <returnMethodTemp>$2: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$5, mySig>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Sorbet::Private::Static::Void
    <unconditional> -> bb1

# backedges
# - bb2(rubyBlockId=1)
bb5[rubyBlockId=1, firstDead=-1](<self>: Use, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Use):
    # outerLoops: 1
    <self>: B = loadSelf
    <statTemp>$9: T.untyped = <self>: B.only_on_Use()
    <statTemp>$11: T.untyped = <self>: B.mySig()
    <block-pre-call-temp>$14: Sorbet::Private::Static::Void = <self>: B.only_on_B()
    <selfRestore>$15: B = <self>
    <unconditional> -> bb6

# backedges
# - bb5(rubyBlockId=1)
# - bb9(rubyBlockId=2)
bb6[rubyBlockId=2, firstDead=-1](<self>: B, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Use, <block-pre-call-temp>$14: Sorbet::Private::Static::Void, <selfRestore>$15: B):
    # outerLoops: 2
    <block-call> -> (NilClass ? bb9 : bb7)

# backedges
# - bb6(rubyBlockId=2)
bb7[rubyBlockId=1, firstDead=3](<self>: B, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Use, <block-pre-call-temp>$14: Sorbet::Private::Static::Void, <selfRestore>$15: B):
    # outerLoops: 1
    <blockReturnTemp>$8: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$14, only_on_B>
    <self>: B = <selfRestore>$15
    <blockReturnTemp>$22: T.noreturn = blockreturn<mySig> <blockReturnTemp>$8: Sorbet::Private::Static::Void
    <unconditional> -> bb2

# backedges
# - bb6(rubyBlockId=2)
bb9[rubyBlockId=2, firstDead=4](<self>: B, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Use, <block-pre-call-temp>$14: Sorbet::Private::Static::Void, <selfRestore>$15: B):
    # outerLoops: 2
    <self>: C = loadSelf
    <statTemp>$18: T.untyped = <self>: C.only_on_B()
    <blockReturnTemp>$17: T.untyped = <self>: C.only_on_C()
    <blockReturnTemp>$21: T.noreturn = blockreturn<only_on_B> <blockReturnTemp>$17: T.untyped
    <unconditional> -> bb6

}

method ::<Class:Use>#<static-init> {

bb0[rubyBlockId=0, firstDead=17]():
    <self>: T.class_of(Use) = cast(<self>: NilClass, T.class_of(Use));
    <cfgAlias>$6: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$8: T.class_of(T) = alias <C T>
    <statTemp>$3: T.class_of(Use) = <self>: T.class_of(Use).extend(<cfgAlias>$6: T.class_of(T::Sig))
    <cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$13: Symbol(:only_on_Use) = :only_on_Use
    <statTemp>$14: Symbol(:normal) = :normal
    <statTemp>$9: Symbol(:only_on_Use) = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Use), <statTemp>$13: Symbol(:only_on_Use), <statTemp>$14: Symbol(:normal))
    <cfgAlias>$17: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$19: Symbol(:shouldRemoveSelfTemp) = :shouldRemoveSelfTemp
    <statTemp>$20: Symbol(:normal) = :normal
    <statTemp>$15: Symbol(:shouldRemoveSelfTemp) = <cfgAlias>$17: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Use), <statTemp>$19: Symbol(:shouldRemoveSelfTemp), <statTemp>$20: Symbol(:normal))
    <cfgAlias>$23: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$25: Symbol(:jumpBetweenClasses) = :jumpBetweenClasses
    <statTemp>$26: Symbol(:normal) = :normal
    <statTemp>$21: Symbol(:jumpBetweenClasses) = <cfgAlias>$23: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Use), <statTemp>$25: Symbol(:jumpBetweenClasses), <statTemp>$26: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

