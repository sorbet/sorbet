method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=14]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$7: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$9: T.class_of(C) = alias <C C>
    <statTemp>$5: Sorbet::Private::Static::Void = <cfgAlias>$7: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$9: T.class_of(C))
    <cfgAlias>$14: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$16: T.class_of(B) = alias <C B>
    <statTemp>$12: Sorbet::Private::Static::Void = <cfgAlias>$14: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$16: T.class_of(B))
    <cfgAlias>$21: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$23: T.class_of(A) = alias <C A>
    <statTemp>$19: Sorbet::Private::Static::Void = <cfgAlias>$21: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$23: T.class_of(A))
    <cfgAlias>$28: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$30: T.class_of(Use) = alias <C Use>
    <statTemp>$26: Sorbet::Private::Static::Void = <cfgAlias>$28: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$30: T.class_of(Use))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::C#only_on_C {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: C = cast(<self>: NilClass, C);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:C>#<static-init> {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: T.class_of(C) = cast(<self>: NilClass, T.class_of(C));
    <returnMethodTemp>$2: Symbol(:only_on_C) = :only_on_C
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:only_on_C)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::B#only_on_B {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: B = cast(<self>: NilClass, B);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:B>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(B) = cast(<self>: NilClass, T.class_of(B));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$7: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(B))
    <selfRestore>$8: T.class_of(B) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(B), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(B)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=6](<block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(B)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$7, sig>
    <self>: T.class_of(B) = <selfRestore>$8
    <cfgAlias>$24: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$26: T.class_of(T) = alias <C T>
    <statTemp>$21: T.class_of(B) = <self>: T.class_of(B).extend(<cfgAlias>$24: T.class_of(T::Sig))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=10](<self>: T.class_of(B), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(B)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$12: Symbol(:blk) = :blk
    <cfgAlias>$17: T.class_of(T) = alias <C T>
    <statTemp>$15: T.class_of(T.proc) = <cfgAlias>$17: T.class_of(T).proc()
    <cfgAlias>$19: T.class_of(C) = alias <C C>
    <statTemp>$14: T.class_of(T.proc) = <statTemp>$15: T.class_of(T.proc).bind(<cfgAlias>$19: T.class_of(C))
    <hashTemp>$13: Runtime object representing type: T.proc.void = <statTemp>$14: T.class_of(T.proc).void()
    <statTemp>$10: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$12: Symbol(:blk), <hashTemp>$13: Runtime object representing type: T.proc.void)
    <blockReturnTemp>$9: T::Private::Methods::DeclBuilder = <statTemp>$10: T::Private::Methods::DeclBuilder.void()
    <blockReturnTemp>$20: T.noreturn = blockreturn<sig> <blockReturnTemp>$9: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

}

method ::<Class:A>#mySig {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(A) = cast(<self>: NilClass, T.class_of(A));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:A>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(A) = cast(<self>: NilClass, T.class_of(A));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$7: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(A))
    <selfRestore>$8: T.class_of(A) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(A), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(A)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=6](<block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(A)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$7, sig>
    <self>: T.class_of(A) = <selfRestore>$8
    <cfgAlias>$24: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$26: T.class_of(T) = alias <C T>
    <statTemp>$21: T.class_of(A) = <self>: T.class_of(A).extend(<cfgAlias>$24: T.class_of(T::Sig))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=10](<self>: T.class_of(A), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(A)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$12: Symbol(:blk) = :blk
    <cfgAlias>$17: T.class_of(T) = alias <C T>
    <statTemp>$15: T.class_of(T.proc) = <cfgAlias>$17: T.class_of(T).proc()
    <cfgAlias>$19: T.class_of(B) = alias <C B>
    <statTemp>$14: T.class_of(T.proc) = <statTemp>$15: T.class_of(T.proc).bind(<cfgAlias>$19: T.class_of(B))
    <hashTemp>$13: Runtime object representing type: T.proc.void = <statTemp>$14: T.class_of(T.proc).void()
    <statTemp>$10: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$12: Symbol(:blk), <hashTemp>$13: Runtime object representing type: T.proc.void)
    <blockReturnTemp>$9: T::Private::Methods::DeclBuilder = <statTemp>$10: T::Private::Methods::DeclBuilder.void()
    <blockReturnTemp>$20: T.noreturn = blockreturn<sig> <blockReturnTemp>$9: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

}

method ::Use#only_on_Use {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: Use = cast(<self>: NilClass, Use);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Use#shouldRemoveSelfTemp {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Use = cast(<self>: NilClass, Use);
    <block-pre-call-temp>$4: Sorbet::Private::Static::Void = <self>: Use.only_on_Use()
    <selfRestore>$5: Use = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: Use, <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: Use):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=2](<block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: Use):
    <returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$4, only_on_Use>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=3](<self>: Use, <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: Use):
    # outerLoops: 1
    <self>: Use = loadSelf(only_on_Use)
    <blockReturnTemp>$6: Integer(1) = 1
    <blockReturnTemp>$7: T.noreturn = blockreturn<only_on_Use> <blockReturnTemp>$6: Integer(1)
    <unconditional> -> bb2

}

method ::Use#jumpBetweenClasses {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Use = cast(<self>: NilClass, Use);
    <cfgAlias>$4: T.class_of(A) = alias <C A>
    <block-pre-call-temp>$5: Sorbet::Private::Static::Void = <cfgAlias>$4: T.class_of(A).mySig()
    <selfRestore>$6: Use = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb7(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: Use, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Use):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=2](<block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Use):
    <returnMethodTemp>$2: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$5, mySig>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Sorbet::Private::Static::Void
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=-1](<self>: Use, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Use):
    # outerLoops: 1
    <self>: B = loadSelf(mySig)
    <statTemp>$8: T.untyped = <self>: B.only_on_Use()
    <statTemp>$10: T.untyped = <self>: B.mySig()
    <block-pre-call-temp>$13: Sorbet::Private::Static::Void = <self>: B.only_on_B()
    <selfRestore>$14: B = <self>
    <unconditional> -> bb6

# backedges
# - bb5(rubyRegionId=1)
# - bb9(rubyRegionId=2)
bb6[rubyRegionId=2, firstDead=-1](<self>: B, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Use, <block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: B):
    # outerLoops: 2
    <block-call> -> (NilClass ? bb9 : bb7)

# backedges
# - bb6(rubyRegionId=2)
bb7[rubyRegionId=1, firstDead=3](<self>: B, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Use, <block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: B):
    # outerLoops: 1
    <blockReturnTemp>$7: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$13, only_on_B>
    <self>: B = <selfRestore>$14
    <blockReturnTemp>$20: T.noreturn = blockreturn<mySig> <blockReturnTemp>$7: Sorbet::Private::Static::Void
    <unconditional> -> bb2

# backedges
# - bb6(rubyRegionId=2)
bb9[rubyRegionId=2, firstDead=4](<self>: B, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Use, <block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: B):
    # outerLoops: 2
    <self>: C = loadSelf(only_on_B)
    <statTemp>$16: T.untyped = <self>: C.only_on_B()
    <blockReturnTemp>$15: T.untyped = <self>: C.only_on_C()
    <blockReturnTemp>$19: T.noreturn = blockreturn<only_on_B> <blockReturnTemp>$15: T.untyped
    <unconditional> -> bb6

}

method ::<Class:Use>#<static-init> {

bb0[rubyRegionId=0, firstDead=5]():
    <self>: T.class_of(Use) = cast(<self>: NilClass, T.class_of(Use));
    <cfgAlias>$6: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$8: T.class_of(T) = alias <C T>
    <statTemp>$3: T.class_of(Use) = <self>: T.class_of(Use).extend(<cfgAlias>$6: T.class_of(T::Sig))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

