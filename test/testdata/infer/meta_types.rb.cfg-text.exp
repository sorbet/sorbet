method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=5]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$6: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$8: T.class_of(TestMetaType) = alias <C TestMetaType>
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$8: T.class_of(TestMetaType))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestMetaType#_ {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: TestMetaType = cast(<self>: NilClass, TestMetaType);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestMetaType#testit {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: TestMetaType = cast(<self>: NilClass, TestMetaType);
    <cfgAlias>$7: T.class_of(T::Array) = alias <C Array>
    <cfgAlias>$9: T.class_of(T) = alias <C T>
    <cfgAlias>$11: T.class_of(String) = alias <C String>
    <statTemp>$5: Runtime object representing type: T::Array[String] = <cfgAlias>$7: T.class_of(T::Array).[](<cfgAlias>$11: T.class_of(String))
    <statTemp>$3: NilClass = <self>: TestMetaType.puts(<statTemp>$5: Runtime object representing type: T::Array[String])
    <ifTemp>$15: T.untyped = <self>: TestMetaType._()
    <ifTemp>$15 -> (T.untyped ? bb2 : bb3)

# backedges
# - bb7(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1](<self>: TestMetaType):
    <cfgAlias>$18: T.class_of(T::Array) = alias <C Array>
    <cfgAlias>$20: T.class_of(T) = alias <C T>
    <cfgAlias>$22: T.class_of(String) = alias <C String>
    <statTemp>$14: Runtime object representing type: T::Array[String] = <cfgAlias>$18: T.class_of(T::Array).[](<cfgAlias>$22: T.class_of(String))
    <unconditional> -> bb4

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=-1](<self>: TestMetaType):
    <statTemp>$14: FalseClass = false
    <unconditional> -> bb4

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb4[rubyRegionId=0, firstDead=-1](<self>: TestMetaType, <statTemp>$14: Object):
    <statTemp>$12: NilClass = <self>: TestMetaType.puts(<statTemp>$14: Object)
    <ifTemp>$25: T.untyped = <self>: TestMetaType._()
    <ifTemp>$25 -> (T.untyped ? bb5 : bb6)

# backedges
# - bb4(rubyRegionId=0)
bb5[rubyRegionId=0, firstDead=-1](<self>: TestMetaType):
    <cfgAlias>$28: T.class_of(T::Array) = alias <C Array>
    <cfgAlias>$30: T.class_of(T) = alias <C T>
    <cfgAlias>$32: T.class_of(String) = alias <C String>
    <statTemp>$24: Runtime object representing type: T::Array[String] = <cfgAlias>$28: T.class_of(T::Array).[](<cfgAlias>$32: T.class_of(String))
    <unconditional> -> bb7

# backedges
# - bb4(rubyRegionId=0)
bb6[rubyRegionId=0, firstDead=-1](<self>: TestMetaType):
    <cfgAlias>$34: T.class_of(T::Array) = alias <C Array>
    <cfgAlias>$36: T.class_of(T) = alias <C T>
    <cfgAlias>$38: T.class_of(Float) = alias <C Float>
    <statTemp>$24: Runtime object representing type: T::Array[Float] = <cfgAlias>$34: T.class_of(T::Array).[](<cfgAlias>$38: T.class_of(Float))
    <unconditional> -> bb7

# backedges
# - bb5(rubyRegionId=0)
# - bb6(rubyRegionId=0)
bb7[rubyRegionId=0, firstDead=2](<self>: TestMetaType, <statTemp>$24: Object):
    <returnMethodTemp>$2: NilClass = <self>: TestMetaType.puts(<statTemp>$24: Object)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

}

method ::<Class:TestMetaType>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(TestMetaType) = cast(<self>: NilClass, T.class_of(TestMetaType));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

