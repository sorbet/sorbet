method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=5]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$6: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$8: T.class_of(TestCasts) = alias <C TestCasts>
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$8: T.class_of(TestCasts))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestCasts#untyped {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: TestCasts = cast(<self>: NilClass, TestCasts);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestCasts#test_casts {

bb0[rubyRegionId=0, firstDead=63]():
    <self>: TestCasts = cast(<self>: NilClass, TestCasts);
    <cfgAlias>$5: T.class_of(Integer) = alias <C Integer>
    keep_for_ide$4: T.class_of(Integer) = <cfgAlias>$5
    keep_for_ide$4: T.untyped = <keep-alive> keep_for_ide$4
    <castTemp>$6: T.untyped = <self>: TestCasts.untyped()
    t: Integer = cast(<castTemp>$6: T.untyped, Integer);
    <statTemp>$10: Integer(4) = 4
    <statTemp>$8: Integer = t: Integer.+(<statTemp>$10: Integer(4))
    <cfgAlias>$13: T.class_of(Integer) = alias <C Integer>
    keep_for_ide$12: T.class_of(Integer) = <cfgAlias>$13
    keep_for_ide$12: T.untyped = <keep-alive> keep_for_ide$12
    <castTemp>$14: String("hi") = "hi"
    t1: Integer = cast(<castTemp>$14: String("hi"), Integer);
    <statTemp>$17: Integer(1) = 1
    <statTemp>$15: Integer = t1: Integer.+(<statTemp>$17: Integer(1))
    <cfgAlias>$20: T.class_of(String) = alias <C String>
    keep_for_ide$19: T.class_of(String) = <cfgAlias>$20
    keep_for_ide$19: T.untyped = <keep-alive> keep_for_ide$19
    <castTemp>$21: T.untyped = <self>: TestCasts.untyped()
    s: String = cast(<castTemp>$21: T.untyped, String);
    <statTemp>$25: String("hi") = "hi"
    <statTemp>$23: String = s: String.+(<statTemp>$25: String("hi"))
    <cfgAlias>$28: T.class_of(String) = alias <C String>
    keep_for_ide$27: T.class_of(String) = <cfgAlias>$28
    keep_for_ide$27: T.untyped = <keep-alive> keep_for_ide$27
    <castTemp>$29: Integer(6) = 6
    s: String = cast(<castTemp>$29: Integer(6), String);
    <statTemp>$32: String("hi") = "hi"
    <statTemp>$30: String = s: String.+(<statTemp>$32: String("hi"))
    <statTemp>$35: Integer(3) = 3
    <statTemp>$33: String = s: String.+(<statTemp>$35: Integer(3))
    <cfgAlias>$38: T.class_of(Integer) = alias <C Integer>
    keep_for_ide$37: T.class_of(Integer) = <cfgAlias>$38
    keep_for_ide$37: T.untyped = <keep-alive> keep_for_ide$37
    <castTemp>$39: Integer(6) = 6
    s: Integer = cast(<castTemp>$39: Integer(6), Integer);
    <cfgAlias>$43: T.class_of(T) = alias <C T>
    keep_for_ide$41: Runtime object representing type: T.untyped = <cfgAlias>$43: T.class_of(T).untyped()
    keep_for_ide$41: T.untyped = <keep-alive> keep_for_ide$41
    <castTemp>$44: Integer(6) = 6
    s: T.untyped = cast(<castTemp>$44: Integer(6), T.untyped);
    keep_for_ide$46: Integer(7) = 7
    keep_for_ide$46: T.untyped = <keep-alive> keep_for_ide$46
    <castTemp>$47: Integer(6) = 6
    s: Integer = cast(<castTemp>$47: Integer(6), Integer);
    <statTemp>$50: String("hi") = "hi"
    <statTemp>$48: Integer = s: Integer.+(<statTemp>$50: String("hi"))
    <statTemp>$53: Integer(3) = 3
    <statTemp>$51: Integer = s: Integer.+(<statTemp>$53: Integer(3))
    keep_for_ide$55: Float(7.000000) = 7.000000
    keep_for_ide$55: T.untyped = <keep-alive> keep_for_ide$55
    <castTemp>$56: Float(6.000000) = 6.000000
    f: Float = cast(<castTemp>$56: Float(6.000000), Float);
    keep_for_ide$58: String("y") = "y"
    keep_for_ide$58: T.untyped = <keep-alive> keep_for_ide$58
    <castTemp>$59: String("x") = "x"
    str: String = cast(<castTemp>$59: String("x"), String);
    keep_for_ide$60: Symbol(:y) = :y
    keep_for_ide$60: T.untyped = <keep-alive> keep_for_ide$60
    <castTemp>$61: Symbol(:x) = :x
    sym: Symbol = cast(<castTemp>$61: Symbol(:x), Symbol);
    <returnMethodTemp>$2: Symbol = sym
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:TestCasts>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(TestCasts) = cast(<self>: NilClass, T.class_of(TestCasts));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

