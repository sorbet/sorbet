method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=8]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$7: T.class_of(TestCasts) = alias <C TestCasts>
    <statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(TestCasts))
    <cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$12: T.class_of(TestCasts) = alias <C TestCasts>
    <statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(TestCasts))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestCasts#untyped {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: TestCasts = cast(<self>: NilClass, TestCasts);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::TestCasts#test_casts {

bb0[rubyRegionId=0, firstDead=52]():
    <self>: TestCasts = cast(<self>: NilClass, TestCasts);
    <cfgAlias>$6: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$8: T.class_of(Integer) = alias <C Integer>
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$8: T.class_of(Integer))
    <castTemp>$9: T.untyped = <self>: TestCasts.untyped()
    t: Integer = cast(<castTemp>$9: T.untyped, Integer);
    <statTemp>$13: Integer(4) = 4
    <statTemp>$11: Integer = t: Integer.+(<statTemp>$13: Integer(4))
    <cfgAlias>$17: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$19: T.class_of(Integer) = alias <C Integer>
    <statTemp>$15: Sorbet::Private::Static::Void = <cfgAlias>$17: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$19: T.class_of(Integer))
    <castTemp>$20: String("hi") = "hi"
    t1: Integer = cast(<castTemp>$20: String("hi"), Integer);
    <statTemp>$23: Integer(1) = 1
    <statTemp>$21: Integer = t1: Integer.+(<statTemp>$23: Integer(1))
    <cfgAlias>$27: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$29: T.class_of(String) = alias <C String>
    <statTemp>$25: Sorbet::Private::Static::Void = <cfgAlias>$27: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$29: T.class_of(String))
    <castTemp>$30: T.untyped = <self>: TestCasts.untyped()
    s: String = cast(<castTemp>$30: T.untyped, String);
    <statTemp>$34: String("hi") = "hi"
    <statTemp>$32: String = s: String.+(<statTemp>$34: String("hi"))
    <cfgAlias>$38: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$40: T.class_of(String) = alias <C String>
    <statTemp>$36: Sorbet::Private::Static::Void = <cfgAlias>$38: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$40: T.class_of(String))
    <castTemp>$41: Integer(6) = 6
    s: String = cast(<castTemp>$41: Integer(6), String);
    <statTemp>$44: String("hi") = "hi"
    <statTemp>$42: String = s: String.+(<statTemp>$44: String("hi"))
    <statTemp>$47: Integer(3) = 3
    <statTemp>$45: String = s: String.+(<statTemp>$47: Integer(3))
    <cfgAlias>$51: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$53: T.class_of(Integer) = alias <C Integer>
    <statTemp>$49: Sorbet::Private::Static::Void = <cfgAlias>$51: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$53: T.class_of(Integer))
    <castTemp>$54: Integer(6) = 6
    s: Integer = cast(<castTemp>$54: Integer(6), Integer);
    <cfgAlias>$58: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$61: T.class_of(T) = alias <C T>
    <statTemp>$59: Runtime object representing type: T.untyped = <cfgAlias>$61: T.class_of(T).untyped()
    <statTemp>$56: Sorbet::Private::Static::Void = <cfgAlias>$58: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<statTemp>$59: Runtime object representing type: T.untyped)
    <castTemp>$62: Integer(6) = 6
    s: T.untyped = cast(<castTemp>$62: Integer(6), T.untyped);
    <cfgAlias>$66: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$67: Integer(7) = 7
    <statTemp>$64: Sorbet::Private::Static::Void = <cfgAlias>$66: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<statTemp>$67: Integer(7))
    <castTemp>$68: Integer(6) = 6
    s: Integer = cast(<castTemp>$68: Integer(6), Integer);
    <statTemp>$71: String("hi") = "hi"
    <statTemp>$69: Integer = s: Integer.+(<statTemp>$71: String("hi"))
    <statTemp>$73: Integer(3) = 3
    <returnMethodTemp>$2: Integer = s: Integer.+(<statTemp>$73: Integer(3))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:TestCasts>#<static-init> {

bb0[rubyRegionId=0, firstDead=10]():
    <self>: T.class_of(TestCasts) = cast(<self>: NilClass, T.class_of(TestCasts));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$7: Symbol(:untyped) = :untyped
    <statTemp>$8: Symbol(:normal) = :normal
    <statTemp>$3: Symbol(:untyped) = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestCasts), <statTemp>$7: Symbol(:untyped), <statTemp>$8: Symbol(:normal))
    <cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$13: Symbol(:test_casts) = :test_casts
    <statTemp>$14: Symbol(:normal) = :normal
    <statTemp>$9: Symbol(:test_casts) = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestCasts), <statTemp>$13: Symbol(:test_casts), <statTemp>$14: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

