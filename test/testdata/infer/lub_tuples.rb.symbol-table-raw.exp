class <C <U <root>>> < <C <U Object>> ()
  class <S <C <U <root>>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> ()
    method <S <C <U <root>>> $1>#<N <U <static-init>> $CENSORED> (<blk>) @ Loc {file=test/testdata/infer/lub_tuples.rb start=2:1 end=16:4}
      argument <blk><block> @ Loc {file=test/testdata/infer/lub_tuples.rb start=??? end=???}
  module <C <U Opus>> < <C <U Sorbet>>::<C <U Private>>::<C <U Static>>::<C <U ImplicitModuleSuperclass>> () @ Loc {file=test/testdata/infer/lub_tuples.rb start=2:7 end=2:11}
    module <C <U Opus>>::<C <U CIBot>> < <C <U Sorbet>>::<C <U Private>>::<C <U Static>>::<C <U ImplicitModuleSuperclass>> () @ Loc {file=test/testdata/infer/lub_tuples.rb start=2:7 end=2:18}
      module <C <U Opus>>::<C <U CIBot>>::<C <U Tasks>> < <C <U Sorbet>>::<C <U Private>>::<C <U Static>>::<C <U ImplicitModuleSuperclass>> () @ Loc {file=test/testdata/infer/lub_tuples.rb start=2:7 end=2:25}
        class <C <U Opus>>::<C <U CIBot>>::<C <U Tasks>>::<C <U NotifySlackBuildComplete>> < <C <U Object>> () @ Loc {file=test/testdata/infer/lub_tuples.rb start=2:1 end=2:51}
          field <C <U Opus>>::<C <U CIBot>>::<C <U Tasks>>::<C <U NotifySlackBuildComplete>>#<U @determined_build_group_status_and_which> -> NilClass | TupleType {                 0 = TrueClass | FalseClass                 1 = String | NilClass               } @ Loc {file=test/testdata/infer/lub_tuples.rb start=6:5 end=6:45}
          method <C <U Opus>>::<C <U CIBot>>::<C <U Tasks>>::<C <U NotifySlackBuildComplete>>#<U cond> (<blk>) @ Loc {file=test/testdata/infer/lub_tuples.rb start=10:3 end=10:11}
            argument <blk><block> @ Loc {file=test/testdata/infer/lub_tuples.rb start=??? end=???}
          method <C <U Opus>>::<C <U CIBot>>::<C <U Tasks>>::<C <U NotifySlackBuildComplete>>#<U determined_build_group_status_and_which> : private (<blk>) -> TupleType {             0 = TrueClass | FalseClass             1 = String | NilClass           } @ Loc {file=test/testdata/infer/lub_tuples.rb start=13:11 end=13:54}
            argument <blk><block> -> T.untyped @ Loc {file=test/testdata/infer/lub_tuples.rb start=??? end=???}
          method <C <U Opus>>::<C <U CIBot>>::<C <U Tasks>>::<C <U NotifySlackBuildComplete>>#<U initialize> (<blk>) @ Loc {file=test/testdata/infer/lub_tuples.rb start=5:3 end=5:19}
            argument <blk><block> @ Loc {file=test/testdata/infer/lub_tuples.rb start=??? end=???}
        class <C <U Opus>>::<C <U CIBot>>::<C <U Tasks>>::<S <C <U NotifySlackBuildComplete>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> (<C <U Sig>>) @ Loc {file=test/testdata/infer/lub_tuples.rb start=2:1 end=2:51}
          type-member(+) <C <U Opus>>::<C <U CIBot>>::<C <U Tasks>>::<S <C <U NotifySlackBuildComplete>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<C <U Opus>>::<C <U CIBot>>::<C <U Tasks>>::<S <C <U NotifySlackBuildComplete>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=Opus::CIBot::Tasks::NotifySlackBuildComplete) @ Loc {file=test/testdata/infer/lub_tuples.rb start=2:1 end=2:51}
          method <C <U Opus>>::<C <U CIBot>>::<C <U Tasks>>::<S <C <U NotifySlackBuildComplete>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/infer/lub_tuples.rb start=2:1 end=16:4}
            argument <blk><block> @ Loc {file=test/testdata/infer/lub_tuples.rb start=??? end=???}
      class <C <U Opus>>::<C <U CIBot>>::<S <C <U Tasks>> $1>[<C <U <AttachedClass>>>] < <C <U Module>> () @ Loc {file=test/testdata/infer/lub_tuples.rb start=2:7 end=2:25}
        type-member(+) <C <U Opus>>::<C <U CIBot>>::<S <C <U Tasks>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<C <U Opus>>::<C <U CIBot>>::<S <C <U Tasks>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=Opus::CIBot::Tasks) @ Loc {file=test/testdata/infer/lub_tuples.rb start=2:7 end=2:25}
    class <C <U Opus>>::<S <C <U CIBot>> $1>[<C <U <AttachedClass>>>] < <C <U Module>> () @ Loc {file=test/testdata/infer/lub_tuples.rb start=2:7 end=2:18}
      type-member(+) <C <U Opus>>::<S <C <U CIBot>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<C <U Opus>>::<S <C <U CIBot>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=Opus::CIBot) @ Loc {file=test/testdata/infer/lub_tuples.rb start=2:7 end=2:18}
  class <S <C <U Opus>> $1>[<C <U <AttachedClass>>>] < <C <U Module>> () @ Loc {file=test/testdata/infer/lub_tuples.rb start=2:7 end=2:11}
    type-member(+) <S <C <U Opus>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U Opus>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=Opus) @ Loc {file=test/testdata/infer/lub_tuples.rb start=2:7 end=2:11}

