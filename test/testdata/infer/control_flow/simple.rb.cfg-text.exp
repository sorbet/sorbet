method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=5]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$6: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$8: T.class_of(ControlFlow) = alias <C ControlFlow>
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$8: T.class_of(ControlFlow))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::ControlFlow#orZero0 {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a -> (T.nilable(Integer) ? bb2 : bb3)

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=1](a: Integer):
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=2]():
    <returnTemp>$5: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$5: Integer(0)
    <unconditional> -> bb1

}

method ::ControlFlow#orZero0a {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: Integer = load_arg(a)
    a -> (Integer ? bb2 : bb3)

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=1](a: Integer):
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=0]():
    <returnTemp>$5 = 0
    <returnMethodTemp>$2 = return <returnTemp>$5
    <unconditional> -> bb1

}

method ::ControlFlow#orZero0n {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    b: T::Boolean = a: T.nilable(Integer).!()
    b -> (T::Boolean ? bb2 : bb3)

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=2]():
    <returnTemp>$6: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$6: Integer(0)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=1](a: Integer):
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional> -> bb1

}

method ::ControlFlow#orZero1n {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    <cfgAlias>$7: T.class_of(Integer) = alias <C Integer>
    <statTemp>$4: T::Boolean = a: T.nilable(Integer).is_a?(<cfgAlias>$7: T.class_of(Integer))
    b: T::Boolean = <statTemp>$4: T::Boolean.!()
    b -> (T::Boolean ? bb2 : bb3)

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=2]():
    <returnTemp>$9: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$9: Integer(0)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=1](a: Integer):
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional> -> bb1

}

method ::ControlFlow#orZero2 {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a -> (T.nilable(Integer) ? bb4 : bb3)

# backedges
# - bb4(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=-1]():
    a: Integer(0) = 0
    <unconditional> -> bb4

# backedges
# - bb0(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb4[rubyRegionId=0, firstDead=2](a: Integer):
    <returnMethodTemp>$2: Integer = a
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer
    <unconditional> -> bb1

}

method ::ControlFlow#orZero3 {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a -> (T.nilable(Integer) ? bb2 : bb3)

# backedges
# - bb5(rubyRegionId=0)
# - bb6(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1]():
    <statTemp>$5: Integer(1) = 1
    <statTemp>$6: Integer(2) = 2
    <ifTemp>$3: T::Boolean = <statTemp>$5: Integer(1).==(<statTemp>$6: Integer(2))
    <ifTemp>$3 -> (T::Boolean ? bb5 : bb6)

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=-1](a: NilClass):
    <ifTemp>$3: NilClass = a
    <ifTemp>$3 -> (NilClass ? bb5 : bb6)

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb5[rubyRegionId=0, firstDead=2]():
    <returnTemp>$7: Integer(1) = 1
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$7: Integer(1)
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb6[rubyRegionId=0, firstDead=2]():
    <returnTemp>$8: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$8: Integer(0)
    <unconditional> -> bb1

}

method ::ControlFlow#orZero3n {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a -> (T.nilable(Integer) ? bb2 : bb3)

# backedges
# - bb5(rubyRegionId=0)
# - bb6(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1]():
    <statTemp>$6: Integer(1) = 1
    <statTemp>$7: Integer(2) = 2
    <statTemp>$4: T::Boolean = <statTemp>$6: Integer(1).==(<statTemp>$7: Integer(2))
    <unconditional> -> bb4

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=-1](a: NilClass):
    <statTemp>$4: NilClass = a
    <unconditional> -> bb4

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb4[rubyRegionId=0, firstDead=-1](<statTemp>$4: T.nilable(T::Boolean)):
    b: T::Boolean = <statTemp>$4: T.nilable(T::Boolean).!()
    b -> (T::Boolean ? bb5 : bb6)

# backedges
# - bb4(rubyRegionId=0)
bb5[rubyRegionId=0, firstDead=2]():
    <returnTemp>$9: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$9: Integer(0)
    <unconditional> -> bb1

# backedges
# - bb4(rubyRegionId=0)
bb6[rubyRegionId=0, firstDead=2]():
    <returnTemp>$10: Integer(1) = 1
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$10: Integer(1)
    <unconditional> -> bb1

}

method ::ControlFlow#orZero4 {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a -> (T.nilable(Integer) ? bb2 : bb3)

# backedges
# - bb5(rubyRegionId=0)
# - bb6(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1](a: Integer):
    <ifTemp>$3: Integer = a
    <ifTemp>$3 -> (Integer ? bb5 : bb6)

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=-1](a: NilClass):
    <ifTemp>$3: TrueClass = true
    <ifTemp>$3 -> (TrueClass ? bb5 : bb6)

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb5[rubyRegionId=0, firstDead=1](a: T.nilable(Integer)):
    <returnMethodTemp>$2: T.noreturn = return a: T.nilable(Integer)
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb6[rubyRegionId=0, firstDead=0]():
    <returnTemp>$6 = 0
    <returnMethodTemp>$2 = return <returnTemp>$6
    <unconditional> -> bb1

}

method ::ControlFlow#orZero5 {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a -> (T.nilable(Integer) ? bb2 : bb3)

# backedges
# - bb5(rubyRegionId=0)
# - bb6(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1](a: Integer):
    <ifTemp>$3: TrueClass = true
    <ifTemp>$3 -> (TrueClass ? bb5 : bb6)

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=-1](a: NilClass):
    <ifTemp>$3: NilClass = a
    <ifTemp>$3 -> (NilClass ? bb5 : bb6)

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb5[rubyRegionId=0, firstDead=1](a: Integer):
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb6[rubyRegionId=0, firstDead=2]():
    <returnTemp>$6: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$6: Integer(0)
    <unconditional> -> bb1

}

method ::<Class:ControlFlow>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(ControlFlow) = cast(<self>: NilClass, T.class_of(ControlFlow));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$7: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))
    <selfRestore>$8: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb2

# backedges
# - bb35(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(ControlFlow)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$7, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$8
    <cfgAlias>$26: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$28: Sorbet::Private::Static::Void = <cfgAlias>$26: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))
    <selfRestore>$29: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb6

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$13: Symbol(:a) = :a
    <cfgAlias>$16: T.class_of(T) = alias <C T>
    <cfgAlias>$18: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$20: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$14: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$16: T.class_of(T).any(<cfgAlias>$18: T.class_of(Integer), <cfgAlias>$20: T.class_of(NilClass))
    <statTemp>$11: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$13: Symbol(:a), <hashTemp>$14: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$22: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$10: T::Private::Methods::DeclBuilder = <statTemp>$11: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$22: T.class_of(Integer))
    <blockReturnTemp>$23: T.noreturn = blockreturn<sig> <blockReturnTemp>$10: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
# - bb9(rubyRegionId=2)
bb6[rubyRegionId=2, firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$28: Sorbet::Private::Static::Void, <selfRestore>$29: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb9 : bb7)

# backedges
# - bb6(rubyRegionId=2)
bb7[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$28: Sorbet::Private::Static::Void, <selfRestore>$29: T.class_of(ControlFlow)):
    <statTemp>$24: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$28, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$29
    <cfgAlias>$42: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$44: Sorbet::Private::Static::Void = <cfgAlias>$42: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))
    <selfRestore>$45: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb10

# backedges
# - bb6(rubyRegionId=2)
bb9[rubyRegionId=2, firstDead=7](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$28: Sorbet::Private::Static::Void, <selfRestore>$29: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$34: Symbol(:a) = :a
    <cfgAlias>$36: T.class_of(Integer) = alias <C Integer>
    <statTemp>$32: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$34: Symbol(:a), <cfgAlias>$36: T.class_of(Integer))
    <cfgAlias>$38: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$31: T::Private::Methods::DeclBuilder = <statTemp>$32: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$38: T.class_of(Integer))
    <blockReturnTemp>$39: T.noreturn = blockreturn<sig> <blockReturnTemp>$31: T::Private::Methods::DeclBuilder
    <unconditional> -> bb6

# backedges
# - bb7(rubyRegionId=0)
# - bb13(rubyRegionId=3)
bb10[rubyRegionId=3, firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$44: Sorbet::Private::Static::Void, <selfRestore>$45: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb13 : bb11)

# backedges
# - bb10(rubyRegionId=3)
bb11[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$44: Sorbet::Private::Static::Void, <selfRestore>$45: T.class_of(ControlFlow)):
    <statTemp>$40: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$44, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$45
    <cfgAlias>$63: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$65: Sorbet::Private::Static::Void = <cfgAlias>$63: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))
    <selfRestore>$66: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb14

# backedges
# - bb10(rubyRegionId=3)
bb13[rubyRegionId=3, firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$44: Sorbet::Private::Static::Void, <selfRestore>$45: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$50: Symbol(:a) = :a
    <cfgAlias>$53: T.class_of(T) = alias <C T>
    <cfgAlias>$55: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$57: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$51: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$53: T.class_of(T).any(<cfgAlias>$55: T.class_of(Integer), <cfgAlias>$57: T.class_of(NilClass))
    <statTemp>$48: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$50: Symbol(:a), <hashTemp>$51: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$59: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$47: T::Private::Methods::DeclBuilder = <statTemp>$48: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$59: T.class_of(Integer))
    <blockReturnTemp>$60: T.noreturn = blockreturn<sig> <blockReturnTemp>$47: T::Private::Methods::DeclBuilder
    <unconditional> -> bb10

# backedges
# - bb11(rubyRegionId=0)
# - bb17(rubyRegionId=4)
bb14[rubyRegionId=4, firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$65: Sorbet::Private::Static::Void, <selfRestore>$66: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb17 : bb15)

# backedges
# - bb14(rubyRegionId=4)
bb15[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$65: Sorbet::Private::Static::Void, <selfRestore>$66: T.class_of(ControlFlow)):
    <statTemp>$61: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$65, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$66
    <cfgAlias>$84: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$86: Sorbet::Private::Static::Void = <cfgAlias>$84: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))
    <selfRestore>$87: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb18

# backedges
# - bb14(rubyRegionId=4)
bb17[rubyRegionId=4, firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$65: Sorbet::Private::Static::Void, <selfRestore>$66: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$71: Symbol(:a) = :a
    <cfgAlias>$74: T.class_of(T) = alias <C T>
    <cfgAlias>$76: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$78: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$72: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$74: T.class_of(T).any(<cfgAlias>$76: T.class_of(Integer), <cfgAlias>$78: T.class_of(NilClass))
    <statTemp>$69: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$71: Symbol(:a), <hashTemp>$72: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$80: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$68: T::Private::Methods::DeclBuilder = <statTemp>$69: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$80: T.class_of(Integer))
    <blockReturnTemp>$81: T.noreturn = blockreturn<sig> <blockReturnTemp>$68: T::Private::Methods::DeclBuilder
    <unconditional> -> bb14

# backedges
# - bb15(rubyRegionId=0)
# - bb21(rubyRegionId=5)
bb18[rubyRegionId=5, firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$86: Sorbet::Private::Static::Void, <selfRestore>$87: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb21 : bb19)

# backedges
# - bb18(rubyRegionId=5)
bb19[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$86: Sorbet::Private::Static::Void, <selfRestore>$87: T.class_of(ControlFlow)):
    <statTemp>$82: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$86, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$87
    <cfgAlias>$105: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$107: Sorbet::Private::Static::Void = <cfgAlias>$105: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))
    <selfRestore>$108: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb22

# backedges
# - bb18(rubyRegionId=5)
bb21[rubyRegionId=5, firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$86: Sorbet::Private::Static::Void, <selfRestore>$87: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$92: Symbol(:a) = :a
    <cfgAlias>$95: T.class_of(T) = alias <C T>
    <cfgAlias>$97: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$99: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$93: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$95: T.class_of(T).any(<cfgAlias>$97: T.class_of(Integer), <cfgAlias>$99: T.class_of(NilClass))
    <statTemp>$90: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$92: Symbol(:a), <hashTemp>$93: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$101: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$89: T::Private::Methods::DeclBuilder = <statTemp>$90: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$101: T.class_of(Integer))
    <blockReturnTemp>$102: T.noreturn = blockreturn<sig> <blockReturnTemp>$89: T::Private::Methods::DeclBuilder
    <unconditional> -> bb18

# backedges
# - bb19(rubyRegionId=0)
# - bb25(rubyRegionId=6)
bb22[rubyRegionId=6, firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$107: Sorbet::Private::Static::Void, <selfRestore>$108: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb25 : bb23)

# backedges
# - bb22(rubyRegionId=6)
bb23[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$107: Sorbet::Private::Static::Void, <selfRestore>$108: T.class_of(ControlFlow)):
    <statTemp>$103: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$107, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$108
    <cfgAlias>$126: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$128: Sorbet::Private::Static::Void = <cfgAlias>$126: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))
    <selfRestore>$129: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb26

# backedges
# - bb22(rubyRegionId=6)
bb25[rubyRegionId=6, firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$107: Sorbet::Private::Static::Void, <selfRestore>$108: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$113: Symbol(:a) = :a
    <cfgAlias>$116: T.class_of(T) = alias <C T>
    <cfgAlias>$118: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$120: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$114: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$116: T.class_of(T).any(<cfgAlias>$118: T.class_of(Integer), <cfgAlias>$120: T.class_of(NilClass))
    <statTemp>$111: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$113: Symbol(:a), <hashTemp>$114: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$122: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$110: T::Private::Methods::DeclBuilder = <statTemp>$111: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$122: T.class_of(Integer))
    <blockReturnTemp>$123: T.noreturn = blockreturn<sig> <blockReturnTemp>$110: T::Private::Methods::DeclBuilder
    <unconditional> -> bb22

# backedges
# - bb23(rubyRegionId=0)
# - bb29(rubyRegionId=7)
bb26[rubyRegionId=7, firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$128: Sorbet::Private::Static::Void, <selfRestore>$129: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb29 : bb27)

# backedges
# - bb26(rubyRegionId=7)
bb27[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$128: Sorbet::Private::Static::Void, <selfRestore>$129: T.class_of(ControlFlow)):
    <statTemp>$124: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$128, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$129
    <cfgAlias>$147: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$149: Sorbet::Private::Static::Void = <cfgAlias>$147: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))
    <selfRestore>$150: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb30

# backedges
# - bb26(rubyRegionId=7)
bb29[rubyRegionId=7, firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$128: Sorbet::Private::Static::Void, <selfRestore>$129: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$134: Symbol(:a) = :a
    <cfgAlias>$137: T.class_of(T) = alias <C T>
    <cfgAlias>$139: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$141: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$135: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$137: T.class_of(T).any(<cfgAlias>$139: T.class_of(Integer), <cfgAlias>$141: T.class_of(NilClass))
    <statTemp>$132: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$134: Symbol(:a), <hashTemp>$135: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$143: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$131: T::Private::Methods::DeclBuilder = <statTemp>$132: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$143: T.class_of(Integer))
    <blockReturnTemp>$144: T.noreturn = blockreturn<sig> <blockReturnTemp>$131: T::Private::Methods::DeclBuilder
    <unconditional> -> bb26

# backedges
# - bb27(rubyRegionId=0)
# - bb33(rubyRegionId=8)
bb30[rubyRegionId=8, firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$149: Sorbet::Private::Static::Void, <selfRestore>$150: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb33 : bb31)

# backedges
# - bb30(rubyRegionId=8)
bb31[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$149: Sorbet::Private::Static::Void, <selfRestore>$150: T.class_of(ControlFlow)):
    <statTemp>$145: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$149, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$150
    <cfgAlias>$168: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$170: Sorbet::Private::Static::Void = <cfgAlias>$168: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))
    <selfRestore>$171: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb34

# backedges
# - bb30(rubyRegionId=8)
bb33[rubyRegionId=8, firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$149: Sorbet::Private::Static::Void, <selfRestore>$150: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$155: Symbol(:a) = :a
    <cfgAlias>$158: T.class_of(T) = alias <C T>
    <cfgAlias>$160: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$162: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$156: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$158: T.class_of(T).any(<cfgAlias>$160: T.class_of(Integer), <cfgAlias>$162: T.class_of(NilClass))
    <statTemp>$153: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$155: Symbol(:a), <hashTemp>$156: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$164: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$152: T::Private::Methods::DeclBuilder = <statTemp>$153: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$164: T.class_of(Integer))
    <blockReturnTemp>$165: T.noreturn = blockreturn<sig> <blockReturnTemp>$152: T::Private::Methods::DeclBuilder
    <unconditional> -> bb30

# backedges
# - bb31(rubyRegionId=0)
# - bb37(rubyRegionId=9)
bb34[rubyRegionId=9, firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$170: Sorbet::Private::Static::Void, <selfRestore>$171: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb37 : bb35)

# backedges
# - bb34(rubyRegionId=9)
bb35[rubyRegionId=0, firstDead=6](<block-pre-call-temp>$170: Sorbet::Private::Static::Void, <selfRestore>$171: T.class_of(ControlFlow)):
    <statTemp>$166: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$170, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$171
    <cfgAlias>$190: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$192: T.class_of(T) = alias <C T>
    <statTemp>$187: T.class_of(ControlFlow) = <self>: T.class_of(ControlFlow).extend(<cfgAlias>$190: T.class_of(T::Sig))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb34(rubyRegionId=9)
bb37[rubyRegionId=9, firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$170: Sorbet::Private::Static::Void, <selfRestore>$171: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$176: Symbol(:a) = :a
    <cfgAlias>$179: T.class_of(T) = alias <C T>
    <cfgAlias>$181: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$183: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$177: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$179: T.class_of(T).any(<cfgAlias>$181: T.class_of(Integer), <cfgAlias>$183: T.class_of(NilClass))
    <statTemp>$174: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$176: Symbol(:a), <hashTemp>$177: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$185: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$173: T::Private::Methods::DeclBuilder = <statTemp>$174: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$185: T.class_of(Integer))
    <blockReturnTemp>$186: T.noreturn = blockreturn<sig> <blockReturnTemp>$173: T::Private::Methods::DeclBuilder
    <unconditional> -> bb34

}

