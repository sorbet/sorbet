method ::<Class:<root>>#<static-init> {

bb0[firstDead=2]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0
bb1[firstDead=-1]():
    <unconditional> -> bb1

}

method ::ControlFlow#orZero0 {

bb0[firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a -> (T.nilable(Integer) ? bb2 : bb3)

# backedges
# - bb2
# - bb3
bb1[firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0
bb2[firstDead=1](a: Integer):
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional> -> bb1

# backedges
# - bb0
bb3[firstDead=2]():
    <returnTemp>$5: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$5: Integer(0)
    <unconditional> -> bb1

}

method ::ControlFlow#orZero0a {

bb0[firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: Integer = load_arg(a)
    a -> (Integer ? bb2 : bb3)

# backedges
# - bb2
# - bb3
bb1[firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0
bb2[firstDead=1](a: Integer):
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional> -> bb1

# backedges
# - bb0
bb3[firstDead=0]():
    <returnTemp>$5 = 0
    <returnMethodTemp>$2 = return <returnTemp>$5
    <unconditional> -> bb1

}

method ::ControlFlow#orZero0n {

bb0[firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    b: T::Boolean = a: T.nilable(Integer).!()
    b -> (T::Boolean ? bb2 : bb3)

# backedges
# - bb2
# - bb3
bb1[firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0
bb2[firstDead=2]():
    <returnTemp>$6: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$6: Integer(0)
    <unconditional> -> bb1

# backedges
# - bb0
bb3[firstDead=1](a: Integer):
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional> -> bb1

}

method ::ControlFlow#orZero1n {

bb0[firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    <cfgAlias>$7: T.class_of(Integer) = alias <C Integer>
    <statTemp>$4: T::Boolean = a: T.nilable(Integer).is_a?(<cfgAlias>$7: T.class_of(Integer))
    b: T::Boolean = <statTemp>$4: T::Boolean.!()
    b -> (T::Boolean ? bb2 : bb3)

# backedges
# - bb2
# - bb3
bb1[firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0
bb2[firstDead=2]():
    <returnTemp>$9: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$9: Integer(0)
    <unconditional> -> bb1

# backedges
# - bb0
bb3[firstDead=1](a: Integer):
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional> -> bb1

}

method ::ControlFlow#orZero2 {

bb0[firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a -> (T.nilable(Integer) ? bb4 : bb3)

# backedges
# - bb4
bb1[firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0
bb3[firstDead=-1]():
    a: Integer(0) = 0
    <unconditional> -> bb4

# backedges
# - bb0
# - bb3
bb4[firstDead=2](a: Integer):
    <returnMethodTemp>$2: Integer = a
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer
    <unconditional> -> bb1

}

method ::ControlFlow#orZero3 {

bb0[firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a -> (T.nilable(Integer) ? bb2 : bb3)

# backedges
# - bb5
# - bb6
bb1[firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0
bb2[firstDead=-1]():
    <statTemp>$5: Integer(1) = 1
    <statTemp>$6: Integer(2) = 2
    <ifTemp>$3: T::Boolean = <statTemp>$5: Integer(1).==(<statTemp>$6: Integer(2))
    <ifTemp>$3 -> (T::Boolean ? bb5 : bb6)

# backedges
# - bb0
bb3[firstDead=-1](a: NilClass):
    <ifTemp>$3: NilClass = a
    <ifTemp>$3 -> (NilClass ? bb5 : bb6)

# backedges
# - bb2
# - bb3
bb5[firstDead=2]():
    <returnTemp>$7: Integer(1) = 1
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$7: Integer(1)
    <unconditional> -> bb1

# backedges
# - bb2
# - bb3
bb6[firstDead=2]():
    <returnTemp>$8: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$8: Integer(0)
    <unconditional> -> bb1

}

method ::ControlFlow#orZero3n {

bb0[firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a -> (T.nilable(Integer) ? bb2 : bb3)

# backedges
# - bb5
# - bb6
bb1[firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0
bb2[firstDead=-1]():
    <statTemp>$6: Integer(1) = 1
    <statTemp>$7: Integer(2) = 2
    <statTemp>$4: T::Boolean = <statTemp>$6: Integer(1).==(<statTemp>$7: Integer(2))
    <unconditional> -> bb4

# backedges
# - bb0
bb3[firstDead=-1](a: NilClass):
    <statTemp>$4: NilClass = a
    <unconditional> -> bb4

# backedges
# - bb2
# - bb3
bb4[firstDead=-1](<statTemp>$4: T.nilable(T::Boolean)):
    b: T::Boolean = <statTemp>$4: T.nilable(T::Boolean).!()
    b -> (T::Boolean ? bb5 : bb6)

# backedges
# - bb4
bb5[firstDead=2]():
    <returnTemp>$9: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$9: Integer(0)
    <unconditional> -> bb1

# backedges
# - bb4
bb6[firstDead=2]():
    <returnTemp>$10: Integer(1) = 1
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$10: Integer(1)
    <unconditional> -> bb1

}

method ::ControlFlow#orZero4 {

bb0[firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a -> (T.nilable(Integer) ? bb2 : bb3)

# backedges
# - bb5
# - bb6
bb1[firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0
bb2[firstDead=-1](a: Integer):
    <ifTemp>$3: Integer = a
    <ifTemp>$3 -> (Integer ? bb5 : bb6)

# backedges
# - bb0
bb3[firstDead=-1](a: NilClass):
    <ifTemp>$3: TrueClass = true
    <ifTemp>$3 -> (TrueClass ? bb5 : bb6)

# backedges
# - bb2
# - bb3
bb5[firstDead=1](a: T.nilable(Integer)):
    <returnMethodTemp>$2: T.noreturn = return a: T.nilable(Integer)
    <unconditional> -> bb1

# backedges
# - bb2
# - bb3
bb6[firstDead=0]():
    <returnTemp>$6 = 0
    <returnMethodTemp>$2 = return <returnTemp>$6
    <unconditional> -> bb1

}

method ::ControlFlow#orZero5 {

bb0[firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a -> (T.nilable(Integer) ? bb2 : bb3)

# backedges
# - bb5
# - bb6
bb1[firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0
bb2[firstDead=-1](a: Integer):
    <ifTemp>$3: TrueClass = true
    <ifTemp>$3 -> (TrueClass ? bb5 : bb6)

# backedges
# - bb0
bb3[firstDead=-1](a: NilClass):
    <ifTemp>$3: NilClass = a
    <ifTemp>$3 -> (NilClass ? bb5 : bb6)

# backedges
# - bb2
# - bb3
bb5[firstDead=1](a: Integer):
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional> -> bb1

# backedges
# - bb2
# - bb3
bb6[firstDead=2]():
    <returnTemp>$6: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$6: Integer(0)
    <unconditional> -> bb1

}

method ::<Class:ControlFlow>#<static-init> {

bb0[firstDead=-1]():
    <self>: T.class_of(ControlFlow) = cast(<self>: NilClass, T.class_of(ControlFlow));
    <block-pre-call-temp>$5: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()
    <selfRestore>$6: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb2

# backedges
# - bb35
bb1[firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0
# - bb5
bb2[firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2
bb3[firstDead=-1](<block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: T.class_of(ControlFlow)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$5, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$6
    <block-pre-call-temp>$23: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()
    <selfRestore>$24: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb6

# backedges
# - bb2
bb5[firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$10: Symbol(:a) = :a
    <cfgAlias>$13: T.class_of(T) = alias <C T>
    <cfgAlias>$15: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$17: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$11: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$13: T.class_of(T).any(<cfgAlias>$15: T.class_of(Integer), <cfgAlias>$17: T.class_of(NilClass))
    <statTemp>$8: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$10: Symbol(:a), <hashTemp>$11: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$19: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$7: T::Private::Methods::DeclBuilder = <statTemp>$8: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$19: T.class_of(Integer))
    <blockReturnTemp>$20: T.noreturn = blockreturn<sig> <blockReturnTemp>$7: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

# backedges
# - bb3
# - bb9
bb6[firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$23: Sorbet::Private::Static::Void, <selfRestore>$24: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb9 : bb7)

# backedges
# - bb6
bb7[firstDead=-1](<block-pre-call-temp>$23: Sorbet::Private::Static::Void, <selfRestore>$24: T.class_of(ControlFlow)):
    <statTemp>$21: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$23, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$24
    <block-pre-call-temp>$36: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()
    <selfRestore>$37: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb10

# backedges
# - bb6
bb9[firstDead=7](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$23: Sorbet::Private::Static::Void, <selfRestore>$24: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$28: Symbol(:a) = :a
    <cfgAlias>$30: T.class_of(Integer) = alias <C Integer>
    <statTemp>$26: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$28: Symbol(:a), <cfgAlias>$30: T.class_of(Integer))
    <cfgAlias>$32: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$25: T::Private::Methods::DeclBuilder = <statTemp>$26: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$32: T.class_of(Integer))
    <blockReturnTemp>$33: T.noreturn = blockreturn<sig> <blockReturnTemp>$25: T::Private::Methods::DeclBuilder
    <unconditional> -> bb6

# backedges
# - bb7
# - bb13
bb10[firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$36: Sorbet::Private::Static::Void, <selfRestore>$37: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb13 : bb11)

# backedges
# - bb10
bb11[firstDead=-1](<block-pre-call-temp>$36: Sorbet::Private::Static::Void, <selfRestore>$37: T.class_of(ControlFlow)):
    <statTemp>$34: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$36, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$37
    <block-pre-call-temp>$54: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()
    <selfRestore>$55: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb14

# backedges
# - bb10
bb13[firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$36: Sorbet::Private::Static::Void, <selfRestore>$37: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$41: Symbol(:a) = :a
    <cfgAlias>$44: T.class_of(T) = alias <C T>
    <cfgAlias>$46: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$48: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$42: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$44: T.class_of(T).any(<cfgAlias>$46: T.class_of(Integer), <cfgAlias>$48: T.class_of(NilClass))
    <statTemp>$39: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$41: Symbol(:a), <hashTemp>$42: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$50: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$38: T::Private::Methods::DeclBuilder = <statTemp>$39: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$50: T.class_of(Integer))
    <blockReturnTemp>$51: T.noreturn = blockreturn<sig> <blockReturnTemp>$38: T::Private::Methods::DeclBuilder
    <unconditional> -> bb10

# backedges
# - bb11
# - bb17
bb14[firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$54: Sorbet::Private::Static::Void, <selfRestore>$55: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb17 : bb15)

# backedges
# - bb14
bb15[firstDead=-1](<block-pre-call-temp>$54: Sorbet::Private::Static::Void, <selfRestore>$55: T.class_of(ControlFlow)):
    <statTemp>$52: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$54, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$55
    <block-pre-call-temp>$72: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()
    <selfRestore>$73: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb18

# backedges
# - bb14
bb17[firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$54: Sorbet::Private::Static::Void, <selfRestore>$55: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$59: Symbol(:a) = :a
    <cfgAlias>$62: T.class_of(T) = alias <C T>
    <cfgAlias>$64: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$66: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$60: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$62: T.class_of(T).any(<cfgAlias>$64: T.class_of(Integer), <cfgAlias>$66: T.class_of(NilClass))
    <statTemp>$57: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$59: Symbol(:a), <hashTemp>$60: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$68: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$56: T::Private::Methods::DeclBuilder = <statTemp>$57: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$68: T.class_of(Integer))
    <blockReturnTemp>$69: T.noreturn = blockreturn<sig> <blockReturnTemp>$56: T::Private::Methods::DeclBuilder
    <unconditional> -> bb14

# backedges
# - bb15
# - bb21
bb18[firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$72: Sorbet::Private::Static::Void, <selfRestore>$73: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb21 : bb19)

# backedges
# - bb18
bb19[firstDead=-1](<block-pre-call-temp>$72: Sorbet::Private::Static::Void, <selfRestore>$73: T.class_of(ControlFlow)):
    <statTemp>$70: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$72, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$73
    <block-pre-call-temp>$90: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()
    <selfRestore>$91: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb22

# backedges
# - bb18
bb21[firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$72: Sorbet::Private::Static::Void, <selfRestore>$73: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$77: Symbol(:a) = :a
    <cfgAlias>$80: T.class_of(T) = alias <C T>
    <cfgAlias>$82: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$84: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$78: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$80: T.class_of(T).any(<cfgAlias>$82: T.class_of(Integer), <cfgAlias>$84: T.class_of(NilClass))
    <statTemp>$75: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$77: Symbol(:a), <hashTemp>$78: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$86: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$74: T::Private::Methods::DeclBuilder = <statTemp>$75: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$86: T.class_of(Integer))
    <blockReturnTemp>$87: T.noreturn = blockreturn<sig> <blockReturnTemp>$74: T::Private::Methods::DeclBuilder
    <unconditional> -> bb18

# backedges
# - bb19
# - bb25
bb22[firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$90: Sorbet::Private::Static::Void, <selfRestore>$91: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb25 : bb23)

# backedges
# - bb22
bb23[firstDead=-1](<block-pre-call-temp>$90: Sorbet::Private::Static::Void, <selfRestore>$91: T.class_of(ControlFlow)):
    <statTemp>$88: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$90, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$91
    <block-pre-call-temp>$108: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()
    <selfRestore>$109: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb26

# backedges
# - bb22
bb25[firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$90: Sorbet::Private::Static::Void, <selfRestore>$91: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$95: Symbol(:a) = :a
    <cfgAlias>$98: T.class_of(T) = alias <C T>
    <cfgAlias>$100: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$102: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$96: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$98: T.class_of(T).any(<cfgAlias>$100: T.class_of(Integer), <cfgAlias>$102: T.class_of(NilClass))
    <statTemp>$93: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$95: Symbol(:a), <hashTemp>$96: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$104: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$92: T::Private::Methods::DeclBuilder = <statTemp>$93: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$104: T.class_of(Integer))
    <blockReturnTemp>$105: T.noreturn = blockreturn<sig> <blockReturnTemp>$92: T::Private::Methods::DeclBuilder
    <unconditional> -> bb22

# backedges
# - bb23
# - bb29
bb26[firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$108: Sorbet::Private::Static::Void, <selfRestore>$109: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb29 : bb27)

# backedges
# - bb26
bb27[firstDead=-1](<block-pre-call-temp>$108: Sorbet::Private::Static::Void, <selfRestore>$109: T.class_of(ControlFlow)):
    <statTemp>$106: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$108, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$109
    <block-pre-call-temp>$126: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()
    <selfRestore>$127: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb30

# backedges
# - bb26
bb29[firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$108: Sorbet::Private::Static::Void, <selfRestore>$109: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$113: Symbol(:a) = :a
    <cfgAlias>$116: T.class_of(T) = alias <C T>
    <cfgAlias>$118: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$120: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$114: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$116: T.class_of(T).any(<cfgAlias>$118: T.class_of(Integer), <cfgAlias>$120: T.class_of(NilClass))
    <statTemp>$111: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$113: Symbol(:a), <hashTemp>$114: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$122: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$110: T::Private::Methods::DeclBuilder = <statTemp>$111: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$122: T.class_of(Integer))
    <blockReturnTemp>$123: T.noreturn = blockreturn<sig> <blockReturnTemp>$110: T::Private::Methods::DeclBuilder
    <unconditional> -> bb26

# backedges
# - bb27
# - bb33
bb30[firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$126: Sorbet::Private::Static::Void, <selfRestore>$127: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb33 : bb31)

# backedges
# - bb30
bb31[firstDead=-1](<block-pre-call-temp>$126: Sorbet::Private::Static::Void, <selfRestore>$127: T.class_of(ControlFlow)):
    <statTemp>$124: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$126, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$127
    <block-pre-call-temp>$144: Sorbet::Private::Static::Void = <self>: T.class_of(ControlFlow).sig()
    <selfRestore>$145: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb34

# backedges
# - bb30
bb33[firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$126: Sorbet::Private::Static::Void, <selfRestore>$127: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$131: Symbol(:a) = :a
    <cfgAlias>$134: T.class_of(T) = alias <C T>
    <cfgAlias>$136: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$138: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$132: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$134: T.class_of(T).any(<cfgAlias>$136: T.class_of(Integer), <cfgAlias>$138: T.class_of(NilClass))
    <statTemp>$129: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$131: Symbol(:a), <hashTemp>$132: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$140: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$128: T::Private::Methods::DeclBuilder = <statTemp>$129: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$140: T.class_of(Integer))
    <blockReturnTemp>$141: T.noreturn = blockreturn<sig> <blockReturnTemp>$128: T::Private::Methods::DeclBuilder
    <unconditional> -> bb30

# backedges
# - bb31
# - bb37
bb34[firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$144: Sorbet::Private::Static::Void, <selfRestore>$145: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb37 : bb35)

# backedges
# - bb34
bb35[firstDead=6](<block-pre-call-temp>$144: Sorbet::Private::Static::Void, <selfRestore>$145: T.class_of(ControlFlow)):
    <statTemp>$142: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$144, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$145
    <cfgAlias>$163: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$165: T.class_of(T) = alias <C T>
    <statTemp>$160: T.class_of(ControlFlow) = <self>: T.class_of(ControlFlow).extend(<cfgAlias>$163: T.class_of(T::Sig))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb34
bb37[firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$144: Sorbet::Private::Static::Void, <selfRestore>$145: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$149: Symbol(:a) = :a
    <cfgAlias>$152: T.class_of(T) = alias <C T>
    <cfgAlias>$154: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$156: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$150: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$152: T.class_of(T).any(<cfgAlias>$154: T.class_of(Integer), <cfgAlias>$156: T.class_of(NilClass))
    <statTemp>$147: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$149: Symbol(:a), <hashTemp>$150: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$158: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$146: T::Private::Methods::DeclBuilder = <statTemp>$147: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$158: T.class_of(Integer))
    <blockReturnTemp>$159: T.noreturn = blockreturn<sig> <blockReturnTemp>$146: T::Private::Methods::DeclBuilder
    <unconditional> -> bb34

}

