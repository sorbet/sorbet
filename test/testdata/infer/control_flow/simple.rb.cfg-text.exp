method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=5]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$6: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$8: T.class_of(ControlFlow) = alias <C ControlFlow>
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$8: T.class_of(ControlFlow))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::ControlFlow#orZero0 {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a -> (T.nilable(Integer) ? bb2 : bb3)

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=1](a: Integer):
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=2]():
    <returnTemp>$5: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$5: Integer(0)
    <unconditional> -> bb1

}

method ::ControlFlow#orZero0a {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: Integer = load_arg(a)
    a -> (Integer ? bb2 : bb3)

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=1](a: Integer):
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=0]():
    <returnTemp>$5 = 0
    <returnMethodTemp>$2 = return <returnTemp>$5
    <unconditional> -> bb1

}

method ::ControlFlow#orZero0n {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    b: T::Boolean = a: T.nilable(Integer).!()
    b -> (T::Boolean ? bb2 : bb3)

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=2]():
    <returnTemp>$6: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$6: Integer(0)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=1](a: Integer):
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional> -> bb1

}

method ::ControlFlow#orZero1n {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    <cfgAlias>$7: T.class_of(Integer) = alias <C Integer>
    <statTemp>$4: T::Boolean = a: T.nilable(Integer).is_a?(<cfgAlias>$7: T.class_of(Integer))
    b: T::Boolean = <statTemp>$4: T::Boolean.!()
    b -> (T::Boolean ? bb2 : bb3)

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=2]():
    <returnTemp>$9: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$9: Integer(0)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=1](a: Integer):
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional> -> bb1

}

method ::ControlFlow#orZero2 {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a -> (T.nilable(Integer) ? bb4 : bb3)

# backedges
# - bb4(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=-1]():
    a: Integer(0) = 0
    <unconditional> -> bb4

# backedges
# - bb0(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb4[rubyRegionId=0, firstDead=2](a: Integer):
    <returnMethodTemp>$2: Integer = a
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer
    <unconditional> -> bb1

}

method ::ControlFlow#orZero3 {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a -> (T.nilable(Integer) ? bb2 : bb3)

# backedges
# - bb5(rubyRegionId=0)
# - bb6(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1]():
    <statTemp>$5: Integer(1) = 1
    <statTemp>$6: Integer(2) = 2
    <ifTemp>$3: T::Boolean = <statTemp>$5: Integer(1).==(<statTemp>$6: Integer(2))
    <ifTemp>$3 -> (T::Boolean ? bb5 : bb6)

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=-1](a: NilClass):
    <ifTemp>$3: NilClass = a
    <ifTemp>$3 -> (NilClass ? bb5 : bb6)

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb5[rubyRegionId=0, firstDead=2]():
    <returnTemp>$7: Integer(1) = 1
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$7: Integer(1)
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb6[rubyRegionId=0, firstDead=2]():
    <returnTemp>$8: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$8: Integer(0)
    <unconditional> -> bb1

}

method ::ControlFlow#orZero3n {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a -> (T.nilable(Integer) ? bb2 : bb3)

# backedges
# - bb5(rubyRegionId=0)
# - bb6(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1]():
    <statTemp>$6: Integer(1) = 1
    <statTemp>$7: Integer(2) = 2
    <statTemp>$4: T::Boolean = <statTemp>$6: Integer(1).==(<statTemp>$7: Integer(2))
    <unconditional> -> bb4

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=-1](a: NilClass):
    <statTemp>$4: NilClass = a
    <unconditional> -> bb4

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb4[rubyRegionId=0, firstDead=-1](<statTemp>$4: T.nilable(T::Boolean)):
    b: T::Boolean = <statTemp>$4: T.nilable(T::Boolean).!()
    b -> (T::Boolean ? bb5 : bb6)

# backedges
# - bb4(rubyRegionId=0)
bb5[rubyRegionId=0, firstDead=2]():
    <returnTemp>$9: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$9: Integer(0)
    <unconditional> -> bb1

# backedges
# - bb4(rubyRegionId=0)
bb6[rubyRegionId=0, firstDead=2]():
    <returnTemp>$10: Integer(1) = 1
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$10: Integer(1)
    <unconditional> -> bb1

}

method ::ControlFlow#orZero4 {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a -> (T.nilable(Integer) ? bb2 : bb3)

# backedges
# - bb5(rubyRegionId=0)
# - bb6(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1](a: Integer):
    <ifTemp>$3: Integer = a
    <ifTemp>$3 -> (Integer ? bb5 : bb6)

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=-1](a: NilClass):
    <ifTemp>$3: TrueClass = true
    <ifTemp>$3 -> (TrueClass ? bb5 : bb6)

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb5[rubyRegionId=0, firstDead=1](a: T.nilable(Integer)):
    <returnMethodTemp>$2: T.noreturn = return a: T.nilable(Integer)
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb6[rubyRegionId=0, firstDead=0]():
    <returnTemp>$6 = 0
    <returnMethodTemp>$2 = return <returnTemp>$6
    <unconditional> -> bb1

}

method ::ControlFlow#orZero5 {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a -> (T.nilable(Integer) ? bb2 : bb3)

# backedges
# - bb5(rubyRegionId=0)
# - bb6(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1](<returnMethodTemp>$2):
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1](a: Integer):
    <ifTemp>$3: TrueClass = true
    <ifTemp>$3 -> (TrueClass ? bb5 : bb6)

# backedges
# - bb0(rubyRegionId=0)
bb3[rubyRegionId=0, firstDead=-1](a: NilClass):
    <ifTemp>$3: NilClass = a
    <ifTemp>$3 -> (NilClass ? bb5 : bb6)

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb5[rubyRegionId=0, firstDead=1](a: Integer):
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=0)
# - bb3(rubyRegionId=0)
bb6[rubyRegionId=0, firstDead=2]():
    <returnTemp>$6: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$6: Integer(0)
    <unconditional> -> bb1

}

method ::<Class:ControlFlow>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(ControlFlow) = cast(<self>: NilClass, T.class_of(ControlFlow));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$7: FalseClass = false
    <statTemp>$8: Symbol(:orZero0) = :orZero0
    <block-pre-call-temp>$9: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(ControlFlow), <statTemp>$7: FalseClass, <statTemp>$8: Symbol(:orZero0))
    <selfRestore>$10: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb2

# backedges
# - bb35(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(ControlFlow)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$9, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$10
    <cfgAlias>$28: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$30: FalseClass = false
    <statTemp>$31: Symbol(:orZero0a) = :orZero0a
    <block-pre-call-temp>$32: Sorbet::Private::Static::Void = <cfgAlias>$28: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(ControlFlow), <statTemp>$30: FalseClass, <statTemp>$31: Symbol(:orZero0a))
    <selfRestore>$33: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb6

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$15: Symbol(:a) = :a
    <cfgAlias>$18: T.class_of(T) = alias <C T>
    <cfgAlias>$20: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$22: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$16: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$18: T.class_of(T).any(<cfgAlias>$20: T.class_of(Integer), <cfgAlias>$22: T.class_of(NilClass))
    <statTemp>$13: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$15: Symbol(:a), <hashTemp>$16: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$24: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$12: T::Private::Methods::DeclBuilder = <statTemp>$13: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$24: T.class_of(Integer))
    <blockReturnTemp>$25: T.noreturn = blockreturn<sig> <blockReturnTemp>$12: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
# - bb9(rubyRegionId=2)
bb6[rubyRegionId=2, firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$32: Sorbet::Private::Static::Void, <selfRestore>$33: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb9 : bb7)

# backedges
# - bb6(rubyRegionId=2)
bb7[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$32: Sorbet::Private::Static::Void, <selfRestore>$33: T.class_of(ControlFlow)):
    <statTemp>$26: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$32, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$33
    <cfgAlias>$46: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$48: FalseClass = false
    <statTemp>$49: Symbol(:orZero0n) = :orZero0n
    <block-pre-call-temp>$50: Sorbet::Private::Static::Void = <cfgAlias>$46: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(ControlFlow), <statTemp>$48: FalseClass, <statTemp>$49: Symbol(:orZero0n))
    <selfRestore>$51: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb10

# backedges
# - bb6(rubyRegionId=2)
bb9[rubyRegionId=2, firstDead=7](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$32: Sorbet::Private::Static::Void, <selfRestore>$33: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$38: Symbol(:a) = :a
    <cfgAlias>$40: T.class_of(Integer) = alias <C Integer>
    <statTemp>$36: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$38: Symbol(:a), <cfgAlias>$40: T.class_of(Integer))
    <cfgAlias>$42: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$35: T::Private::Methods::DeclBuilder = <statTemp>$36: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$42: T.class_of(Integer))
    <blockReturnTemp>$43: T.noreturn = blockreturn<sig> <blockReturnTemp>$35: T::Private::Methods::DeclBuilder
    <unconditional> -> bb6

# backedges
# - bb7(rubyRegionId=0)
# - bb13(rubyRegionId=3)
bb10[rubyRegionId=3, firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$50: Sorbet::Private::Static::Void, <selfRestore>$51: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb13 : bb11)

# backedges
# - bb10(rubyRegionId=3)
bb11[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$50: Sorbet::Private::Static::Void, <selfRestore>$51: T.class_of(ControlFlow)):
    <statTemp>$44: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$50, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$51
    <cfgAlias>$69: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$71: FalseClass = false
    <statTemp>$72: Symbol(:orZero1n) = :orZero1n
    <block-pre-call-temp>$73: Sorbet::Private::Static::Void = <cfgAlias>$69: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(ControlFlow), <statTemp>$71: FalseClass, <statTemp>$72: Symbol(:orZero1n))
    <selfRestore>$74: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb14

# backedges
# - bb10(rubyRegionId=3)
bb13[rubyRegionId=3, firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$50: Sorbet::Private::Static::Void, <selfRestore>$51: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$56: Symbol(:a) = :a
    <cfgAlias>$59: T.class_of(T) = alias <C T>
    <cfgAlias>$61: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$63: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$57: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$59: T.class_of(T).any(<cfgAlias>$61: T.class_of(Integer), <cfgAlias>$63: T.class_of(NilClass))
    <statTemp>$54: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$56: Symbol(:a), <hashTemp>$57: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$65: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$53: T::Private::Methods::DeclBuilder = <statTemp>$54: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$65: T.class_of(Integer))
    <blockReturnTemp>$66: T.noreturn = blockreturn<sig> <blockReturnTemp>$53: T::Private::Methods::DeclBuilder
    <unconditional> -> bb10

# backedges
# - bb11(rubyRegionId=0)
# - bb17(rubyRegionId=4)
bb14[rubyRegionId=4, firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$73: Sorbet::Private::Static::Void, <selfRestore>$74: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb17 : bb15)

# backedges
# - bb14(rubyRegionId=4)
bb15[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$73: Sorbet::Private::Static::Void, <selfRestore>$74: T.class_of(ControlFlow)):
    <statTemp>$67: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$73, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$74
    <cfgAlias>$92: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$94: FalseClass = false
    <statTemp>$95: Symbol(:orZero2) = :orZero2
    <block-pre-call-temp>$96: Sorbet::Private::Static::Void = <cfgAlias>$92: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(ControlFlow), <statTemp>$94: FalseClass, <statTemp>$95: Symbol(:orZero2))
    <selfRestore>$97: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb18

# backedges
# - bb14(rubyRegionId=4)
bb17[rubyRegionId=4, firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$73: Sorbet::Private::Static::Void, <selfRestore>$74: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$79: Symbol(:a) = :a
    <cfgAlias>$82: T.class_of(T) = alias <C T>
    <cfgAlias>$84: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$86: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$80: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$82: T.class_of(T).any(<cfgAlias>$84: T.class_of(Integer), <cfgAlias>$86: T.class_of(NilClass))
    <statTemp>$77: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$79: Symbol(:a), <hashTemp>$80: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$88: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$76: T::Private::Methods::DeclBuilder = <statTemp>$77: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$88: T.class_of(Integer))
    <blockReturnTemp>$89: T.noreturn = blockreturn<sig> <blockReturnTemp>$76: T::Private::Methods::DeclBuilder
    <unconditional> -> bb14

# backedges
# - bb15(rubyRegionId=0)
# - bb21(rubyRegionId=5)
bb18[rubyRegionId=5, firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$96: Sorbet::Private::Static::Void, <selfRestore>$97: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb21 : bb19)

# backedges
# - bb18(rubyRegionId=5)
bb19[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$96: Sorbet::Private::Static::Void, <selfRestore>$97: T.class_of(ControlFlow)):
    <statTemp>$90: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$96, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$97
    <cfgAlias>$115: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$117: FalseClass = false
    <statTemp>$118: Symbol(:orZero3) = :orZero3
    <block-pre-call-temp>$119: Sorbet::Private::Static::Void = <cfgAlias>$115: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(ControlFlow), <statTemp>$117: FalseClass, <statTemp>$118: Symbol(:orZero3))
    <selfRestore>$120: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb22

# backedges
# - bb18(rubyRegionId=5)
bb21[rubyRegionId=5, firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$96: Sorbet::Private::Static::Void, <selfRestore>$97: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$102: Symbol(:a) = :a
    <cfgAlias>$105: T.class_of(T) = alias <C T>
    <cfgAlias>$107: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$109: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$103: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$105: T.class_of(T).any(<cfgAlias>$107: T.class_of(Integer), <cfgAlias>$109: T.class_of(NilClass))
    <statTemp>$100: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$102: Symbol(:a), <hashTemp>$103: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$111: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$99: T::Private::Methods::DeclBuilder = <statTemp>$100: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$111: T.class_of(Integer))
    <blockReturnTemp>$112: T.noreturn = blockreturn<sig> <blockReturnTemp>$99: T::Private::Methods::DeclBuilder
    <unconditional> -> bb18

# backedges
# - bb19(rubyRegionId=0)
# - bb25(rubyRegionId=6)
bb22[rubyRegionId=6, firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$119: Sorbet::Private::Static::Void, <selfRestore>$120: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb25 : bb23)

# backedges
# - bb22(rubyRegionId=6)
bb23[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$119: Sorbet::Private::Static::Void, <selfRestore>$120: T.class_of(ControlFlow)):
    <statTemp>$113: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$119, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$120
    <cfgAlias>$138: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$140: FalseClass = false
    <statTemp>$141: Symbol(:orZero3n) = :orZero3n
    <block-pre-call-temp>$142: Sorbet::Private::Static::Void = <cfgAlias>$138: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(ControlFlow), <statTemp>$140: FalseClass, <statTemp>$141: Symbol(:orZero3n))
    <selfRestore>$143: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb26

# backedges
# - bb22(rubyRegionId=6)
bb25[rubyRegionId=6, firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$119: Sorbet::Private::Static::Void, <selfRestore>$120: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$125: Symbol(:a) = :a
    <cfgAlias>$128: T.class_of(T) = alias <C T>
    <cfgAlias>$130: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$132: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$126: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$128: T.class_of(T).any(<cfgAlias>$130: T.class_of(Integer), <cfgAlias>$132: T.class_of(NilClass))
    <statTemp>$123: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$125: Symbol(:a), <hashTemp>$126: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$134: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$122: T::Private::Methods::DeclBuilder = <statTemp>$123: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$134: T.class_of(Integer))
    <blockReturnTemp>$135: T.noreturn = blockreturn<sig> <blockReturnTemp>$122: T::Private::Methods::DeclBuilder
    <unconditional> -> bb22

# backedges
# - bb23(rubyRegionId=0)
# - bb29(rubyRegionId=7)
bb26[rubyRegionId=7, firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$142: Sorbet::Private::Static::Void, <selfRestore>$143: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb29 : bb27)

# backedges
# - bb26(rubyRegionId=7)
bb27[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$142: Sorbet::Private::Static::Void, <selfRestore>$143: T.class_of(ControlFlow)):
    <statTemp>$136: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$142, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$143
    <cfgAlias>$161: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$163: FalseClass = false
    <statTemp>$164: Symbol(:orZero4) = :orZero4
    <block-pre-call-temp>$165: Sorbet::Private::Static::Void = <cfgAlias>$161: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(ControlFlow), <statTemp>$163: FalseClass, <statTemp>$164: Symbol(:orZero4))
    <selfRestore>$166: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb30

# backedges
# - bb26(rubyRegionId=7)
bb29[rubyRegionId=7, firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$142: Sorbet::Private::Static::Void, <selfRestore>$143: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$148: Symbol(:a) = :a
    <cfgAlias>$151: T.class_of(T) = alias <C T>
    <cfgAlias>$153: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$155: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$149: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$151: T.class_of(T).any(<cfgAlias>$153: T.class_of(Integer), <cfgAlias>$155: T.class_of(NilClass))
    <statTemp>$146: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$148: Symbol(:a), <hashTemp>$149: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$157: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$145: T::Private::Methods::DeclBuilder = <statTemp>$146: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$157: T.class_of(Integer))
    <blockReturnTemp>$158: T.noreturn = blockreturn<sig> <blockReturnTemp>$145: T::Private::Methods::DeclBuilder
    <unconditional> -> bb26

# backedges
# - bb27(rubyRegionId=0)
# - bb33(rubyRegionId=8)
bb30[rubyRegionId=8, firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$165: Sorbet::Private::Static::Void, <selfRestore>$166: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb33 : bb31)

# backedges
# - bb30(rubyRegionId=8)
bb31[rubyRegionId=0, firstDead=-1](<block-pre-call-temp>$165: Sorbet::Private::Static::Void, <selfRestore>$166: T.class_of(ControlFlow)):
    <statTemp>$159: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$165, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$166
    <cfgAlias>$184: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$186: FalseClass = false
    <statTemp>$187: Symbol(:orZero5) = :orZero5
    <block-pre-call-temp>$188: Sorbet::Private::Static::Void = <cfgAlias>$184: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(ControlFlow), <statTemp>$186: FalseClass, <statTemp>$187: Symbol(:orZero5))
    <selfRestore>$189: T.class_of(ControlFlow) = <self>
    <unconditional> -> bb34

# backedges
# - bb30(rubyRegionId=8)
bb33[rubyRegionId=8, firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$165: Sorbet::Private::Static::Void, <selfRestore>$166: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$171: Symbol(:a) = :a
    <cfgAlias>$174: T.class_of(T) = alias <C T>
    <cfgAlias>$176: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$178: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$172: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$174: T.class_of(T).any(<cfgAlias>$176: T.class_of(Integer), <cfgAlias>$178: T.class_of(NilClass))
    <statTemp>$169: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$171: Symbol(:a), <hashTemp>$172: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$180: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$168: T::Private::Methods::DeclBuilder = <statTemp>$169: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$180: T.class_of(Integer))
    <blockReturnTemp>$181: T.noreturn = blockreturn<sig> <blockReturnTemp>$168: T::Private::Methods::DeclBuilder
    <unconditional> -> bb30

# backedges
# - bb31(rubyRegionId=0)
# - bb37(rubyRegionId=9)
bb34[rubyRegionId=9, firstDead=-1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$188: Sorbet::Private::Static::Void, <selfRestore>$189: T.class_of(ControlFlow)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb37 : bb35)

# backedges
# - bb34(rubyRegionId=9)
bb35[rubyRegionId=0, firstDead=6](<block-pre-call-temp>$188: Sorbet::Private::Static::Void, <selfRestore>$189: T.class_of(ControlFlow)):
    <statTemp>$182: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$188, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$189
    <cfgAlias>$208: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$210: T.class_of(T) = alias <C T>
    <statTemp>$205: T.class_of(ControlFlow) = <self>: T.class_of(ControlFlow).extend(<cfgAlias>$208: T.class_of(T::Sig))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb34(rubyRegionId=9)
bb37[rubyRegionId=9, firstDead=10](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$188: Sorbet::Private::Static::Void, <selfRestore>$189: T.class_of(ControlFlow)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <hashTemp>$194: Symbol(:a) = :a
    <cfgAlias>$197: T.class_of(T) = alias <C T>
    <cfgAlias>$199: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$201: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$195: Runtime object representing type: T.nilable(Integer) = <cfgAlias>$197: T.class_of(T).any(<cfgAlias>$199: T.class_of(Integer), <cfgAlias>$201: T.class_of(NilClass))
    <statTemp>$192: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$194: Symbol(:a), <hashTemp>$195: Runtime object representing type: T.nilable(Integer))
    <cfgAlias>$203: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$191: T::Private::Methods::DeclBuilder = <statTemp>$192: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$203: T.class_of(Integer))
    <blockReturnTemp>$204: T.noreturn = blockreturn<sig> <blockReturnTemp>$191: T::Private::Methods::DeclBuilder
    <unconditional> -> bb34

}

