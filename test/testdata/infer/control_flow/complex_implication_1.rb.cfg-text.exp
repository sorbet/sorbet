method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=5]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$6: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$8: T.class_of(ModuleMethods) = alias <C ModuleMethods>
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$8: T.class_of(ModuleMethods))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::ModuleMethods#instrumented_request {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: ModuleMethods = cast(<self>: NilClass, ModuleMethods);
    final_attempt: T.untyped = load_arg(final_attempt)
    foo: T.untyped = load_arg(foo)
    <magic>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$4: T.untyped = <get-current-exception>
    <exceptionValue>$4 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb6(rubyRegionId=3)
# - bb24(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb4(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1](final_attempt: T.untyped, foo: T.untyped, <exceptionValue>$4: T.untyped, <magic>$5: T.class_of(<Magic>)):
    e: T.untyped = <exceptionValue>$4
    <cfgAlias>$8: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$9: T::Boolean = <cfgAlias>$8: T.class_of(StandardError).===(e: T.untyped)
    <isaCheckTemp>$9 -> (T::Boolean ? bb7 : bb8)

# backedges
# - bb0(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=-1](final_attempt: T.untyped, foo: T.untyped, <magic>$5: T.class_of(<Magic>)):
    <exceptionValue>$4: T.untyped = <get-current-exception>
    <exceptionValue>$4 -> (T.untyped ? bb3 : bb5)

# backedges
# - bb4(rubyRegionId=1)
bb5[rubyRegionId=4, firstDead=-1](final_attempt: T.untyped, foo: T.untyped):
    <unconditional> -> bb6

# backedges
# - bb5(rubyRegionId=4)
# - bb7(rubyRegionId=2)
# - bb8(rubyRegionId=2)
bb6[rubyRegionId=3, firstDead=-1](final_attempt: T.untyped, foo: T.untyped, err: T.nilable(StandardError), <gotoDeadTemp>$10: T.nilable(TrueClass)):
    <gotoDeadTemp>$10 -> (T.nilable(TrueClass) ? bb1 : bb9)

# backedges
# - bb3(rubyRegionId=2)
bb7[rubyRegionId=2, firstDead=-1](final_attempt: T.untyped, foo: T.untyped, <magic>$5: T.class_of(<Magic>), e: StandardError):
    <exceptionValue>$4: NilClass = nil
    <keepForCfgTemp>$6: Sorbet::Private::Static::Void = <magic>$5: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$4: NilClass)
    err: StandardError = e
    <unconditional> -> bb6

# backedges
# - bb3(rubyRegionId=2)
bb8[rubyRegionId=2, firstDead=-1](final_attempt: T.untyped, foo: T.untyped):
    <gotoDeadTemp>$10: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb6(rubyRegionId=3)
bb9[rubyRegionId=0, firstDead=-1](final_attempt: T.untyped, foo: T.untyped, err: T.nilable(StandardError)):
    is_successful: T::Boolean = err: T.nilable(StandardError).nil?()
    is_successful -> (T::Boolean ? bb10 : bb11)

# backedges
# - bb9(rubyRegionId=0)
bb10[rubyRegionId=0, firstDead=-1](foo: T.untyped, err: NilClass, is_successful: TrueClass):
    ||$2: TrueClass = is_successful
    ||$2 -> (TrueClass ? bb13 : bb14)

# backedges
# - bb9(rubyRegionId=0)
bb11[rubyRegionId=0, firstDead=-1](final_attempt: T.untyped, foo: T.untyped, err: StandardError, is_successful: FalseClass):
    ||$2: T.untyped = final_attempt
    ||$2 -> (T.untyped ? bb13 : bb14)

# backedges
# - bb10(rubyRegionId=0)
# - bb11(rubyRegionId=0)
bb13[rubyRegionId=0, firstDead=-1](is_successful: T::Boolean, ||$2: T.untyped):
    <ifTemp>$14: T.untyped = ||$2
    <ifTemp>$14 -> (T.untyped ? bb19 : bb24)

# backedges
# - bb10(rubyRegionId=0)
# - bb11(rubyRegionId=0)
bb14[rubyRegionId=0, firstDead=-1](foo: T.untyped, err: StandardError, is_successful: FalseClass):
    err -> (StandardError ? bb15 : bb16)

# backedges
# - bb14(rubyRegionId=0)
bb15[rubyRegionId=0, firstDead=-1](foo: T.untyped, is_successful: FalseClass):
    <ifTemp>$14: T.untyped = foo
    <ifTemp>$14 -> (T.untyped ? bb19 : bb24)

# backedges
# - bb14(rubyRegionId=0)
bb16[rubyRegionId=0, firstDead=0](err: StandardError, is_successful: FalseClass):
    <ifTemp>$14 = err
    <ifTemp>$14 -> (<nullptr> ? bb19 : bb24)

# backedges
# - bb13(rubyRegionId=0)
# - bb15(rubyRegionId=0)
# - bb16(rubyRegionId=0)
bb19[rubyRegionId=0, firstDead=-1](is_successful: T::Boolean):
    <ifTemp>$19: T::Boolean = is_successful: T::Boolean.!()
    <ifTemp>$19 -> (T::Boolean ? bb21 : bb24)

# backedges
# - bb19(rubyRegionId=0)
bb21[rubyRegionId=0, firstDead=-1]():
    <returnMethodTemp>$2: Integer(1) = 1
    <unconditional> -> bb24

# backedges
# - bb13(rubyRegionId=0)
# - bb15(rubyRegionId=0)
# - bb16(rubyRegionId=0)
# - bb19(rubyRegionId=0)
# - bb21(rubyRegionId=0)
bb24[rubyRegionId=0, firstDead=1](<returnMethodTemp>$2: T.nilable(Integer)):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(Integer)
    <unconditional> -> bb1

}

method ::<Class:ModuleMethods>#<static-init> {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: T.class_of(ModuleMethods) = cast(<self>: NilClass, T.class_of(ModuleMethods));
    <returnMethodTemp>$2: Symbol(:instrumented_request) = :instrumented_request
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:instrumented_request)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

