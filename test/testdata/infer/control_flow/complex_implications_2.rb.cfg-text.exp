method ::Object#foo {

bb0[firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    foo: T.untyped = load_arg(foo)
    foo -> (T.untyped ? bb2 : bb7)

# backedges
# - bb10
bb1[firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0
bb2[firstDead=-1](foo: T.untyped):
    <cfgAlias>$8: T.class_of(StandardError) = alias <C StandardError>
    bar: T.untyped = foo: T.untyped.is_a?(<cfgAlias>$8: T.class_of(StandardError))
    bar -> (T.untyped ? bb4 : bb7)

# backedges
# - bb2
bb4[firstDead=-1](foo: StandardError):
    e: StandardError = foo
    err: StandardError = e
    <unconditional> -> bb7

# backedges
# - bb0
# - bb2
# - bb4
bb7[firstDead=-1](err: T.nilable(StandardError)):
    junk: T.nilable(StandardError) = err
    err -> (T.nilable(StandardError) ? bb8 : bb9)

# backedges
# - bb7
bb8[firstDead=-1]():
    <returnMethodTemp>$2: Integer(1) = 1
    <unconditional> -> bb10

# backedges
# - bb7
bb9[firstDead=-1]():
    <returnMethodTemp>$2: NilClass = nil
    <unconditional> -> bb10

# backedges
# - bb8
# - bb9
bb10[firstDead=1](<returnMethodTemp>$2: T.nilable(Integer)):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(Integer)
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[firstDead=3]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <returnMethodTemp>$2: Symbol(:foo) = :foo
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:foo)
    <unconditional> -> bb1

# backedges
# - bb0
bb1[firstDead=-1]():
    <unconditional> -> bb1

}

