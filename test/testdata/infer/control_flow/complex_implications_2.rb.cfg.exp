digraph "complex_implications_2.rb" {
subgraph "cluster_::Object#foo" {
    label = "::Object#foo";
    color = blue;

    "bb::Object#foo_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\lfoo: T.untyped = load_arg(foo)\lfoo: T.untyped\l"
    ];

    "bb::Object#foo_0" -> "bb::Object#foo_2" [style="bold"];
    "bb::Object#foo_0" -> "bb::Object#foo_7" [style="tapered"];

    "bb::Object#foo_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#foo_1" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=0](foo: T.untyped)\l<cfgAlias>$8: T.class_of(StandardError) = alias <C StandardError>\lbar: T.untyped = foo: T.untyped.is_a?(<cfgAlias>$8: T.class_of(StandardError))\lbar: T.untyped\l"
    ];

    "bb::Object#foo_2" -> "bb::Object#foo_4" [style="bold"];
    "bb::Object#foo_2" -> "bb::Object#foo_7" [style="tapered"];

    "bb::Object#foo_4" [
        shape = rectangle;
        color = black;
        label = "block[id=4, rubyBlockId=0](foo: StandardError)\le: StandardError = foo\lerr: StandardError = e\l<unconditional>\l"
    ];

    "bb::Object#foo_4" -> "bb::Object#foo_7" [style="bold"];
    "bb::Object#foo_7" [
        shape = rectangle;
        color = black;
        label = "block[id=7, rubyBlockId=0](err: T.nilable(StandardError))\ljunk: T.nilable(StandardError) = err\lerr: T.nilable(StandardError)\l"
    ];

    "bb::Object#foo_7" -> "bb::Object#foo_8" [style="bold"];
    "bb::Object#foo_7" -> "bb::Object#foo_10" [style="tapered"];

    "bb::Object#foo_8" [
        shape = rectangle;
        color = black;
        label = "block[id=8, rubyBlockId=0]()\l<returnMethodTemp>$2: Integer(1) = 1\l<unconditional>\l"
    ];

    "bb::Object#foo_8" -> "bb::Object#foo_10" [style="bold"];
    "bb::Object#foo_10" [
        shape = rectangle;
        color = black;
        label = "block[id=10, rubyBlockId=0](<returnMethodTemp>$2: T.nilable(Integer))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(Integer)\l<unconditional>\l"
    ];

    "bb::Object#foo_10" -> "bb::Object#foo_1" [style="bold"];
}

subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;

    "bb::<Class:<root>>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));\l<cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: Symbol(:foo) = :foo\l<statTemp>$7: Symbol(:normal) = :normal\l<returnMethodTemp>$2: Symbol(:foo) = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$6: Symbol(:foo), <statTemp>$7: Symbol(:normal))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:foo)\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

}

