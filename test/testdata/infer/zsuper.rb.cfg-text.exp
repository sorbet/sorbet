method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Foo#baz {

bb0[rubyRegionId=0, firstDead=4]():
    <self>: Foo = cast(<self>: NilClass, Foo);
    a: T.untyped = load_arg(a)
    <returnMethodTemp>$2: NilClass = <self>: Foo.puts(a: T.untyped)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Foo>#<static-init> {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: T.class_of(Foo) = cast(<self>: NilClass, T.class_of(Foo));
    <returnMethodTemp>$2: Symbol(:baz) = :baz
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:baz)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Bar#baz {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Bar = cast(<self>: NilClass, Bar);
    b: T.untyped = load_arg(b)
    <block-pre-call-temp>$5: Sorbet::Private::Static::Void = <self>: Bar.<super>(b: T.untyped)
    <selfRestore>$6: Bar = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: Bar, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Bar):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=2](<block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Bar):
    <returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$5, <super>>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=5](<self>: Bar, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Bar):
    # outerLoops: 1
    <self>: Bar = loadSelf(<super>)
    <blk>$7: T.untyped = load_yield_params(<super>)
    a$1: T.untyped = yield_load_arg(0, <blk>$7: T.untyped)
    <blockReturnTemp>$8: NilClass = <self>: Bar.puts(a$1: T.untyped)
    <blockReturnTemp>$11: T.noreturn = blockreturn<<super>> <blockReturnTemp>$8: NilClass
    <unconditional> -> bb2

}

method ::<Class:Bar>#<static-init> {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: T.class_of(Bar) = cast(<self>: NilClass, T.class_of(Bar));
    <returnMethodTemp>$2: Symbol(:baz) = :baz
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:baz)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

