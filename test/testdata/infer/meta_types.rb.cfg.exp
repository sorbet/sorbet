digraph "meta_types.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;

    "bb::<Class:<root>>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));\l<cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$7: T.class_of(TestMetaType) = alias <C TestMetaType>\l<statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(TestMetaType))\l<cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$12: T.class_of(TestMetaType) = alias <C TestMetaType>\l<statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(TestMetaType))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::TestMetaType#_" {
    label = "::TestMetaType#_";
    color = blue;

    "bb::TestMetaType#__0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestMetaType = cast(<self>: NilClass, TestMetaType);\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::TestMetaType#__0" -> "bb::TestMetaType#__1" [style="bold"];
    "bb::TestMetaType#__1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestMetaType#__1" -> "bb::TestMetaType#__1" [style="bold"];
}

subgraph "cluster_::TestMetaType#testit" {
    label = "::TestMetaType#testit";
    color = blue;

    "bb::TestMetaType#testit_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestMetaType = cast(<self>: NilClass, TestMetaType);\l<cfgAlias>$7: T.class_of(T::Array) = alias <C Array>\l<cfgAlias>$9: T.class_of(T) = alias <C T>\l<cfgAlias>$11: T.class_of(String) = alias <C String>\l<statTemp>$5: <Type: T::Array[String]> = <cfgAlias>$7: T.class_of(T::Array).[](<cfgAlias>$11: T.class_of(String))\l<statTemp>$3: NilClass = <self>: TestMetaType.puts(<statTemp>$5: <Type: T::Array[String]>)\l<ifTemp>$15: T.untyped = <self>: TestMetaType._()\l<ifTemp>$15: T.untyped\l"
    ];

    "bb::TestMetaType#testit_0" -> "bb::TestMetaType#testit_2" [style="bold"];
    "bb::TestMetaType#testit_0" -> "bb::TestMetaType#testit_3" [style="tapered"];

    "bb::TestMetaType#testit_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestMetaType#testit_1" -> "bb::TestMetaType#testit_1" [style="bold"];
    "bb::TestMetaType#testit_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=0](<self>: TestMetaType)\l<cfgAlias>$18: T.class_of(T::Array) = alias <C Array>\l<cfgAlias>$20: T.class_of(T) = alias <C T>\l<cfgAlias>$22: T.class_of(String) = alias <C String>\l<statTemp>$14: <Type: T::Array[String]> = <cfgAlias>$18: T.class_of(T::Array).[](<cfgAlias>$22: T.class_of(String))\l<unconditional>\l"
    ];

    "bb::TestMetaType#testit_2" -> "bb::TestMetaType#testit_4" [style="bold"];
    "bb::TestMetaType#testit_3" [
        shape = rectangle;
        color = black;
        label = "block[id=3, rubyBlockId=0](<self>: TestMetaType)\l<statTemp>$14: FalseClass = false\l<unconditional>\l"
    ];

    "bb::TestMetaType#testit_3" -> "bb::TestMetaType#testit_4" [style="bold"];
    "bb::TestMetaType#testit_4" [
        shape = rectangle;
        color = black;
        label = "block[id=4, rubyBlockId=0](<self>: TestMetaType, <statTemp>$14: Object)\l<statTemp>$12: NilClass = <self>: TestMetaType.puts(<statTemp>$14: Object)\l<ifTemp>$25: T.untyped = <self>: TestMetaType._()\l<ifTemp>$25: T.untyped\l"
    ];

    "bb::TestMetaType#testit_4" -> "bb::TestMetaType#testit_5" [style="bold"];
    "bb::TestMetaType#testit_4" -> "bb::TestMetaType#testit_6" [style="tapered"];

    "bb::TestMetaType#testit_5" [
        shape = rectangle;
        color = black;
        label = "block[id=5, rubyBlockId=0](<self>: TestMetaType)\l<cfgAlias>$28: T.class_of(T::Array) = alias <C Array>\l<cfgAlias>$30: T.class_of(T) = alias <C T>\l<cfgAlias>$32: T.class_of(String) = alias <C String>\l<statTemp>$24: <Type: T::Array[String]> = <cfgAlias>$28: T.class_of(T::Array).[](<cfgAlias>$32: T.class_of(String))\l<unconditional>\l"
    ];

    "bb::TestMetaType#testit_5" -> "bb::TestMetaType#testit_7" [style="bold"];
    "bb::TestMetaType#testit_6" [
        shape = rectangle;
        color = black;
        label = "block[id=6, rubyBlockId=0](<self>: TestMetaType)\l<cfgAlias>$34: T.class_of(T::Array) = alias <C Array>\l<cfgAlias>$36: T.class_of(T) = alias <C T>\l<cfgAlias>$38: T.class_of(Float) = alias <C Float>\l<statTemp>$24: <Type: T::Array[Float]> = <cfgAlias>$34: T.class_of(T::Array).[](<cfgAlias>$38: T.class_of(Float))\l<unconditional>\l"
    ];

    "bb::TestMetaType#testit_6" -> "bb::TestMetaType#testit_7" [style="bold"];
    "bb::TestMetaType#testit_7" [
        shape = rectangle;
        color = black;
        label = "block[id=7, rubyBlockId=0](<self>: TestMetaType, <statTemp>$24: Object)\l<returnMethodTemp>$2: NilClass = <self>: TestMetaType.puts(<statTemp>$24: Object)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::TestMetaType#testit_7" -> "bb::TestMetaType#testit_1" [style="bold"];
}

subgraph "cluster_::<Class:TestMetaType>#<static-init>" {
    label = "::<Class:TestMetaType>#<static-init>";
    color = blue;

    "bb::<Class:TestMetaType>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(TestMetaType) = cast(<self>: NilClass, T.class_of(TestMetaType));\l<cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$7: Symbol(:_) = :_\l<statTemp>$8: Symbol(:normal) = :normal\l<statTemp>$3: Symbol(:_) = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestMetaType), <statTemp>$7: Symbol(:_), <statTemp>$8: Symbol(:normal))\l<cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$13: Symbol(:testit) = :testit\l<statTemp>$14: Symbol(:normal) = :normal\l<statTemp>$9: Symbol(:testit) = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestMetaType), <statTemp>$13: Symbol(:testit), <statTemp>$14: Symbol(:normal))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:TestMetaType>#<static-init>_0" -> "bb::<Class:TestMetaType>#<static-init>_1" [style="bold"];
    "bb::<Class:TestMetaType>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:TestMetaType>#<static-init>_1" -> "bb::<Class:TestMetaType>#<static-init>_1" [style="bold"];
}

}

