digraph "infer1.rb" {
subgraph "cluster_::Object#baz1" {
    label = "::Object#baz1";
    color = blue;

    "bb::Object#baz1_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\la: String(\"foo\") = \"foo\"\lb: T.nilable(Integer) = a: String(\"foo\").getbyte(a: String(\"foo\"))\l<returnMethodTemp>$2: T.nilable(Integer) = b\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(Integer)\l<unconditional>\l"
    ];

    "bb::Object#baz1_0" -> "bb::Object#baz1_1" [style="bold"];
    "bb::Object#baz1_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#baz1_1" -> "bb::Object#baz1_1" [style="bold"];
}

subgraph "cluster_::Object#baz2" {
    label = "::Object#baz2";
    color = blue;

    "bb::Object#baz2_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\la: String(\"foo\") = \"foo\"\l<statTemp>$5: String(\"foo\") = \"foo\"\lb: T.nilable(Integer) = a: String(\"foo\").getbyte(<statTemp>$5: String(\"foo\"))\l<returnMethodTemp>$2: T.nilable(Integer) = b\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(Integer)\l<unconditional>\l"
    ];

    "bb::Object#baz2_0" -> "bb::Object#baz2_1" [style="bold"];
    "bb::Object#baz2_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#baz2_1" -> "bb::Object#baz2_1" [style="bold"];
}

subgraph "cluster_::Object#baz3" {
    label = "::Object#baz3";
    color = blue;

    "bb::Object#baz3_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\l<statTemp>$3: String(\"foo\") = \"foo\"\l<statTemp>$4: String(\"foo\") = \"foo\"\lb: T.nilable(Integer) = <statTemp>$3: String(\"foo\").getbyte(<statTemp>$4: String(\"foo\"))\l<returnMethodTemp>$2: T.nilable(Integer) = b\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(Integer)\l<unconditional>\l"
    ];

    "bb::Object#baz3_0" -> "bb::Object#baz3_1" [style="bold"];
    "bb::Object#baz3_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#baz3_1" -> "bb::Object#baz3_1" [style="bold"];
}

subgraph "cluster_::Object#baz4" {
    label = "::Object#baz4";
    color = blue;

    "bb::Object#baz4_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\l<statTemp>$3: T.untyped = <self>: Object.a()\l<statTemp>$5: String(\"foo\") = \"foo\"\lb: T.untyped = <statTemp>$3: T.untyped.getbyte(<statTemp>$5: String(\"foo\"))\l<returnMethodTemp>$2: T.untyped = b\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Object#baz4_0" -> "bb::Object#baz4_1" [style="bold"];
    "bb::Object#baz4_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#baz4_1" -> "bb::Object#baz4_1" [style="bold"];
}

subgraph "cluster_::Object#baz5" {
    label = "::Object#baz5";
    color = blue;

    "bb::Object#baz5_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\lcond: T.untyped = load_arg(cond)\lcond: T.untyped\l"
    ];

    "bb::Object#baz5_0" -> "bb::Object#baz5_2" [style="bold"];
    "bb::Object#baz5_0" -> "bb::Object#baz5_3" [style="tapered"];

    "bb::Object#baz5_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#baz5_1" -> "bb::Object#baz5_1" [style="bold"];
    "bb::Object#baz5_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=0]()\lb: Integer(1) = 1\l<unconditional>\l"
    ];

    "bb::Object#baz5_2" -> "bb::Object#baz5_4" [style="bold"];
    "bb::Object#baz5_3" [
        shape = rectangle;
        color = black;
        label = "block[id=3, rubyBlockId=0]()\lb: String(\"foo\") = \"foo\"\l<unconditional>\l"
    ];

    "bb::Object#baz5_3" -> "bb::Object#baz5_4" [style="bold"];
    "bb::Object#baz5_4" [
        shape = rectangle;
        color = black;
        label = "block[id=4, rubyBlockId=0](b: T.any(Integer, String))\l<statTemp>$5: T.any(Integer, String) = b\l<statTemp>$6: Integer(1) = 1\lb: T.untyped = <statTemp>$5: T.any(Integer, String).getbyte(<statTemp>$6: Integer(1))\l<returnMethodTemp>$2: T.untyped = b\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Object#baz5_4" -> "bb::Object#baz5_1" [style="bold"];
}

subgraph "cluster_::Object#baz6" {
    label = "::Object#baz6";
    color = blue;

    "bb::Object#baz6_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\lcond: T.untyped = load_arg(cond)\lcond: T.untyped\l"
    ];

    "bb::Object#baz6_0" -> "bb::Object#baz6_2" [style="bold"];
    "bb::Object#baz6_0" -> "bb::Object#baz6_3" [style="tapered"];

    "bb::Object#baz6_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#baz6_1" -> "bb::Object#baz6_1" [style="bold"];
    "bb::Object#baz6_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=0]()\lb: Integer(1) = 1\l<unconditional>\l"
    ];

    "bb::Object#baz6_2" -> "bb::Object#baz6_4" [style="bold"];
    "bb::Object#baz6_3" [
        shape = rectangle;
        color = black;
        label = "block[id=3, rubyBlockId=0]()\lb: String(\"foo\") = \"foo\"\l<unconditional>\l"
    ];

    "bb::Object#baz6_3" -> "bb::Object#baz6_4" [style="bold"];
    "bb::Object#baz6_4" [
        shape = rectangle;
        color = black;
        label = "block[id=4, rubyBlockId=0](b: T.any(Integer, String))\l<statTemp>$5: String(\"foo\") = \"foo\"\l<statTemp>$6: T.any(Integer, String) = b\lb: T.nilable(Integer) = <statTemp>$5: String(\"foo\").getbyte(<statTemp>$6: T.any(Integer, String))\l<returnMethodTemp>$2: T.nilable(Integer) = b\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(Integer)\l<unconditional>\l"
    ];

    "bb::Object#baz6_4" -> "bb::Object#baz6_1" [style="bold"];
}

subgraph "cluster_::Object#baz7" {
    label = "::Object#baz7";
    color = blue;

    "bb::Object#baz7_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\lcond: T.untyped = load_arg(cond)\lcond: T.untyped\l"
    ];

    "bb::Object#baz7_0" -> "bb::Object#baz7_2" [style="bold"];
    "bb::Object#baz7_0" -> "bb::Object#baz7_4" [style="tapered"];

    "bb::Object#baz7_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#baz7_1" -> "bb::Object#baz7_1" [style="bold"];
    "bb::Object#baz7_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=0]()\lb: Integer(1) = 1\l<unconditional>\l"
    ];

    "bb::Object#baz7_2" -> "bb::Object#baz7_4" [style="bold"];
    "bb::Object#baz7_4" [
        shape = rectangle;
        color = black;
        label = "block[id=4, rubyBlockId=0](b: T.nilable(Integer))\l<statTemp>$5: String(\"foo\") = \"foo\"\l<statTemp>$6: T.nilable(Integer) = b\lb: T.nilable(Integer) = <statTemp>$5: String(\"foo\").getbyte(<statTemp>$6: T.nilable(Integer))\l<returnMethodTemp>$2: T.nilable(Integer) = b\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(Integer)\l<unconditional>\l"
    ];

    "bb::Object#baz7_4" -> "bb::Object#baz7_1" [style="bold"];
}

subgraph "cluster_::Object#baz8" {
    label = "::Object#baz8";
    color = blue;

    "bb::Object#baz8_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\l<unconditional>\l"
    ];

    "bb::Object#baz8_0" -> "bb::Object#baz8_2" [style="bold"];
    "bb::Object#baz8_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#baz8_1" -> "bb::Object#baz8_1" [style="bold"];
    "bb::Object#baz8_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=0]()\louterLoops: 1\l<whileTemp>$3: TrueClass = true\l<whileTemp>$3: TrueClass\l"
    ];

    "bb::Object#baz8_2" -> "bb::Object#baz8_5" [style="bold"];
    "bb::Object#baz8_2" -> "bb::Object#baz8_3" [style="tapered"];

    "bb::Object#baz8_3" [
        shape = rectangle;
        color = red;
        label = "block[id=3, rubyBlockId=0]()\l<returnMethodTemp>$2 = nil\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::Object#baz8_3" -> "bb::Object#baz8_1" [style="bold"];
    "bb::Object#baz8_5" [
        shape = rectangle;
        color = black;
        label = "block[id=5, rubyBlockId=0]()\louterLoops: 1\lb: Integer(1) = 1\l<unconditional>\l"
    ];

    "bb::Object#baz8_5" -> "bb::Object#baz8_2" [style="bold"];
}

subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;

    "bb::<Class:<root>>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));\l<cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$7: Symbol(:baz1) = :baz1\l<statTemp>$8: Symbol(:normal) = :normal\l<statTemp>$3: Symbol(:baz1) = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$7: Symbol(:baz1), <statTemp>$8: Symbol(:normal))\l<cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$13: Symbol(:baz2) = :baz2\l<statTemp>$14: Symbol(:normal) = :normal\l<statTemp>$9: Symbol(:baz2) = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$13: Symbol(:baz2), <statTemp>$14: Symbol(:normal))\l<cfgAlias>$17: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$19: Symbol(:baz3) = :baz3\l<statTemp>$20: Symbol(:normal) = :normal\l<statTemp>$15: Symbol(:baz3) = <cfgAlias>$17: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$19: Symbol(:baz3), <statTemp>$20: Symbol(:normal))\l<cfgAlias>$23: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$25: Symbol(:baz4) = :baz4\l<statTemp>$26: Symbol(:normal) = :normal\l<statTemp>$21: Symbol(:baz4) = <cfgAlias>$23: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$25: Symbol(:baz4), <statTemp>$26: Symbol(:normal))\l<cfgAlias>$29: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$31: Symbol(:baz5) = :baz5\l<statTemp>$32: Symbol(:normal) = :normal\l<statTemp>$27: Symbol(:baz5) = <cfgAlias>$29: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$31: Symbol(:baz5), <statTemp>$32: Symbol(:normal))\l<cfgAlias>$35: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$37: Symbol(:baz6) = :baz6\l<statTemp>$38: Symbol(:normal) = :normal\l<statTemp>$33: Symbol(:baz6) = <cfgAlias>$35: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$37: Symbol(:baz6), <statTemp>$38: Symbol(:normal))\l<cfgAlias>$41: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$43: Symbol(:baz7) = :baz7\l<statTemp>$44: Symbol(:normal) = :normal\l<statTemp>$39: Symbol(:baz7) = <cfgAlias>$41: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$43: Symbol(:baz7), <statTemp>$44: Symbol(:normal))\l<cfgAlias>$47: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$49: Symbol(:baz8) = :baz8\l<statTemp>$50: Symbol(:normal) = :normal\l<statTemp>$45: Symbol(:baz8) = <cfgAlias>$47: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$49: Symbol(:baz8), <statTemp>$50: Symbol(:normal))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

}

