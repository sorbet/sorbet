digraph "casts.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;

    "bb::<Class:<root>>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));\l<cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$7: T.class_of(TestCasts) = alias <C TestCasts>\l<statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(TestCasts))\l<cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$12: T.class_of(TestCasts) = alias <C TestCasts>\l<statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(TestCasts))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::TestCasts#untyped" {
    label = "::TestCasts#untyped";
    color = blue;

    "bb::TestCasts#untyped_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestCasts = cast(<self>: NilClass, TestCasts);\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::TestCasts#untyped_0" -> "bb::TestCasts#untyped_1" [style="bold"];
    "bb::TestCasts#untyped_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestCasts#untyped_1" -> "bb::TestCasts#untyped_1" [style="bold"];
}

subgraph "cluster_::TestCasts#test_casts" {
    label = "::TestCasts#test_casts";
    color = blue;

    "bb::TestCasts#test_casts_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: TestCasts = cast(<self>: NilClass, TestCasts);\l<cfgAlias>$6: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$8: T.class_of(Integer) = alias <C Integer>\l<statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$8: T.class_of(Integer))\l<castTemp>$9: T.untyped = <self>: TestCasts.untyped()\lt: Integer = cast(<castTemp>$9: T.untyped, Integer);\l<statTemp>$13: Integer(4) = 4\l<statTemp>$11: Integer = t: Integer.+(<statTemp>$13: Integer(4))\l<cfgAlias>$17: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$19: T.class_of(Integer) = alias <C Integer>\l<statTemp>$15: Sorbet::Private::Static::Void = <cfgAlias>$17: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$19: T.class_of(Integer))\l<castTemp>$20: String(\"hi\") = \"hi\"\lt1: Integer = cast(<castTemp>$20: String(\"hi\"), Integer);\l<statTemp>$23: Integer(1) = 1\l<statTemp>$21: Integer = t1: Integer.+(<statTemp>$23: Integer(1))\l<cfgAlias>$27: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$29: T.class_of(String) = alias <C String>\l<statTemp>$25: Sorbet::Private::Static::Void = <cfgAlias>$27: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$29: T.class_of(String))\l<castTemp>$30: T.untyped = <self>: TestCasts.untyped()\ls: String = cast(<castTemp>$30: T.untyped, String);\l<statTemp>$34: String(\"hi\") = \"hi\"\l<statTemp>$32: String = s: String.+(<statTemp>$34: String(\"hi\"))\l<cfgAlias>$38: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$40: T.class_of(String) = alias <C String>\l<statTemp>$36: Sorbet::Private::Static::Void = <cfgAlias>$38: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$40: T.class_of(String))\l<castTemp>$41: Integer(6) = 6\ls: String = cast(<castTemp>$41: Integer(6), String);\l<statTemp>$44: String(\"hi\") = \"hi\"\l<statTemp>$42: String = s: String.+(<statTemp>$44: String(\"hi\"))\l<statTemp>$47: Integer(3) = 3\l<statTemp>$45: String = s: String.+(<statTemp>$47: Integer(3))\l<cfgAlias>$51: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$53: T.class_of(Integer) = alias <C Integer>\l<statTemp>$49: Sorbet::Private::Static::Void = <cfgAlias>$51: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<cfgAlias>$53: T.class_of(Integer))\l<castTemp>$54: Integer(6) = 6\ls: Integer = cast(<castTemp>$54: Integer(6), Integer);\l<cfgAlias>$58: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$61: T.class_of(T) = alias <C T>\l<statTemp>$59: <Type: T.untyped> = <cfgAlias>$61: T.class_of(T).untyped()\l<statTemp>$56: Sorbet::Private::Static::Void = <cfgAlias>$58: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<statTemp>$59: <Type: T.untyped>)\l<castTemp>$62: Integer(6) = 6\ls: T.untyped = cast(<castTemp>$62: Integer(6), T.untyped);\l<cfgAlias>$66: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$67: Integer(7) = 7\l<statTemp>$64: Sorbet::Private::Static::Void = <cfgAlias>$66: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<statTemp>$67: Integer(7))\l<castTemp>$68: Integer(6) = 6\ls: Integer = cast(<castTemp>$68: Integer(6), Integer);\l<statTemp>$71: String(\"hi\") = \"hi\"\l<statTemp>$69: Integer = s: Integer.+(<statTemp>$71: String(\"hi\"))\l<statTemp>$73: Integer(3) = 3\l<returnMethodTemp>$2: Integer = s: Integer.+(<statTemp>$73: Integer(3))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer\l<unconditional>\l"
    ];

    "bb::TestCasts#test_casts_0" -> "bb::TestCasts#test_casts_1" [style="bold"];
    "bb::TestCasts#test_casts_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::TestCasts#test_casts_1" -> "bb::TestCasts#test_casts_1" [style="bold"];
}

subgraph "cluster_::<Class:TestCasts>#<static-init>" {
    label = "::<Class:TestCasts>#<static-init>";
    color = blue;

    "bb::<Class:TestCasts>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(TestCasts) = cast(<self>: NilClass, T.class_of(TestCasts));\l<cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$7: Symbol(:untyped) = :untyped\l<statTemp>$8: Symbol(:normal) = :normal\l<statTemp>$3: Symbol(:untyped) = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestCasts), <statTemp>$7: Symbol(:untyped), <statTemp>$8: Symbol(:normal))\l<cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$13: Symbol(:test_casts) = :test_casts\l<statTemp>$14: Symbol(:normal) = :normal\l<statTemp>$9: Symbol(:test_casts) = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestCasts), <statTemp>$13: Symbol(:test_casts), <statTemp>$14: Symbol(:normal))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:TestCasts>#<static-init>_0" -> "bb::<Class:TestCasts>#<static-init>_1" [style="bold"];
    "bb::<Class:TestCasts>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:TestCasts>#<static-init>_1" -> "bb::<Class:TestCasts>#<static-init>_1" [style="bold"];
}

}

