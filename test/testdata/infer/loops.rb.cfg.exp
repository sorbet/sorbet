digraph "loops.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;

    "bb::<Class:<root>>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));\l<cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$7: T.class_of(HasLoops) = alias <C HasLoops>\l<statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(HasLoops))\l<cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$12: T.class_of(HasLoops) = alias <C HasLoops>\l<statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(HasLoops))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::HasLoops#variable_only_inside_loop" {
    label = "::HasLoops#variable_only_inside_loop";
    color = blue;

    "bb::HasLoops#variable_only_inside_loop_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: HasLoops = cast(<self>: NilClass, HasLoops);\l<unconditional>\l"
    ];

    "bb::HasLoops#variable_only_inside_loop_0" -> "bb::HasLoops#variable_only_inside_loop_2" [style="bold"];
    "bb::HasLoops#variable_only_inside_loop_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::HasLoops#variable_only_inside_loop_1" -> "bb::HasLoops#variable_only_inside_loop_1" [style="bold"];
    "bb::HasLoops#variable_only_inside_loop_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=0]()\louterLoops: 1\l<whileTemp>$3: TrueClass = true\l<whileTemp>$3: TrueClass\l"
    ];

    "bb::HasLoops#variable_only_inside_loop_2" -> "bb::HasLoops#variable_only_inside_loop_5" [style="bold"];
    "bb::HasLoops#variable_only_inside_loop_2" -> "bb::HasLoops#variable_only_inside_loop_3" [style="tapered"];

    "bb::HasLoops#variable_only_inside_loop_3" [
        shape = rectangle;
        color = red;
        label = "block[id=3, rubyBlockId=0]()\l<returnMethodTemp>$2 = nil\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::HasLoops#variable_only_inside_loop_3" -> "bb::HasLoops#variable_only_inside_loop_1" [style="bold"];
    "bb::HasLoops#variable_only_inside_loop_5" [
        shape = rectangle;
        color = black;
        label = "block[id=5, rubyBlockId=0]()\louterLoops: 1\la: Integer(1) = 1\l<unconditional>\l"
    ];

    "bb::HasLoops#variable_only_inside_loop_5" -> "bb::HasLoops#variable_only_inside_loop_2" [style="bold"];
}

subgraph "cluster_::HasLoops#incorrect_assignment" {
    label = "::HasLoops#incorrect_assignment";
    color = blue;

    "bb::HasLoops#incorrect_assignment_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: HasLoops = cast(<self>: NilClass, HasLoops);\la: String(\"s\") = \"s\"\l<unconditional>\l"
    ];

    "bb::HasLoops#incorrect_assignment_0" -> "bb::HasLoops#incorrect_assignment_2" [style="bold"];
    "bb::HasLoops#incorrect_assignment_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::HasLoops#incorrect_assignment_1" -> "bb::HasLoops#incorrect_assignment_1" [style="bold"];
    "bb::HasLoops#incorrect_assignment_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=0](a: String(\"s\"))\louterLoops: 1\l<whileTemp>$4: TrueClass = true\l<whileTemp>$4: TrueClass\l"
    ];

    "bb::HasLoops#incorrect_assignment_2" -> "bb::HasLoops#incorrect_assignment_5" [style="bold"];
    "bb::HasLoops#incorrect_assignment_2" -> "bb::HasLoops#incorrect_assignment_3" [style="tapered"];

    "bb::HasLoops#incorrect_assignment_3" [
        shape = rectangle;
        color = red;
        label = "block[id=3, rubyBlockId=0]()\l<returnMethodTemp>$2 = nil\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::HasLoops#incorrect_assignment_3" -> "bb::HasLoops#incorrect_assignment_1" [style="bold"];
    "bb::HasLoops#incorrect_assignment_5" [
        shape = rectangle;
        color = black;
        label = "block[id=5, rubyBlockId=0](a: String(\"s\"))\louterLoops: 1\la: T.untyped = 1\l<unconditional>\l"
    ];

    "bb::HasLoops#incorrect_assignment_5" -> "bb::HasLoops#incorrect_assignment_2" [style="bold"];
}

subgraph "cluster_::HasLoops#correct_assignment" {
    label = "::HasLoops#correct_assignment";
    color = blue;

    "bb::HasLoops#correct_assignment_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: HasLoops = cast(<self>: NilClass, HasLoops);\la: String(\"s\") = \"s\"\l<unconditional>\l"
    ];

    "bb::HasLoops#correct_assignment_0" -> "bb::HasLoops#correct_assignment_2" [style="bold"];
    "bb::HasLoops#correct_assignment_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::HasLoops#correct_assignment_1" -> "bb::HasLoops#correct_assignment_1" [style="bold"];
    "bb::HasLoops#correct_assignment_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=0](a: String(\"s\"))\louterLoops: 1\l<whileTemp>$4: TrueClass = true\l<whileTemp>$4: TrueClass\l"
    ];

    "bb::HasLoops#correct_assignment_2" -> "bb::HasLoops#correct_assignment_5" [style="bold"];
    "bb::HasLoops#correct_assignment_2" -> "bb::HasLoops#correct_assignment_3" [style="tapered"];

    "bb::HasLoops#correct_assignment_3" [
        shape = rectangle;
        color = red;
        label = "block[id=3, rubyBlockId=0]()\l<returnMethodTemp>$2 = nil\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::HasLoops#correct_assignment_3" -> "bb::HasLoops#correct_assignment_1" [style="bold"];
    "bb::HasLoops#correct_assignment_5" [
        shape = rectangle;
        color = black;
        label = "block[id=5, rubyBlockId=0](a: String(\"s\"))\louterLoops: 1\la: String(\"a\") = \"a\"\l<unconditional>\l"
    ];

    "bb::HasLoops#correct_assignment_5" -> "bb::HasLoops#correct_assignment_2" [style="bold"];
}

subgraph "cluster_::<Class:HasLoops>#<static-init>" {
    label = "::<Class:HasLoops>#<static-init>";
    color = blue;

    "bb::<Class:HasLoops>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(HasLoops) = cast(<self>: NilClass, T.class_of(HasLoops));\l<cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$7: Symbol(:variable_only_inside_loop) = :variable_only_inside_loop\l<statTemp>$8: Symbol(:normal) = :normal\l<statTemp>$3: Symbol(:variable_only_inside_loop) = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(HasLoops), <statTemp>$7: Symbol(:variable_only_inside_loop), <statTemp>$8: Symbol(:normal))\l<cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$13: Symbol(:incorrect_assignment) = :incorrect_assignment\l<statTemp>$14: Symbol(:normal) = :normal\l<statTemp>$9: Symbol(:incorrect_assignment) = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(HasLoops), <statTemp>$13: Symbol(:incorrect_assignment), <statTemp>$14: Symbol(:normal))\l<cfgAlias>$17: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$19: Symbol(:correct_assignment) = :correct_assignment\l<statTemp>$20: Symbol(:normal) = :normal\l<statTemp>$15: Symbol(:correct_assignment) = <cfgAlias>$17: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(HasLoops), <statTemp>$19: Symbol(:correct_assignment), <statTemp>$20: Symbol(:normal))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:HasLoops>#<static-init>_0" -> "bb::<Class:HasLoops>#<static-init>_1" [style="bold"];
    "bb::<Class:HasLoops>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:HasLoops>#<static-init>_1" -> "bb::<Class:HasLoops>#<static-init>_1" [style="bold"];
}

}

