; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.7 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.17 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_data*, %struct.anon.16, i32, i32, i32, i32, i32, i8, i64 }
%struct.anon = type { %struct.anon.0, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.0 = type { i16, [2 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.iseq_insn_info_entry*, i32*, i32, %struct.succ_index_table* }
%struct.iseq_insn_info_entry = type opaque
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, i64 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.rb_scope_visi_struct }
%struct.rb_scope_visi_struct = type { i8, [3 x i8] }
%struct.rb_call_data = type { %struct.rb_call_cache, %struct.rb_call_info }
%struct.rb_call_cache = type { i64, [3 x i64], %struct.rb_callable_method_entry_struct*, i64, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_data*)*, %union.anon.15 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon.13, i64, i64 }
%union.anon.13 = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64, i32, i64*, i64 (...)*)*, i32 }
%struct.rb_calling_info = type { i64, i64, i32, i32 }
%union.anon.15 = type { i32 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.anon.16 = type { i64, i64, i64, i64* }
%union.anon.17 = type { %struct.anon.18 }
%struct.anon.18 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [5 x i8*], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_fiber_struct = type opaque
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, i64, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %union.pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.10, i32, i64, %struct.rb_fiber_struct*, [5 x i8*], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %union.pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.5, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %union.pthread_mutex_t, i64, i64, i64, i64, i64, i32, %struct.st_table*, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.rb_builtin_function*, i32, %struct.anon.6, [29 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %union.pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%struct.anon.5 = type { [65 x i64] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.rb_builtin_function = type opaque
%struct.anon.6 = type { i64, i64, i64, i64 }
%struct.native_thread_data_struct = type { %struct.list_head, %union.anon.9 }
%union.anon.9 = type { %union.pthread_cond_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.10 = type { %struct.anon.11 }
%struct.anon.11 = type { i64, i64, i32 }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (i64, i64)*, i64 (i64)* }
%struct.st_table_entry = type opaque
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (i64)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.7 = type { i64*, i64*, i64, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.SorbetLineNumberInfo = type { i32, %struct.iseq_insn_info_entry*, i64* }
%struct.FunctionInlineCache = type { %struct.rb_kwarg_call_data }
%struct.rb_kwarg_call_data = type { %struct.rb_call_cache, %struct.rb_call_info_with_kwarg }
%struct.rb_call_info_with_kwarg = type { %struct.rb_call_info, %struct.rb_call_info_kw_arg* }
%struct.rb_call_info_kw_arg = type { i32, [1 x i64] }

@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@sorbet_getVoidSingleton.name = internal constant [30 x i8] c"T::Private::Types::Void::VOID\00", align 16
@ruby_vm_global_constant_state = external local_unnamed_addr global i64, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.9 = private unnamed_addr constant [95 x i8] c"sorbet_getBuildSCMRevision: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@.str.10 = private unnamed_addr constant [93 x i8] c"sorbet_getIsReleaseBuild: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@"stackFramePrecomputed_func_<root>.<static-init>$151" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"rubyStrFrozen_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"rubyStrFrozen_test/testdata/compiler/final_method_child_class.rb" = internal unnamed_addr global i64 0, align 8
@"str_test/testdata/compiler/final_method_child_class.rb" = private unnamed_addr constant [51 x i8] c"test/testdata/compiler/final_method_child_class.rb\00", align 1
@iseqEncodedArray = internal global [21 x i64] zeroinitializer
@fileLineNumberInfo = internal global %struct.SorbetLineNumberInfo zeroinitializer
@str_Parent = private unnamed_addr constant [7 x i8] c"Parent\00", align 1
@str_Child = private unnamed_addr constant [6 x i8] c"Child\00", align 1
@ic_new = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_new = internal unnamed_addr global i64 0, align 8
@str_new = private unnamed_addr constant [4 x i8] c"new\00", align 1
@ic_final_method = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_final_method = internal unnamed_addr global i64 0, align 8
@str_final_method = private unnamed_addr constant [13 x i8] c"final_method\00", align 1
@"stackFramePrecomputed_func_Parent#final_method" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyStrFrozen_final method!" = internal unnamed_addr global i64 0, align 8
@"str_final method!" = private unnamed_addr constant [14 x i8] c"final method!\00", align 1
@ic_puts = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@"<void-singleton>" = internal unnamed_addr global i64 0
@"stackFramePrecomputed_func_Parent.<static-init>" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"stackFramePrecomputed_func_Parent.<static-init>$block_1" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_block for" = internal unnamed_addr global i64 0, align 8
@"str_block for" = private unnamed_addr constant [10 x i8] c"block for\00", align 1
@rubyIdPrecomputed_final = internal unnamed_addr global i64 0, align 8
@str_final = private unnamed_addr constant [6 x i8] c"final\00", align 1
@ic_sig = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_sig = internal unnamed_addr global i64 0, align 8
@str_sig = private unnamed_addr constant [4 x i8] c"sig\00", align 1
@ic_void = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_void = internal unnamed_addr global i64 0, align 8
@str_void = private unnamed_addr constant [5 x i8] c"void\00", align 1
@"str_T::Sig" = private unnamed_addr constant [7 x i8] c"T::Sig\00", align 1
@ic_extend = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_extend = internal unnamed_addr global i64 0, align 8
@str_extend = private unnamed_addr constant [7 x i8] c"extend\00", align 1
@"str_T::Helpers" = private unnamed_addr constant [11 x i8] c"T::Helpers\00", align 1
@ic_extend.1 = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_normal = internal unnamed_addr global i64 0, align 8
@str_normal = private unnamed_addr constant [7 x i8] c"normal\00", align 1
@ic_keep_def = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_keep_def = internal unnamed_addr global i64 0, align 8
@str_keep_def = private unnamed_addr constant [9 x i8] c"keep_def\00", align 1
@"stackFramePrecomputed_func_Child.<static-init>" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@rb_cObject = external local_unnamed_addr constant i64
@"guard_epoch_T::Sig" = linkonce local_unnamed_addr global i64 0
@"guarded_const_T::Sig" = linkonce local_unnamed_addr global i64 0
@"guard_epoch_T::Helpers" = linkonce local_unnamed_addr global i64 0
@"guarded_const_T::Helpers" = linkonce local_unnamed_addr global i64 0
@guard_epoch_Parent = linkonce local_unnamed_addr global i64 0
@guarded_const_Parent = linkonce local_unnamed_addr global i64 0
@guard_epoch_Child = linkonce local_unnamed_addr global i64 0
@guarded_const_Child = linkonce local_unnamed_addr global i64 0

declare i64 @rb_id2sym(i64) local_unnamed_addr #0

; Function Attrs: noreturn
declare void @sorbet_raiseArity(i32, i32, i32) local_unnamed_addr #1

declare %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64, i64, i64, i64, %struct.rb_iseq_struct*, i32, i32, %struct.SorbetLineNumberInfo*, i64*, i32, i32) local_unnamed_addr #0

declare void @sorbet_initLineNumberInfo(%struct.SorbetLineNumberInfo*, i64*, i32) local_unnamed_addr #0

declare i64 @sorbet_getConstant(i8*, i64) local_unnamed_addr #0

declare i64 @sorbet_readRealpath() local_unnamed_addr #0

declare %struct.rb_control_frame_struct* @sorbet_pushStaticInitFrame(i64) local_unnamed_addr #0

declare void @sorbet_popFrame() local_unnamed_addr #0

declare void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache*, i64, i32, i32, i32, i64*) local_unnamed_addr #0

declare i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache*, i64) local_unnamed_addr #0

declare void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_iseq_struct*) local_unnamed_addr #0

declare void @sorbet_vm_register_sig(i64, i64, i64, i64, i64 (i64, i64, i32, i64*, i64)*) local_unnamed_addr #0

declare void @sorbet_vm_define_method(i64, i8*, i64 (i32, i64*, i64, %struct.rb_control_frame_struct*)*, i8*, %struct.rb_iseq_struct*, i1 zeroext) local_unnamed_addr #0

declare i64 @rb_define_class(i8*, i64) local_unnamed_addr #0

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #0

declare i64 @rb_fstring_new(i8*, i64) local_unnamed_addr #0

declare void @rb_gc_register_mark_object(i64) local_unnamed_addr #0

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #1

declare i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct*, i32) local_unnamed_addr #0

; Function Attrs: allocsize(0,1)
declare noalias nonnull i8* @ruby_xcalloc(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i32 @sorbet_getIsReleaseBuild() local_unnamed_addr #3 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !6
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* noundef getelementptr inbounds ([93 x i8], [93 x i8]* @.str.10, i64 0, i64 0)) #9
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @sorbet_getBuildSCMRevision() local_unnamed_addr #3 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !6
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* noundef getelementptr inbounds ([95 x i8], [95 x i8]* @.str.9, i64 0, i64 0)) #9
  unreachable
}

; Function Attrs: sspreq
define void @Init_final_method_child_class() local_unnamed_addr #4 {
entry:
  %locals.i23.i = alloca i64, i32 0, align 8
  %locals.i18.i = alloca i64, i32 0, align 8
  %locals.i14.i = alloca i64, i32 0, align 8
  %locals.i.i = alloca i64, i32 0, align 8
  %realpath = tail call i64 @sorbet_readRealpath()
  %0 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 noundef 16) #10
  store i64 %0, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %1 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @str_new, i64 0, i64 0), i64 noundef 3) #10
  store i64 %1, i64* @rubyIdPrecomputed_new, align 8
  %2 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @str_final_method, i64 0, i64 0), i64 noundef 12) #10
  store i64 %2, i64* @rubyIdPrecomputed_final_method, align 8
  %3 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 noundef 4) #10
  store i64 %3, i64* @rubyIdPrecomputed_puts, align 8
  %4 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @"str_block for", i64 0, i64 0), i64 noundef 9) #10
  store i64 %4, i64* @"rubyIdPrecomputed_block for", align 8
  %5 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @str_final, i64 0, i64 0), i64 noundef 5) #10
  store i64 %5, i64* @rubyIdPrecomputed_final, align 8
  %6 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @str_sig, i64 0, i64 0), i64 noundef 3) #10
  store i64 %6, i64* @rubyIdPrecomputed_sig, align 8
  %7 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @str_void, i64 0, i64 0), i64 noundef 4) #10
  store i64 %7, i64* @rubyIdPrecomputed_void, align 8
  %8 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @str_extend, i64 0, i64 0), i64 noundef 6) #10
  store i64 %8, i64* @rubyIdPrecomputed_extend, align 8
  %9 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @str_normal, i64 0, i64 0), i64 noundef 6) #10
  store i64 %9, i64* @rubyIdPrecomputed_normal, align 8
  %10 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([9 x i8], [9 x i8]* @str_keep_def, i64 0, i64 0), i64 noundef 8) #10
  store i64 %10, i64* @rubyIdPrecomputed_keep_def, align 8
  %11 = tail call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 noundef 16) #10
  tail call void @rb_gc_register_mark_object(i64 %11) #10
  store i64 %11, i64* @"rubyStrFrozen_<top (required)>", align 8
  %12 = tail call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([51 x i8], [51 x i8]* @"str_test/testdata/compiler/final_method_child_class.rb", i64 0, i64 0), i64 noundef 50) #10
  tail call void @rb_gc_register_mark_object(i64 %12) #10
  store i64 %12, i64* @"rubyStrFrozen_test/testdata/compiler/final_method_child_class.rb", align 8
  tail call void @sorbet_initLineNumberInfo(%struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i32 0, i32 0), i32 noundef 21)
  %"rubyId_<top (required)>.i.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/final_method_child_class.rb", align 8
  %13 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i.i", i64 %"rubyId_<top (required)>.i.i", i64 %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 0, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals.i.i, i32 noundef 0, i32 noundef 2)
  store %struct.rb_iseq_struct* %13, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$151", align 8
  %rubyId_new.i = load i64, i64* @rubyIdPrecomputed_new, align 8, !dbg !10
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_new, i64 %rubyId_new.i, i32 noundef 16, i32 noundef 0, i32 noundef 0, i64* noundef null), !dbg !10
  %rubyId_final_method.i = load i64, i64* @rubyIdPrecomputed_final_method, align 8, !dbg !10
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_final_method, i64 %rubyId_final_method.i, i32 noundef 16, i32 noundef 0, i32 noundef 0, i64* noundef null), !dbg !10
  %14 = call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @str_final_method, i64 0, i64 0), i64 noundef 12) #10
  call void @rb_gc_register_mark_object(i64 %14) #10
  %rubyId_final_method.i.i = load i64, i64* @rubyIdPrecomputed_final_method, align 8
  %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i13.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/final_method_child_class.rb", align 8
  %15 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %14, i64 %rubyId_final_method.i.i, i64 %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i13.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 1, i32 noundef 10, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals.i14.i, i32 noundef 0, i32 noundef 2)
  store %struct.rb_iseq_struct* %15, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Parent#final_method", align 8
  %16 = call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @"str_final method!", i64 0, i64 0), i64 noundef 13) #10
  call void @rb_gc_register_mark_object(i64 %16) #10
  store i64 %16, i64* @"rubyStrFrozen_final method!", align 8
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !15
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_puts, i64 %rubyId_puts.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !15
  %17 = call i64 @sorbet_getConstant(i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @sorbet_getVoidSingleton.name, i64 0, i64 0), i64 noundef 30) #10
  store i64 %17, i64* @"<void-singleton>", align 8
  %"rubyId_<top (required)>.i15.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i16.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i17.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/final_method_child_class.rb", align 8
  %18 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i16.i", i64 %"rubyId_<top (required)>.i15.i", i64 %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i17.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 3, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals.i18.i, i32 noundef 0, i32 noundef 5)
  store %struct.rb_iseq_struct* %18, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Parent.<static-init>", align 8
  %19 = call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @"str_block for", i64 0, i64 0), i64 noundef 9) #10
  call void @rb_gc_register_mark_object(i64 %19) #10
  %stackFrame.i.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Parent.<static-init>", align 8
  %"rubyId_block for.i.i" = load i64, i64* @"rubyIdPrecomputed_block for", align 8
  %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i19.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/final_method_child_class.rb", align 8
  %20 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %19, i64 %"rubyId_block for.i.i", i64 %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i19.i", i64 %realpath, %struct.rb_iseq_struct* %stackFrame.i.i, i32 noundef 2, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef null, i32 noundef 0, i32 noundef 5)
  store %struct.rb_iseq_struct* %20, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Parent.<static-init>$block_1", align 8
  %rubyId_sig.i = load i64, i64* @rubyIdPrecomputed_sig, align 8, !dbg !17
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_sig, i64 %rubyId_sig.i, i32 noundef 20, i32 noundef 4, i32 noundef 0, i64* noundef null), !dbg !17
  %rubyId_void.i = load i64, i64* @rubyIdPrecomputed_void, align 8, !dbg !19
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_void, i64 %rubyId_void.i, i32 noundef 20, i32 noundef 0, i32 noundef 0, i64* noundef null), !dbg !19
  %rubyId_extend.i = load i64, i64* @rubyIdPrecomputed_extend, align 8, !dbg !21
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_extend, i64 %rubyId_extend.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !21
  %rubyId_extend9.i = load i64, i64* @rubyIdPrecomputed_extend, align 8, !dbg !22
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_extend.1, i64 %rubyId_extend9.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !22
  %rubyId_keep_def.i = load i64, i64* @rubyIdPrecomputed_keep_def, align 8, !dbg !23
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_keep_def, i64 %rubyId_keep_def.i, i32 noundef 16, i32 noundef 3, i32 noundef 0, i64* noundef null), !dbg !23
  %"rubyId_<top (required)>.i20.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i21.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i22.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/final_method_child_class.rb", align 8
  %21 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i21.i", i64 %"rubyId_<top (required)>.i20.i", i64 %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i22.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 3, i32 noundef 15, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals.i23.i, i32 noundef 0, i32 noundef 0)
  store %struct.rb_iseq_struct* %21, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Child.<static-init>", align 8
  %22 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !24
  %23 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %22, i64 0, i32 2
  %24 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %23, align 8, !tbaa !26
  %stackFrame.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$151", align 8
  %25 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %24, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i, %struct.rb_iseq_struct** %25, align 8, !tbaa !30
  %26 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %24, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8, !tbaa !32
  %28 = load i64, i64* %27, align 8, !tbaa !6
  %29 = and i64 %28, -33
  store i64 %29, i64* %27, align 8, !tbaa !6
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %22, %struct.rb_control_frame_struct* %24, %struct.rb_iseq_struct* %stackFrame.i) #10
  %30 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %24, i64 0, i32 0
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %30, align 8, !dbg !33, !tbaa !24
  %31 = load i64, i64* @rb_cObject, align 8, !dbg !34
  %32 = call i64 @rb_define_class(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @str_Parent, i64 0, i64 0), i64 %31) #10, !dbg !34
  %33 = call %struct.rb_control_frame_struct* @sorbet_pushStaticInitFrame(i64 %32) #10, !dbg !34
  %stackFrame.i1.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Parent.<static-init>", align 8
  %34 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !24
  %35 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %34, i64 0, i32 2
  %36 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %35, align 8, !tbaa !26
  %37 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %36, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i1.i, %struct.rb_iseq_struct** %37, align 8, !tbaa !30
  %38 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %36, i64 0, i32 4
  %39 = load i64*, i64** %38, align 8, !tbaa !32
  %40 = load i64, i64* %39, align 8, !tbaa !6
  %41 = and i64 %40, -33
  store i64 %41, i64* %39, align 8, !tbaa !6
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %34, %struct.rb_control_frame_struct* %36, %struct.rb_iseq_struct* %stackFrame.i1.i) #10
  %42 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %33, i64 0, i32 0
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 9), i64** %42, align 8, !dbg !35, !tbaa !24
  %rubyId_final.i.i = load i64, i64* @rubyIdPrecomputed_final, align 8, !dbg !37
  %rawSym.i.i = call i64 @rb_id2sym(i64 %rubyId_final.i.i) #10, !dbg !37
  %rubyId_final_method.i.i1 = load i64, i64* @rubyIdPrecomputed_final_method, align 8, !dbg !38
  %rawSym33.i.i = call i64 @rb_id2sym(i64 %rubyId_final_method.i.i1) #10, !dbg !38
  call void @sorbet_vm_register_sig(i64 noundef 0, i64 %rawSym33.i.i, i64 %32, i64 %rawSym.i.i, i64 (i64, i64, i32, i64*, i64)* noundef @"func_Parent.<static-init>L62$block_1") #10, !dbg !38
  %43 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !38, !tbaa !24
  %44 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %43, i64 0, i32 5, !dbg !38
  %45 = load i32, i32* %44, align 8, !dbg !38, !tbaa !39
  %46 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %43, i64 0, i32 6, !dbg !38
  %47 = load i32, i32* %46, align 4, !dbg !38, !tbaa !40
  %48 = xor i32 %47, -1, !dbg !38
  %49 = and i32 %48, %45, !dbg !38
  %50 = icmp eq i32 %49, 0, !dbg !38
  br i1 %50, label %fastSymCallIntrinsic_Static_keep_def.i.i, label %51, !dbg !38, !prof !41

51:                                               ; preds = %entry
  %52 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %43, i64 0, i32 8, !dbg !38
  %53 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %52, align 8, !dbg !38, !tbaa !42
  %54 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %53, i32 noundef 0) #10, !dbg !38
  br label %fastSymCallIntrinsic_Static_keep_def.i.i, !dbg !38

fastSymCallIntrinsic_Static_keep_def.i.i:         ; preds = %51, %entry
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 6), i64** %42, align 8, !dbg !38, !tbaa !24
  %55 = load i64, i64* @"guard_epoch_T::Sig", align 8, !dbg !43
  %56 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !43, !tbaa !44
  %needTakeSlowPath = icmp ne i64 %55, %56, !dbg !43
  br i1 %needTakeSlowPath, label %57, label %58, !dbg !43, !prof !46

57:                                               ; preds = %fastSymCallIntrinsic_Static_keep_def.i.i
  call void @"const_recompute_T::Sig"(), !dbg !43
  br label %58, !dbg !43

58:                                               ; preds = %fastSymCallIntrinsic_Static_keep_def.i.i, %57
  %59 = load i64, i64* @"guarded_const_T::Sig", align 8, !dbg !43
  %60 = load i64, i64* @"guard_epoch_T::Sig", align 8, !dbg !43
  %61 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !43, !tbaa !44
  %guardUpdated = icmp eq i64 %60, %61, !dbg !43
  call void @llvm.assume(i1 %guardUpdated), !dbg !43
  %62 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %33, i64 0, i32 1, !dbg !43
  %63 = load i64*, i64** %62, align 8, !dbg !43
  store i64 %32, i64* %63, align 8, !dbg !43, !tbaa !6
  %64 = getelementptr inbounds i64, i64* %63, i64 1, !dbg !43
  store i64 %59, i64* %64, align 8, !dbg !43, !tbaa !6
  %65 = getelementptr inbounds i64, i64* %64, i64 1, !dbg !43
  store i64* %65, i64** %62, align 8, !dbg !43
  %send = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_extend, i64 0), !dbg !43
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 7), i64** %42, align 8, !dbg !43, !tbaa !24
  %66 = load i64, i64* @"guard_epoch_T::Helpers", align 8, !dbg !47
  %67 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !47, !tbaa !44
  %needTakeSlowPath3 = icmp ne i64 %66, %67, !dbg !47
  br i1 %needTakeSlowPath3, label %68, label %69, !dbg !47, !prof !46

68:                                               ; preds = %58
  call void @"const_recompute_T::Helpers"(), !dbg !47
  br label %69, !dbg !47

69:                                               ; preds = %58, %68
  %70 = load i64, i64* @"guarded_const_T::Helpers", align 8, !dbg !47
  %71 = load i64, i64* @"guard_epoch_T::Helpers", align 8, !dbg !47
  %72 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !47, !tbaa !44
  %guardUpdated4 = icmp eq i64 %71, %72, !dbg !47
  call void @llvm.assume(i1 %guardUpdated4), !dbg !47
  %73 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %33, i64 0, i32 1, !dbg !47
  %74 = load i64*, i64** %73, align 8, !dbg !47
  store i64 %32, i64* %74, align 8, !dbg !47, !tbaa !6
  %75 = getelementptr inbounds i64, i64* %74, i64 1, !dbg !47
  store i64 %70, i64* %75, align 8, !dbg !47, !tbaa !6
  %76 = getelementptr inbounds i64, i64* %75, i64 1, !dbg !47
  store i64* %76, i64** %73, align 8, !dbg !47
  %send10 = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_extend.1, i64 0), !dbg !47
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 10), i64** %42, align 8, !dbg !47, !tbaa !24
  %rubyId_final_method55.i.i = load i64, i64* @rubyIdPrecomputed_final_method, align 8, !dbg !48
  %rawSym56.i.i = call i64 @rb_id2sym(i64 %rubyId_final_method55.i.i) #10, !dbg !48
  %rubyId_normal.i.i = load i64, i64* @rubyIdPrecomputed_normal, align 8, !dbg !48
  %rawSym57.i.i = call i64 @rb_id2sym(i64 %rubyId_normal.i.i) #10, !dbg !48
  %77 = load i64, i64* @guard_epoch_Parent, align 8, !dbg !48
  %78 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !48, !tbaa !44
  %needTakeSlowPath5 = icmp ne i64 %77, %78, !dbg !48
  br i1 %needTakeSlowPath5, label %79, label %80, !dbg !48, !prof !46

79:                                               ; preds = %69
  call void @const_recompute_Parent(), !dbg !48
  br label %80, !dbg !48

80:                                               ; preds = %69, %79
  %81 = load i64, i64* @guarded_const_Parent, align 8, !dbg !48
  %82 = load i64, i64* @guard_epoch_Parent, align 8, !dbg !48
  %83 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !48, !tbaa !44
  %guardUpdated6 = icmp eq i64 %82, %83, !dbg !48
  call void @llvm.assume(i1 %guardUpdated6), !dbg !48
  %stackFrame61.i.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Parent#final_method", align 8, !dbg !48
  %84 = call noalias nonnull i8* @ruby_xcalloc(i64 noundef 1, i64 noundef 64) #11, !dbg !48
  %85 = bitcast i8* %84 to i16*, !dbg !48
  %86 = load i16, i16* %85, align 8, !dbg !48
  %87 = and i16 %86, -384, !dbg !48
  store i16 %87, i16* %85, align 8, !dbg !48
  %88 = getelementptr inbounds i8, i8* %84, i64 4, !dbg !48
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %88, i8 0, i64 28, i1 false) #10, !dbg !48
  call void @sorbet_vm_define_method(i64 %81, i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @str_final_method, i64 0, i64 0), i64 (i32, i64*, i64, %struct.rb_control_frame_struct*)* noundef @"func_Parent#final_method", i8* nonnull %84, %struct.rb_iseq_struct* %stackFrame61.i.i, i1 noundef zeroext false) #10, !dbg !48
  %89 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !48, !tbaa !24
  %90 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %89, i64 0, i32 5, !dbg !48
  %91 = load i32, i32* %90, align 8, !dbg !48, !tbaa !39
  %92 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %89, i64 0, i32 6, !dbg !48
  %93 = load i32, i32* %92, align 4, !dbg !48, !tbaa !40
  %94 = xor i32 %93, -1, !dbg !48
  %95 = and i32 %94, %91, !dbg !48
  %96 = icmp eq i32 %95, 0, !dbg !48
  br i1 %96, label %"func_<root>.<static-init>$151.exit", label %97, !dbg !48, !prof !41

97:                                               ; preds = %80
  %98 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %89, i64 0, i32 8, !dbg !48
  %99 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %98, align 8, !dbg !48, !tbaa !42
  %100 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %99, i32 noundef 0) #10, !dbg !48
  br label %"func_<root>.<static-init>$151.exit", !dbg !48

"func_<root>.<static-init>$151.exit":             ; preds = %80, %97
  call void @sorbet_popFrame() #10, !dbg !34
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 15), i64** %30, align 8, !dbg !34, !tbaa !24
  %101 = call i64 @rb_define_class(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @str_Child, i64 0, i64 0), i64 %81) #10, !dbg !49
  %102 = call %struct.rb_control_frame_struct* @sorbet_pushStaticInitFrame(i64 %101) #10, !dbg !49
  %stackFrame.i.i2 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Child.<static-init>", align 8
  %103 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !24
  %104 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %103, i64 0, i32 2
  %105 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %104, align 8, !tbaa !26
  %106 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %105, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i.i2, %struct.rb_iseq_struct** %106, align 8, !tbaa !30
  %107 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %105, i64 0, i32 4
  %108 = load i64*, i64** %107, align 8, !tbaa !32
  %109 = load i64, i64* %108, align 8, !tbaa !6
  %110 = and i64 %109, -33
  store i64 %110, i64* %108, align 8, !tbaa !6
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %103, %struct.rb_control_frame_struct* %105, %struct.rb_iseq_struct* %stackFrame.i.i2) #10
  %111 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %102, i64 0, i32 0
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 15), i64** %111, align 8, !dbg !50, !tbaa !24
  call void @sorbet_popFrame() #10, !dbg !49
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 20), i64** %30, align 8, !dbg !49, !tbaa !24
  %112 = load i64, i64* @guard_epoch_Child, align 8, !dbg !10
  %113 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !10, !tbaa !44
  %needTakeSlowPath7 = icmp ne i64 %112, %113, !dbg !10
  br i1 %needTakeSlowPath7, label %114, label %115, !dbg !10, !prof !46

114:                                              ; preds = %"func_<root>.<static-init>$151.exit"
  call void @const_recompute_Child(), !dbg !10
  br label %115, !dbg !10

115:                                              ; preds = %"func_<root>.<static-init>$151.exit", %114
  %116 = load i64, i64* @guarded_const_Child, align 8, !dbg !10
  %117 = load i64, i64* @guard_epoch_Child, align 8, !dbg !10
  %118 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !10, !tbaa !44
  %guardUpdated8 = icmp eq i64 %117, %118, !dbg !10
  call void @llvm.assume(i1 %guardUpdated8), !dbg !10
  %119 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %24, i64 0, i32 1, !dbg !10
  %120 = load i64*, i64** %119, align 8, !dbg !10
  store i64 %116, i64* %120, align 8, !dbg !10, !tbaa !6
  %121 = getelementptr inbounds i64, i64* %120, i64 1, !dbg !10
  store i64* %121, i64** %119, align 8, !dbg !10
  %send12 = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_new, i64 0), !dbg !10
  %122 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %24, i64 0, i32 1, !dbg !10
  %123 = load i64*, i64** %122, align 8, !dbg !10
  store i64 %send12, i64* %123, align 8, !dbg !10, !tbaa !6
  %124 = getelementptr inbounds i64, i64* %123, i64 1, !dbg !10
  store i64* %124, i64** %122, align 8, !dbg !10
  %send14 = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_final_method, i64 0), !dbg !10
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_Parent#final_method"(i32 %argc, i64* nocapture nofree readnone %argArray, i64 %selfRaw, %struct.rb_control_frame_struct* nonnull align 8 dereferenceable(8) %cfp) #5 !dbg !16 {
functionEntryInitializers:
  %0 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 0
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 10), i64** %0, align 8, !tbaa !24
  %tooManyArgs = icmp ugt i32 %argc, 0, !dbg !53
  br i1 %tooManyArgs, label %argCountFailBlock, label %fillRequiredArgs, !dbg !53, !prof !54

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call void @sorbet_raiseArity(i32 %argc, i32 noundef 0, i32 noundef 0) #12, !dbg !53
  unreachable, !dbg !53

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 11), i64** %0, align 8, !dbg !55, !tbaa !24
  %"rubyStr_final method!" = load i64, i64* @"rubyStrFrozen_final method!", align 8, !dbg !56
  %1 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 1, !dbg !15
  %2 = load i64*, i64** %1, align 8, !dbg !15
  store i64 %selfRaw, i64* %2, align 8, !dbg !15, !tbaa !6
  %3 = getelementptr inbounds i64, i64* %2, i64 1, !dbg !15
  store i64 %"rubyStr_final method!", i64* %3, align 8, !dbg !15, !tbaa !6
  %4 = getelementptr inbounds i64, i64* %3, i64 1, !dbg !15
  store i64* %4, i64** %1, align 8, !dbg !15
  %send = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_puts, i64 0), !dbg !15
  %"<void-singleton>" = load i64, i64* @"<void-singleton>", align 8
  ret i64 %"<void-singleton>"
}

; Function Attrs: ssp
define internal i64 @"func_Parent.<static-init>L62$block_1"(i64 %firstYieldArgRaw, i64 %localsOffset, i32 %argc, i64* nocapture nofree readnone %argArray, i64 %blockArg) #6 !dbg !20 {
functionEntryInitializers:
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !24
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !26
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 3
  %4 = load i64, i64* %3, align 8, !tbaa !57
  %stackFrame = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Parent.<static-init>$block_1", align 8
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame, %struct.rb_iseq_struct** %5, align 8, !tbaa !30
  %6 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 4
  %7 = load i64*, i64** %6, align 8, !tbaa !32
  %8 = load i64, i64* %7, align 8, !tbaa !6
  %9 = and i64 %8, -129
  store i64 %9, i64* %7, align 8, !tbaa !6
  %10 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 0
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 9), i64** %10, align 8, !tbaa !24
  %11 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 1, !dbg !19
  %12 = load i64*, i64** %11, align 8, !dbg !19
  store i64 %4, i64* %12, align 8, !dbg !19, !tbaa !6
  %13 = getelementptr inbounds i64, i64* %12, i64 1, !dbg !19
  store i64* %13, i64** %11, align 8, !dbg !19
  %send = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_void, i64 0), !dbg !19
  ret i64 %send, !dbg !58
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

; Function Attrs: nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #8

; Function Attrs: ssp
define linkonce void @"const_recompute_T::Sig"() local_unnamed_addr #6 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"str_T::Sig", i64 0, i64 0), i64 6)
  store i64 %1, i64* @"guarded_const_T::Sig", align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !44
  store i64 %2, i64* @"guard_epoch_T::Sig", align 8
  ret void
}

; Function Attrs: ssp
define linkonce void @"const_recompute_T::Helpers"() local_unnamed_addr #6 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"str_T::Helpers", i64 0, i64 0), i64 10)
  store i64 %1, i64* @"guarded_const_T::Helpers", align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !44
  store i64 %2, i64* @"guard_epoch_T::Helpers", align 8
  ret void
}

; Function Attrs: ssp
define linkonce void @const_recompute_Parent() local_unnamed_addr #6 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Parent, i64 0, i64 0), i64 6)
  store i64 %1, i64* @guarded_const_Parent, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !44
  store i64 %2, i64* @guard_epoch_Parent, align 8
  ret void
}

; Function Attrs: ssp
define linkonce void @const_recompute_Child() local_unnamed_addr #6 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_Child, i64 0, i64 0), i64 5)
  store i64 %1, i64* @guarded_const_Child, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !44
  store i64 %2, i64* @guard_epoch_Child, align 8
  ret void
}

attributes #0 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { allocsize(0,1) "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { sspreq }
attributes #5 = { nounwind sspreq uwtable }
attributes #6 = { ssp }
attributes #7 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #8 = { nofree nosync nounwind willreturn }
attributes #9 = { noreturn nounwind }
attributes #10 = { nounwind }
attributes #11 = { nounwind allocsize(0,1) }
attributes #12 = { noreturn }

!llvm.module.flags = !{!0, !1, !2}
!llvm.dbg.cu = !{!3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"cf-protection-return", i32 1}
!2 = !{i32 4, !"cf-protection-branch", i32 1}
!3 = distinct !DICompileUnit(language: DW_LANG_C, file: !4, producer: "Sorbet LLVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !5)
!4 = !DIFile(filename: "test/testdata/compiler/final_method_child_class.rb", directory: ".")
!5 = !{}
!6 = !{!7, !7, i64 0}
!7 = !{!"long", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = !DILocation(line: 20, column: 1, scope: !11)
!11 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.<static-init>$151", scope: null, file: !4, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!12 = !DISubroutineType(types: !13)
!13 = !{!14}
!14 = !DIBasicType(name: "VALUE", size: 64, encoding: DW_ATE_signed)
!15 = !DILocation(line: 11, column: 5, scope: !16)
!16 = distinct !DISubprogram(name: "Parent#final_method", linkageName: "func_Parent#final_method", scope: null, file: !4, line: 10, type: !12, scopeLine: 10, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!17 = !DILocation(line: 9, column: 3, scope: !18)
!18 = distinct !DISubprogram(name: "Parent.<static-init>", linkageName: "func_Parent.<static-init>L62", scope: null, file: !4, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!19 = !DILocation(line: 9, column: 16, scope: !20)
!20 = distinct !DISubprogram(name: "Parent.<static-init>", linkageName: "func_Parent.<static-init>L62$block_1", scope: !18, file: !4, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!21 = !DILocation(line: 6, column: 3, scope: !18)
!22 = !DILocation(line: 7, column: 3, scope: !18)
!23 = !DILocation(line: 10, column: 3, scope: !18)
!24 = !{!25, !25, i64 0}
!25 = !{!"any pointer", !8, i64 0}
!26 = !{!27, !25, i64 16}
!27 = !{!"rb_execution_context_struct", !25, i64 0, !7, i64 8, !25, i64 16, !25, i64 24, !25, i64 32, !28, i64 40, !28, i64 44, !25, i64 48, !25, i64 56, !25, i64 64, !7, i64 72, !7, i64 80, !25, i64 88, !7, i64 96, !25, i64 104, !25, i64 112, !7, i64 120, !7, i64 128, !8, i64 136, !8, i64 137, !7, i64 144, !29, i64 152}
!28 = !{!"int", !8, i64 0}
!29 = !{!"", !25, i64 0, !25, i64 8, !7, i64 16, !8, i64 24}
!30 = !{!31, !25, i64 16}
!31 = !{!"rb_control_frame_struct", !25, i64 0, !25, i64 8, !25, i64 16, !7, i64 24, !25, i64 32, !25, i64 40, !25, i64 48}
!32 = !{!31, !25, i64 32}
!33 = !DILocation(line: 0, scope: !11)
!34 = !DILocation(line: 5, column: 1, scope: !11)
!35 = !DILocation(line: 0, scope: !18, inlinedAt: !36)
!36 = distinct !DILocation(line: 5, column: 1, scope: !11)
!37 = !DILocation(line: 9, column: 7, scope: !18, inlinedAt: !36)
!38 = !DILocation(line: 9, column: 3, scope: !18, inlinedAt: !36)
!39 = !{!27, !28, i64 40}
!40 = !{!27, !28, i64 44}
!41 = !{!"branch_weights", i32 2000, i32 1}
!42 = !{!27, !25, i64 56}
!43 = !DILocation(line: 6, column: 3, scope: !18, inlinedAt: !36)
!44 = !{!45, !45, i64 0}
!45 = !{!"long long", !8, i64 0}
!46 = !{!"branch_weights", i32 1, i32 10000}
!47 = !DILocation(line: 7, column: 3, scope: !18, inlinedAt: !36)
!48 = !DILocation(line: 10, column: 3, scope: !18, inlinedAt: !36)
!49 = !DILocation(line: 15, column: 1, scope: !11)
!50 = !DILocation(line: 0, scope: !51, inlinedAt: !52)
!51 = distinct !DISubprogram(name: "Child.<static-init>", linkageName: "func_Child.<static-init>L188", scope: null, file: !4, line: 15, type: !12, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!52 = distinct !DILocation(line: 15, column: 1, scope: !11)
!53 = !DILocation(line: 10, column: 3, scope: !16)
!54 = !{!"branch_weights", i32 1, i32 2000}
!55 = !DILocation(line: 0, scope: !16)
!56 = !DILocation(line: 11, column: 10, scope: !16)
!57 = !{!31, !7, i64 24}
!58 = !DILocation(line: 9, column: 3, scope: !20)
