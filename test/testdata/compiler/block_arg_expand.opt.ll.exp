; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.7 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.17 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_data*, %struct.anon.16, i32, i32, i32, i32, i32, i8, i64 }
%struct.anon = type { %struct.anon.0, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.0 = type { i16, [2 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.iseq_insn_info_entry*, i32*, i32, %struct.succ_index_table* }
%struct.iseq_insn_info_entry = type opaque
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, i64 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.rb_scope_visi_struct }
%struct.rb_scope_visi_struct = type { i8, [3 x i8] }
%struct.rb_call_data = type { %struct.rb_call_cache, %struct.rb_call_info }
%struct.rb_call_cache = type { i64, [3 x i64], %struct.rb_callable_method_entry_struct*, i64, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_data*)*, %union.anon.15 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon.13, i64, i64 }
%union.anon.13 = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64, i32, i64*, i64 (...)*)*, i32 }
%struct.rb_calling_info = type { i64, i64, i32, i32 }
%union.anon.15 = type { i32 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.anon.16 = type { i64, i64, i64, i64* }
%union.anon.17 = type { %struct.anon.18 }
%struct.anon.18 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [5 x i8*], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_fiber_struct = type opaque
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, i64, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %union.pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.10, i32, i64, %struct.rb_fiber_struct*, [5 x i8*], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %union.pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.5, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %union.pthread_mutex_t, i64, i64, i64, i64, i64, i32, %struct.st_table*, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.rb_builtin_function*, i32, %struct.anon.6, [29 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %union.pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%struct.anon.5 = type { [65 x i64] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.rb_builtin_function = type opaque
%struct.anon.6 = type { i64, i64, i64, i64 }
%struct.native_thread_data_struct = type { %struct.list_head, %union.anon.9 }
%union.anon.9 = type { %union.pthread_cond_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.10 = type { %struct.anon.11 }
%struct.anon.11 = type { i64, i64, i32 }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (i64, i64)*, i64 (i64)* }
%struct.st_table_entry = type opaque
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (i64)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.7 = type { i64*, i64*, i64, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.SorbetLineNumberInfo = type { i32, %struct.iseq_insn_info_entry*, i64* }
%struct.FunctionInlineCache = type { %struct.rb_kwarg_call_data }
%struct.rb_kwarg_call_data = type { %struct.rb_call_cache, %struct.rb_call_info_with_kwarg }
%struct.rb_call_info_with_kwarg = type { %struct.rb_call_info, %struct.rb_call_info_kw_arg* }
%struct.rb_call_info_kw_arg = type { i32, [1 x i64] }
%struct.rb_captured_block = type { i64, i64*, %union.anon.20 }
%union.anon.20 = type { %struct.rb_iseq_struct* }
%struct.vm_ifunc = type { i64, i64, i64 (i64, i64, i32, i64*, i64)*, i8*, %struct.rb_code_position_struct }
%struct.iseq_inline_iv_cache_entry = type { i64, i64 }
%struct.RArray = type { %struct.iseq_inline_iv_cache_entry, %union.anon.28 }
%union.anon.28 = type { %struct.anon.29 }
%struct.anon.29 = type { i64, %union.anon, i64* }
%struct.sorbet_inlineIntrinsicEnv = type { i64, i64, i32, i64*, i64 }

@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.9 = private unnamed_addr constant [95 x i8] c"sorbet_getBuildSCMRevision: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@.str.10 = private unnamed_addr constant [93 x i8] c"sorbet_getIsReleaseBuild: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@"stackFramePrecomputed_func_<root>.17<static-init>$152" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"rubyStrFrozen_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb" = internal unnamed_addr global i64 0, align 8
@"str_test/testdata/compiler/block_arg_expand.rb" = private unnamed_addr constant [43 x i8] c"test/testdata/compiler/block_arg_expand.rb\00", align 1
@"rubyIdPrecomputed_<block-call>" = internal unnamed_addr global i64 0, align 8
@"str_<block-call>" = private unnamed_addr constant [13 x i8] c"<block-call>\00", align 1
@iseqEncodedArray = internal global [32 x i64] zeroinitializer
@fileLineNumberInfo = internal global %struct.SorbetLineNumberInfo zeroinitializer
@"stackFramePrecomputed_func_<root>.17<static-init>$152$block_1" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_block in <top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_block in <top (required)>" = private unnamed_addr constant [26 x i8] c"block in <top (required)>\00", align 1
@"rubyStrFrozen_block in <top (required)>" = internal unnamed_addr global i64 0, align 8
@"stackFramePrecomputed_func_<root>.17<static-init>$152$block_2" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"stackFramePrecomputed_func_<root>.17<static-init>$152$block_3" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"stackFramePrecomputed_func_<root>.17<static-init>$152$block_4" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"stackFramePrecomputed_func_<root>.17<static-init>$152$block_5" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"str_<build-array>" = private unnamed_addr constant [14 x i8] c"<build-array>\00", align 1
@rubyIdPrecomputed_each = internal unnamed_addr global i64 0, align 8
@str_each = private unnamed_addr constant [5 x i8] c"each\00", align 1
@"func_<root>.17<static-init>$152$block_1_ifunc" = internal unnamed_addr global i64 0
@str_T.let = private unnamed_addr constant [6 x i8] c"T.let\00", align 1
@str_Integer = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@"rubyIdPrecomputed_+" = internal unnamed_addr global i64 0, align 8
@"str_+" = private unnamed_addr constant [2 x i8] c"+\00", align 1
@"ic_+" = internal global %struct.FunctionInlineCache zeroinitializer
@"func_<root>.17<static-init>$152$block_2_ifunc" = internal unnamed_addr global i64 0
@ic_p = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_p = internal unnamed_addr global i64 0, align 8
@str_p = private unnamed_addr constant [2 x i8] c"p\00", align 1
@"func_<root>.17<static-init>$152$block_3_ifunc" = internal unnamed_addr global i64 0
@rubyIdPrecomputed_x = internal unnamed_addr global i64 0, align 8
@str_x = private unnamed_addr constant [2 x i8] c"x\00", align 1
@ic_p.5 = internal global %struct.FunctionInlineCache zeroinitializer
@"func_<root>.17<static-init>$152$block_4_ifunc" = internal unnamed_addr global i64 0
@rubyIdPrecomputed_default = internal unnamed_addr global i64 0, align 8
@str_default = private unnamed_addr constant [8 x i8] c"default\00", align 1
@rubyIdPrecomputed_something = internal unnamed_addr global i64 0, align 8
@str_something = private unnamed_addr constant [10 x i8] c"something\00", align 1
@ic_p.8 = internal global %struct.FunctionInlineCache zeroinitializer
@ic_p.9 = internal global %struct.FunctionInlineCache zeroinitializer
@"func_<root>.17<static-init>$152$block_5_ifunc" = internal unnamed_addr global i64 0
@ic_p.12 = internal global %struct.FunctionInlineCache zeroinitializer
@ic_p.13 = internal global %struct.FunctionInlineCache zeroinitializer

; Function Attrs: nofree nosync nounwind readnone willreturn mustprogress
declare i64 @rb_id2sym(i64) local_unnamed_addr #0

; Function Attrs: cold noreturn
declare void @sorbet_cast_failure(i64, i8*, i8*) local_unnamed_addr #1

declare %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64, i64, i64, i64, %struct.rb_iseq_struct*, i32, i32, %struct.SorbetLineNumberInfo*, i64*, i32, i32) local_unnamed_addr #2

declare void @sorbet_initLineNumberInfo(%struct.SorbetLineNumberInfo*, i64*, i32) local_unnamed_addr #2

declare i64 @sorbet_readRealpath() local_unnamed_addr #2

declare void @sorbet_pushBlockFrame(%struct.rb_captured_block*) local_unnamed_addr #2

declare void @sorbet_popFrame() local_unnamed_addr #2

declare void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache*, i64, i32, i32, i32, i64*) local_unnamed_addr #2

declare i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache*, i64) local_unnamed_addr #2

declare void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_iseq_struct*) local_unnamed_addr #2

declare i64 @sorbet_rb_int_plus_slowpath(i64, i64) local_unnamed_addr #2

declare i64 @sorbet_globalConstRegister(i64) local_unnamed_addr #2

declare %struct.vm_ifunc* @sorbet_globalConstFetchIfunc(i64) local_unnamed_addr #2

declare i64 @sorbet_vm_fstring_new(i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #2

declare void @rb_ary_detransient(i64) local_unnamed_addr #2

declare i64 @rb_ary_new_from_values(i64, i64*) local_unnamed_addr #2

declare void @rb_gc_register_mark_object(i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #4

declare i64 @rb_int2big(i64) local_unnamed_addr #2

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #5

; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn
declare void @llvm.experimental.noalias.scope.decl(metadata) #6

declare i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct*, i32) local_unnamed_addr #2

declare %struct.vm_ifunc* @rb_vm_ifunc_new(i64 (i64, i64, i32, i64*, i64)*, i8*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i32 @sorbet_getIsReleaseBuild() local_unnamed_addr #7 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !6
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* noundef getelementptr inbounds ([93 x i8], [93 x i8]* @.str.10, i64 0, i64 0)) #13
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @sorbet_getBuildSCMRevision() local_unnamed_addr #7 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !6
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* noundef getelementptr inbounds ([95 x i8], [95 x i8]* @.str.9, i64 0, i64 0)) #13
  unreachable
}

; Function Attrs: ssp
define internal i64 @"func_<root>.17<static-init>$152$block_1"(i64 %firstYieldArgRaw, i64 %localsOffset, i32 %argc, i64* nocapture readonly %argArray, i64 %blockArg) #8 !dbg !10 {
functionEntryInitializers:
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !15
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !17
  %stackFrame = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$152$block_1", align 8
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame, %struct.rb_iseq_struct** %3, align 8, !tbaa !21
  %4 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 4
  %5 = load i64*, i64** %4, align 8, !tbaa !23
  %6 = load i64, i64* %5, align 8, !tbaa !6
  %7 = and i64 %6, -129
  store i64 %7, i64* %5, align 8, !tbaa !6
  %8 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 0
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %8, align 8, !tbaa !15
  %arrayExpansionSizeGuard = icmp eq i32 %argc, 1, !dbg !24
  br i1 %arrayExpansionSizeGuard, label %argArrayExpandArrayTest, label %fillRequiredArgs, !dbg !24

argArrayExpandArrayTest:                          ; preds = %functionEntryInitializers
  %arg1_maybeExpandToFullArgs = load i64, i64* %argArray, align 8, !dbg !24
  %9 = and i64 %arg1_maybeExpandToFullArgs, 7, !dbg !24
  %10 = icmp ne i64 %9, 0, !dbg !24
  %11 = and i64 %arg1_maybeExpandToFullArgs, -9, !dbg !24
  %12 = icmp eq i64 %11, 0, !dbg !24
  %13 = or i1 %10, %12, !dbg !24
  br i1 %13, label %fillFromDefaultBlockDone2, label %sorbet_isa_Array.exit, !dbg !24

sorbet_isa_Array.exit:                            ; preds = %argArrayExpandArrayTest
  %14 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.iseq_inline_iv_cache_entry*, !dbg !24
  %15 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %14, i64 0, i32 0, !dbg !24
  %16 = load i64, i64* %15, align 8, !dbg !24, !tbaa !25
  %17 = and i64 %16, 31, !dbg !24
  %18 = icmp eq i64 %17, 7, !dbg !24
  br i1 %18, label %argArrayExpand, label %fillFromDefaultBlockDone2, !dbg !24

argArrayExpand:                                   ; preds = %sorbet_isa_Array.exit
  %19 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.iseq_inline_iv_cache_entry*, !dbg !24
  %20 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %19, i64 0, i32 0, !dbg !24
  %21 = load i64, i64* %20, align 8, !dbg !24, !tbaa !25
  %22 = and i64 %21, 33554432, !dbg !24
  %23 = icmp eq i64 %22, 0, !dbg !24
  br i1 %23, label %25, label %24, !dbg !24

24:                                               ; preds = %argArrayExpand
  tail call void @rb_ary_detransient(i64 %arg1_maybeExpandToFullArgs) #14, !dbg !24
  br label %25, !dbg !24

25:                                               ; preds = %24, %argArrayExpand
  %26 = load i64, i64* %20, align 8, !dbg !24, !tbaa !25
  %27 = and i64 %26, 8192, !dbg !24
  %28 = icmp eq i64 %27, 0, !dbg !24
  %29 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.RArray*, !dbg !24
  br i1 %28, label %34, label %30, !dbg !24

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.RArray, %struct.RArray* %29, i64 0, i32 1, i32 0, i32 0, !dbg !24
  %32 = lshr i64 %26, 15, !dbg !24
  %33 = and i64 %32, 3, !dbg !24
  br label %sorbet_rubyArrayLen.exit, !dbg !24

34:                                               ; preds = %25
  %35 = getelementptr inbounds %struct.RArray, %struct.RArray* %29, i64 0, i32 1, i32 0, i32 2, !dbg !24
  %36 = load i64*, i64** %35, align 8, !dbg !24, !tbaa !27
  %37 = getelementptr inbounds %struct.RArray, %struct.RArray* %29, i64 0, i32 1, i32 0, i32 0, !dbg !24
  %38 = load i64, i64* %37, align 8, !dbg !24, !tbaa !27
  br label %sorbet_rubyArrayLen.exit, !dbg !24

sorbet_rubyArrayLen.exit:                         ; preds = %30, %34
  %39 = phi i64* [ %31, %30 ], [ %36, %34 ]
  %40 = phi i64 [ %33, %30 ], [ %38, %34 ], !dbg !24
  %41 = trunc i64 %40 to i32, !dbg !24
  br label %fillRequiredArgs, !dbg !24

fillFromArgBlock0:                                ; preds = %fillRequiredArgs
  %rawArg_el1 = load i64, i64* %argArrayPhi, align 8, !dbg !24
  %default1 = icmp eq i32 %argcPhi, 1, !dbg !24
  br i1 %default1, label %fillFromDefaultBlockDone2, label %fillFromArgBlock1, !dbg !24, !prof !28

fillFromArgBlock1:                                ; preds = %fillFromArgBlock0
  %42 = getelementptr i64, i64* %argArrayPhi, i32 1, !dbg !24
  %rawArg_el2 = load i64, i64* %42, align 8, !dbg !24
  br label %fillFromDefaultBlockDone2, !dbg !24

fillFromDefaultBlockDone2:                        ; preds = %argArrayExpandArrayTest, %sorbet_isa_Array.exit, %fillFromArgBlock0, %fillFromArgBlock1
  %el2.sroa.0.0 = phi i64 [ %rawArg_el2, %fillFromArgBlock1 ], [ 8, %fillFromArgBlock0 ], [ 8, %sorbet_isa_Array.exit ], [ 8, %argArrayExpandArrayTest ], !dbg !24
  %el1.sroa.0.1 = phi i64 [ %rawArg_el1, %fillFromArgBlock1 ], [ %rawArg_el1, %fillFromArgBlock0 ], [ %arg1_maybeExpandToFullArgs, %sorbet_isa_Array.exit ], [ %arg1_maybeExpandToFullArgs, %argArrayExpandArrayTest ], !dbg !24
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 9), i64** %8, align 8, !dbg !29, !tbaa !15
  %43 = and i64 %el1.sroa.0.1, 1, !dbg !30
  %44 = icmp eq i64 %43, 0, !dbg !30
  br i1 %44, label %45, label %typeTestSuccess, !dbg !30, !prof !28

45:                                               ; preds = %fillFromDefaultBlockDone2.thread, %fillFromDefaultBlockDone2
  %el1.sroa.0.146 = phi i64 [ 8, %fillFromDefaultBlockDone2.thread ], [ %el1.sroa.0.1, %fillFromDefaultBlockDone2 ]
  %el2.sroa.0.043 = phi i64 [ 8, %fillFromDefaultBlockDone2.thread ], [ %el2.sroa.0.0, %fillFromDefaultBlockDone2 ]
  %46 = and i64 %el1.sroa.0.146, 7, !dbg !30
  %47 = icmp ne i64 %46, 0, !dbg !30
  %48 = and i64 %el1.sroa.0.146, -9, !dbg !30
  %49 = icmp eq i64 %48, 0, !dbg !30
  %50 = or i1 %47, %49, !dbg !30
  br i1 %50, label %codeRepl38, label %sorbet_isa_Integer.exit, !dbg !30

sorbet_isa_Integer.exit:                          ; preds = %45
  %51 = inttoptr i64 %el1.sroa.0.146 to %struct.iseq_inline_iv_cache_entry*, !dbg !30
  %52 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %51, i64 0, i32 0, !dbg !30
  %53 = load i64, i64* %52, align 8, !dbg !30, !tbaa !25
  %54 = and i64 %53, 31, !dbg !30
  %55 = icmp eq i64 %54, 10, !dbg !30
  br i1 %55, label %typeTestSuccess, label %codeRepl38, !dbg !30, !prof !31

fillRequiredArgs:                                 ; preds = %functionEntryInitializers, %sorbet_rubyArrayLen.exit
  %argcPhi = phi i32 [ %argc, %functionEntryInitializers ], [ %41, %sorbet_rubyArrayLen.exit ], !dbg !24
  %argArrayPhi = phi i64* [ %argArray, %functionEntryInitializers ], [ %39, %sorbet_rubyArrayLen.exit ], !dbg !24
  %default0 = icmp eq i32 %argcPhi, 0, !dbg !24
  br i1 %default0, label %fillFromDefaultBlockDone2.thread, label %fillFromArgBlock0, !dbg !24, !prof !28

fillFromDefaultBlockDone2.thread:                 ; preds = %fillRequiredArgs
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 9), i64** %8, align 8, !dbg !29, !tbaa !15
  br label %45, !dbg !30

typeTestSuccess:                                  ; preds = %fillFromDefaultBlockDone2, %sorbet_isa_Integer.exit
  %el1.sroa.0.145 = phi i64 [ %el1.sroa.0.1, %fillFromDefaultBlockDone2 ], [ %el1.sroa.0.146, %sorbet_isa_Integer.exit ]
  %el2.sroa.0.042 = phi i64 [ %el2.sroa.0.0, %fillFromDefaultBlockDone2 ], [ %el2.sroa.0.043, %sorbet_isa_Integer.exit ]
  %56 = and i64 %el2.sroa.0.042, 1, !dbg !32
  %57 = icmp eq i64 %56, 0, !dbg !32
  br i1 %57, label %58, label %"fastSymCallIntrinsic_Integer_+", !dbg !32, !prof !28

58:                                               ; preds = %typeTestSuccess
  %59 = and i64 %el2.sroa.0.042, 7, !dbg !32
  %60 = icmp ne i64 %59, 0, !dbg !32
  %61 = and i64 %el2.sroa.0.042, -9, !dbg !32
  %62 = icmp eq i64 %61, 0, !dbg !32
  %63 = or i1 %60, %62, !dbg !32
  br i1 %63, label %codeRepl, label %sorbet_isa_Integer.exit39, !dbg !32

sorbet_isa_Integer.exit39:                        ; preds = %58
  %64 = inttoptr i64 %el2.sroa.0.042 to %struct.iseq_inline_iv_cache_entry*, !dbg !32
  %65 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %64, i64 0, i32 0, !dbg !32
  %66 = load i64, i64* %65, align 8, !dbg !32, !tbaa !25
  %67 = and i64 %66, 31, !dbg !32
  %68 = icmp eq i64 %67, 10, !dbg !32
  br i1 %68, label %"fastSymCallIntrinsic_Integer_+", label %codeRepl, !dbg !32, !prof !31

codeRepl38:                                       ; preds = %45, %sorbet_isa_Integer.exit
  %el1.sroa.0.147 = phi i64 [ %el1.sroa.0.146, %45 ], [ %el1.sroa.0.146, %sorbet_isa_Integer.exit ]
  tail call fastcc void @"func_<root>.17<static-init>$152$block_1.cold.1"(i64 %el1.sroa.0.147) #15, !dbg !30
  unreachable

codeRepl:                                         ; preds = %58, %sorbet_isa_Integer.exit39
  %el2.sroa.0.044 = phi i64 [ %el2.sroa.0.042, %58 ], [ %el2.sroa.0.042, %sorbet_isa_Integer.exit39 ]
  tail call fastcc void @"func_<root>.17<static-init>$152$block_1.cold.1"(i64 %el2.sroa.0.044) #15, !dbg !32
  unreachable

"fastSymCallIntrinsic_Integer_+":                 ; preds = %typeTestSuccess, %sorbet_isa_Integer.exit39
  tail call void @llvm.experimental.noalias.scope.decl(metadata !33), !dbg !30
  %69 = and i64 %el1.sroa.0.145, 1, !dbg !30
  %70 = icmp eq i64 %69, 0, !dbg !30
  %71 = and i64 %el2.sroa.0.042, 1, !dbg !30
  %72 = icmp eq i64 %71, 0, !dbg !30
  %73 = select i1 %70, i1 true, i1 %72, !dbg !30
  br i1 %73, label %83, label %74, !dbg !30, !prof !36

74:                                               ; preds = %"fastSymCallIntrinsic_Integer_+"
  %75 = add nsw i64 %el2.sroa.0.042, -1, !dbg !30
  %76 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %el1.sroa.0.145, i64 %75) #14, !dbg !30
  %77 = extractvalue { i64, i1 } %76, 1, !dbg !30
  %78 = extractvalue { i64, i1 } %76, 0, !dbg !30
  br i1 %77, label %79, label %sorbet_rb_int_plus.exit, !dbg !30

79:                                               ; preds = %74
  %80 = ashr i64 %78, 1, !dbg !30
  %81 = xor i64 %80, -9223372036854775808, !dbg !30
  %82 = tail call i64 @rb_int2big(i64 %81) #14, !dbg !30, !noalias !33
  br label %sorbet_rb_int_plus.exit, !dbg !30

83:                                               ; preds = %"fastSymCallIntrinsic_Integer_+"
  %84 = tail call i64 @sorbet_rb_int_plus_slowpath(i64 %el1.sroa.0.145, i64 %el2.sroa.0.042) #14, !dbg !30, !noalias !33
  br label %sorbet_rb_int_plus.exit, !dbg !30

sorbet_rb_int_plus.exit:                          ; preds = %74, %79, %83
  %85 = phi i64 [ %84, %83 ], [ %82, %79 ], [ %78, %74 ], !dbg !30
  %86 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !30, !tbaa !15
  %87 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %86, i64 0, i32 5, !dbg !30
  %88 = load i32, i32* %87, align 8, !dbg !30, !tbaa !37
  %89 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %86, i64 0, i32 6, !dbg !30
  %90 = load i32, i32* %89, align 4, !dbg !30, !tbaa !38
  %91 = xor i32 %90, -1, !dbg !30
  %92 = and i32 %91, %88, !dbg !30
  %93 = icmp eq i32 %92, 0, !dbg !30
  br i1 %93, label %sorbet_afterIntrinsic.exit, label %94, !dbg !30, !prof !31

94:                                               ; preds = %sorbet_rb_int_plus.exit
  %95 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %86, i64 0, i32 8, !dbg !30
  %96 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %95, align 8, !dbg !30, !tbaa !39
  %97 = tail call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %96, i32 noundef 0) #14, !dbg !30
  br label %sorbet_afterIntrinsic.exit, !dbg !30

sorbet_afterIntrinsic.exit:                       ; preds = %sorbet_rb_int_plus.exit, %94
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 8), i64** %8, align 8, !dbg !30, !tbaa !15
  ret i64 %85, !dbg !40
}

; Function Attrs: ssp
define internal i64 @"func_<root>.17<static-init>$152$block_2"(i64 %firstYieldArgRaw, i64 %localsOffset, i32 %argc, i64* nocapture readonly %argArray, i64 %blockArg) #8 !dbg !41 {
functionEntryInitializers:
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !15
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !17
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 3
  %4 = load i64, i64* %3, align 8, !tbaa !42
  %stackFrame = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$152$block_2", align 8
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame, %struct.rb_iseq_struct** %5, align 8, !tbaa !21
  %6 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 4
  %7 = load i64*, i64** %6, align 8, !tbaa !23
  %8 = load i64, i64* %7, align 8, !tbaa !6
  %9 = and i64 %8, -129
  store i64 %9, i64* %7, align 8, !tbaa !6
  %10 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 0
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %10, align 8, !tbaa !15
  %default0 = icmp eq i32 %argc, 0, !dbg !43
  br i1 %default0, label %fillFromDefaultBlockDone1, label %fillFromArgBlock0, !dbg !43, !prof !28

fillFromArgBlock0:                                ; preds = %functionEntryInitializers
  %rawArg_array = load i64, i64* %argArray, align 8, !dbg !43
  br label %fillFromDefaultBlockDone1, !dbg !43

fillFromDefaultBlockDone1:                        ; preds = %functionEntryInitializers, %fillFromArgBlock0
  %array.sroa.0.0 = phi i64 [ %rawArg_array, %fillFromArgBlock0 ], [ 8, %functionEntryInitializers ], !dbg !43
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 14), i64** %10, align 8, !dbg !44, !tbaa !15
  %11 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 1, !dbg !45
  %12 = load i64*, i64** %11, align 8, !dbg !45
  store i64 %4, i64* %12, align 8, !dbg !45, !tbaa !6
  %13 = getelementptr inbounds i64, i64* %12, i64 1, !dbg !45
  store i64 %array.sroa.0.0, i64* %13, align 8, !dbg !45, !tbaa !6
  %14 = getelementptr inbounds i64, i64* %13, i64 1, !dbg !45
  store i64* %14, i64** %11, align 8, !dbg !45
  %send = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_p, i64 0), !dbg !45
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 13), i64** %10, align 8, !dbg !45, !tbaa !15
  ret i64 %send, !dbg !46
}

; Function Attrs: ssp
define internal i64 @"func_<root>.17<static-init>$152$block_3"(i64 %firstYieldArgRaw, i64 %localsOffset, i32 %argc, i64* nocapture readonly %argArray, i64 %blockArg) #8 !dbg !47 {
functionEntryInitializers:
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !15
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !17
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 3
  %4 = load i64, i64* %3, align 8, !tbaa !42
  %stackFrame = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$152$block_3", align 8
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame, %struct.rb_iseq_struct** %5, align 8, !tbaa !21
  %6 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 4
  %7 = load i64*, i64** %6, align 8, !tbaa !23
  %8 = load i64, i64* %7, align 8, !tbaa !6
  %9 = and i64 %8, -129
  store i64 %9, i64* %7, align 8, !tbaa !6
  %10 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 0
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %10, align 8, !tbaa !15
  %default0 = icmp eq i32 %argc, 0, !dbg !48
  br i1 %default0, label %BB15, label %BB14, !dbg !48, !prof !28

BB14:                                             ; preds = %functionEntryInitializers
  %rawArg_array = load i64, i64* %argArray, align 8, !dbg !48
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 18), i64** %10, align 8, !tbaa !15
  br label %BB16, !dbg !49

BB15:                                             ; preds = %functionEntryInitializers
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 18), i64** %10, align 8, !tbaa !15
  %rubyId_x = load i64, i64* @rubyIdPrecomputed_x, align 8, !dbg !50
  %rawSym = tail call i64 @rb_id2sym(i64 %rubyId_x) #16, !dbg !50
  br label %BB16, !dbg !50

BB16:                                             ; preds = %BB15, %BB14
  %array.sroa.0.0 = phi i64 [ %rawArg_array, %BB14 ], [ %rawSym, %BB15 ], !dbg !51
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 19), i64** %10, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 1, !dbg !52
  %12 = load i64*, i64** %11, align 8, !dbg !52
  store i64 %4, i64* %12, align 8, !dbg !52, !tbaa !6
  %13 = getelementptr inbounds i64, i64* %12, i64 1, !dbg !52
  store i64 %array.sroa.0.0, i64* %13, align 8, !dbg !52, !tbaa !6
  %14 = getelementptr inbounds i64, i64* %13, i64 1, !dbg !52
  store i64* %14, i64** %11, align 8, !dbg !52
  %send = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_p.5, i64 0), !dbg !52
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 18), i64** %10, align 8, !dbg !52, !tbaa !15
  ret i64 %send, !dbg !53
}

; Function Attrs: ssp
define internal i64 @"func_<root>.17<static-init>$152$block_4"(i64 %firstYieldArgRaw, i64 %localsOffset, i32 %argc, i64* nocapture readonly %argArray, i64 %blockArg) #8 !dbg !54 {
functionEntryInitializers:
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !15
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !17
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 3
  %4 = load i64, i64* %3, align 8, !tbaa !42
  %stackFrame = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$152$block_4", align 8
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame, %struct.rb_iseq_struct** %5, align 8, !tbaa !21
  %6 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 4
  %7 = load i64*, i64** %6, align 8, !tbaa !23
  %8 = load i64, i64* %7, align 8, !tbaa !6
  %9 = and i64 %8, -129
  store i64 %9, i64* %7, align 8, !tbaa !6
  %10 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 0
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %10, align 8, !tbaa !15
  %arrayExpansionSizeGuard = icmp eq i32 %argc, 1, !dbg !55
  br i1 %arrayExpansionSizeGuard, label %argArrayExpandArrayTest, label %fillRequiredArgs, !dbg !55

BB23.thread:                                      ; preds = %fillRequiredArgs
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 23), i64** %10, align 8, !tbaa !15
  %rubyId_default = load i64, i64* @rubyIdPrecomputed_default, align 8, !dbg !56
  %rawSym = tail call i64 @rb_id2sym(i64 %rubyId_default) #16, !dbg !56
  br label %BB25, !dbg !57

BB23.thread62:                                    ; preds = %argArrayExpandArrayTest, %sorbet_isa_Array.exit, %fillFromArgBlock0
  %x.sroa.0.2.ph.ph = phi i64 [ %rawArg_x, %fillFromArgBlock0 ], [ %arg1_maybeExpandToFullArgs, %sorbet_isa_Array.exit ], [ %arg1_maybeExpandToFullArgs, %argArrayExpandArrayTest ]
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 23), i64** %10, align 8, !tbaa !15
  br label %BB25, !dbg !57

BB24:                                             ; preds = %fillFromArgBlock0
  %11 = getelementptr i64, i64* %argArrayPhi, i32 1, !dbg !55
  %rawArg_y = load i64, i64* %11, align 8, !dbg !55
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 23), i64** %10, align 8, !tbaa !15
  br label %BB26, !dbg !57

BB25:                                             ; preds = %BB23.thread62, %BB23.thread
  %x.sroa.0.061 = phi i64 [ %rawSym, %BB23.thread ], [ %x.sroa.0.2.ph.ph, %BB23.thread62 ]
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 23), i64** %10, align 8, !tbaa !15
  %rubyId_something = load i64, i64* @rubyIdPrecomputed_something, align 8, !dbg !58
  %rawSym16 = tail call i64 @rb_id2sym(i64 %rubyId_something) #16, !dbg !58
  br label %BB26, !dbg !58

BB26:                                             ; preds = %BB25, %BB24
  %x.sroa.0.060 = phi i64 [ %rawArg_x, %BB24 ], [ %x.sroa.0.061, %BB25 ]
  %y.sroa.0.0 = phi i64 [ %rawArg_y, %BB24 ], [ %rawSym16, %BB25 ], !dbg !59
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 24), i64** %10, align 8, !tbaa !15
  %12 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 1, !dbg !60
  %13 = load i64*, i64** %12, align 8, !dbg !60
  store i64 %4, i64* %13, align 8, !dbg !60, !tbaa !6
  %14 = getelementptr inbounds i64, i64* %13, i64 1, !dbg !60
  store i64 %x.sroa.0.060, i64* %14, align 8, !dbg !60, !tbaa !6
  %15 = getelementptr inbounds i64, i64* %14, i64 1, !dbg !60
  store i64* %15, i64** %12, align 8, !dbg !60
  %send = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_p.8, i64 0), !dbg !60
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 25), i64** %10, align 8, !dbg !60, !tbaa !15
  %16 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 1, !dbg !61
  %17 = load i64*, i64** %16, align 8, !dbg !61
  store i64 %4, i64* %17, align 8, !dbg !61, !tbaa !6
  %18 = getelementptr inbounds i64, i64* %17, i64 1, !dbg !61
  store i64 %y.sroa.0.0, i64* %18, align 8, !dbg !61, !tbaa !6
  %19 = getelementptr inbounds i64, i64* %18, i64 1, !dbg !61
  store i64* %19, i64** %16, align 8, !dbg !61
  %send67 = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_p.9, i64 0), !dbg !61
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 23), i64** %10, align 8, !dbg !61, !tbaa !15
  ret i64 %send67, !dbg !62

argArrayExpandArrayTest:                          ; preds = %functionEntryInitializers
  %arg1_maybeExpandToFullArgs = load i64, i64* %argArray, align 8, !dbg !55
  %20 = and i64 %arg1_maybeExpandToFullArgs, 7, !dbg !55
  %21 = icmp ne i64 %20, 0, !dbg !55
  %22 = and i64 %arg1_maybeExpandToFullArgs, -9, !dbg !55
  %23 = icmp eq i64 %22, 0, !dbg !55
  %24 = or i1 %21, %23, !dbg !55
  br i1 %24, label %BB23.thread62, label %sorbet_isa_Array.exit, !dbg !55

sorbet_isa_Array.exit:                            ; preds = %argArrayExpandArrayTest
  %25 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.iseq_inline_iv_cache_entry*, !dbg !55
  %26 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %25, i64 0, i32 0, !dbg !55
  %27 = load i64, i64* %26, align 8, !dbg !55, !tbaa !25
  %28 = and i64 %27, 31, !dbg !55
  %29 = icmp eq i64 %28, 7, !dbg !55
  br i1 %29, label %argArrayExpand, label %BB23.thread62, !dbg !55

argArrayExpand:                                   ; preds = %sorbet_isa_Array.exit
  %30 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.iseq_inline_iv_cache_entry*, !dbg !55
  %31 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %30, i64 0, i32 0, !dbg !55
  %32 = load i64, i64* %31, align 8, !dbg !55, !tbaa !25
  %33 = and i64 %32, 33554432, !dbg !55
  %34 = icmp eq i64 %33, 0, !dbg !55
  br i1 %34, label %36, label %35, !dbg !55

35:                                               ; preds = %argArrayExpand
  tail call void @rb_ary_detransient(i64 %arg1_maybeExpandToFullArgs) #14, !dbg !55
  br label %36, !dbg !55

36:                                               ; preds = %35, %argArrayExpand
  %37 = load i64, i64* %31, align 8, !dbg !55, !tbaa !25
  %38 = and i64 %37, 8192, !dbg !55
  %39 = icmp eq i64 %38, 0, !dbg !55
  %40 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.RArray*, !dbg !55
  br i1 %39, label %45, label %41, !dbg !55

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.RArray, %struct.RArray* %40, i64 0, i32 1, i32 0, i32 0, !dbg !55
  %43 = lshr i64 %37, 15, !dbg !55
  %44 = and i64 %43, 3, !dbg !55
  br label %sorbet_rubyArrayLen.exit, !dbg !55

45:                                               ; preds = %36
  %46 = getelementptr inbounds %struct.RArray, %struct.RArray* %40, i64 0, i32 1, i32 0, i32 2, !dbg !55
  %47 = load i64*, i64** %46, align 8, !dbg !55, !tbaa !27
  %48 = getelementptr inbounds %struct.RArray, %struct.RArray* %40, i64 0, i32 1, i32 0, i32 0, !dbg !55
  %49 = load i64, i64* %48, align 8, !dbg !55, !tbaa !27
  br label %sorbet_rubyArrayLen.exit, !dbg !55

sorbet_rubyArrayLen.exit:                         ; preds = %41, %45
  %50 = phi i64* [ %42, %41 ], [ %47, %45 ]
  %51 = phi i64 [ %44, %41 ], [ %49, %45 ], !dbg !55
  %52 = trunc i64 %51 to i32, !dbg !55
  br label %fillRequiredArgs, !dbg !55

fillFromArgBlock0:                                ; preds = %fillRequiredArgs
  %rawArg_x = load i64, i64* %argArrayPhi, align 8, !dbg !55
  %default1 = icmp eq i32 %argcPhi, 1, !dbg !55
  br i1 %default1, label %BB23.thread62, label %BB24, !dbg !55, !prof !28

fillRequiredArgs:                                 ; preds = %functionEntryInitializers, %sorbet_rubyArrayLen.exit
  %argcPhi = phi i32 [ %argc, %functionEntryInitializers ], [ %52, %sorbet_rubyArrayLen.exit ], !dbg !55
  %argArrayPhi = phi i64* [ %argArray, %functionEntryInitializers ], [ %50, %sorbet_rubyArrayLen.exit ], !dbg !55
  %default0 = icmp eq i32 %argcPhi, 0, !dbg !55
  br i1 %default0, label %BB23.thread, label %fillFromArgBlock0, !dbg !55, !prof !28
}

; Function Attrs: ssp
define internal i64 @"func_<root>.17<static-init>$152$block_5"(i64 %firstYieldArgRaw, i64 %localsOffset, i32 %argc, i64* nocapture readonly %argArray, i64 %blockArg) #8 !dbg !63 {
functionEntryInitializers:
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !15
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !17
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 3
  %4 = load i64, i64* %3, align 8, !tbaa !42
  %stackFrame = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$152$block_5", align 8
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame, %struct.rb_iseq_struct** %5, align 8, !tbaa !21
  %6 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 4
  %7 = load i64*, i64** %6, align 8, !tbaa !23
  %8 = load i64, i64* %7, align 8, !tbaa !6
  %9 = and i64 %8, -129
  store i64 %9, i64* %7, align 8, !tbaa !6
  %10 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 0
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %10, align 8, !tbaa !15
  %arrayExpansionSizeGuard = icmp eq i32 %argc, 1, !dbg !64
  br i1 %arrayExpansionSizeGuard, label %argArrayExpandArrayTest, label %fillRequiredArgs, !dbg !64

BB31:                                             ; preds = %fillFromArgBlock0
  %11 = getelementptr i64, i64* %argArrayPhi, i32 1, !dbg !64
  %rawArg_y = load i64, i64* %11, align 8, !dbg !64
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 28), i64** %10, align 8, !tbaa !15
  br label %BB33, !dbg !65

BB32:                                             ; preds = %argArrayExpandArrayTest, %sorbet_isa_Array.exit, %fillRequiredArgs, %fillFromArgBlock0
  %x.sroa.0.1.ph = phi i64 [ 8, %fillRequiredArgs ], [ %rawArg_x, %fillFromArgBlock0 ], [ %arg1_maybeExpandToFullArgs, %sorbet_isa_Array.exit ], [ %arg1_maybeExpandToFullArgs, %argArrayExpandArrayTest ]
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 28), i64** %10, align 8, !tbaa !15
  %rubyId_something = load i64, i64* @rubyIdPrecomputed_something, align 8, !dbg !66
  %rawSym = tail call i64 @rb_id2sym(i64 %rubyId_something) #16, !dbg !66
  br label %BB33, !dbg !66

BB33:                                             ; preds = %BB32, %BB31
  %x.sroa.0.141 = phi i64 [ %rawArg_x, %BB31 ], [ %x.sroa.0.1.ph, %BB32 ]
  %y.sroa.0.0 = phi i64 [ %rawArg_y, %BB31 ], [ %rawSym, %BB32 ], !dbg !67
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 29), i64** %10, align 8, !tbaa !15
  %12 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 1, !dbg !68
  %13 = load i64*, i64** %12, align 8, !dbg !68
  store i64 %4, i64* %13, align 8, !dbg !68, !tbaa !6
  %14 = getelementptr inbounds i64, i64* %13, i64 1, !dbg !68
  store i64 %x.sroa.0.141, i64* %14, align 8, !dbg !68, !tbaa !6
  %15 = getelementptr inbounds i64, i64* %14, i64 1, !dbg !68
  store i64* %15, i64** %12, align 8, !dbg !68
  %send = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_p.12, i64 0), !dbg !68
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 30), i64** %10, align 8, !dbg !68, !tbaa !15
  %16 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 1, !dbg !69
  %17 = load i64*, i64** %16, align 8, !dbg !69
  store i64 %4, i64* %17, align 8, !dbg !69, !tbaa !6
  %18 = getelementptr inbounds i64, i64* %17, i64 1, !dbg !69
  store i64 %y.sroa.0.0, i64* %18, align 8, !dbg !69, !tbaa !6
  %19 = getelementptr inbounds i64, i64* %18, i64 1, !dbg !69
  store i64* %19, i64** %16, align 8, !dbg !69
  %send44 = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_p.13, i64 0), !dbg !69
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 28), i64** %10, align 8, !dbg !69, !tbaa !15
  ret i64 %send44, !dbg !70

argArrayExpandArrayTest:                          ; preds = %functionEntryInitializers
  %arg1_maybeExpandToFullArgs = load i64, i64* %argArray, align 8, !dbg !64
  %20 = and i64 %arg1_maybeExpandToFullArgs, 7, !dbg !64
  %21 = icmp ne i64 %20, 0, !dbg !64
  %22 = and i64 %arg1_maybeExpandToFullArgs, -9, !dbg !64
  %23 = icmp eq i64 %22, 0, !dbg !64
  %24 = or i1 %21, %23, !dbg !64
  br i1 %24, label %BB32, label %sorbet_isa_Array.exit, !dbg !64

sorbet_isa_Array.exit:                            ; preds = %argArrayExpandArrayTest
  %25 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.iseq_inline_iv_cache_entry*, !dbg !64
  %26 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %25, i64 0, i32 0, !dbg !64
  %27 = load i64, i64* %26, align 8, !dbg !64, !tbaa !25
  %28 = and i64 %27, 31, !dbg !64
  %29 = icmp eq i64 %28, 7, !dbg !64
  br i1 %29, label %argArrayExpand, label %BB32, !dbg !64

argArrayExpand:                                   ; preds = %sorbet_isa_Array.exit
  %30 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.iseq_inline_iv_cache_entry*, !dbg !64
  %31 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %30, i64 0, i32 0, !dbg !64
  %32 = load i64, i64* %31, align 8, !dbg !64, !tbaa !25
  %33 = and i64 %32, 33554432, !dbg !64
  %34 = icmp eq i64 %33, 0, !dbg !64
  br i1 %34, label %36, label %35, !dbg !64

35:                                               ; preds = %argArrayExpand
  tail call void @rb_ary_detransient(i64 %arg1_maybeExpandToFullArgs) #14, !dbg !64
  br label %36, !dbg !64

36:                                               ; preds = %35, %argArrayExpand
  %37 = load i64, i64* %31, align 8, !dbg !64, !tbaa !25
  %38 = and i64 %37, 8192, !dbg !64
  %39 = icmp eq i64 %38, 0, !dbg !64
  %40 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.RArray*, !dbg !64
  br i1 %39, label %45, label %41, !dbg !64

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.RArray, %struct.RArray* %40, i64 0, i32 1, i32 0, i32 0, !dbg !64
  %43 = lshr i64 %37, 15, !dbg !64
  %44 = and i64 %43, 3, !dbg !64
  br label %sorbet_rubyArrayLen.exit, !dbg !64

45:                                               ; preds = %36
  %46 = getelementptr inbounds %struct.RArray, %struct.RArray* %40, i64 0, i32 1, i32 0, i32 2, !dbg !64
  %47 = load i64*, i64** %46, align 8, !dbg !64, !tbaa !27
  %48 = getelementptr inbounds %struct.RArray, %struct.RArray* %40, i64 0, i32 1, i32 0, i32 0, !dbg !64
  %49 = load i64, i64* %48, align 8, !dbg !64, !tbaa !27
  br label %sorbet_rubyArrayLen.exit, !dbg !64

sorbet_rubyArrayLen.exit:                         ; preds = %41, %45
  %50 = phi i64* [ %42, %41 ], [ %47, %45 ]
  %51 = phi i64 [ %44, %41 ], [ %49, %45 ], !dbg !64
  %52 = trunc i64 %51 to i32, !dbg !64
  br label %fillRequiredArgs, !dbg !64

fillFromArgBlock0:                                ; preds = %fillRequiredArgs
  %rawArg_x = load i64, i64* %argArrayPhi, align 8, !dbg !64
  %default1 = icmp eq i32 %argcPhi, 1, !dbg !64
  br i1 %default1, label %BB32, label %BB31, !dbg !64, !prof !28

fillRequiredArgs:                                 ; preds = %functionEntryInitializers, %sorbet_rubyArrayLen.exit
  %argcPhi = phi i32 [ %argc, %functionEntryInitializers ], [ %52, %sorbet_rubyArrayLen.exit ], !dbg !64
  %argArrayPhi = phi i64* [ %argArray, %functionEntryInitializers ], [ %50, %sorbet_rubyArrayLen.exit ], !dbg !64
  %default0 = icmp eq i32 %argcPhi, 0, !dbg !64
  br i1 %default0, label %BB32, label %fillFromArgBlock0, !dbg !64, !prof !28
}

; Function Attrs: nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #9

; Function Attrs: sspreq
define void @Init_block_arg_expand() local_unnamed_addr #10 {
entry:
  %0 = alloca i64, align 8
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca %struct.sorbet_inlineIntrinsicEnv, align 8
  %4 = alloca %struct.sorbet_inlineIntrinsicEnv, align 8
  %5 = alloca %struct.sorbet_inlineIntrinsicEnv, align 8
  %6 = alloca %struct.sorbet_inlineIntrinsicEnv, align 8
  %7 = alloca %struct.sorbet_inlineIntrinsicEnv, align 8
  %callArgs.i = alloca [3 x i64], align 8
  %locals.i.i = alloca i64, align 8
  %realpath = tail call i64 @sorbet_readRealpath()
  %8 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 noundef 16) #14
  store i64 %8, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %9 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @"str_<block-call>", i64 0, i64 0), i64 noundef 12) #14
  store i64 %9, i64* @"rubyIdPrecomputed_<block-call>", align 8
  %10 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([26 x i8], [26 x i8]* @"str_block in <top (required)>", i64 0, i64 0), i64 noundef 25) #14
  store i64 %10, i64* @"rubyIdPrecomputed_block in <top (required)>", align 8
  %11 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @"str_<build-array>", i64 0, i64 0), i64 noundef 13) #14
  %12 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @str_each, i64 0, i64 0), i64 noundef 4) #14
  store i64 %12, i64* @rubyIdPrecomputed_each, align 8
  %13 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @"str_+", i64 0, i64 0), i64 noundef 1) #14
  store i64 %13, i64* @"rubyIdPrecomputed_+", align 8
  %14 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @str_p, i64 0, i64 0), i64 noundef 1) #14
  store i64 %14, i64* @rubyIdPrecomputed_p, align 8
  %15 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @str_x, i64 0, i64 0), i64 noundef 1) #14
  store i64 %15, i64* @rubyIdPrecomputed_x, align 8
  %16 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([8 x i8], [8 x i8]* @str_default, i64 0, i64 0), i64 noundef 7) #14
  store i64 %16, i64* @rubyIdPrecomputed_default, align 8
  %17 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @str_something, i64 0, i64 0), i64 noundef 9) #14
  store i64 %17, i64* @rubyIdPrecomputed_something, align 8
  %18 = tail call i64 @sorbet_vm_fstring_new(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 noundef 16) #14
  tail call void @rb_gc_register_mark_object(i64 %18) #14
  store i64 %18, i64* @"rubyStrFrozen_<top (required)>", align 8
  %19 = tail call i64 @sorbet_vm_fstring_new(i8* noundef getelementptr inbounds ([43 x i8], [43 x i8]* @"str_test/testdata/compiler/block_arg_expand.rb", i64 0, i64 0), i64 noundef 42) #14
  tail call void @rb_gc_register_mark_object(i64 %19) #14
  store i64 %19, i64* @"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb", align 8
  tail call void @sorbet_initLineNumberInfo(%struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i32 0, i32 0), i32 noundef 32)
  %20 = bitcast i64* %locals.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20)
  %"rubyId_<top (required)>.i.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb", align 8
  %"rubyId_<block-call>.i.i" = load i64, i64* @"rubyIdPrecomputed_<block-call>", align 8
  store i64 %"rubyId_<block-call>.i.i", i64* %locals.i.i, align 8
  %21 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i.i", i64 %"rubyId_<top (required)>.i.i", i64 %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 0, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull align 8 %locals.i.i, i32 noundef 1, i32 noundef 3)
  store %struct.rb_iseq_struct* %21, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$152", align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20)
  %22 = call i64 @sorbet_vm_fstring_new(i8* noundef getelementptr inbounds ([26 x i8], [26 x i8]* @"str_block in <top (required)>", i64 0, i64 0), i64 noundef 25) #14
  call void @rb_gc_register_mark_object(i64 %22) #14
  store i64 %22, i64* @"rubyStrFrozen_block in <top (required)>", align 8
  %stackFrame.i.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$152", align 8
  %"rubyId_block in <top (required)>.i.i" = load i64, i64* @"rubyIdPrecomputed_block in <top (required)>", align 8
  %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i26.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb", align 8
  %23 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %22, i64 %"rubyId_block in <top (required)>.i.i", i64 %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i26.i", i64 %realpath, %struct.rb_iseq_struct* %stackFrame.i.i, i32 noundef 2, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef null, i32 noundef 0, i32 noundef 3)
  store %struct.rb_iseq_struct* %23, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$152$block_1", align 8
  %stackFrame.i27.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$152", align 8
  %"rubyId_block in <top (required)>.i28.i" = load i64, i64* @"rubyIdPrecomputed_block in <top (required)>", align 8
  %"rubyStr_block in <top (required)>.i29.i" = load i64, i64* @"rubyStrFrozen_block in <top (required)>", align 8
  %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i30.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb", align 8
  %24 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_block in <top (required)>.i29.i", i64 %"rubyId_block in <top (required)>.i28.i", i64 %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i30.i", i64 %realpath, %struct.rb_iseq_struct* %stackFrame.i27.i, i32 noundef 2, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef null, i32 noundef 0, i32 noundef 3)
  store %struct.rb_iseq_struct* %24, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$152$block_2", align 8
  %stackFrame.i31.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$152", align 8
  %"rubyId_block in <top (required)>.i32.i" = load i64, i64* @"rubyIdPrecomputed_block in <top (required)>", align 8
  %"rubyStr_block in <top (required)>.i33.i" = load i64, i64* @"rubyStrFrozen_block in <top (required)>", align 8
  %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i34.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb", align 8
  %25 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_block in <top (required)>.i33.i", i64 %"rubyId_block in <top (required)>.i32.i", i64 %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i34.i", i64 %realpath, %struct.rb_iseq_struct* %stackFrame.i31.i, i32 noundef 2, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef null, i32 noundef 0, i32 noundef 3)
  store %struct.rb_iseq_struct* %25, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$152$block_3", align 8
  %stackFrame.i35.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$152", align 8
  %"rubyId_block in <top (required)>.i36.i" = load i64, i64* @"rubyIdPrecomputed_block in <top (required)>", align 8
  %"rubyStr_block in <top (required)>.i37.i" = load i64, i64* @"rubyStrFrozen_block in <top (required)>", align 8
  %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i38.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb", align 8
  %26 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_block in <top (required)>.i37.i", i64 %"rubyId_block in <top (required)>.i36.i", i64 %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i38.i", i64 %realpath, %struct.rb_iseq_struct* %stackFrame.i35.i, i32 noundef 2, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef null, i32 noundef 0, i32 noundef 3)
  store %struct.rb_iseq_struct* %26, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$152$block_4", align 8
  %stackFrame.i39.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$152", align 8
  %"rubyId_block in <top (required)>.i40.i" = load i64, i64* @"rubyIdPrecomputed_block in <top (required)>", align 8
  %"rubyStr_block in <top (required)>.i41.i" = load i64, i64* @"rubyStrFrozen_block in <top (required)>", align 8
  %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i42.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb", align 8
  %27 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_block in <top (required)>.i41.i", i64 %"rubyId_block in <top (required)>.i40.i", i64 %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i42.i", i64 %realpath, %struct.rb_iseq_struct* %stackFrame.i39.i, i32 noundef 2, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef null, i32 noundef 0, i32 noundef 3)
  store %struct.rb_iseq_struct* %27, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$152$block_5", align 8
  %28 = call %struct.vm_ifunc* @rb_vm_ifunc_new(i64 (i64, i64, i32, i64*, i64)* noundef @"func_<root>.17<static-init>$152$block_1", i8* noundef null, i32 noundef 2, i32 noundef 2) #14
  %29 = ptrtoint %struct.vm_ifunc* %28 to i64
  %30 = call i64 @sorbet_globalConstRegister(i64 %29)
  store i64 %30, i64* @"func_<root>.17<static-init>$152$block_1_ifunc", align 8
  %"rubyId_+.i" = load i64, i64* @"rubyIdPrecomputed_+", align 8, !dbg !30
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @"ic_+", i64 %"rubyId_+.i", i32 noundef 16, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !30
  %31 = call %struct.vm_ifunc* @rb_vm_ifunc_new(i64 (i64, i64, i32, i64*, i64)* noundef @"func_<root>.17<static-init>$152$block_2", i8* noundef null, i32 noundef 1, i32 noundef 1) #14
  %32 = ptrtoint %struct.vm_ifunc* %31 to i64
  %33 = call i64 @sorbet_globalConstRegister(i64 %32)
  store i64 %33, i64* @"func_<root>.17<static-init>$152$block_2_ifunc", align 8
  %rubyId_p.i = load i64, i64* @rubyIdPrecomputed_p, align 8, !dbg !45
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_p, i64 %rubyId_p.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !45
  %34 = call %struct.vm_ifunc* @rb_vm_ifunc_new(i64 (i64, i64, i32, i64*, i64)* noundef @"func_<root>.17<static-init>$152$block_3", i8* noundef null, i32 noundef 0, i32 noundef 1) #14
  %35 = ptrtoint %struct.vm_ifunc* %34 to i64
  %36 = call i64 @sorbet_globalConstRegister(i64 %35)
  store i64 %36, i64* @"func_<root>.17<static-init>$152$block_3_ifunc", align 8
  %rubyId_p7.i = load i64, i64* @rubyIdPrecomputed_p, align 8, !dbg !52
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_p.5, i64 %rubyId_p7.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !52
  %37 = call %struct.vm_ifunc* @rb_vm_ifunc_new(i64 (i64, i64, i32, i64*, i64)* noundef @"func_<root>.17<static-init>$152$block_4", i8* noundef null, i32 noundef 0, i32 noundef 2) #14
  %38 = ptrtoint %struct.vm_ifunc* %37 to i64
  %39 = call i64 @sorbet_globalConstRegister(i64 %38)
  store i64 %39, i64* @"func_<root>.17<static-init>$152$block_4_ifunc", align 8
  %rubyId_p12.i = load i64, i64* @rubyIdPrecomputed_p, align 8, !dbg !60
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_p.8, i64 %rubyId_p12.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !60
  %rubyId_p15.i = load i64, i64* @rubyIdPrecomputed_p, align 8, !dbg !61
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_p.9, i64 %rubyId_p15.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !61
  %40 = call %struct.vm_ifunc* @rb_vm_ifunc_new(i64 (i64, i64, i32, i64*, i64)* noundef @"func_<root>.17<static-init>$152$block_5", i8* noundef null, i32 noundef 1, i32 noundef 2) #14
  %41 = ptrtoint %struct.vm_ifunc* %40 to i64
  %42 = call i64 @sorbet_globalConstRegister(i64 %41)
  store i64 %42, i64* @"func_<root>.17<static-init>$152$block_5_ifunc", align 8
  %rubyId_p20.i = load i64, i64* @rubyIdPrecomputed_p, align 8, !dbg !68
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_p.12, i64 %rubyId_p20.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !68
  %rubyId_p23.i = load i64, i64* @rubyIdPrecomputed_p, align 8, !dbg !69
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_p.13, i64 %rubyId_p23.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !69
  %43 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !15
  %44 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %43, i64 0, i32 2
  %45 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %44, align 8, !tbaa !17
  %46 = bitcast [3 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %46)
  %stackFrame.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$152", align 8
  %47 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %44, align 8, !tbaa !17
  %48 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %47, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i, %struct.rb_iseq_struct** %48, align 8, !tbaa !21
  %49 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %47, i64 0, i32 4
  %50 = load i64*, i64** %49, align 8, !tbaa !23
  %51 = load i64, i64* %50, align 8, !tbaa !6
  %52 = and i64 %51, -33
  store i64 %52, i64* %50, align 8, !tbaa !6
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %43, %struct.rb_control_frame_struct* %47, %struct.rb_iseq_struct* %stackFrame.i) #14
  %53 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %45, i64 0, i32 0
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %53, align 8, !dbg !71, !tbaa !15
  %callArgs0Addr.i = getelementptr [3 x i64], [3 x i64]* %callArgs.i, i32 0, i64 0, !dbg !72
  %54 = bitcast i64* %callArgs0Addr.i to <2 x i64>*, !dbg !72
  store <2 x i64> <i64 3, i64 5>, <2 x i64>* %54, align 8, !dbg !72
  %55 = getelementptr [3 x i64], [3 x i64]* %callArgs.i, i64 0, i64 0, !dbg !72
  call void @llvm.experimental.noalias.scope.decl(metadata !73) #14, !dbg !72
  %56 = call i64 @rb_ary_new_from_values(i64 noundef 2, i64* noundef nonnull %55) #14, !dbg !72
  store i64 %56, i64* %callArgs0Addr.i, align 8, !dbg !76
  call void @llvm.experimental.noalias.scope.decl(metadata !77) #14, !dbg !76
  %57 = call i64 @rb_ary_new_from_values(i64 noundef 1, i64* noundef nonnull %55) #14, !dbg !76
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 8), i64** %53, align 8, !dbg !76, !tbaa !15
  %rubyId_each.i = load i64, i64* @rubyIdPrecomputed_each, align 8, !dbg !80
  %58 = load i64, i64* @"func_<root>.17<static-init>$152$block_1_ifunc", align 8, !dbg !80
  %59 = call %struct.vm_ifunc* @sorbet_globalConstFetchIfunc(i64 %58) #14, !dbg !80
  %60 = bitcast %struct.sorbet_inlineIntrinsicEnv* %3 to i8*, !dbg !80
  call void @llvm.lifetime.start.p0i8(i64 noundef 40, i8* noundef nonnull %60) #14, !dbg !80
  %61 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %3, i64 0, i32 0, !dbg !80
  store i64 %57, i64* %61, align 8, !dbg !80, !tbaa !81
  %62 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %3, i64 0, i32 1, !dbg !80
  store i64 %rubyId_each.i, i64* %62, align 8, !dbg !80, !tbaa !83
  %63 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %3, i64 0, i32 2, !dbg !80
  store i32 0, i32* %63, align 8, !dbg !80, !tbaa !84
  %64 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %3, i64 0, i32 3, !dbg !80
  %65 = bitcast i64** %64 to i8*, !dbg !80
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %65, i8 0, i64 16, i1 false) #14, !dbg !80
  %66 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !80, !tbaa !15
  %67 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %66, i64 0, i32 2, !dbg !80
  %68 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %67, align 8, !dbg !80, !tbaa !17
  %69 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %68, i64 0, i32 3, !dbg !80
  %70 = getelementptr inbounds i64, i64* %69, i64 2, !dbg !80
  %71 = bitcast i64* %70 to %struct.vm_ifunc**, !dbg !80
  store %struct.vm_ifunc* %59, %struct.vm_ifunc** %71, align 8, !dbg !80, !tbaa !27
  %72 = ptrtoint i64* %69 to i64, !dbg !80
  %73 = or i64 %72, 3, !dbg !80
  %74 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %66, i64 0, i32 17, !dbg !80
  %75 = and i64 %73, -4, !dbg !85
  %76 = inttoptr i64 %75 to %struct.rb_captured_block*, !dbg !85
  store i64 0, i64* %74, align 8, !dbg !85, !tbaa !87
  call void @sorbet_pushBlockFrame(%struct.rb_captured_block* %76) #14, !dbg !85
  %77 = inttoptr i64 %57 to %struct.iseq_inline_iv_cache_entry*, !dbg !85
  %78 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %77, i64 0, i32 0, !dbg !85
  %79 = inttoptr i64 %57 to %struct.RArray*, !dbg !85
  %80 = getelementptr inbounds %struct.RArray, %struct.RArray* %79, i64 0, i32 1, i32 0, i32 0, !dbg !85
  %81 = bitcast i64* %2 to i8*, !dbg !85
  %82 = getelementptr inbounds %struct.RArray, %struct.RArray* %79, i64 0, i32 1, i32 0, i32 2, !dbg !85
  br label %83, !dbg !85

83:                                               ; preds = %102, %entry
  %84 = phi i64 [ %107, %102 ], [ 0, %entry ], !dbg !85
  %85 = load i64, i64* %78, align 8, !dbg !85, !tbaa !25
  %86 = and i64 %85, 8192, !dbg !85
  %87 = icmp eq i64 %86, 0, !dbg !85
  br i1 %87, label %91, label %88, !dbg !85

88:                                               ; preds = %83
  %89 = lshr i64 %85, 15, !dbg !85
  %90 = and i64 %89, 3, !dbg !85
  br label %93, !dbg !85

91:                                               ; preds = %83
  %92 = load i64, i64* %80, align 8, !dbg !85, !tbaa !27
  br label %93, !dbg !85

93:                                               ; preds = %91, %88
  %94 = phi i64 [ %90, %88 ], [ %92, %91 ], !dbg !85
  %95 = icmp sgt i64 %94, %84, !dbg !85
  br i1 %95, label %96, label %forward_sorbet_rb_array_each_withBlock.exit.i, !dbg !85

96:                                               ; preds = %93
  call void @llvm.lifetime.start.p0i8(i64 noundef 8, i8* noundef nonnull %81) #14, !dbg !85
  %97 = load i64, i64* %78, align 8, !dbg !85, !tbaa !25
  %98 = and i64 %97, 8192, !dbg !85
  %99 = icmp eq i64 %98, 0, !dbg !85
  br i1 %99, label %100, label %102, !dbg !85

100:                                              ; preds = %96
  %101 = load i64*, i64** %82, align 8, !dbg !85, !tbaa !27
  br label %102, !dbg !85

102:                                              ; preds = %100, %96
  %103 = phi i64* [ %101, %100 ], [ %80, %96 ], !dbg !85
  %104 = getelementptr inbounds i64, i64* %103, i64 %84, !dbg !85
  %105 = load i64, i64* %104, align 8, !dbg !85, !tbaa !6
  store i64 %105, i64* %2, align 8, !dbg !85, !tbaa !6
  %106 = call i64 @"func_<root>.17<static-init>$152$block_1"(i64 undef, i64 undef, i32 noundef 1, i64* noalias nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, i64 undef) #14, !dbg !85
  call void @llvm.lifetime.end.p0i8(i64 noundef 8, i8* noundef nonnull %81) #14, !dbg !85
  %107 = add nuw nsw i64 %84, 1, !dbg !85
  br label %83, !dbg !85, !llvm.loop !88

forward_sorbet_rb_array_each_withBlock.exit.i:    ; preds = %93
  call void @sorbet_popFrame() #14, !dbg !85
  call void @llvm.lifetime.end.p0i8(i64 noundef 40, i8* noundef nonnull %60) #14, !dbg !80
  %108 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !80, !tbaa !15
  %109 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %108, i64 0, i32 5, !dbg !80
  %110 = load i32, i32* %109, align 8, !dbg !80, !tbaa !37
  %111 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %108, i64 0, i32 6, !dbg !80
  %112 = load i32, i32* %111, align 4, !dbg !80, !tbaa !38
  %113 = xor i32 %112, -1, !dbg !80
  %114 = and i32 %113, %110, !dbg !80
  %115 = icmp eq i32 %114, 0, !dbg !80
  br i1 %115, label %120, label %116, !dbg !80, !prof !31

116:                                              ; preds = %forward_sorbet_rb_array_each_withBlock.exit.i
  %117 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %108, i64 0, i32 8, !dbg !80
  %118 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %117, align 8, !dbg !80, !tbaa !39
  %119 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %118, i32 noundef 0) #14, !dbg !80
  br label %120, !dbg !80

120:                                              ; preds = %116, %forward_sorbet_rb_array_each_withBlock.exit.i
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 13), i64** %53, align 8, !dbg !80, !tbaa !15
  %rubyId_each65.i = load i64, i64* @rubyIdPrecomputed_each, align 8, !dbg !90
  %121 = load i64, i64* @"func_<root>.17<static-init>$152$block_2_ifunc", align 8, !dbg !90
  %122 = call %struct.vm_ifunc* @sorbet_globalConstFetchIfunc(i64 %121) #14, !dbg !90
  %123 = bitcast %struct.sorbet_inlineIntrinsicEnv* %4 to i8*, !dbg !90
  call void @llvm.lifetime.start.p0i8(i64 noundef 40, i8* noundef nonnull %123) #14, !dbg !90
  %124 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %4, i64 0, i32 0, !dbg !90
  store i64 %57, i64* %124, align 8, !dbg !90, !tbaa !81
  %125 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %4, i64 0, i32 1, !dbg !90
  store i64 %rubyId_each65.i, i64* %125, align 8, !dbg !90, !tbaa !83
  %126 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %4, i64 0, i32 2, !dbg !90
  store i32 0, i32* %126, align 8, !dbg !90, !tbaa !84
  %127 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %4, i64 0, i32 3, !dbg !90
  %128 = bitcast i64** %127 to i8*, !dbg !90
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %128, i8 0, i64 16, i1 false) #14, !dbg !90
  %129 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !90, !tbaa !15
  %130 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %129, i64 0, i32 2, !dbg !90
  %131 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %130, align 8, !dbg !90, !tbaa !17
  %132 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %131, i64 0, i32 3, !dbg !90
  %133 = getelementptr inbounds i64, i64* %132, i64 2, !dbg !90
  %134 = bitcast i64* %133 to %struct.vm_ifunc**, !dbg !90
  store %struct.vm_ifunc* %122, %struct.vm_ifunc** %134, align 8, !dbg !90, !tbaa !27
  %135 = ptrtoint i64* %132 to i64, !dbg !90
  %136 = or i64 %135, 3, !dbg !90
  %137 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %129, i64 0, i32 17, !dbg !90
  %138 = and i64 %136, -4, !dbg !91
  %139 = inttoptr i64 %138 to %struct.rb_captured_block*, !dbg !91
  store i64 0, i64* %137, align 8, !dbg !91, !tbaa !87
  call void @sorbet_pushBlockFrame(%struct.rb_captured_block* %139) #14, !dbg !91
  br label %140, !dbg !91

140:                                              ; preds = %.thread15, %120
  %141 = phi i64 [ %171, %.thread15 ], [ 0, %120 ], !dbg !91
  %142 = load i64, i64* %78, align 8, !dbg !91, !tbaa !25
  %143 = and i64 %142, 8192, !dbg !91
  %144 = icmp eq i64 %143, 0, !dbg !91
  br i1 %144, label %145, label %.thread, !dbg !91

145:                                              ; preds = %140
  %146 = load i64, i64* %80, align 8, !dbg !91, !tbaa !27
  %147 = icmp sgt i64 %146, %141, !dbg !91
  br i1 %147, label %151, label %forward_sorbet_rb_array_each_withBlock.1.exit.i, !dbg !91

.thread:                                          ; preds = %140
  %148 = lshr i64 %142, 15, !dbg !91
  %149 = and i64 %148, 3, !dbg !91
  %150 = icmp sgt i64 %149, %141, !dbg !91
  br i1 %150, label %.thread15, label %forward_sorbet_rb_array_each_withBlock.1.exit.i, !dbg !91

151:                                              ; preds = %145
  %152 = load i64*, i64** %82, align 8, !dbg !91, !tbaa !27
  br label %.thread15, !dbg !91

.thread15:                                        ; preds = %.thread, %151
  %153 = phi i64* [ %152, %151 ], [ %80, %.thread ], !dbg !91
  %154 = getelementptr inbounds i64, i64* %153, i64 %141, !dbg !91
  %155 = load i64, i64* %154, align 8, !dbg !91, !tbaa !6
  call void @llvm.experimental.noalias.scope.decl(metadata !93) #14, !dbg !91
  %156 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !90, !tbaa !15, !noalias !93
  %157 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %156, i64 0, i32 2, !dbg !90
  %158 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %157, align 8, !dbg !90, !tbaa !17, !noalias !93
  %159 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %158, i64 0, i32 3, !dbg !90
  %160 = load i64, i64* %159, align 8, !dbg !90, !tbaa !42, !noalias !93
  %stackFrame.i.i.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$152$block_2", align 8, !dbg !90, !noalias !93
  %161 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %158, i64 0, i32 2, !dbg !90
  store %struct.rb_iseq_struct* %stackFrame.i.i.i, %struct.rb_iseq_struct** %161, align 8, !dbg !90, !tbaa !21, !noalias !93
  %162 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %158, i64 0, i32 4, !dbg !90
  %163 = load i64*, i64** %162, align 8, !dbg !90, !tbaa !23, !noalias !93
  %164 = load i64, i64* %163, align 8, !dbg !90, !tbaa !6, !noalias !93
  %165 = and i64 %164, -129, !dbg !90
  store i64 %165, i64* %163, align 8, !dbg !90, !tbaa !6, !noalias !93
  %166 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %158, i64 0, i32 0, !dbg !90
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 14), i64** %166, align 8, !dbg !96, !tbaa !15, !noalias !93
  %167 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %158, i64 0, i32 1, !dbg !98
  %168 = load i64*, i64** %167, align 8, !dbg !98
  store i64 %160, i64* %168, align 8, !dbg !98, !tbaa !6
  %169 = getelementptr inbounds i64, i64* %168, i64 1, !dbg !98
  store i64 %155, i64* %169, align 8, !dbg !98, !tbaa !6
  %170 = getelementptr inbounds i64, i64* %169, i64 1, !dbg !98
  store i64* %170, i64** %167, align 8, !dbg !98
  %send = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_p, i64 0), !dbg !98
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 13), i64** %166, align 8, !dbg !98, !tbaa !15, !noalias !93
  %171 = add nuw nsw i64 %141, 1, !dbg !91
  br label %140, !dbg !91, !llvm.loop !99

forward_sorbet_rb_array_each_withBlock.1.exit.i:  ; preds = %.thread, %145
  call void @sorbet_popFrame() #14, !dbg !91
  call void @llvm.lifetime.end.p0i8(i64 noundef 40, i8* noundef nonnull %123) #14, !dbg !90
  %172 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !90, !tbaa !15
  %173 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %172, i64 0, i32 5, !dbg !90
  %174 = load i32, i32* %173, align 8, !dbg !90, !tbaa !37
  %175 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %172, i64 0, i32 6, !dbg !90
  %176 = load i32, i32* %175, align 4, !dbg !90, !tbaa !38
  %177 = xor i32 %176, -1, !dbg !90
  %178 = and i32 %177, %174, !dbg !90
  %179 = icmp eq i32 %178, 0, !dbg !90
  br i1 %179, label %184, label %180, !dbg !90, !prof !31

180:                                              ; preds = %forward_sorbet_rb_array_each_withBlock.1.exit.i
  %181 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %172, i64 0, i32 8, !dbg !90
  %182 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %181, align 8, !dbg !90, !tbaa !39
  %183 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %182, i32 noundef 0) #14, !dbg !90
  br label %184, !dbg !90

184:                                              ; preds = %180, %forward_sorbet_rb_array_each_withBlock.1.exit.i
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 18), i64** %53, align 8, !dbg !90, !tbaa !15
  %rubyId_each77.i = load i64, i64* @rubyIdPrecomputed_each, align 8, !dbg !100
  %185 = load i64, i64* @"func_<root>.17<static-init>$152$block_3_ifunc", align 8, !dbg !100
  %186 = call %struct.vm_ifunc* @sorbet_globalConstFetchIfunc(i64 %185) #14, !dbg !100
  %187 = bitcast %struct.sorbet_inlineIntrinsicEnv* %5 to i8*, !dbg !100
  call void @llvm.lifetime.start.p0i8(i64 noundef 40, i8* noundef nonnull %187) #14, !dbg !100
  %188 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %5, i64 0, i32 0, !dbg !100
  store i64 %57, i64* %188, align 8, !dbg !100, !tbaa !81
  %189 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %5, i64 0, i32 1, !dbg !100
  store i64 %rubyId_each77.i, i64* %189, align 8, !dbg !100, !tbaa !83
  %190 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %5, i64 0, i32 2, !dbg !100
  store i32 0, i32* %190, align 8, !dbg !100, !tbaa !84
  %191 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %5, i64 0, i32 3, !dbg !100
  %192 = bitcast i64** %191 to i8*, !dbg !100
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %192, i8 0, i64 16, i1 false) #14, !dbg !100
  %193 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !100, !tbaa !15
  %194 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %193, i64 0, i32 2, !dbg !100
  %195 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %194, align 8, !dbg !100, !tbaa !17
  %196 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %195, i64 0, i32 3, !dbg !100
  %197 = getelementptr inbounds i64, i64* %196, i64 2, !dbg !100
  %198 = bitcast i64* %197 to %struct.vm_ifunc**, !dbg !100
  store %struct.vm_ifunc* %186, %struct.vm_ifunc** %198, align 8, !dbg !100, !tbaa !27
  %199 = ptrtoint i64* %196 to i64, !dbg !100
  %200 = or i64 %199, 3, !dbg !100
  %201 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %193, i64 0, i32 17, !dbg !100
  %202 = and i64 %200, -4, !dbg !101
  %203 = inttoptr i64 %202 to %struct.rb_captured_block*, !dbg !101
  store i64 0, i64* %201, align 8, !dbg !101, !tbaa !87
  call void @sorbet_pushBlockFrame(%struct.rb_captured_block* %203) #14, !dbg !101
  br label %204, !dbg !101

204:                                              ; preds = %.thread17, %184
  %205 = phi i64 [ %235, %.thread17 ], [ 0, %184 ], !dbg !101
  %206 = load i64, i64* %78, align 8, !dbg !101, !tbaa !25
  %207 = and i64 %206, 8192, !dbg !101
  %208 = icmp eq i64 %207, 0, !dbg !101
  br i1 %208, label %209, label %.thread16, !dbg !101

209:                                              ; preds = %204
  %210 = load i64, i64* %80, align 8, !dbg !101, !tbaa !27
  %211 = icmp sgt i64 %210, %205, !dbg !101
  br i1 %211, label %215, label %forward_sorbet_rb_array_each_withBlock.3.exit.i, !dbg !101

.thread16:                                        ; preds = %204
  %212 = lshr i64 %206, 15, !dbg !101
  %213 = and i64 %212, 3, !dbg !101
  %214 = icmp sgt i64 %213, %205, !dbg !101
  br i1 %214, label %.thread17, label %forward_sorbet_rb_array_each_withBlock.3.exit.i, !dbg !101

215:                                              ; preds = %209
  %216 = load i64*, i64** %82, align 8, !dbg !101, !tbaa !27
  br label %.thread17, !dbg !101

.thread17:                                        ; preds = %.thread16, %215
  %217 = phi i64* [ %216, %215 ], [ %80, %.thread16 ], !dbg !101
  %218 = getelementptr inbounds i64, i64* %217, i64 %205, !dbg !101
  %219 = load i64, i64* %218, align 8, !dbg !101, !tbaa !6
  call void @llvm.experimental.noalias.scope.decl(metadata !103) #14, !dbg !101
  %220 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !100, !tbaa !15, !noalias !103
  %221 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %220, i64 0, i32 2, !dbg !100
  %222 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %221, align 8, !dbg !100, !tbaa !17, !noalias !103
  %223 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %222, i64 0, i32 3, !dbg !100
  %224 = load i64, i64* %223, align 8, !dbg !100, !tbaa !42, !noalias !103
  %stackFrame.i.i1.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$152$block_3", align 8, !dbg !100, !noalias !103
  %225 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %222, i64 0, i32 2, !dbg !100
  store %struct.rb_iseq_struct* %stackFrame.i.i1.i, %struct.rb_iseq_struct** %225, align 8, !dbg !100, !tbaa !21, !noalias !103
  %226 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %222, i64 0, i32 4, !dbg !100
  %227 = load i64*, i64** %226, align 8, !dbg !100, !tbaa !23, !noalias !103
  %228 = load i64, i64* %227, align 8, !dbg !100, !tbaa !6, !noalias !103
  %229 = and i64 %228, -129, !dbg !100
  store i64 %229, i64* %227, align 8, !dbg !100, !tbaa !6, !noalias !103
  %230 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %222, i64 0, i32 0, !dbg !100
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 19), i64** %230, align 8, !dbg !100, !tbaa !15, !noalias !103
  %231 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %222, i64 0, i32 1, !dbg !106
  %232 = load i64*, i64** %231, align 8, !dbg !106
  store i64 %224, i64* %232, align 8, !dbg !106, !tbaa !6
  %233 = getelementptr inbounds i64, i64* %232, i64 1, !dbg !106
  store i64 %219, i64* %233, align 8, !dbg !106, !tbaa !6
  %234 = getelementptr inbounds i64, i64* %233, i64 1, !dbg !106
  store i64* %234, i64** %231, align 8, !dbg !106
  %send14 = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_p.5, i64 0), !dbg !106
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 18), i64** %230, align 8, !dbg !106, !tbaa !15, !noalias !103
  %235 = add nuw nsw i64 %205, 1, !dbg !101
  br label %204, !dbg !101, !llvm.loop !108

forward_sorbet_rb_array_each_withBlock.3.exit.i:  ; preds = %.thread16, %209
  call void @sorbet_popFrame() #14, !dbg !101
  call void @llvm.lifetime.end.p0i8(i64 noundef 40, i8* noundef nonnull %187) #14, !dbg !100
  %236 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !100, !tbaa !15
  %237 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %236, i64 0, i32 5, !dbg !100
  %238 = load i32, i32* %237, align 8, !dbg !100, !tbaa !37
  %239 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %236, i64 0, i32 6, !dbg !100
  %240 = load i32, i32* %239, align 4, !dbg !100, !tbaa !38
  %241 = xor i32 %240, -1, !dbg !100
  %242 = and i32 %241, %238, !dbg !100
  %243 = icmp eq i32 %242, 0, !dbg !100
  br i1 %243, label %248, label %244, !dbg !100, !prof !31

244:                                              ; preds = %forward_sorbet_rb_array_each_withBlock.3.exit.i
  %245 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %236, i64 0, i32 8, !dbg !100
  %246 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %245, align 8, !dbg !100, !tbaa !39
  %247 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %246, i32 noundef 0) #14, !dbg !100
  br label %248, !dbg !100

248:                                              ; preds = %244, %forward_sorbet_rb_array_each_withBlock.3.exit.i
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 23), i64** %53, align 8, !dbg !100, !tbaa !15
  %rubyId_each89.i = load i64, i64* @rubyIdPrecomputed_each, align 8, !dbg !109
  %249 = load i64, i64* @"func_<root>.17<static-init>$152$block_4_ifunc", align 8, !dbg !109
  %250 = call %struct.vm_ifunc* @sorbet_globalConstFetchIfunc(i64 %249) #14, !dbg !109
  %251 = bitcast %struct.sorbet_inlineIntrinsicEnv* %6 to i8*, !dbg !109
  call void @llvm.lifetime.start.p0i8(i64 noundef 40, i8* noundef nonnull %251) #14, !dbg !109
  %252 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %6, i64 0, i32 0, !dbg !109
  store i64 %57, i64* %252, align 8, !dbg !109, !tbaa !81
  %253 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %6, i64 0, i32 1, !dbg !109
  store i64 %rubyId_each89.i, i64* %253, align 8, !dbg !109, !tbaa !83
  %254 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %6, i64 0, i32 2, !dbg !109
  store i32 0, i32* %254, align 8, !dbg !109, !tbaa !84
  %255 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %6, i64 0, i32 3, !dbg !109
  %256 = bitcast i64** %255 to i8*, !dbg !109
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %256, i8 0, i64 16, i1 false) #14, !dbg !109
  %257 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !109, !tbaa !15
  %258 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %257, i64 0, i32 2, !dbg !109
  %259 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %258, align 8, !dbg !109, !tbaa !17
  %260 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %259, i64 0, i32 3, !dbg !109
  %261 = getelementptr inbounds i64, i64* %260, i64 2, !dbg !109
  %262 = bitcast i64* %261 to %struct.vm_ifunc**, !dbg !109
  store %struct.vm_ifunc* %250, %struct.vm_ifunc** %262, align 8, !dbg !109, !tbaa !27
  %263 = ptrtoint i64* %260 to i64, !dbg !109
  %264 = or i64 %263, 3, !dbg !109
  %265 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %257, i64 0, i32 17, !dbg !109
  %266 = and i64 %264, -4, !dbg !110
  %267 = inttoptr i64 %266 to %struct.rb_captured_block*, !dbg !110
  store i64 0, i64* %265, align 8, !dbg !110, !tbaa !87
  call void @sorbet_pushBlockFrame(%struct.rb_captured_block* %267) #14, !dbg !110
  %268 = bitcast i64* %1 to i8*, !dbg !110
  br label %269, !dbg !110

269:                                              ; preds = %288, %248
  %270 = phi i64 [ %293, %288 ], [ 0, %248 ], !dbg !110
  %271 = load i64, i64* %78, align 8, !dbg !110, !tbaa !25
  %272 = and i64 %271, 8192, !dbg !110
  %273 = icmp eq i64 %272, 0, !dbg !110
  br i1 %273, label %277, label %274, !dbg !110

274:                                              ; preds = %269
  %275 = lshr i64 %271, 15, !dbg !110
  %276 = and i64 %275, 3, !dbg !110
  br label %279, !dbg !110

277:                                              ; preds = %269
  %278 = load i64, i64* %80, align 8, !dbg !110, !tbaa !27
  br label %279, !dbg !110

279:                                              ; preds = %277, %274
  %280 = phi i64 [ %276, %274 ], [ %278, %277 ], !dbg !110
  %281 = icmp sgt i64 %280, %270, !dbg !110
  br i1 %281, label %282, label %forward_sorbet_rb_array_each_withBlock.6.exit.i, !dbg !110

282:                                              ; preds = %279
  call void @llvm.lifetime.start.p0i8(i64 noundef 8, i8* noundef nonnull %268) #14, !dbg !110
  %283 = load i64, i64* %78, align 8, !dbg !110, !tbaa !25
  %284 = and i64 %283, 8192, !dbg !110
  %285 = icmp eq i64 %284, 0, !dbg !110
  br i1 %285, label %286, label %288, !dbg !110

286:                                              ; preds = %282
  %287 = load i64*, i64** %82, align 8, !dbg !110, !tbaa !27
  br label %288, !dbg !110

288:                                              ; preds = %286, %282
  %289 = phi i64* [ %287, %286 ], [ %80, %282 ], !dbg !110
  %290 = getelementptr inbounds i64, i64* %289, i64 %270, !dbg !110
  %291 = load i64, i64* %290, align 8, !dbg !110, !tbaa !6
  store i64 %291, i64* %1, align 8, !dbg !110, !tbaa !6
  %292 = call i64 @"func_<root>.17<static-init>$152$block_4"(i64 undef, i64 undef, i32 noundef 1, i64* noalias nocapture noundef nonnull readonly align 8 dereferenceable(8) %1, i64 undef) #14, !dbg !110
  call void @llvm.lifetime.end.p0i8(i64 noundef 8, i8* noundef nonnull %268) #14, !dbg !110
  %293 = add nuw nsw i64 %270, 1, !dbg !110
  br label %269, !dbg !110, !llvm.loop !112

forward_sorbet_rb_array_each_withBlock.6.exit.i:  ; preds = %279
  call void @sorbet_popFrame() #14, !dbg !110
  call void @llvm.lifetime.end.p0i8(i64 noundef 40, i8* noundef nonnull %251) #14, !dbg !109
  %294 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !109, !tbaa !15
  %295 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %294, i64 0, i32 5, !dbg !109
  %296 = load i32, i32* %295, align 8, !dbg !109, !tbaa !37
  %297 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %294, i64 0, i32 6, !dbg !109
  %298 = load i32, i32* %297, align 4, !dbg !109, !tbaa !38
  %299 = xor i32 %298, -1, !dbg !109
  %300 = and i32 %299, %296, !dbg !109
  %301 = icmp eq i32 %300, 0, !dbg !109
  br i1 %301, label %306, label %302, !dbg !109, !prof !31

302:                                              ; preds = %forward_sorbet_rb_array_each_withBlock.6.exit.i
  %303 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %294, i64 0, i32 8, !dbg !109
  %304 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %303, align 8, !dbg !109, !tbaa !39
  %305 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %304, i32 noundef 0) #14, !dbg !109
  br label %306, !dbg !109

306:                                              ; preds = %302, %forward_sorbet_rb_array_each_withBlock.6.exit.i
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 28), i64** %53, align 8, !dbg !109, !tbaa !15
  %rubyId_each101.i = load i64, i64* @rubyIdPrecomputed_each, align 8, !dbg !113
  %307 = load i64, i64* @"func_<root>.17<static-init>$152$block_5_ifunc", align 8, !dbg !113
  %308 = call %struct.vm_ifunc* @sorbet_globalConstFetchIfunc(i64 %307) #14, !dbg !113
  %309 = bitcast %struct.sorbet_inlineIntrinsicEnv* %7 to i8*, !dbg !113
  call void @llvm.lifetime.start.p0i8(i64 noundef 40, i8* noundef nonnull %309) #14, !dbg !113
  %310 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %7, i64 0, i32 0, !dbg !113
  store i64 %57, i64* %310, align 8, !dbg !113, !tbaa !81
  %311 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %7, i64 0, i32 1, !dbg !113
  store i64 %rubyId_each101.i, i64* %311, align 8, !dbg !113, !tbaa !83
  %312 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %7, i64 0, i32 2, !dbg !113
  store i32 0, i32* %312, align 8, !dbg !113, !tbaa !84
  %313 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %7, i64 0, i32 3, !dbg !113
  %314 = bitcast i64** %313 to i8*, !dbg !113
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %314, i8 0, i64 16, i1 false) #14, !dbg !113
  %315 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !113, !tbaa !15
  %316 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %315, i64 0, i32 2, !dbg !113
  %317 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %316, align 8, !dbg !113, !tbaa !17
  %318 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %317, i64 0, i32 3, !dbg !113
  %319 = getelementptr inbounds i64, i64* %318, i64 2, !dbg !113
  %320 = bitcast i64* %319 to %struct.vm_ifunc**, !dbg !113
  store %struct.vm_ifunc* %308, %struct.vm_ifunc** %320, align 8, !dbg !113, !tbaa !27
  %321 = ptrtoint i64* %318 to i64, !dbg !113
  %322 = or i64 %321, 3, !dbg !113
  %323 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %315, i64 0, i32 17, !dbg !113
  %324 = and i64 %322, -4, !dbg !114
  %325 = inttoptr i64 %324 to %struct.rb_captured_block*, !dbg !114
  store i64 0, i64* %323, align 8, !dbg !114, !tbaa !87
  call void @sorbet_pushBlockFrame(%struct.rb_captured_block* %325) #14, !dbg !114
  %326 = bitcast i64* %0 to i8*, !dbg !114
  br label %327, !dbg !114

327:                                              ; preds = %346, %306
  %328 = phi i64 [ %351, %346 ], [ 0, %306 ], !dbg !114
  %329 = load i64, i64* %78, align 8, !dbg !114, !tbaa !25
  %330 = and i64 %329, 8192, !dbg !114
  %331 = icmp eq i64 %330, 0, !dbg !114
  br i1 %331, label %335, label %332, !dbg !114

332:                                              ; preds = %327
  %333 = lshr i64 %329, 15, !dbg !114
  %334 = and i64 %333, 3, !dbg !114
  br label %337, !dbg !114

335:                                              ; preds = %327
  %336 = load i64, i64* %80, align 8, !dbg !114, !tbaa !27
  br label %337, !dbg !114

337:                                              ; preds = %335, %332
  %338 = phi i64 [ %334, %332 ], [ %336, %335 ], !dbg !114
  %339 = icmp sgt i64 %338, %328, !dbg !114
  br i1 %339, label %340, label %forward_sorbet_rb_array_each_withBlock.10.exit.i, !dbg !114

340:                                              ; preds = %337
  call void @llvm.lifetime.start.p0i8(i64 noundef 8, i8* noundef nonnull %326) #14, !dbg !114
  %341 = load i64, i64* %78, align 8, !dbg !114, !tbaa !25
  %342 = and i64 %341, 8192, !dbg !114
  %343 = icmp eq i64 %342, 0, !dbg !114
  br i1 %343, label %344, label %346, !dbg !114

344:                                              ; preds = %340
  %345 = load i64*, i64** %82, align 8, !dbg !114, !tbaa !27
  br label %346, !dbg !114

346:                                              ; preds = %344, %340
  %347 = phi i64* [ %345, %344 ], [ %80, %340 ], !dbg !114
  %348 = getelementptr inbounds i64, i64* %347, i64 %328, !dbg !114
  %349 = load i64, i64* %348, align 8, !dbg !114, !tbaa !6
  store i64 %349, i64* %0, align 8, !dbg !114, !tbaa !6
  %350 = call i64 @"func_<root>.17<static-init>$152$block_5"(i64 undef, i64 undef, i32 noundef 1, i64* noalias nocapture noundef nonnull readonly align 8 dereferenceable(8) %0, i64 undef) #14, !dbg !114
  call void @llvm.lifetime.end.p0i8(i64 noundef 8, i8* noundef nonnull %326) #14, !dbg !114
  %351 = add nuw nsw i64 %328, 1, !dbg !114
  br label %327, !dbg !114, !llvm.loop !116

forward_sorbet_rb_array_each_withBlock.10.exit.i: ; preds = %337
  call void @sorbet_popFrame() #14, !dbg !114
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %309) #14, !dbg !113
  %352 = and i64 %57, 7, !dbg !113
  %353 = icmp ne i64 %352, 0, !dbg !113
  %354 = and i64 %57, -9, !dbg !113
  %355 = icmp eq i64 %354, 0, !dbg !113
  %356 = or i1 %353, %355, !dbg !113
  br i1 %356, label %sorbet_isa_Array.exit, label %357, !dbg !113

357:                                              ; preds = %forward_sorbet_rb_array_each_withBlock.10.exit.i
  %358 = inttoptr i64 %57 to %struct.iseq_inline_iv_cache_entry*, !dbg !113
  %359 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %358, i64 0, i32 0, !dbg !113
  %360 = load i64, i64* %359, align 8, !dbg !113, !tbaa !25
  %361 = and i64 %360, 31, !dbg !113
  %362 = icmp eq i64 %361, 7, !dbg !113
  br label %sorbet_isa_Array.exit, !dbg !113

sorbet_isa_Array.exit:                            ; preds = %forward_sorbet_rb_array_each_withBlock.10.exit.i, %357
  %363 = phi i1 [ false, %forward_sorbet_rb_array_each_withBlock.10.exit.i ], [ %362, %357 ], !dbg !113
  call void @llvm.assume(i1 %363) #14, !dbg !113
  %364 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !113, !tbaa !15
  %365 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %364, i64 0, i32 5, !dbg !113
  %366 = load i32, i32* %365, align 8, !dbg !113, !tbaa !37
  %367 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %364, i64 0, i32 6, !dbg !113
  %368 = load i32, i32* %367, align 4, !dbg !113, !tbaa !38
  %369 = xor i32 %368, -1, !dbg !113
  %370 = and i32 %369, %366, !dbg !113
  %371 = icmp eq i32 %370, 0, !dbg !113
  br i1 %371, label %"func_<root>.17<static-init>$152.exit", label %372, !dbg !113, !prof !31

372:                                              ; preds = %sorbet_isa_Array.exit
  %373 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %364, i64 0, i32 8, !dbg !113
  %374 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %373, align 8, !dbg !113, !tbaa !39
  %375 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %374, i32 0) #14, !dbg !113
  br label %"func_<root>.17<static-init>$152.exit", !dbg !113

"func_<root>.17<static-init>$152.exit":           ; preds = %sorbet_isa_Array.exit, %372
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 28), i64** %53, align 8, !tbaa !15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46)
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #11

; Function Attrs: cold minsize noreturn ssp
define internal fastcc void @"func_<root>.17<static-init>$152$block_1.cold.1"(i64 %el2.sroa.0.0) unnamed_addr #12 !dbg !117 {
newFuncRoot:
  tail call void @sorbet_cast_failure(i64 %el2.sroa.0.0, i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @str_T.let, i64 0, i64 0), i8* noundef getelementptr inbounds ([8 x i8], [8 x i8]* @str_Integer, i64 0, i64 0)) #17, !dbg !119
  unreachable, !dbg !119
}

attributes #0 = { nofree nosync nounwind readnone willreturn mustprogress "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #1 = { cold noreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { noreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #5 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #6 = { inaccessiblememonly nofree nosync nounwind willreturn }
attributes #7 = { nounwind ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #8 = { ssp }
attributes #9 = { nofree nosync nounwind willreturn }
attributes #10 = { sspreq }
attributes #11 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #12 = { cold minsize noreturn ssp }
attributes #13 = { noreturn nounwind }
attributes #14 = { nounwind }
attributes #15 = { noinline }
attributes #16 = { willreturn }
attributes #17 = { noreturn }

!llvm.module.flags = !{!0, !1, !2}
!llvm.dbg.cu = !{!3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"cf-protection-return", i32 1}
!2 = !{i32 4, !"cf-protection-branch", i32 1}
!3 = distinct !DICompileUnit(language: DW_LANG_C, file: !4, producer: "Sorbet LLVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !5)
!4 = !DIFile(filename: "test/testdata/compiler/block_arg_expand.rb", directory: ".")
!5 = !{}
!6 = !{!7, !7, i64 0}
!7 = !{!"long", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.17<static-init>$152$block_1", scope: !11, file: !4, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!11 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.17<static-init>$152", scope: null, file: !4, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!12 = !DISubroutineType(types: !13)
!13 = !{!14}
!14 = !DIBasicType(name: "VALUE", size: 64, encoding: DW_ATE_signed)
!15 = !{!16, !16, i64 0}
!16 = !{!"any pointer", !8, i64 0}
!17 = !{!18, !16, i64 16}
!18 = !{!"rb_execution_context_struct", !16, i64 0, !7, i64 8, !16, i64 16, !16, i64 24, !16, i64 32, !19, i64 40, !19, i64 44, !16, i64 48, !16, i64 56, !16, i64 64, !7, i64 72, !7, i64 80, !16, i64 88, !7, i64 96, !16, i64 104, !16, i64 112, !7, i64 120, !7, i64 128, !8, i64 136, !8, i64 137, !7, i64 144, !20, i64 152}
!19 = !{!"int", !8, i64 0}
!20 = !{!"", !16, i64 0, !16, i64 8, !7, i64 16, !8, i64 24}
!21 = !{!22, !16, i64 16}
!22 = !{!"rb_control_frame_struct", !16, i64 0, !16, i64 8, !16, i64 16, !7, i64 24, !16, i64 32, !16, i64 40, !16, i64 48}
!23 = !{!22, !16, i64 32}
!24 = !DILocation(line: 5, column: 1, scope: !10)
!25 = !{!26, !7, i64 0}
!26 = !{!"RBasic", !7, i64 0, !7, i64 8}
!27 = !{!8, !8, i64 0}
!28 = !{!"branch_weights", i32 1, i32 2000}
!29 = !DILocation(line: 8, column: 17, scope: !10)
!30 = !DILocation(line: 9, column: 3, scope: !10)
!31 = !{!"branch_weights", i32 2000, i32 1}
!32 = !DILocation(line: 9, column: 25, scope: !10)
!33 = !{!34}
!34 = distinct !{!34, !35, !"sorbet_rb_int_plus: argument 0"}
!35 = distinct !{!35, !"sorbet_rb_int_plus"}
!36 = !{!"branch_weights", i32 4001, i32 4000000}
!37 = !{!18, !19, i64 40}
!38 = !{!18, !19, i64 44}
!39 = !{!18, !16, i64 56}
!40 = !DILocation(line: 8, column: 1, scope: !10)
!41 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.17<static-init>$152$block_2", scope: !11, file: !4, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!42 = !{!22, !7, i64 24}
!43 = !DILocation(line: 5, column: 1, scope: !41)
!44 = !DILocation(line: 13, column: 12, scope: !41)
!45 = !DILocation(line: 14, column: 3, scope: !41)
!46 = !DILocation(line: 13, column: 1, scope: !41)
!47 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.17<static-init>$152$block_3", scope: !11, file: !4, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!48 = !DILocation(line: 5, column: 1, scope: !47)
!49 = !DILocation(line: 18, column: 12, scope: !47)
!50 = !DILocation(line: 18, column: 18, scope: !47)
!51 = !DILocation(line: 0, scope: !47)
!52 = !DILocation(line: 19, column: 3, scope: !47)
!53 = !DILocation(line: 18, column: 1, scope: !47)
!54 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.17<static-init>$152$block_4", scope: !11, file: !4, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!55 = !DILocation(line: 5, column: 1, scope: !54)
!56 = !DILocation(line: 23, column: 14, scope: !54)
!57 = !DILocation(line: 23, column: 24, scope: !54)
!58 = !DILocation(line: 23, column: 26, scope: !54)
!59 = !DILocation(line: 0, scope: !54)
!60 = !DILocation(line: 24, column: 3, scope: !54)
!61 = !DILocation(line: 25, column: 3, scope: !54)
!62 = !DILocation(line: 23, column: 1, scope: !54)
!63 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.17<static-init>$152$block_5", scope: !11, file: !4, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!64 = !DILocation(line: 5, column: 1, scope: !63)
!65 = !DILocation(line: 28, column: 15, scope: !63)
!66 = !DILocation(line: 28, column: 17, scope: !63)
!67 = !DILocation(line: 0, scope: !63)
!68 = !DILocation(line: 29, column: 3, scope: !63)
!69 = !DILocation(line: 30, column: 3, scope: !63)
!70 = !DILocation(line: 28, column: 1, scope: !63)
!71 = !DILocation(line: 0, scope: !11)
!72 = !DILocation(line: 5, column: 6, scope: !11)
!73 = !{!74}
!74 = distinct !{!74, !75, !"sorbet_buildArrayIntrinsic: argument 0"}
!75 = distinct !{!75, !"sorbet_buildArrayIntrinsic"}
!76 = !DILocation(line: 5, column: 5, scope: !11)
!77 = !{!78}
!78 = distinct !{!78, !79, !"sorbet_buildArrayIntrinsic: argument 0"}
!79 = distinct !{!79, !"sorbet_buildArrayIntrinsic"}
!80 = !DILocation(line: 8, column: 1, scope: !11)
!81 = !{!82, !7, i64 0}
!82 = !{!"sorbet_inlineIntrinsicEnv", !7, i64 0, !7, i64 8, !19, i64 16, !16, i64 24, !7, i64 32}
!83 = !{!82, !7, i64 8}
!84 = !{!82, !19, i64 16}
!85 = !DILocation(line: 8, column: 1, scope: !11, inlinedAt: !86)
!86 = distinct !DILocation(line: 8, column: 1, scope: !11)
!87 = !{!18, !7, i64 128}
!88 = distinct !{!88, !89}
!89 = !{!"llvm.loop.unroll.disable"}
!90 = !DILocation(line: 13, column: 1, scope: !11)
!91 = !DILocation(line: 13, column: 1, scope: !11, inlinedAt: !92)
!92 = distinct !DILocation(line: 13, column: 1, scope: !11)
!93 = !{!94}
!94 = distinct !{!94, !95, !"func_<root>.17<static-init>$152$block_2: %argArray"}
!95 = distinct !{!95, !"func_<root>.17<static-init>$152$block_2"}
!96 = !DILocation(line: 13, column: 12, scope: !41, inlinedAt: !97)
!97 = distinct !DILocation(line: 13, column: 1, scope: !11, inlinedAt: !92)
!98 = !DILocation(line: 14, column: 3, scope: !41, inlinedAt: !97)
!99 = distinct !{!99, !89}
!100 = !DILocation(line: 18, column: 1, scope: !11)
!101 = !DILocation(line: 18, column: 1, scope: !11, inlinedAt: !102)
!102 = distinct !DILocation(line: 18, column: 1, scope: !11)
!103 = !{!104}
!104 = distinct !{!104, !105, !"func_<root>.17<static-init>$152$block_3: %argArray"}
!105 = distinct !{!105, !"func_<root>.17<static-init>$152$block_3"}
!106 = !DILocation(line: 19, column: 3, scope: !47, inlinedAt: !107)
!107 = distinct !DILocation(line: 18, column: 1, scope: !11, inlinedAt: !102)
!108 = distinct !{!108, !89}
!109 = !DILocation(line: 23, column: 1, scope: !11)
!110 = !DILocation(line: 23, column: 1, scope: !11, inlinedAt: !111)
!111 = distinct !DILocation(line: 23, column: 1, scope: !11)
!112 = distinct !{!112, !89}
!113 = !DILocation(line: 28, column: 1, scope: !11)
!114 = !DILocation(line: 28, column: 1, scope: !11, inlinedAt: !115)
!115 = distinct !DILocation(line: 28, column: 1, scope: !11)
!116 = distinct !{!116, !89}
!117 = distinct !DISubprogram(name: "func_<root>.17<static-init>$152$block_1.cold.1", linkageName: "func_<root>.17<static-init>$152$block_1.cold.1", scope: null, file: !4, type: !118, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !3, retainedNodes: !5)
!118 = !DISubroutineType(types: !5)
!119 = !DILocation(line: 9, column: 25, scope: !117)
