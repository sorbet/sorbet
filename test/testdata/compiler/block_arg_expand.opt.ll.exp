; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.7 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.17 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_data*, %struct.anon.16, i32, i32, i32, i32, i32, i8, i64 }
%struct.anon = type { %struct.anon.0, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.0 = type { i16, [2 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.iseq_insn_info_entry*, i32*, i32, %struct.succ_index_table* }
%struct.iseq_insn_info_entry = type opaque
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, i64 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.rb_scope_visi_struct }
%struct.rb_scope_visi_struct = type { i8, [3 x i8] }
%struct.rb_call_data = type { %struct.rb_call_cache, %struct.rb_call_info }
%struct.rb_call_cache = type { i64, [3 x i64], %struct.rb_callable_method_entry_struct*, i64, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_data*)*, %union.anon.15 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon.13, i64, i64 }
%union.anon.13 = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64, i32, i64*, i64 (...)*)*, i32 }
%struct.rb_calling_info = type { i64, i64, i32, i32 }
%union.anon.15 = type { i32 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.anon.16 = type { i64, i64, i64, i64* }
%union.anon.17 = type { %struct.anon.18 }
%struct.anon.18 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [5 x i8*], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_fiber_struct = type opaque
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, i64, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %union.pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.10, i32, i64, %struct.rb_fiber_struct*, [5 x i8*], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %union.pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.5, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %union.pthread_mutex_t, i64, i64, i64, i64, i64, i32, %struct.st_table*, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.rb_builtin_function*, i32, %struct.anon.6, [29 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %union.pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%struct.anon.5 = type { [65 x i64] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.rb_builtin_function = type opaque
%struct.anon.6 = type { i64, i64, i64, i64 }
%struct.native_thread_data_struct = type { %struct.list_head, %union.anon.9 }
%union.anon.9 = type { %union.pthread_cond_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.10 = type { %struct.anon.11 }
%struct.anon.11 = type { i64, i64, i32 }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (i64, i64)*, i64 (i64)* }
%struct.st_table_entry = type opaque
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (i64)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.7 = type { i64*, i64*, i64, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.SorbetLineNumberInfo = type { i32, %struct.iseq_insn_info_entry*, i64* }
%struct.FunctionInlineCache = type { %struct.rb_kwarg_call_data }
%struct.rb_kwarg_call_data = type { %struct.rb_call_cache, %struct.rb_call_info_with_kwarg }
%struct.rb_call_info_with_kwarg = type { %struct.rb_call_info, %struct.rb_call_info_kw_arg* }
%struct.rb_call_info_kw_arg = type { i32, [1 x i64] }
%struct.rb_captured_block = type { i64, i64*, %union.anon.20 }
%union.anon.20 = type { %struct.rb_iseq_struct* }
%struct.vm_ifunc = type { i64, i64, i64 (i64, i64, i32, i64*, i64)*, i8*, %struct.rb_code_position_struct }
%struct.iseq_inline_iv_cache_entry = type { i64, i64 }
%struct.RArray = type { %struct.iseq_inline_iv_cache_entry, %union.anon.28 }
%union.anon.28 = type { %struct.anon.29 }
%struct.anon.29 = type { i64, %union.anon, i64* }
%struct.sorbet_inlineIntrinsicEnv = type { i64, i64, i32, i64*, i64 }

@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.9 = private unnamed_addr constant [95 x i8] c"sorbet_getBuildSCMRevision: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@.str.10 = private unnamed_addr constant [93 x i8] c"sorbet_getIsReleaseBuild: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@"stackFramePrecomputed_func_<root>.17<static-init>$153" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"rubyStrFrozen_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb" = internal unnamed_addr global i64 0, align 8
@"str_test/testdata/compiler/block_arg_expand.rb" = private unnamed_addr constant [43 x i8] c"test/testdata/compiler/block_arg_expand.rb\00", align 1
@"rubyIdPrecomputed_<block-call>" = internal unnamed_addr global i64 0, align 8
@"str_<block-call>" = private unnamed_addr constant [13 x i8] c"<block-call>\00", align 1
@iseqEncodedArray = internal global [32 x i64] zeroinitializer
@fileLineNumberInfo = internal global %struct.SorbetLineNumberInfo zeroinitializer
@"stackFramePrecomputed_func_<root>.17<static-init>$153$block_1" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_block in <top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_block in <top (required)>" = private unnamed_addr constant [26 x i8] c"block in <top (required)>\00", align 1
@"rubyStrFrozen_block in <top (required)>" = internal unnamed_addr global i64 0, align 8
@"stackFramePrecomputed_func_<root>.17<static-init>$153$block_2" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"stackFramePrecomputed_func_<root>.17<static-init>$153$block_3" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"stackFramePrecomputed_func_<root>.17<static-init>$153$block_4" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"stackFramePrecomputed_func_<root>.17<static-init>$153$block_5" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"str_<build-array>" = private unnamed_addr constant [14 x i8] c"<build-array>\00", align 1
@rubyIdPrecomputed_each = internal unnamed_addr global i64 0, align 8
@str_each = private unnamed_addr constant [5 x i8] c"each\00", align 1
@"func_<root>.17<static-init>$153$block_1_ifunc" = internal unnamed_addr global i64 0
@str_T.let = private unnamed_addr constant [6 x i8] c"T.let\00", align 1
@str_Integer = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@"rubyIdPrecomputed_+" = internal unnamed_addr global i64 0, align 8
@"str_+" = private unnamed_addr constant [2 x i8] c"+\00", align 1
@"ic_+" = internal global %struct.FunctionInlineCache zeroinitializer
@"func_<root>.17<static-init>$153$block_2_ifunc" = internal unnamed_addr global i64 0
@ic_p = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_p = internal unnamed_addr global i64 0, align 8
@str_p = private unnamed_addr constant [2 x i8] c"p\00", align 1
@"func_<root>.17<static-init>$153$block_3_ifunc" = internal unnamed_addr global i64 0
@rubyIdPrecomputed_x = internal unnamed_addr global i64 0, align 8
@str_x = private unnamed_addr constant [2 x i8] c"x\00", align 1
@ic_p.5 = internal global %struct.FunctionInlineCache zeroinitializer
@"func_<root>.17<static-init>$153$block_4_ifunc" = internal unnamed_addr global i64 0
@rubyIdPrecomputed_default = internal unnamed_addr global i64 0, align 8
@str_default = private unnamed_addr constant [8 x i8] c"default\00", align 1
@rubyIdPrecomputed_something = internal unnamed_addr global i64 0, align 8
@str_something = private unnamed_addr constant [10 x i8] c"something\00", align 1
@ic_p.8 = internal global %struct.FunctionInlineCache zeroinitializer
@ic_p.9 = internal global %struct.FunctionInlineCache zeroinitializer
@"func_<root>.17<static-init>$153$block_5_ifunc" = internal unnamed_addr global i64 0
@ic_p.12 = internal global %struct.FunctionInlineCache zeroinitializer
@ic_p.13 = internal global %struct.FunctionInlineCache zeroinitializer

; Function Attrs: nounwind readnone willreturn
declare i64 @rb_id2sym(i64) local_unnamed_addr #0

; Function Attrs: cold noreturn
declare void @sorbet_cast_failure(i64, i8*, i8*) local_unnamed_addr #1

declare %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64, i64, i64, i64, %struct.rb_iseq_struct*, i32, i32, %struct.SorbetLineNumberInfo*, i64*, i32, i32) local_unnamed_addr #2

declare void @sorbet_initLineNumberInfo(%struct.SorbetLineNumberInfo*, i64*, i32) local_unnamed_addr #2

declare i64 @sorbet_readRealpath() local_unnamed_addr #2

declare void @sorbet_pushBlockFrame(%struct.rb_captured_block*) local_unnamed_addr #2

declare void @sorbet_popFrame() local_unnamed_addr #2

declare void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache*, i64, i32, i32, i32, i64*) local_unnamed_addr #2

declare i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache*, i64) local_unnamed_addr #2

declare void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_iseq_struct*) local_unnamed_addr #2

declare i64 @sorbet_rb_int_plus_slowpath(i64, i64) local_unnamed_addr #2

declare i64 @sorbet_globalConstRegister(i64) local_unnamed_addr #2

declare %struct.vm_ifunc* @sorbet_globalConstFetchIfunc(i64) local_unnamed_addr #2

declare i64 @sorbet_vm_fstring_new(i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #2

declare void @rb_ary_detransient(i64) local_unnamed_addr #2

declare i64 @rb_ary_new_from_values(i64, i64*) local_unnamed_addr #2

declare void @rb_gc_register_mark_object(i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #4

declare i64 @rb_int2big(i64) local_unnamed_addr #2

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #5

; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn
declare void @llvm.experimental.noalias.scope.decl(metadata) #6

declare i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct*, i32) local_unnamed_addr #2

declare %struct.vm_ifunc* @rb_vm_ifunc_new(i64 (i64, i64, i32, i64*, i64)*, i8*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i32 @sorbet_getIsReleaseBuild() local_unnamed_addr #7 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !6
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* noundef getelementptr inbounds ([93 x i8], [93 x i8]* @.str.10, i64 0, i64 0)) #12
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @sorbet_getBuildSCMRevision() local_unnamed_addr #7 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !6
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* noundef getelementptr inbounds ([95 x i8], [95 x i8]* @.str.9, i64 0, i64 0)) #12
  unreachable
}

; Function Attrs: ssp
define internal i64 @"func_<root>.17<static-init>$153$block_1"(i64 %firstYieldArgRaw, i64 %localsOffset, i32 %argc, i64* nocapture readonly %argArray, i64 %blockArg) #8 !dbg !10 {
functionEntryInitializers:
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !15
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !17
  %stackFrame = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$153$block_1", align 8
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame, %struct.rb_iseq_struct** %3, align 8, !tbaa !21
  %4 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 4
  %5 = load i64*, i64** %4, align 8, !tbaa !23
  %6 = load i64, i64* %5, align 8, !tbaa !6
  %7 = and i64 %6, -129
  store i64 %7, i64* %5, align 8, !tbaa !6
  %8 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 0
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %8, align 8, !tbaa !15
  %arrayExpansionSizeGuard = icmp eq i32 %argc, 1, !dbg !24
  br i1 %arrayExpansionSizeGuard, label %argArrayExpandArrayTest, label %fillRequiredArgs, !dbg !24

argArrayExpandArrayTest:                          ; preds = %functionEntryInitializers
  %arg1_maybeExpandToFullArgs = load i64, i64* %argArray, align 8, !dbg !24
  %9 = and i64 %arg1_maybeExpandToFullArgs, 7, !dbg !24
  %10 = icmp ne i64 %9, 0, !dbg !24
  %11 = and i64 %arg1_maybeExpandToFullArgs, -9, !dbg !24
  %12 = icmp eq i64 %11, 0, !dbg !24
  %13 = or i1 %10, %12, !dbg !24
  br i1 %13, label %fillFromDefaultBlockDone2, label %sorbet_isa_Array.exit, !dbg !24

sorbet_isa_Array.exit:                            ; preds = %argArrayExpandArrayTest
  %14 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.iseq_inline_iv_cache_entry*, !dbg !24
  %15 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %14, i64 0, i32 0, !dbg !24
  %16 = load i64, i64* %15, align 8, !dbg !24, !tbaa !25
  %17 = and i64 %16, 31, !dbg !24
  %18 = icmp eq i64 %17, 7, !dbg !24
  br i1 %18, label %argArrayExpand, label %fillFromDefaultBlockDone2, !dbg !24

argArrayExpand:                                   ; preds = %sorbet_isa_Array.exit
  %19 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.iseq_inline_iv_cache_entry*, !dbg !24
  %20 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %19, i64 0, i32 0, !dbg !24
  %21 = load i64, i64* %20, align 8, !dbg !24, !tbaa !25
  %22 = and i64 %21, 33554432, !dbg !24
  %23 = icmp eq i64 %22, 0, !dbg !24
  br i1 %23, label %25, label %24, !dbg !24

24:                                               ; preds = %argArrayExpand
  tail call void @rb_ary_detransient(i64 %arg1_maybeExpandToFullArgs) #13, !dbg !24
  br label %25, !dbg !24

25:                                               ; preds = %24, %argArrayExpand
  %26 = load i64, i64* %20, align 8, !dbg !24, !tbaa !25
  %27 = and i64 %26, 8192, !dbg !24
  %28 = icmp eq i64 %27, 0, !dbg !24
  %29 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.RArray*, !dbg !24
  br i1 %28, label %34, label %30, !dbg !24

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.RArray, %struct.RArray* %29, i64 0, i32 1, i32 0, i32 0, !dbg !24
  %32 = lshr i64 %26, 15, !dbg !24
  %33 = and i64 %32, 3, !dbg !24
  br label %rb_array_len.exit, !dbg !24

34:                                               ; preds = %25
  %35 = getelementptr inbounds %struct.RArray, %struct.RArray* %29, i64 0, i32 1, i32 0, i32 2, !dbg !24
  %36 = load i64*, i64** %35, align 8, !dbg !24, !tbaa !27
  %37 = getelementptr inbounds %struct.RArray, %struct.RArray* %29, i64 0, i32 1, i32 0, i32 0, !dbg !24
  %38 = load i64, i64* %37, align 8, !dbg !24, !tbaa !27
  br label %rb_array_len.exit, !dbg !24

rb_array_len.exit:                                ; preds = %30, %34
  %39 = phi i64* [ %31, %30 ], [ %36, %34 ]
  %40 = phi i64 [ %33, %30 ], [ %38, %34 ], !dbg !24
  %41 = trunc i64 %40 to i32, !dbg !24
  br label %fillRequiredArgs, !dbg !24

fillFromArgBlock0:                                ; preds = %fillRequiredArgs
  %rawArg_el1 = load i64, i64* %argArrayPhi, align 8, !dbg !24
  %default1 = icmp eq i32 %argcPhi, 1, !dbg !24
  br i1 %default1, label %fillFromDefaultBlockDone2, label %fillFromArgBlock1, !dbg !24, !prof !28

fillFromArgBlock1:                                ; preds = %fillFromArgBlock0
  %42 = getelementptr i64, i64* %argArrayPhi, i32 1, !dbg !24
  %rawArg_el2 = load i64, i64* %42, align 8, !dbg !24
  br label %fillFromDefaultBlockDone2, !dbg !24

fillFromDefaultBlockDone2:                        ; preds = %argArrayExpandArrayTest, %sorbet_isa_Array.exit, %fillFromArgBlock0, %fillFromArgBlock1
  %el2.sroa.0.0 = phi i64 [ %rawArg_el2, %fillFromArgBlock1 ], [ 8, %fillFromArgBlock0 ], [ 8, %sorbet_isa_Array.exit ], [ 8, %argArrayExpandArrayTest ], !dbg !24
  %el1.sroa.0.1 = phi i64 [ %rawArg_el1, %fillFromArgBlock1 ], [ %rawArg_el1, %fillFromArgBlock0 ], [ %arg1_maybeExpandToFullArgs, %sorbet_isa_Array.exit ], [ %arg1_maybeExpandToFullArgs, %argArrayExpandArrayTest ], !dbg !24
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 9), i64** %8, align 8, !dbg !29, !tbaa !15
  %43 = and i64 %el1.sroa.0.1, 1, !dbg !30
  %44 = icmp eq i64 %43, 0, !dbg !30
  br i1 %44, label %45, label %typeTestSuccess, !dbg !30, !prof !28

45:                                               ; preds = %fillFromDefaultBlockDone2.thread, %fillFromDefaultBlockDone2
  %el1.sroa.0.146 = phi i64 [ 8, %fillFromDefaultBlockDone2.thread ], [ %el1.sroa.0.1, %fillFromDefaultBlockDone2 ]
  %el2.sroa.0.043 = phi i64 [ 8, %fillFromDefaultBlockDone2.thread ], [ %el2.sroa.0.0, %fillFromDefaultBlockDone2 ]
  %46 = and i64 %el1.sroa.0.146, 7, !dbg !30
  %47 = icmp ne i64 %46, 0, !dbg !30
  %48 = and i64 %el1.sroa.0.146, -9, !dbg !30
  %49 = icmp eq i64 %48, 0, !dbg !30
  %50 = or i1 %47, %49, !dbg !30
  br i1 %50, label %codeRepl38, label %sorbet_isa_Integer.exit, !dbg !30

sorbet_isa_Integer.exit:                          ; preds = %45
  %51 = inttoptr i64 %el1.sroa.0.146 to %struct.iseq_inline_iv_cache_entry*, !dbg !30
  %52 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %51, i64 0, i32 0, !dbg !30
  %53 = load i64, i64* %52, align 8, !dbg !30, !tbaa !25
  %54 = and i64 %53, 31, !dbg !30
  %55 = icmp eq i64 %54, 10, !dbg !30
  br i1 %55, label %typeTestSuccess, label %codeRepl38, !dbg !30, !prof !31

fillRequiredArgs:                                 ; preds = %functionEntryInitializers, %rb_array_len.exit
  %argcPhi = phi i32 [ %argc, %functionEntryInitializers ], [ %41, %rb_array_len.exit ], !dbg !24
  %argArrayPhi = phi i64* [ %argArray, %functionEntryInitializers ], [ %39, %rb_array_len.exit ], !dbg !24
  %default0 = icmp eq i32 %argcPhi, 0, !dbg !24
  br i1 %default0, label %fillFromDefaultBlockDone2.thread, label %fillFromArgBlock0, !dbg !24, !prof !28

fillFromDefaultBlockDone2.thread:                 ; preds = %fillRequiredArgs
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 9), i64** %8, align 8, !dbg !29, !tbaa !15
  br label %45, !dbg !30

typeTestSuccess:                                  ; preds = %fillFromDefaultBlockDone2, %sorbet_isa_Integer.exit
  %el1.sroa.0.145 = phi i64 [ %el1.sroa.0.1, %fillFromDefaultBlockDone2 ], [ %el1.sroa.0.146, %sorbet_isa_Integer.exit ]
  %el2.sroa.0.042 = phi i64 [ %el2.sroa.0.0, %fillFromDefaultBlockDone2 ], [ %el2.sroa.0.043, %sorbet_isa_Integer.exit ]
  %56 = and i64 %el2.sroa.0.042, 1, !dbg !32
  %57 = icmp eq i64 %56, 0, !dbg !32
  br i1 %57, label %58, label %"fastSymCallIntrinsic_Integer_+", !dbg !32, !prof !28

58:                                               ; preds = %typeTestSuccess
  %59 = and i64 %el2.sroa.0.042, 7, !dbg !32
  %60 = icmp ne i64 %59, 0, !dbg !32
  %61 = and i64 %el2.sroa.0.042, -9, !dbg !32
  %62 = icmp eq i64 %61, 0, !dbg !32
  %63 = or i1 %60, %62, !dbg !32
  br i1 %63, label %codeRepl, label %sorbet_isa_Integer.exit39, !dbg !32

sorbet_isa_Integer.exit39:                        ; preds = %58
  %64 = inttoptr i64 %el2.sroa.0.042 to %struct.iseq_inline_iv_cache_entry*, !dbg !32
  %65 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %64, i64 0, i32 0, !dbg !32
  %66 = load i64, i64* %65, align 8, !dbg !32, !tbaa !25
  %67 = and i64 %66, 31, !dbg !32
  %68 = icmp eq i64 %67, 10, !dbg !32
  br i1 %68, label %"fastSymCallIntrinsic_Integer_+", label %codeRepl, !dbg !32, !prof !31

codeRepl38:                                       ; preds = %45, %sorbet_isa_Integer.exit
  %el1.sroa.0.147 = phi i64 [ %el1.sroa.0.146, %45 ], [ %el1.sroa.0.146, %sorbet_isa_Integer.exit ]
  tail call fastcc void @"func_<root>.17<static-init>$153$block_1.cold.1"(i64 %el1.sroa.0.147) #14, !dbg !30
  unreachable

codeRepl:                                         ; preds = %58, %sorbet_isa_Integer.exit39
  %el2.sroa.0.044 = phi i64 [ %el2.sroa.0.042, %58 ], [ %el2.sroa.0.042, %sorbet_isa_Integer.exit39 ]
  tail call fastcc void @"func_<root>.17<static-init>$153$block_1.cold.1"(i64 %el2.sroa.0.044) #14, !dbg !32
  unreachable

"fastSymCallIntrinsic_Integer_+":                 ; preds = %typeTestSuccess, %sorbet_isa_Integer.exit39
  tail call void @llvm.experimental.noalias.scope.decl(metadata !33), !dbg !30
  %69 = and i64 %el2.sroa.0.042, 1, !dbg !30
  %70 = and i64 %69, %el1.sroa.0.145, !dbg !30
  %71 = icmp eq i64 %70, 0, !dbg !30
  br i1 %71, label %81, label %72, !dbg !30, !prof !36

72:                                               ; preds = %"fastSymCallIntrinsic_Integer_+"
  %73 = add nsw i64 %el2.sroa.0.042, -1, !dbg !30
  %74 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %el1.sroa.0.145, i64 %73) #15, !dbg !30
  %75 = extractvalue { i64, i1 } %74, 1, !dbg !30
  %76 = extractvalue { i64, i1 } %74, 0, !dbg !30
  br i1 %75, label %77, label %sorbet_rb_int_plus.exit, !dbg !30

77:                                               ; preds = %72
  %78 = ashr i64 %76, 1, !dbg !30
  %79 = xor i64 %78, -9223372036854775808, !dbg !30
  %80 = tail call i64 @rb_int2big(i64 %79) #13, !dbg !30, !noalias !33
  br label %sorbet_rb_int_plus.exit, !dbg !30

81:                                               ; preds = %"fastSymCallIntrinsic_Integer_+"
  %82 = tail call i64 @sorbet_rb_int_plus_slowpath(i64 %el1.sroa.0.145, i64 %el2.sroa.0.042) #13, !dbg !30, !noalias !33
  br label %sorbet_rb_int_plus.exit, !dbg !30

sorbet_rb_int_plus.exit:                          ; preds = %77, %72, %81
  %83 = phi i64 [ %82, %81 ], [ %80, %77 ], [ %76, %72 ], !dbg !30
  %84 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !30, !tbaa !15
  %85 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %84, i64 0, i32 5, !dbg !30
  %86 = load i32, i32* %85, align 8, !dbg !30, !tbaa !37
  %87 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %84, i64 0, i32 6, !dbg !30
  %88 = load i32, i32* %87, align 4, !dbg !30, !tbaa !38
  %89 = xor i32 %88, -1, !dbg !30
  %90 = and i32 %89, %86, !dbg !30
  %91 = icmp eq i32 %90, 0, !dbg !30
  br i1 %91, label %rb_vm_check_ints.exit, label %92, !dbg !30, !prof !31

92:                                               ; preds = %sorbet_rb_int_plus.exit
  %93 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %84, i64 0, i32 8, !dbg !30
  %94 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %93, align 8, !dbg !30, !tbaa !39
  %95 = tail call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %94, i32 noundef 0) #13, !dbg !30
  br label %rb_vm_check_ints.exit, !dbg !30

rb_vm_check_ints.exit:                            ; preds = %sorbet_rb_int_plus.exit, %92
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 8), i64** %8, align 8, !dbg !30, !tbaa !15
  ret i64 %83, !dbg !40
}

; Function Attrs: ssp
define internal i64 @"func_<root>.17<static-init>$153$block_2"(i64 %firstYieldArgRaw, i64 %localsOffset, i32 %argc, i64* nocapture readonly %argArray, i64 %blockArg) #8 !dbg !41 {
functionEntryInitializers:
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !15
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !17
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 3
  %4 = load i64, i64* %3, align 8, !tbaa !42
  %stackFrame = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$153$block_2", align 8
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame, %struct.rb_iseq_struct** %5, align 8, !tbaa !21
  %6 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 4
  %7 = load i64*, i64** %6, align 8, !tbaa !23
  %8 = load i64, i64* %7, align 8, !tbaa !6
  %9 = and i64 %8, -129
  store i64 %9, i64* %7, align 8, !tbaa !6
  %10 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 0
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %10, align 8, !tbaa !15
  %default0 = icmp eq i32 %argc, 0, !dbg !43
  br i1 %default0, label %fillFromDefaultBlockDone1, label %fillFromArgBlock0, !dbg !43, !prof !28

fillFromArgBlock0:                                ; preds = %functionEntryInitializers
  %rawArg_array = load i64, i64* %argArray, align 8, !dbg !43
  br label %fillFromDefaultBlockDone1, !dbg !43

fillFromDefaultBlockDone1:                        ; preds = %functionEntryInitializers, %fillFromArgBlock0
  %array.sroa.0.0 = phi i64 [ %rawArg_array, %fillFromArgBlock0 ], [ 8, %functionEntryInitializers ], !dbg !43
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 14), i64** %10, align 8, !dbg !44, !tbaa !15
  %11 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 1, !dbg !45
  %12 = load i64*, i64** %11, align 8, !dbg !45
  store i64 %4, i64* %12, align 8, !dbg !45, !tbaa !6
  %13 = getelementptr inbounds i64, i64* %12, i64 1, !dbg !45
  store i64 %array.sroa.0.0, i64* %13, align 8, !dbg !45, !tbaa !6
  %14 = getelementptr inbounds i64, i64* %13, i64 1, !dbg !45
  store i64* %14, i64** %11, align 8, !dbg !45
  %send = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_p, i64 0), !dbg !45
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 13), i64** %10, align 8, !dbg !45, !tbaa !15
  ret i64 %send, !dbg !46
}

; Function Attrs: ssp
define internal i64 @"func_<root>.17<static-init>$153$block_3"(i64 %firstYieldArgRaw, i64 %localsOffset, i32 %argc, i64* nocapture readonly %argArray, i64 %blockArg) #8 !dbg !47 {
functionEntryInitializers:
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !15
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !17
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 3
  %4 = load i64, i64* %3, align 8, !tbaa !42
  %stackFrame = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$153$block_3", align 8
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame, %struct.rb_iseq_struct** %5, align 8, !tbaa !21
  %6 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 4
  %7 = load i64*, i64** %6, align 8, !tbaa !23
  %8 = load i64, i64* %7, align 8, !tbaa !6
  %9 = and i64 %8, -129
  store i64 %9, i64* %7, align 8, !tbaa !6
  %10 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 0
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %10, align 8, !tbaa !15
  %default0 = icmp eq i32 %argc, 0, !dbg !48
  br i1 %default0, label %BB15, label %BB14, !dbg !48, !prof !28

BB14:                                             ; preds = %functionEntryInitializers
  %rawArg_array = load i64, i64* %argArray, align 8, !dbg !48
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 18), i64** %10, align 8, !tbaa !15
  br label %BB16, !dbg !49

BB15:                                             ; preds = %functionEntryInitializers
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 18), i64** %10, align 8, !tbaa !15
  %rubyId_x = load i64, i64* @rubyIdPrecomputed_x, align 8, !dbg !50
  %rawSym = tail call i64 @rb_id2sym(i64 %rubyId_x) #16, !dbg !50
  br label %BB16, !dbg !50

BB16:                                             ; preds = %BB15, %BB14
  %array.sroa.0.0 = phi i64 [ %rawArg_array, %BB14 ], [ %rawSym, %BB15 ], !dbg !51
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 19), i64** %10, align 8, !tbaa !15
  %11 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 1, !dbg !52
  %12 = load i64*, i64** %11, align 8, !dbg !52
  store i64 %4, i64* %12, align 8, !dbg !52, !tbaa !6
  %13 = getelementptr inbounds i64, i64* %12, i64 1, !dbg !52
  store i64 %array.sroa.0.0, i64* %13, align 8, !dbg !52, !tbaa !6
  %14 = getelementptr inbounds i64, i64* %13, i64 1, !dbg !52
  store i64* %14, i64** %11, align 8, !dbg !52
  %send = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_p.5, i64 0), !dbg !52
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 18), i64** %10, align 8, !dbg !52, !tbaa !15
  ret i64 %send, !dbg !53
}

; Function Attrs: ssp
define internal i64 @"func_<root>.17<static-init>$153$block_4"(i64 %firstYieldArgRaw, i64 %localsOffset, i32 %argc, i64* nocapture readonly %argArray, i64 %blockArg) #8 !dbg !54 {
functionEntryInitializers:
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !15
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !17
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 3
  %4 = load i64, i64* %3, align 8, !tbaa !42
  %stackFrame = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$153$block_4", align 8
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame, %struct.rb_iseq_struct** %5, align 8, !tbaa !21
  %6 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 4
  %7 = load i64*, i64** %6, align 8, !tbaa !23
  %8 = load i64, i64* %7, align 8, !tbaa !6
  %9 = and i64 %8, -129
  store i64 %9, i64* %7, align 8, !tbaa !6
  %10 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 0
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %10, align 8, !tbaa !15
  %arrayExpansionSizeGuard = icmp eq i32 %argc, 1, !dbg !55
  br i1 %arrayExpansionSizeGuard, label %argArrayExpandArrayTest, label %fillRequiredArgs, !dbg !55

BB23.thread:                                      ; preds = %fillRequiredArgs
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 23), i64** %10, align 8, !tbaa !15
  %rubyId_default = load i64, i64* @rubyIdPrecomputed_default, align 8, !dbg !56
  %rawSym = tail call i64 @rb_id2sym(i64 %rubyId_default) #16, !dbg !56
  br label %BB25, !dbg !57

BB23.thread62:                                    ; preds = %argArrayExpandArrayTest, %sorbet_isa_Array.exit, %fillFromArgBlock0
  %x.sroa.0.2.ph.ph = phi i64 [ %rawArg_x, %fillFromArgBlock0 ], [ %arg1_maybeExpandToFullArgs, %sorbet_isa_Array.exit ], [ %arg1_maybeExpandToFullArgs, %argArrayExpandArrayTest ]
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 23), i64** %10, align 8, !tbaa !15
  br label %BB25, !dbg !57

BB24:                                             ; preds = %fillFromArgBlock0
  %11 = getelementptr i64, i64* %argArrayPhi, i32 1, !dbg !55
  %rawArg_y = load i64, i64* %11, align 8, !dbg !55
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 23), i64** %10, align 8, !tbaa !15
  br label %BB26, !dbg !57

BB25:                                             ; preds = %BB23.thread62, %BB23.thread
  %x.sroa.0.061 = phi i64 [ %rawSym, %BB23.thread ], [ %x.sroa.0.2.ph.ph, %BB23.thread62 ]
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 23), i64** %10, align 8, !tbaa !15
  %rubyId_something = load i64, i64* @rubyIdPrecomputed_something, align 8, !dbg !58
  %rawSym16 = tail call i64 @rb_id2sym(i64 %rubyId_something) #16, !dbg !58
  br label %BB26, !dbg !58

BB26:                                             ; preds = %BB25, %BB24
  %x.sroa.0.060 = phi i64 [ %rawArg_x, %BB24 ], [ %x.sroa.0.061, %BB25 ]
  %y.sroa.0.0 = phi i64 [ %rawArg_y, %BB24 ], [ %rawSym16, %BB25 ], !dbg !59
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 24), i64** %10, align 8, !tbaa !15
  %12 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 1, !dbg !60
  %13 = load i64*, i64** %12, align 8, !dbg !60
  store i64 %4, i64* %13, align 8, !dbg !60, !tbaa !6
  %14 = getelementptr inbounds i64, i64* %13, i64 1, !dbg !60
  store i64 %x.sroa.0.060, i64* %14, align 8, !dbg !60, !tbaa !6
  %15 = getelementptr inbounds i64, i64* %14, i64 1, !dbg !60
  store i64* %15, i64** %12, align 8, !dbg !60
  %send = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_p.8, i64 0), !dbg !60
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 25), i64** %10, align 8, !dbg !60, !tbaa !15
  %16 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 1, !dbg !61
  %17 = load i64*, i64** %16, align 8, !dbg !61
  store i64 %4, i64* %17, align 8, !dbg !61, !tbaa !6
  %18 = getelementptr inbounds i64, i64* %17, i64 1, !dbg !61
  store i64 %y.sroa.0.0, i64* %18, align 8, !dbg !61, !tbaa !6
  %19 = getelementptr inbounds i64, i64* %18, i64 1, !dbg !61
  store i64* %19, i64** %16, align 8, !dbg !61
  %send67 = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_p.9, i64 0), !dbg !61
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 23), i64** %10, align 8, !dbg !61, !tbaa !15
  ret i64 %send67, !dbg !62

argArrayExpandArrayTest:                          ; preds = %functionEntryInitializers
  %arg1_maybeExpandToFullArgs = load i64, i64* %argArray, align 8, !dbg !55
  %20 = and i64 %arg1_maybeExpandToFullArgs, 7, !dbg !55
  %21 = icmp ne i64 %20, 0, !dbg !55
  %22 = and i64 %arg1_maybeExpandToFullArgs, -9, !dbg !55
  %23 = icmp eq i64 %22, 0, !dbg !55
  %24 = or i1 %21, %23, !dbg !55
  br i1 %24, label %BB23.thread62, label %sorbet_isa_Array.exit, !dbg !55

sorbet_isa_Array.exit:                            ; preds = %argArrayExpandArrayTest
  %25 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.iseq_inline_iv_cache_entry*, !dbg !55
  %26 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %25, i64 0, i32 0, !dbg !55
  %27 = load i64, i64* %26, align 8, !dbg !55, !tbaa !25
  %28 = and i64 %27, 31, !dbg !55
  %29 = icmp eq i64 %28, 7, !dbg !55
  br i1 %29, label %argArrayExpand, label %BB23.thread62, !dbg !55

argArrayExpand:                                   ; preds = %sorbet_isa_Array.exit
  %30 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.iseq_inline_iv_cache_entry*, !dbg !55
  %31 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %30, i64 0, i32 0, !dbg !55
  %32 = load i64, i64* %31, align 8, !dbg !55, !tbaa !25
  %33 = and i64 %32, 33554432, !dbg !55
  %34 = icmp eq i64 %33, 0, !dbg !55
  br i1 %34, label %36, label %35, !dbg !55

35:                                               ; preds = %argArrayExpand
  tail call void @rb_ary_detransient(i64 %arg1_maybeExpandToFullArgs) #13, !dbg !55
  br label %36, !dbg !55

36:                                               ; preds = %35, %argArrayExpand
  %37 = load i64, i64* %31, align 8, !dbg !55, !tbaa !25
  %38 = and i64 %37, 8192, !dbg !55
  %39 = icmp eq i64 %38, 0, !dbg !55
  %40 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.RArray*, !dbg !55
  br i1 %39, label %45, label %41, !dbg !55

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.RArray, %struct.RArray* %40, i64 0, i32 1, i32 0, i32 0, !dbg !55
  %43 = lshr i64 %37, 15, !dbg !55
  %44 = and i64 %43, 3, !dbg !55
  br label %rb_array_len.exit, !dbg !55

45:                                               ; preds = %36
  %46 = getelementptr inbounds %struct.RArray, %struct.RArray* %40, i64 0, i32 1, i32 0, i32 2, !dbg !55
  %47 = load i64*, i64** %46, align 8, !dbg !55, !tbaa !27
  %48 = getelementptr inbounds %struct.RArray, %struct.RArray* %40, i64 0, i32 1, i32 0, i32 0, !dbg !55
  %49 = load i64, i64* %48, align 8, !dbg !55, !tbaa !27
  br label %rb_array_len.exit, !dbg !55

rb_array_len.exit:                                ; preds = %41, %45
  %50 = phi i64* [ %42, %41 ], [ %47, %45 ]
  %51 = phi i64 [ %44, %41 ], [ %49, %45 ], !dbg !55
  %52 = trunc i64 %51 to i32, !dbg !55
  br label %fillRequiredArgs, !dbg !55

fillFromArgBlock0:                                ; preds = %fillRequiredArgs
  %rawArg_x = load i64, i64* %argArrayPhi, align 8, !dbg !55
  %default1 = icmp eq i32 %argcPhi, 1, !dbg !55
  br i1 %default1, label %BB23.thread62, label %BB24, !dbg !55, !prof !28

fillRequiredArgs:                                 ; preds = %functionEntryInitializers, %rb_array_len.exit
  %argcPhi = phi i32 [ %argc, %functionEntryInitializers ], [ %52, %rb_array_len.exit ], !dbg !55
  %argArrayPhi = phi i64* [ %argArray, %functionEntryInitializers ], [ %50, %rb_array_len.exit ], !dbg !55
  %default0 = icmp eq i32 %argcPhi, 0, !dbg !55
  br i1 %default0, label %BB23.thread, label %fillFromArgBlock0, !dbg !55, !prof !28
}

; Function Attrs: ssp
define internal i64 @"func_<root>.17<static-init>$153$block_5"(i64 %firstYieldArgRaw, i64 %localsOffset, i32 %argc, i64* nocapture readonly %argArray, i64 %blockArg) #8 !dbg !63 {
functionEntryInitializers:
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !15
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !17
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 3
  %4 = load i64, i64* %3, align 8, !tbaa !42
  %stackFrame = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$153$block_5", align 8
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame, %struct.rb_iseq_struct** %5, align 8, !tbaa !21
  %6 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 4
  %7 = load i64*, i64** %6, align 8, !tbaa !23
  %8 = load i64, i64* %7, align 8, !tbaa !6
  %9 = and i64 %8, -129
  store i64 %9, i64* %7, align 8, !tbaa !6
  %10 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 0
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %10, align 8, !tbaa !15
  %arrayExpansionSizeGuard = icmp eq i32 %argc, 1, !dbg !64
  br i1 %arrayExpansionSizeGuard, label %argArrayExpandArrayTest, label %fillRequiredArgs, !dbg !64

BB31:                                             ; preds = %fillFromArgBlock0
  %11 = getelementptr i64, i64* %argArrayPhi, i32 1, !dbg !64
  %rawArg_y = load i64, i64* %11, align 8, !dbg !64
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 28), i64** %10, align 8, !tbaa !15
  br label %BB33, !dbg !65

BB32:                                             ; preds = %argArrayExpandArrayTest, %sorbet_isa_Array.exit, %fillRequiredArgs, %fillFromArgBlock0
  %x.sroa.0.1.ph = phi i64 [ 8, %fillRequiredArgs ], [ %rawArg_x, %fillFromArgBlock0 ], [ %arg1_maybeExpandToFullArgs, %sorbet_isa_Array.exit ], [ %arg1_maybeExpandToFullArgs, %argArrayExpandArrayTest ]
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 28), i64** %10, align 8, !tbaa !15
  %rubyId_something = load i64, i64* @rubyIdPrecomputed_something, align 8, !dbg !66
  %rawSym = tail call i64 @rb_id2sym(i64 %rubyId_something) #16, !dbg !66
  br label %BB33, !dbg !66

BB33:                                             ; preds = %BB32, %BB31
  %x.sroa.0.141 = phi i64 [ %rawArg_x, %BB31 ], [ %x.sroa.0.1.ph, %BB32 ]
  %y.sroa.0.0 = phi i64 [ %rawArg_y, %BB31 ], [ %rawSym, %BB32 ], !dbg !67
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 29), i64** %10, align 8, !tbaa !15
  %12 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 1, !dbg !68
  %13 = load i64*, i64** %12, align 8, !dbg !68
  store i64 %4, i64* %13, align 8, !dbg !68, !tbaa !6
  %14 = getelementptr inbounds i64, i64* %13, i64 1, !dbg !68
  store i64 %x.sroa.0.141, i64* %14, align 8, !dbg !68, !tbaa !6
  %15 = getelementptr inbounds i64, i64* %14, i64 1, !dbg !68
  store i64* %15, i64** %12, align 8, !dbg !68
  %send = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_p.12, i64 0), !dbg !68
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 30), i64** %10, align 8, !dbg !68, !tbaa !15
  %16 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 1, !dbg !69
  %17 = load i64*, i64** %16, align 8, !dbg !69
  store i64 %4, i64* %17, align 8, !dbg !69, !tbaa !6
  %18 = getelementptr inbounds i64, i64* %17, i64 1, !dbg !69
  store i64 %y.sroa.0.0, i64* %18, align 8, !dbg !69, !tbaa !6
  %19 = getelementptr inbounds i64, i64* %18, i64 1, !dbg !69
  store i64* %19, i64** %16, align 8, !dbg !69
  %send44 = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_p.13, i64 0), !dbg !69
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 28), i64** %10, align 8, !dbg !69, !tbaa !15
  ret i64 %send44, !dbg !70

argArrayExpandArrayTest:                          ; preds = %functionEntryInitializers
  %arg1_maybeExpandToFullArgs = load i64, i64* %argArray, align 8, !dbg !64
  %20 = and i64 %arg1_maybeExpandToFullArgs, 7, !dbg !64
  %21 = icmp ne i64 %20, 0, !dbg !64
  %22 = and i64 %arg1_maybeExpandToFullArgs, -9, !dbg !64
  %23 = icmp eq i64 %22, 0, !dbg !64
  %24 = or i1 %21, %23, !dbg !64
  br i1 %24, label %BB32, label %sorbet_isa_Array.exit, !dbg !64

sorbet_isa_Array.exit:                            ; preds = %argArrayExpandArrayTest
  %25 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.iseq_inline_iv_cache_entry*, !dbg !64
  %26 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %25, i64 0, i32 0, !dbg !64
  %27 = load i64, i64* %26, align 8, !dbg !64, !tbaa !25
  %28 = and i64 %27, 31, !dbg !64
  %29 = icmp eq i64 %28, 7, !dbg !64
  br i1 %29, label %argArrayExpand, label %BB32, !dbg !64

argArrayExpand:                                   ; preds = %sorbet_isa_Array.exit
  %30 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.iseq_inline_iv_cache_entry*, !dbg !64
  %31 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %30, i64 0, i32 0, !dbg !64
  %32 = load i64, i64* %31, align 8, !dbg !64, !tbaa !25
  %33 = and i64 %32, 33554432, !dbg !64
  %34 = icmp eq i64 %33, 0, !dbg !64
  br i1 %34, label %36, label %35, !dbg !64

35:                                               ; preds = %argArrayExpand
  tail call void @rb_ary_detransient(i64 %arg1_maybeExpandToFullArgs) #13, !dbg !64
  br label %36, !dbg !64

36:                                               ; preds = %35, %argArrayExpand
  %37 = load i64, i64* %31, align 8, !dbg !64, !tbaa !25
  %38 = and i64 %37, 8192, !dbg !64
  %39 = icmp eq i64 %38, 0, !dbg !64
  %40 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.RArray*, !dbg !64
  br i1 %39, label %45, label %41, !dbg !64

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.RArray, %struct.RArray* %40, i64 0, i32 1, i32 0, i32 0, !dbg !64
  %43 = lshr i64 %37, 15, !dbg !64
  %44 = and i64 %43, 3, !dbg !64
  br label %rb_array_len.exit, !dbg !64

45:                                               ; preds = %36
  %46 = getelementptr inbounds %struct.RArray, %struct.RArray* %40, i64 0, i32 1, i32 0, i32 2, !dbg !64
  %47 = load i64*, i64** %46, align 8, !dbg !64, !tbaa !27
  %48 = getelementptr inbounds %struct.RArray, %struct.RArray* %40, i64 0, i32 1, i32 0, i32 0, !dbg !64
  %49 = load i64, i64* %48, align 8, !dbg !64, !tbaa !27
  br label %rb_array_len.exit, !dbg !64

rb_array_len.exit:                                ; preds = %41, %45
  %50 = phi i64* [ %42, %41 ], [ %47, %45 ]
  %51 = phi i64 [ %44, %41 ], [ %49, %45 ], !dbg !64
  %52 = trunc i64 %51 to i32, !dbg !64
  br label %fillRequiredArgs, !dbg !64

fillFromArgBlock0:                                ; preds = %fillRequiredArgs
  %rawArg_x = load i64, i64* %argArrayPhi, align 8, !dbg !64
  %default1 = icmp eq i32 %argcPhi, 1, !dbg !64
  br i1 %default1, label %BB32, label %BB31, !dbg !64, !prof !28

fillRequiredArgs:                                 ; preds = %functionEntryInitializers, %rb_array_len.exit
  %argcPhi = phi i32 [ %argc, %functionEntryInitializers ], [ %52, %rb_array_len.exit ], !dbg !64
  %argArrayPhi = phi i64* [ %argArray, %functionEntryInitializers ], [ %50, %rb_array_len.exit ], !dbg !64
  %default0 = icmp eq i32 %argcPhi, 0, !dbg !64
  br i1 %default0, label %BB32, label %fillFromArgBlock0, !dbg !64, !prof !28
}

; Function Attrs: sspreq
define void @Init_block_arg_expand() local_unnamed_addr #9 {
entry:
  %0 = alloca i64, align 8
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca %struct.sorbet_inlineIntrinsicEnv, align 8
  %4 = alloca %struct.sorbet_inlineIntrinsicEnv, align 8
  %5 = alloca %struct.sorbet_inlineIntrinsicEnv, align 8
  %6 = alloca %struct.sorbet_inlineIntrinsicEnv, align 8
  %7 = alloca %struct.sorbet_inlineIntrinsicEnv, align 8
  %callArgs.i = alloca [3 x i64], align 8
  %locals.i.i = alloca i64, align 8
  %realpath = tail call i64 @sorbet_readRealpath()
  %8 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 noundef 16) #13
  store i64 %8, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %9 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @"str_<block-call>", i64 0, i64 0), i64 noundef 12) #13
  store i64 %9, i64* @"rubyIdPrecomputed_<block-call>", align 8
  %10 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([26 x i8], [26 x i8]* @"str_block in <top (required)>", i64 0, i64 0), i64 noundef 25) #13
  store i64 %10, i64* @"rubyIdPrecomputed_block in <top (required)>", align 8
  %11 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @"str_<build-array>", i64 0, i64 0), i64 noundef 13) #13
  %12 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @str_each, i64 0, i64 0), i64 noundef 4) #13
  store i64 %12, i64* @rubyIdPrecomputed_each, align 8
  %13 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @"str_+", i64 0, i64 0), i64 noundef 1) #13
  store i64 %13, i64* @"rubyIdPrecomputed_+", align 8
  %14 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @str_p, i64 0, i64 0), i64 noundef 1) #13
  store i64 %14, i64* @rubyIdPrecomputed_p, align 8
  %15 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @str_x, i64 0, i64 0), i64 noundef 1) #13
  store i64 %15, i64* @rubyIdPrecomputed_x, align 8
  %16 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([8 x i8], [8 x i8]* @str_default, i64 0, i64 0), i64 noundef 7) #13
  store i64 %16, i64* @rubyIdPrecomputed_default, align 8
  %17 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @str_something, i64 0, i64 0), i64 noundef 9) #13
  store i64 %17, i64* @rubyIdPrecomputed_something, align 8
  %18 = tail call i64 @sorbet_vm_fstring_new(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 noundef 16) #13
  tail call void @rb_gc_register_mark_object(i64 %18) #13
  store i64 %18, i64* @"rubyStrFrozen_<top (required)>", align 8
  %19 = tail call i64 @sorbet_vm_fstring_new(i8* noundef getelementptr inbounds ([43 x i8], [43 x i8]* @"str_test/testdata/compiler/block_arg_expand.rb", i64 0, i64 0), i64 noundef 42) #13
  tail call void @rb_gc_register_mark_object(i64 %19) #13
  store i64 %19, i64* @"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb", align 8
  tail call void @sorbet_initLineNumberInfo(%struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i32 0, i32 0), i32 noundef 32)
  %20 = bitcast i64* %locals.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20)
  %"rubyId_<top (required)>.i.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb", align 8
  %"rubyId_<block-call>.i.i" = load i64, i64* @"rubyIdPrecomputed_<block-call>", align 8
  store i64 %"rubyId_<block-call>.i.i", i64* %locals.i.i, align 8
  %21 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i.i", i64 %"rubyId_<top (required)>.i.i", i64 %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 0, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull align 8 %locals.i.i, i32 noundef 1, i32 noundef 3)
  store %struct.rb_iseq_struct* %21, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$153", align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20)
  %22 = call i64 @sorbet_vm_fstring_new(i8* noundef getelementptr inbounds ([26 x i8], [26 x i8]* @"str_block in <top (required)>", i64 0, i64 0), i64 noundef 25) #13
  call void @rb_gc_register_mark_object(i64 %22) #13
  store i64 %22, i64* @"rubyStrFrozen_block in <top (required)>", align 8
  %stackFrame.i.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$153", align 8
  %"rubyId_block in <top (required)>.i.i" = load i64, i64* @"rubyIdPrecomputed_block in <top (required)>", align 8
  %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i26.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb", align 8
  %23 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %22, i64 %"rubyId_block in <top (required)>.i.i", i64 %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i26.i", i64 %realpath, %struct.rb_iseq_struct* %stackFrame.i.i, i32 noundef 2, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef null, i32 noundef 0, i32 noundef 3)
  store %struct.rb_iseq_struct* %23, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$153$block_1", align 8
  %stackFrame.i27.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$153", align 8
  %"rubyId_block in <top (required)>.i28.i" = load i64, i64* @"rubyIdPrecomputed_block in <top (required)>", align 8
  %"rubyStr_block in <top (required)>.i29.i" = load i64, i64* @"rubyStrFrozen_block in <top (required)>", align 8
  %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i30.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb", align 8
  %24 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_block in <top (required)>.i29.i", i64 %"rubyId_block in <top (required)>.i28.i", i64 %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i30.i", i64 %realpath, %struct.rb_iseq_struct* %stackFrame.i27.i, i32 noundef 2, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef null, i32 noundef 0, i32 noundef 3)
  store %struct.rb_iseq_struct* %24, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$153$block_2", align 8
  %stackFrame.i31.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$153", align 8
  %"rubyId_block in <top (required)>.i32.i" = load i64, i64* @"rubyIdPrecomputed_block in <top (required)>", align 8
  %"rubyStr_block in <top (required)>.i33.i" = load i64, i64* @"rubyStrFrozen_block in <top (required)>", align 8
  %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i34.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb", align 8
  %25 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_block in <top (required)>.i33.i", i64 %"rubyId_block in <top (required)>.i32.i", i64 %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i34.i", i64 %realpath, %struct.rb_iseq_struct* %stackFrame.i31.i, i32 noundef 2, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef null, i32 noundef 0, i32 noundef 3)
  store %struct.rb_iseq_struct* %25, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$153$block_3", align 8
  %stackFrame.i35.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$153", align 8
  %"rubyId_block in <top (required)>.i36.i" = load i64, i64* @"rubyIdPrecomputed_block in <top (required)>", align 8
  %"rubyStr_block in <top (required)>.i37.i" = load i64, i64* @"rubyStrFrozen_block in <top (required)>", align 8
  %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i38.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb", align 8
  %26 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_block in <top (required)>.i37.i", i64 %"rubyId_block in <top (required)>.i36.i", i64 %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i38.i", i64 %realpath, %struct.rb_iseq_struct* %stackFrame.i35.i, i32 noundef 2, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef null, i32 noundef 0, i32 noundef 3)
  store %struct.rb_iseq_struct* %26, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$153$block_4", align 8
  %stackFrame.i39.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$153", align 8
  %"rubyId_block in <top (required)>.i40.i" = load i64, i64* @"rubyIdPrecomputed_block in <top (required)>", align 8
  %"rubyStr_block in <top (required)>.i41.i" = load i64, i64* @"rubyStrFrozen_block in <top (required)>", align 8
  %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i42.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb", align 8
  %27 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_block in <top (required)>.i41.i", i64 %"rubyId_block in <top (required)>.i40.i", i64 %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i42.i", i64 %realpath, %struct.rb_iseq_struct* %stackFrame.i39.i, i32 noundef 2, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef null, i32 noundef 0, i32 noundef 3)
  store %struct.rb_iseq_struct* %27, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$153$block_5", align 8
  %28 = call %struct.vm_ifunc* @rb_vm_ifunc_new(i64 (i64, i64, i32, i64*, i64)* noundef @"func_<root>.17<static-init>$153$block_1", i8* noundef null, i32 noundef 2, i32 noundef 2) #13
  %29 = ptrtoint %struct.vm_ifunc* %28 to i64
  %30 = call i64 @sorbet_globalConstRegister(i64 %29)
  store i64 %30, i64* @"func_<root>.17<static-init>$153$block_1_ifunc", align 8
  %"rubyId_+.i" = load i64, i64* @"rubyIdPrecomputed_+", align 8, !dbg !30
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @"ic_+", i64 %"rubyId_+.i", i32 noundef 16, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !30
  %31 = call %struct.vm_ifunc* @rb_vm_ifunc_new(i64 (i64, i64, i32, i64*, i64)* noundef @"func_<root>.17<static-init>$153$block_2", i8* noundef null, i32 noundef 1, i32 noundef 1) #13
  %32 = ptrtoint %struct.vm_ifunc* %31 to i64
  %33 = call i64 @sorbet_globalConstRegister(i64 %32)
  store i64 %33, i64* @"func_<root>.17<static-init>$153$block_2_ifunc", align 8
  %rubyId_p.i = load i64, i64* @rubyIdPrecomputed_p, align 8, !dbg !45
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_p, i64 %rubyId_p.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !45
  %34 = call %struct.vm_ifunc* @rb_vm_ifunc_new(i64 (i64, i64, i32, i64*, i64)* noundef @"func_<root>.17<static-init>$153$block_3", i8* noundef null, i32 noundef 0, i32 noundef 1) #13
  %35 = ptrtoint %struct.vm_ifunc* %34 to i64
  %36 = call i64 @sorbet_globalConstRegister(i64 %35)
  store i64 %36, i64* @"func_<root>.17<static-init>$153$block_3_ifunc", align 8
  %rubyId_p7.i = load i64, i64* @rubyIdPrecomputed_p, align 8, !dbg !52
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_p.5, i64 %rubyId_p7.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !52
  %37 = call %struct.vm_ifunc* @rb_vm_ifunc_new(i64 (i64, i64, i32, i64*, i64)* noundef @"func_<root>.17<static-init>$153$block_4", i8* noundef null, i32 noundef 0, i32 noundef 2) #13
  %38 = ptrtoint %struct.vm_ifunc* %37 to i64
  %39 = call i64 @sorbet_globalConstRegister(i64 %38)
  store i64 %39, i64* @"func_<root>.17<static-init>$153$block_4_ifunc", align 8
  %rubyId_p12.i = load i64, i64* @rubyIdPrecomputed_p, align 8, !dbg !60
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_p.8, i64 %rubyId_p12.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !60
  %rubyId_p15.i = load i64, i64* @rubyIdPrecomputed_p, align 8, !dbg !61
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_p.9, i64 %rubyId_p15.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !61
  %40 = call %struct.vm_ifunc* @rb_vm_ifunc_new(i64 (i64, i64, i32, i64*, i64)* noundef @"func_<root>.17<static-init>$153$block_5", i8* noundef null, i32 noundef 1, i32 noundef 2) #13
  %41 = ptrtoint %struct.vm_ifunc* %40 to i64
  %42 = call i64 @sorbet_globalConstRegister(i64 %41)
  store i64 %42, i64* @"func_<root>.17<static-init>$153$block_5_ifunc", align 8
  %rubyId_p20.i = load i64, i64* @rubyIdPrecomputed_p, align 8, !dbg !68
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_p.12, i64 %rubyId_p20.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !68
  %rubyId_p23.i = load i64, i64* @rubyIdPrecomputed_p, align 8, !dbg !69
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_p.13, i64 %rubyId_p23.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !69
  %43 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !15
  %44 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %43, i64 0, i32 2
  %45 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %44, align 8, !tbaa !17
  %46 = bitcast [3 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %46)
  %stackFrame.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$153", align 8
  %47 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %44, align 8, !tbaa !17
  %48 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %47, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i, %struct.rb_iseq_struct** %48, align 8, !tbaa !21
  %49 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %47, i64 0, i32 4
  %50 = load i64*, i64** %49, align 8, !tbaa !23
  %51 = load i64, i64* %50, align 8, !tbaa !6
  %52 = and i64 %51, -33
  store i64 %52, i64* %50, align 8, !tbaa !6
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %43, %struct.rb_control_frame_struct* %47, %struct.rb_iseq_struct* %stackFrame.i) #13
  %53 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %45, i64 0, i32 0
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %53, align 8, !dbg !71, !tbaa !15
  %callArgs0Addr.i = getelementptr [3 x i64], [3 x i64]* %callArgs.i, i32 0, i64 0, !dbg !72
  %54 = bitcast i64* %callArgs0Addr.i to <2 x i64>*, !dbg !72
  store <2 x i64> <i64 3, i64 5>, <2 x i64>* %54, align 8, !dbg !72
  %55 = getelementptr [3 x i64], [3 x i64]* %callArgs.i, i64 0, i64 0, !dbg !72
  call void @llvm.experimental.noalias.scope.decl(metadata !73) #13, !dbg !72
  %56 = call i64 @rb_ary_new_from_values(i64 noundef 2, i64* noundef nonnull %55) #13, !dbg !72
  store i64 %56, i64* %callArgs0Addr.i, align 8, !dbg !76
  call void @llvm.experimental.noalias.scope.decl(metadata !77) #13, !dbg !76
  %57 = call i64 @rb_ary_new_from_values(i64 noundef 1, i64* noundef nonnull %55) #13, !dbg !76
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 8), i64** %53, align 8, !dbg !76, !tbaa !15
  %rubyId_each.i = load i64, i64* @rubyIdPrecomputed_each, align 8, !dbg !80
  %58 = load i64, i64* @"func_<root>.17<static-init>$153$block_1_ifunc", align 8, !dbg !80
  %59 = call %struct.vm_ifunc* @sorbet_globalConstFetchIfunc(i64 %58) #13, !dbg !80
  %60 = bitcast %struct.sorbet_inlineIntrinsicEnv* %6 to i8*, !dbg !80
  call void @llvm.lifetime.start.p0i8(i64 noundef 40, i8* noundef nonnull %60) #13, !dbg !80
  %61 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %6, i64 0, i32 0, !dbg !80
  store i64 %57, i64* %61, align 8, !dbg !80, !tbaa !81
  %62 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %6, i64 0, i32 1, !dbg !80
  store i64 %rubyId_each.i, i64* %62, align 8, !dbg !80, !tbaa !83
  %63 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %6, i64 0, i32 2, !dbg !80
  store i32 0, i32* %63, align 8, !dbg !80, !tbaa !84
  %64 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %6, i64 0, i32 3, !dbg !80
  %65 = bitcast i64** %64 to i8*, !dbg !80
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %65, i8 0, i64 16, i1 false) #13, !dbg !80
  %66 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !80, !tbaa !15
  %67 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %66, i64 0, i32 2, !dbg !80
  %68 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %67, align 8, !dbg !80, !tbaa !17
  %69 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %68, i64 0, i32 3, !dbg !80
  %70 = bitcast i64* %69 to %struct.rb_captured_block*, !dbg !80
  %71 = getelementptr inbounds i64, i64* %69, i64 2, !dbg !80
  %72 = bitcast i64* %71 to %struct.vm_ifunc**, !dbg !80
  store %struct.vm_ifunc* %59, %struct.vm_ifunc** %72, align 8, !dbg !80, !tbaa !27
  call void @llvm.experimental.noalias.scope.decl(metadata !85) #13, !dbg !80
  %73 = ptrtoint %struct.rb_captured_block* %70 to i64, !dbg !80
  %74 = or i64 %73, 3, !dbg !80
  %75 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %66, i64 0, i32 17, !dbg !80
  %76 = and i64 %74, -4, !dbg !88
  %77 = inttoptr i64 %76 to %struct.rb_captured_block*, !dbg !88
  store i64 0, i64* %75, align 8, !dbg !88, !tbaa !90
  call void @sorbet_pushBlockFrame(%struct.rb_captured_block* %77) #13, !dbg !88
  %78 = inttoptr i64 %57 to %struct.iseq_inline_iv_cache_entry*, !dbg !88
  %79 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %78, i64 0, i32 0, !dbg !88
  %80 = load i64, i64* %79, align 8, !dbg !88, !tbaa !25
  %81 = and i64 %80, 8192, !dbg !88
  %82 = icmp eq i64 %81, 0, !dbg !88
  br i1 %82, label %86, label %83, !dbg !88

83:                                               ; preds = %entry
  %84 = lshr i64 %80, 15, !dbg !88
  %85 = and i64 %84, 3, !dbg !88
  br label %rb_array_len.exit1.i3.i, !dbg !88

86:                                               ; preds = %entry
  %87 = inttoptr i64 %57 to %struct.RArray*, !dbg !88
  %88 = getelementptr inbounds %struct.RArray, %struct.RArray* %87, i64 0, i32 1, i32 0, i32 0, !dbg !88
  %89 = load i64, i64* %88, align 8, !dbg !88, !tbaa !27
  br label %rb_array_len.exit1.i3.i, !dbg !88

rb_array_len.exit1.i3.i:                          ; preds = %86, %83
  %90 = phi i64 [ %85, %83 ], [ %89, %86 ], !dbg !88
  %91 = icmp sgt i64 %90, 0, !dbg !88
  br i1 %91, label %92, label %forward_sorbet_rb_array_each_withBlock.exit.i, !dbg !88

92:                                               ; preds = %rb_array_len.exit1.i3.i
  %93 = bitcast i64* %1 to i8*, !dbg !88
  %94 = inttoptr i64 %57 to %struct.RArray*, !dbg !80
  %95 = getelementptr inbounds %struct.RArray, %struct.RArray* %94, i64 0, i32 1, i32 0, i32 0, !dbg !80
  %96 = getelementptr inbounds %struct.RArray, %struct.RArray* %94, i64 0, i32 1, i32 0, i32 2, !dbg !80
  br label %97, !dbg !88

97:                                               ; preds = %rb_array_len.exit.i5.i, %92
  %98 = phi i64 [ 0, %92 ], [ %108, %rb_array_len.exit.i5.i ], !dbg !88
  call void @llvm.lifetime.start.p0i8(i64 noundef 8, i8* noundef nonnull align 8 dereferenceable(8) %93) #13, !dbg !88
  %99 = load i64, i64* %79, align 8, !dbg !88, !tbaa !25
  %100 = and i64 %99, 8192, !dbg !88
  %101 = icmp eq i64 %100, 0, !dbg !88
  br i1 %101, label %102, label %rb_array_const_ptr_transient.exit.i4.i, !dbg !88

102:                                              ; preds = %97
  %103 = load i64*, i64** %96, align 8, !dbg !88, !tbaa !27
  br label %rb_array_const_ptr_transient.exit.i4.i, !dbg !88

rb_array_const_ptr_transient.exit.i4.i:           ; preds = %102, %97
  %104 = phi i64* [ %103, %102 ], [ %95, %97 ], !dbg !88
  %105 = getelementptr inbounds i64, i64* %104, i64 %98, !dbg !88
  %106 = load i64, i64* %105, align 8, !dbg !88, !tbaa !6
  store i64 %106, i64* %1, align 8, !dbg !88, !tbaa !6
  %107 = call i64 @"func_<root>.17<static-init>$153$block_1"(i64 undef, i64 undef, i32 noundef 1, i64* noalias nocapture noundef nonnull readonly align 8 dereferenceable(8) %1, i64 undef) #13, !dbg !88
  call void @llvm.lifetime.end.p0i8(i64 noundef 8, i8* noundef nonnull %93) #13, !dbg !88
  %108 = add nuw nsw i64 %98, 1, !dbg !88
  %109 = load i64, i64* %79, align 8, !dbg !88, !tbaa !25
  %110 = and i64 %109, 8192, !dbg !88
  %111 = icmp eq i64 %110, 0, !dbg !88
  br i1 %111, label %115, label %112, !dbg !88

112:                                              ; preds = %rb_array_const_ptr_transient.exit.i4.i
  %113 = lshr i64 %109, 15, !dbg !88
  %114 = and i64 %113, 3, !dbg !88
  br label %rb_array_len.exit.i5.i, !dbg !88

115:                                              ; preds = %rb_array_const_ptr_transient.exit.i4.i
  %116 = load i64, i64* %95, align 8, !dbg !88, !tbaa !27
  br label %rb_array_len.exit.i5.i, !dbg !88

rb_array_len.exit.i5.i:                           ; preds = %115, %112
  %117 = phi i64 [ %114, %112 ], [ %116, %115 ], !dbg !88
  %118 = icmp sgt i64 %117, %108, !dbg !88
  br i1 %118, label %97, label %forward_sorbet_rb_array_each_withBlock.exit.i, !dbg !88, !llvm.loop !91

forward_sorbet_rb_array_each_withBlock.exit.i:    ; preds = %rb_array_len.exit.i5.i, %rb_array_len.exit1.i3.i
  call void @sorbet_popFrame() #13, !dbg !88
  call void @llvm.lifetime.end.p0i8(i64 noundef 40, i8* noundef nonnull %60) #13, !dbg !80
  %119 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !80, !tbaa !15
  %120 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %119, i64 0, i32 5, !dbg !80
  %121 = load i32, i32* %120, align 8, !dbg !80, !tbaa !37
  %122 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %119, i64 0, i32 6, !dbg !80
  %123 = load i32, i32* %122, align 4, !dbg !80, !tbaa !38
  %124 = xor i32 %123, -1, !dbg !80
  %125 = and i32 %124, %121, !dbg !80
  %126 = icmp eq i32 %125, 0, !dbg !80
  br i1 %126, label %rb_check_arity.1.exit.i8.i, label %127, !dbg !80, !prof !31

127:                                              ; preds = %forward_sorbet_rb_array_each_withBlock.exit.i
  %128 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %119, i64 0, i32 8, !dbg !80
  %129 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %128, align 8, !dbg !80, !tbaa !39
  %130 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %129, i32 noundef 0) #13, !dbg !80
  br label %rb_check_arity.1.exit.i8.i, !dbg !80

rb_check_arity.1.exit.i8.i:                       ; preds = %127, %forward_sorbet_rb_array_each_withBlock.exit.i
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 13), i64** %53, align 8, !dbg !80, !tbaa !15
  %rubyId_each65.i = load i64, i64* @rubyIdPrecomputed_each, align 8, !dbg !93
  %131 = load i64, i64* @"func_<root>.17<static-init>$153$block_2_ifunc", align 8, !dbg !93
  %132 = call %struct.vm_ifunc* @sorbet_globalConstFetchIfunc(i64 %131) #13, !dbg !93
  %133 = bitcast %struct.sorbet_inlineIntrinsicEnv* %5 to i8*, !dbg !93
  call void @llvm.lifetime.start.p0i8(i64 noundef 40, i8* noundef nonnull %133) #13, !dbg !93
  %134 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %5, i64 0, i32 0, !dbg !93
  store i64 %57, i64* %134, align 8, !dbg !93, !tbaa !81
  %135 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %5, i64 0, i32 1, !dbg !93
  store i64 %rubyId_each65.i, i64* %135, align 8, !dbg !93, !tbaa !83
  %136 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %5, i64 0, i32 2, !dbg !93
  store i32 0, i32* %136, align 8, !dbg !93, !tbaa !84
  %137 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %5, i64 0, i32 3, !dbg !93
  %138 = bitcast i64** %137 to i8*, !dbg !93
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %138, i8 0, i64 16, i1 false) #13, !dbg !93
  %139 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !93, !tbaa !15
  %140 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %139, i64 0, i32 2, !dbg !93
  %141 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %140, align 8, !dbg !93, !tbaa !17
  %142 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %141, i64 0, i32 3, !dbg !93
  %143 = bitcast i64* %142 to %struct.rb_captured_block*, !dbg !93
  %144 = getelementptr inbounds i64, i64* %142, i64 2, !dbg !93
  %145 = bitcast i64* %144 to %struct.vm_ifunc**, !dbg !93
  store %struct.vm_ifunc* %132, %struct.vm_ifunc** %145, align 8, !dbg !93, !tbaa !27
  call void @llvm.experimental.noalias.scope.decl(metadata !94) #13, !dbg !93
  %146 = ptrtoint %struct.rb_captured_block* %143 to i64, !dbg !93
  %147 = or i64 %146, 3, !dbg !93
  %148 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %139, i64 0, i32 17, !dbg !93
  %149 = and i64 %147, -4, !dbg !97
  %150 = inttoptr i64 %149 to %struct.rb_captured_block*, !dbg !97
  store i64 0, i64* %148, align 8, !dbg !97, !tbaa !90
  call void @sorbet_pushBlockFrame(%struct.rb_captured_block* %150) #13, !dbg !97
  %151 = load i64, i64* %79, align 8, !dbg !97, !tbaa !25
  %152 = and i64 %151, 8192, !dbg !97
  %153 = icmp eq i64 %152, 0, !dbg !97
  br i1 %153, label %157, label %154, !dbg !97

154:                                              ; preds = %rb_check_arity.1.exit.i8.i
  %155 = lshr i64 %151, 15, !dbg !97
  %156 = and i64 %155, 3, !dbg !97
  br label %rb_array_len.exit1.i9.i, !dbg !97

157:                                              ; preds = %rb_check_arity.1.exit.i8.i
  %158 = inttoptr i64 %57 to %struct.RArray*, !dbg !97
  %159 = getelementptr inbounds %struct.RArray, %struct.RArray* %158, i64 0, i32 1, i32 0, i32 0, !dbg !97
  %160 = load i64, i64* %159, align 8, !dbg !97, !tbaa !27
  br label %rb_array_len.exit1.i9.i, !dbg !97

rb_array_len.exit1.i9.i:                          ; preds = %157, %154
  %161 = phi i64 [ %156, %154 ], [ %160, %157 ], !dbg !97
  %162 = icmp sgt i64 %161, 0, !dbg !97
  br i1 %162, label %163, label %forward_sorbet_rb_array_each_withBlock.1.exit.i, !dbg !97

163:                                              ; preds = %rb_array_len.exit1.i9.i
  %164 = inttoptr i64 %57 to %struct.RArray*, !dbg !93
  %165 = getelementptr inbounds %struct.RArray, %struct.RArray* %164, i64 0, i32 1, i32 0, i32 0, !dbg !93
  %166 = getelementptr inbounds %struct.RArray, %struct.RArray* %164, i64 0, i32 1, i32 0, i32 2, !dbg !93
  br label %167, !dbg !97

167:                                              ; preds = %rb_array_len.exit.i11.i, %163
  %168 = phi i64 [ 0, %163 ], [ %192, %rb_array_len.exit.i11.i ], !dbg !97
  %169 = load i64, i64* %79, align 8, !dbg !97, !tbaa !25
  %170 = and i64 %169, 8192, !dbg !97
  %171 = icmp eq i64 %170, 0, !dbg !97
  br i1 %171, label %172, label %rb_array_const_ptr_transient.exit.i10.i, !dbg !97

172:                                              ; preds = %167
  %173 = load i64*, i64** %166, align 8, !dbg !97, !tbaa !27
  br label %rb_array_const_ptr_transient.exit.i10.i, !dbg !97

rb_array_const_ptr_transient.exit.i10.i:          ; preds = %172, %167
  %174 = phi i64* [ %173, %172 ], [ %165, %167 ], !dbg !97
  %175 = getelementptr inbounds i64, i64* %174, i64 %168, !dbg !97
  %176 = load i64, i64* %175, align 8, !dbg !97, !tbaa !6
  call void @llvm.experimental.noalias.scope.decl(metadata !99) #13, !dbg !97
  %177 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !93, !tbaa !15, !noalias !99
  %178 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %177, i64 0, i32 2, !dbg !93
  %179 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %178, align 8, !dbg !93, !tbaa !17, !noalias !99
  %180 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %179, i64 0, i32 3, !dbg !93
  %181 = load i64, i64* %180, align 8, !dbg !93, !tbaa !42, !noalias !99
  %stackFrame.i.i.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$153$block_2", align 8, !dbg !93, !noalias !99
  %182 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %179, i64 0, i32 2, !dbg !93
  store %struct.rb_iseq_struct* %stackFrame.i.i.i, %struct.rb_iseq_struct** %182, align 8, !dbg !93, !tbaa !21, !noalias !99
  %183 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %179, i64 0, i32 4, !dbg !93
  %184 = load i64*, i64** %183, align 8, !dbg !93, !tbaa !23, !noalias !99
  %185 = load i64, i64* %184, align 8, !dbg !93, !tbaa !6, !noalias !99
  %186 = and i64 %185, -129, !dbg !93
  store i64 %186, i64* %184, align 8, !dbg !93, !tbaa !6, !noalias !99
  %187 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %179, i64 0, i32 0, !dbg !93
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 14), i64** %187, align 8, !dbg !102, !tbaa !15, !noalias !99
  %188 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %179, i64 0, i32 1, !dbg !104
  %189 = load i64*, i64** %188, align 8, !dbg !104
  store i64 %181, i64* %189, align 8, !dbg !104, !tbaa !6
  %190 = getelementptr inbounds i64, i64* %189, i64 1, !dbg !104
  store i64 %176, i64* %190, align 8, !dbg !104, !tbaa !6
  %191 = getelementptr inbounds i64, i64* %190, i64 1, !dbg !104
  store i64* %191, i64** %188, align 8, !dbg !104
  %send = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_p, i64 0), !dbg !104
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 13), i64** %187, align 8, !dbg !104, !tbaa !15, !noalias !99
  %192 = add nuw nsw i64 %168, 1, !dbg !97
  %193 = load i64, i64* %79, align 8, !dbg !97, !tbaa !25
  %194 = and i64 %193, 8192, !dbg !97
  %195 = icmp eq i64 %194, 0, !dbg !97
  br i1 %195, label %199, label %196, !dbg !97

196:                                              ; preds = %rb_array_const_ptr_transient.exit.i10.i
  %197 = lshr i64 %193, 15, !dbg !97
  %198 = and i64 %197, 3, !dbg !97
  br label %rb_array_len.exit.i11.i, !dbg !97

199:                                              ; preds = %rb_array_const_ptr_transient.exit.i10.i
  %200 = load i64, i64* %165, align 8, !dbg !97, !tbaa !27
  br label %rb_array_len.exit.i11.i, !dbg !97

rb_array_len.exit.i11.i:                          ; preds = %199, %196
  %201 = phi i64 [ %198, %196 ], [ %200, %199 ], !dbg !97
  %202 = icmp sgt i64 %201, %192, !dbg !97
  br i1 %202, label %167, label %forward_sorbet_rb_array_each_withBlock.1.exit.i, !dbg !97, !llvm.loop !105

forward_sorbet_rb_array_each_withBlock.1.exit.i:  ; preds = %rb_array_len.exit.i11.i, %rb_array_len.exit1.i9.i
  call void @sorbet_popFrame() #13, !dbg !97
  call void @llvm.lifetime.end.p0i8(i64 noundef 40, i8* noundef nonnull %133) #13, !dbg !93
  %203 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !93, !tbaa !15
  %204 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %203, i64 0, i32 5, !dbg !93
  %205 = load i32, i32* %204, align 8, !dbg !93, !tbaa !37
  %206 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %203, i64 0, i32 6, !dbg !93
  %207 = load i32, i32* %206, align 4, !dbg !93, !tbaa !38
  %208 = xor i32 %207, -1, !dbg !93
  %209 = and i32 %208, %205, !dbg !93
  %210 = icmp eq i32 %209, 0, !dbg !93
  br i1 %210, label %rb_check_arity.1.exit.i14.i, label %211, !dbg !93, !prof !31

211:                                              ; preds = %forward_sorbet_rb_array_each_withBlock.1.exit.i
  %212 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %203, i64 0, i32 8, !dbg !93
  %213 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %212, align 8, !dbg !93, !tbaa !39
  %214 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %213, i32 noundef 0) #13, !dbg !93
  br label %rb_check_arity.1.exit.i14.i, !dbg !93

rb_check_arity.1.exit.i14.i:                      ; preds = %211, %forward_sorbet_rb_array_each_withBlock.1.exit.i
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 18), i64** %53, align 8, !dbg !93, !tbaa !15
  %rubyId_each77.i = load i64, i64* @rubyIdPrecomputed_each, align 8, !dbg !106
  %215 = load i64, i64* @"func_<root>.17<static-init>$153$block_3_ifunc", align 8, !dbg !106
  %216 = call %struct.vm_ifunc* @sorbet_globalConstFetchIfunc(i64 %215) #13, !dbg !106
  %217 = bitcast %struct.sorbet_inlineIntrinsicEnv* %4 to i8*, !dbg !106
  call void @llvm.lifetime.start.p0i8(i64 noundef 40, i8* noundef nonnull %217) #13, !dbg !106
  %218 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %4, i64 0, i32 0, !dbg !106
  store i64 %57, i64* %218, align 8, !dbg !106, !tbaa !81
  %219 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %4, i64 0, i32 1, !dbg !106
  store i64 %rubyId_each77.i, i64* %219, align 8, !dbg !106, !tbaa !83
  %220 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %4, i64 0, i32 2, !dbg !106
  store i32 0, i32* %220, align 8, !dbg !106, !tbaa !84
  %221 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %4, i64 0, i32 3, !dbg !106
  %222 = bitcast i64** %221 to i8*, !dbg !106
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %222, i8 0, i64 16, i1 false) #13, !dbg !106
  %223 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !106, !tbaa !15
  %224 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %223, i64 0, i32 2, !dbg !106
  %225 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %224, align 8, !dbg !106, !tbaa !17
  %226 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %225, i64 0, i32 3, !dbg !106
  %227 = bitcast i64* %226 to %struct.rb_captured_block*, !dbg !106
  %228 = getelementptr inbounds i64, i64* %226, i64 2, !dbg !106
  %229 = bitcast i64* %228 to %struct.vm_ifunc**, !dbg !106
  store %struct.vm_ifunc* %216, %struct.vm_ifunc** %229, align 8, !dbg !106, !tbaa !27
  call void @llvm.experimental.noalias.scope.decl(metadata !107) #13, !dbg !106
  %230 = ptrtoint %struct.rb_captured_block* %227 to i64, !dbg !106
  %231 = or i64 %230, 3, !dbg !106
  %232 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %223, i64 0, i32 17, !dbg !106
  %233 = and i64 %231, -4, !dbg !110
  %234 = inttoptr i64 %233 to %struct.rb_captured_block*, !dbg !110
  store i64 0, i64* %232, align 8, !dbg !110, !tbaa !90
  call void @sorbet_pushBlockFrame(%struct.rb_captured_block* %234) #13, !dbg !110
  %235 = load i64, i64* %79, align 8, !dbg !110, !tbaa !25
  %236 = and i64 %235, 8192, !dbg !110
  %237 = icmp eq i64 %236, 0, !dbg !110
  br i1 %237, label %241, label %238, !dbg !110

238:                                              ; preds = %rb_check_arity.1.exit.i14.i
  %239 = lshr i64 %235, 15, !dbg !110
  %240 = and i64 %239, 3, !dbg !110
  br label %rb_array_len.exit1.i15.i, !dbg !110

241:                                              ; preds = %rb_check_arity.1.exit.i14.i
  %242 = inttoptr i64 %57 to %struct.RArray*, !dbg !110
  %243 = getelementptr inbounds %struct.RArray, %struct.RArray* %242, i64 0, i32 1, i32 0, i32 0, !dbg !110
  %244 = load i64, i64* %243, align 8, !dbg !110, !tbaa !27
  br label %rb_array_len.exit1.i15.i, !dbg !110

rb_array_len.exit1.i15.i:                         ; preds = %241, %238
  %245 = phi i64 [ %240, %238 ], [ %244, %241 ], !dbg !110
  %246 = icmp sgt i64 %245, 0, !dbg !110
  br i1 %246, label %247, label %forward_sorbet_rb_array_each_withBlock.3.exit.i, !dbg !110

247:                                              ; preds = %rb_array_len.exit1.i15.i
  %248 = inttoptr i64 %57 to %struct.RArray*, !dbg !106
  %249 = getelementptr inbounds %struct.RArray, %struct.RArray* %248, i64 0, i32 1, i32 0, i32 0, !dbg !106
  %250 = getelementptr inbounds %struct.RArray, %struct.RArray* %248, i64 0, i32 1, i32 0, i32 2, !dbg !106
  br label %251, !dbg !110

251:                                              ; preds = %rb_array_len.exit.i18.i, %247
  %252 = phi i64 [ 0, %247 ], [ %276, %rb_array_len.exit.i18.i ], !dbg !110
  %253 = load i64, i64* %79, align 8, !dbg !110, !tbaa !25
  %254 = and i64 %253, 8192, !dbg !110
  %255 = icmp eq i64 %254, 0, !dbg !110
  br i1 %255, label %256, label %rb_array_const_ptr_transient.exit.i17.i, !dbg !110

256:                                              ; preds = %251
  %257 = load i64*, i64** %250, align 8, !dbg !110, !tbaa !27
  br label %rb_array_const_ptr_transient.exit.i17.i, !dbg !110

rb_array_const_ptr_transient.exit.i17.i:          ; preds = %256, %251
  %258 = phi i64* [ %257, %256 ], [ %249, %251 ], !dbg !110
  %259 = getelementptr inbounds i64, i64* %258, i64 %252, !dbg !110
  %260 = load i64, i64* %259, align 8, !dbg !110, !tbaa !6
  call void @llvm.experimental.noalias.scope.decl(metadata !112) #13, !dbg !110
  %261 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !106, !tbaa !15, !noalias !112
  %262 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %261, i64 0, i32 2, !dbg !106
  %263 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %262, align 8, !dbg !106, !tbaa !17, !noalias !112
  %264 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %263, i64 0, i32 3, !dbg !106
  %265 = load i64, i64* %264, align 8, !dbg !106, !tbaa !42, !noalias !112
  %stackFrame.i.i16.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.17<static-init>$153$block_3", align 8, !dbg !106, !noalias !112
  %266 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %263, i64 0, i32 2, !dbg !106
  store %struct.rb_iseq_struct* %stackFrame.i.i16.i, %struct.rb_iseq_struct** %266, align 8, !dbg !106, !tbaa !21, !noalias !112
  %267 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %263, i64 0, i32 4, !dbg !106
  %268 = load i64*, i64** %267, align 8, !dbg !106, !tbaa !23, !noalias !112
  %269 = load i64, i64* %268, align 8, !dbg !106, !tbaa !6, !noalias !112
  %270 = and i64 %269, -129, !dbg !106
  store i64 %270, i64* %268, align 8, !dbg !106, !tbaa !6, !noalias !112
  %271 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %263, i64 0, i32 0, !dbg !106
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 19), i64** %271, align 8, !dbg !106, !tbaa !15, !noalias !112
  %272 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %263, i64 0, i32 1, !dbg !115
  %273 = load i64*, i64** %272, align 8, !dbg !115
  store i64 %265, i64* %273, align 8, !dbg !115, !tbaa !6
  %274 = getelementptr inbounds i64, i64* %273, i64 1, !dbg !115
  store i64 %260, i64* %274, align 8, !dbg !115, !tbaa !6
  %275 = getelementptr inbounds i64, i64* %274, i64 1, !dbg !115
  store i64* %275, i64** %272, align 8, !dbg !115
  %send14 = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_p.5, i64 0), !dbg !115
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 18), i64** %271, align 8, !dbg !115, !tbaa !15, !noalias !112
  %276 = add nuw nsw i64 %252, 1, !dbg !110
  %277 = load i64, i64* %79, align 8, !dbg !110, !tbaa !25
  %278 = and i64 %277, 8192, !dbg !110
  %279 = icmp eq i64 %278, 0, !dbg !110
  br i1 %279, label %283, label %280, !dbg !110

280:                                              ; preds = %rb_array_const_ptr_transient.exit.i17.i
  %281 = lshr i64 %277, 15, !dbg !110
  %282 = and i64 %281, 3, !dbg !110
  br label %rb_array_len.exit.i18.i, !dbg !110

283:                                              ; preds = %rb_array_const_ptr_transient.exit.i17.i
  %284 = load i64, i64* %249, align 8, !dbg !110, !tbaa !27
  br label %rb_array_len.exit.i18.i, !dbg !110

rb_array_len.exit.i18.i:                          ; preds = %283, %280
  %285 = phi i64 [ %282, %280 ], [ %284, %283 ], !dbg !110
  %286 = icmp sgt i64 %285, %276, !dbg !110
  br i1 %286, label %251, label %forward_sorbet_rb_array_each_withBlock.3.exit.i, !dbg !110, !llvm.loop !117

forward_sorbet_rb_array_each_withBlock.3.exit.i:  ; preds = %rb_array_len.exit.i18.i, %rb_array_len.exit1.i15.i
  call void @sorbet_popFrame() #13, !dbg !110
  call void @llvm.lifetime.end.p0i8(i64 noundef 40, i8* noundef nonnull %217) #13, !dbg !106
  %287 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !106, !tbaa !15
  %288 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %287, i64 0, i32 5, !dbg !106
  %289 = load i32, i32* %288, align 8, !dbg !106, !tbaa !37
  %290 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %287, i64 0, i32 6, !dbg !106
  %291 = load i32, i32* %290, align 4, !dbg !106, !tbaa !38
  %292 = xor i32 %291, -1, !dbg !106
  %293 = and i32 %292, %289, !dbg !106
  %294 = icmp eq i32 %293, 0, !dbg !106
  br i1 %294, label %rb_check_arity.1.exit.i21.i, label %295, !dbg !106, !prof !31

295:                                              ; preds = %forward_sorbet_rb_array_each_withBlock.3.exit.i
  %296 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %287, i64 0, i32 8, !dbg !106
  %297 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %296, align 8, !dbg !106, !tbaa !39
  %298 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %297, i32 noundef 0) #13, !dbg !106
  br label %rb_check_arity.1.exit.i21.i, !dbg !106

rb_check_arity.1.exit.i21.i:                      ; preds = %295, %forward_sorbet_rb_array_each_withBlock.3.exit.i
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 23), i64** %53, align 8, !dbg !106, !tbaa !15
  %rubyId_each89.i = load i64, i64* @rubyIdPrecomputed_each, align 8, !dbg !118
  %299 = load i64, i64* @"func_<root>.17<static-init>$153$block_4_ifunc", align 8, !dbg !118
  %300 = call %struct.vm_ifunc* @sorbet_globalConstFetchIfunc(i64 %299) #13, !dbg !118
  %301 = bitcast %struct.sorbet_inlineIntrinsicEnv* %3 to i8*, !dbg !118
  call void @llvm.lifetime.start.p0i8(i64 noundef 40, i8* noundef nonnull %301) #13, !dbg !118
  %302 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %3, i64 0, i32 0, !dbg !118
  store i64 %57, i64* %302, align 8, !dbg !118, !tbaa !81
  %303 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %3, i64 0, i32 1, !dbg !118
  store i64 %rubyId_each89.i, i64* %303, align 8, !dbg !118, !tbaa !83
  %304 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %3, i64 0, i32 2, !dbg !118
  store i32 0, i32* %304, align 8, !dbg !118, !tbaa !84
  %305 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %3, i64 0, i32 3, !dbg !118
  %306 = bitcast i64** %305 to i8*, !dbg !118
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %306, i8 0, i64 16, i1 false) #13, !dbg !118
  %307 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !118, !tbaa !15
  %308 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %307, i64 0, i32 2, !dbg !118
  %309 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %308, align 8, !dbg !118, !tbaa !17
  %310 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %309, i64 0, i32 3, !dbg !118
  %311 = bitcast i64* %310 to %struct.rb_captured_block*, !dbg !118
  %312 = getelementptr inbounds i64, i64* %310, i64 2, !dbg !118
  %313 = bitcast i64* %312 to %struct.vm_ifunc**, !dbg !118
  store %struct.vm_ifunc* %300, %struct.vm_ifunc** %313, align 8, !dbg !118, !tbaa !27
  call void @llvm.experimental.noalias.scope.decl(metadata !119) #13, !dbg !118
  %314 = ptrtoint %struct.rb_captured_block* %311 to i64, !dbg !118
  %315 = or i64 %314, 3, !dbg !118
  %316 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %307, i64 0, i32 17, !dbg !118
  %317 = and i64 %315, -4, !dbg !122
  %318 = inttoptr i64 %317 to %struct.rb_captured_block*, !dbg !122
  store i64 0, i64* %316, align 8, !dbg !122, !tbaa !90
  call void @sorbet_pushBlockFrame(%struct.rb_captured_block* %318) #13, !dbg !122
  %319 = load i64, i64* %79, align 8, !dbg !122, !tbaa !25
  %320 = and i64 %319, 8192, !dbg !122
  %321 = icmp eq i64 %320, 0, !dbg !122
  br i1 %321, label %325, label %322, !dbg !122

322:                                              ; preds = %rb_check_arity.1.exit.i21.i
  %323 = lshr i64 %319, 15, !dbg !122
  %324 = and i64 %323, 3, !dbg !122
  br label %rb_array_len.exit1.i22.i, !dbg !122

325:                                              ; preds = %rb_check_arity.1.exit.i21.i
  %326 = inttoptr i64 %57 to %struct.RArray*, !dbg !122
  %327 = getelementptr inbounds %struct.RArray, %struct.RArray* %326, i64 0, i32 1, i32 0, i32 0, !dbg !122
  %328 = load i64, i64* %327, align 8, !dbg !122, !tbaa !27
  br label %rb_array_len.exit1.i22.i, !dbg !122

rb_array_len.exit1.i22.i:                         ; preds = %325, %322
  %329 = phi i64 [ %324, %322 ], [ %328, %325 ], !dbg !122
  %330 = icmp sgt i64 %329, 0, !dbg !122
  br i1 %330, label %331, label %forward_sorbet_rb_array_each_withBlock.6.exit.i, !dbg !122

331:                                              ; preds = %rb_array_len.exit1.i22.i
  %332 = bitcast i64* %0 to i8*, !dbg !122
  %333 = inttoptr i64 %57 to %struct.RArray*, !dbg !118
  %334 = getelementptr inbounds %struct.RArray, %struct.RArray* %333, i64 0, i32 1, i32 0, i32 0, !dbg !118
  %335 = getelementptr inbounds %struct.RArray, %struct.RArray* %333, i64 0, i32 1, i32 0, i32 2, !dbg !118
  br label %336, !dbg !122

336:                                              ; preds = %rb_array_len.exit.i24.i, %331
  %337 = phi i64 [ 0, %331 ], [ %347, %rb_array_len.exit.i24.i ], !dbg !122
  call void @llvm.lifetime.start.p0i8(i64 noundef 8, i8* noundef nonnull align 8 dereferenceable(8) %332) #13, !dbg !122
  %338 = load i64, i64* %79, align 8, !dbg !122, !tbaa !25
  %339 = and i64 %338, 8192, !dbg !122
  %340 = icmp eq i64 %339, 0, !dbg !122
  br i1 %340, label %341, label %rb_array_const_ptr_transient.exit.i23.i, !dbg !122

341:                                              ; preds = %336
  %342 = load i64*, i64** %335, align 8, !dbg !122, !tbaa !27
  br label %rb_array_const_ptr_transient.exit.i23.i, !dbg !122

rb_array_const_ptr_transient.exit.i23.i:          ; preds = %341, %336
  %343 = phi i64* [ %342, %341 ], [ %334, %336 ], !dbg !122
  %344 = getelementptr inbounds i64, i64* %343, i64 %337, !dbg !122
  %345 = load i64, i64* %344, align 8, !dbg !122, !tbaa !6
  store i64 %345, i64* %0, align 8, !dbg !122, !tbaa !6
  %346 = call i64 @"func_<root>.17<static-init>$153$block_4"(i64 undef, i64 undef, i32 noundef 1, i64* noalias nocapture noundef nonnull readonly align 8 dereferenceable(8) %0, i64 undef) #13, !dbg !122
  call void @llvm.lifetime.end.p0i8(i64 noundef 8, i8* noundef nonnull %332) #13, !dbg !122
  %347 = add nuw nsw i64 %337, 1, !dbg !122
  %348 = load i64, i64* %79, align 8, !dbg !122, !tbaa !25
  %349 = and i64 %348, 8192, !dbg !122
  %350 = icmp eq i64 %349, 0, !dbg !122
  br i1 %350, label %354, label %351, !dbg !122

351:                                              ; preds = %rb_array_const_ptr_transient.exit.i23.i
  %352 = lshr i64 %348, 15, !dbg !122
  %353 = and i64 %352, 3, !dbg !122
  br label %rb_array_len.exit.i24.i, !dbg !122

354:                                              ; preds = %rb_array_const_ptr_transient.exit.i23.i
  %355 = load i64, i64* %334, align 8, !dbg !122, !tbaa !27
  br label %rb_array_len.exit.i24.i, !dbg !122

rb_array_len.exit.i24.i:                          ; preds = %354, %351
  %356 = phi i64 [ %353, %351 ], [ %355, %354 ], !dbg !122
  %357 = icmp sgt i64 %356, %347, !dbg !122
  br i1 %357, label %336, label %forward_sorbet_rb_array_each_withBlock.6.exit.i, !dbg !122, !llvm.loop !124

forward_sorbet_rb_array_each_withBlock.6.exit.i:  ; preds = %rb_array_len.exit.i24.i, %rb_array_len.exit1.i22.i
  call void @sorbet_popFrame() #13, !dbg !122
  call void @llvm.lifetime.end.p0i8(i64 noundef 40, i8* noundef nonnull %301) #13, !dbg !118
  %358 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !118, !tbaa !15
  %359 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %358, i64 0, i32 5, !dbg !118
  %360 = load i32, i32* %359, align 8, !dbg !118, !tbaa !37
  %361 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %358, i64 0, i32 6, !dbg !118
  %362 = load i32, i32* %361, align 4, !dbg !118, !tbaa !38
  %363 = xor i32 %362, -1, !dbg !118
  %364 = and i32 %363, %360, !dbg !118
  %365 = icmp eq i32 %364, 0, !dbg !118
  br i1 %365, label %rb_check_arity.1.exit.i.i, label %366, !dbg !118, !prof !31

366:                                              ; preds = %forward_sorbet_rb_array_each_withBlock.6.exit.i
  %367 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %358, i64 0, i32 8, !dbg !118
  %368 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %367, align 8, !dbg !118, !tbaa !39
  %369 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %368, i32 noundef 0) #13, !dbg !118
  br label %rb_check_arity.1.exit.i.i, !dbg !118

rb_check_arity.1.exit.i.i:                        ; preds = %366, %forward_sorbet_rb_array_each_withBlock.6.exit.i
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 28), i64** %53, align 8, !dbg !118, !tbaa !15
  %rubyId_each101.i = load i64, i64* @rubyIdPrecomputed_each, align 8, !dbg !125
  %370 = load i64, i64* @"func_<root>.17<static-init>$153$block_5_ifunc", align 8, !dbg !125
  %371 = call %struct.vm_ifunc* @sorbet_globalConstFetchIfunc(i64 %370) #13, !dbg !125
  %372 = bitcast %struct.sorbet_inlineIntrinsicEnv* %7 to i8*, !dbg !125
  call void @llvm.lifetime.start.p0i8(i64 noundef 40, i8* noundef nonnull %372) #13, !dbg !125
  %373 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %7, i64 0, i32 0, !dbg !125
  store i64 %57, i64* %373, align 8, !dbg !125, !tbaa !81
  %374 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %7, i64 0, i32 1, !dbg !125
  store i64 %rubyId_each101.i, i64* %374, align 8, !dbg !125, !tbaa !83
  %375 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %7, i64 0, i32 2, !dbg !125
  store i32 0, i32* %375, align 8, !dbg !125, !tbaa !84
  %376 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %7, i64 0, i32 3, !dbg !125
  %377 = bitcast i64** %376 to i8*, !dbg !125
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %377, i8 0, i64 16, i1 false) #13, !dbg !125
  %378 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !125, !tbaa !15
  %379 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %378, i64 0, i32 2, !dbg !125
  %380 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %379, align 8, !dbg !125, !tbaa !17
  %381 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %380, i64 0, i32 3, !dbg !125
  %382 = bitcast i64* %381 to %struct.rb_captured_block*, !dbg !125
  %383 = getelementptr inbounds i64, i64* %381, i64 2, !dbg !125
  %384 = bitcast i64* %383 to %struct.vm_ifunc**, !dbg !125
  store %struct.vm_ifunc* %371, %struct.vm_ifunc** %384, align 8, !dbg !125, !tbaa !27
  call void @llvm.experimental.noalias.scope.decl(metadata !126) #13, !dbg !125
  %385 = ptrtoint %struct.rb_captured_block* %382 to i64, !dbg !125
  %386 = or i64 %385, 3, !dbg !125
  %387 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %378, i64 0, i32 17, !dbg !125
  %388 = and i64 %386, -4, !dbg !129
  %389 = inttoptr i64 %388 to %struct.rb_captured_block*, !dbg !129
  store i64 0, i64* %387, align 8, !dbg !129, !tbaa !90
  call void @sorbet_pushBlockFrame(%struct.rb_captured_block* %389) #13, !dbg !129
  %390 = load i64, i64* %79, align 8, !dbg !129, !tbaa !25
  %391 = and i64 %390, 8192, !dbg !129
  %392 = icmp eq i64 %391, 0, !dbg !129
  br i1 %392, label %396, label %393, !dbg !129

393:                                              ; preds = %rb_check_arity.1.exit.i.i
  %394 = lshr i64 %390, 15, !dbg !129
  %395 = and i64 %394, 3, !dbg !129
  br label %rb_array_len.exit1.i.i, !dbg !129

396:                                              ; preds = %rb_check_arity.1.exit.i.i
  %397 = inttoptr i64 %57 to %struct.RArray*, !dbg !129
  %398 = getelementptr inbounds %struct.RArray, %struct.RArray* %397, i64 0, i32 1, i32 0, i32 0, !dbg !129
  %399 = load i64, i64* %398, align 8, !dbg !129, !tbaa !27
  br label %rb_array_len.exit1.i.i, !dbg !129

rb_array_len.exit1.i.i:                           ; preds = %396, %393
  %400 = phi i64 [ %395, %393 ], [ %399, %396 ], !dbg !129
  %401 = icmp sgt i64 %400, 0, !dbg !129
  br i1 %401, label %402, label %forward_sorbet_rb_array_each_withBlock.10.exit.i, !dbg !129

402:                                              ; preds = %rb_array_len.exit1.i.i
  %403 = bitcast i64* %2 to i8*, !dbg !129
  %404 = inttoptr i64 %57 to %struct.RArray*, !dbg !125
  %405 = getelementptr inbounds %struct.RArray, %struct.RArray* %404, i64 0, i32 1, i32 0, i32 0, !dbg !125
  %406 = getelementptr inbounds %struct.RArray, %struct.RArray* %404, i64 0, i32 1, i32 0, i32 2, !dbg !125
  br label %407, !dbg !129

407:                                              ; preds = %rb_array_len.exit.i.i, %402
  %408 = phi i64 [ 0, %402 ], [ %418, %rb_array_len.exit.i.i ], !dbg !129
  call void @llvm.lifetime.start.p0i8(i64 noundef 8, i8* noundef nonnull align 8 dereferenceable(8) %403) #13, !dbg !129
  %409 = load i64, i64* %79, align 8, !dbg !129, !tbaa !25
  %410 = and i64 %409, 8192, !dbg !129
  %411 = icmp eq i64 %410, 0, !dbg !129
  br i1 %411, label %412, label %rb_array_const_ptr_transient.exit.i.i, !dbg !129

412:                                              ; preds = %407
  %413 = load i64*, i64** %406, align 8, !dbg !129, !tbaa !27
  br label %rb_array_const_ptr_transient.exit.i.i, !dbg !129

rb_array_const_ptr_transient.exit.i.i:            ; preds = %412, %407
  %414 = phi i64* [ %413, %412 ], [ %405, %407 ], !dbg !129
  %415 = getelementptr inbounds i64, i64* %414, i64 %408, !dbg !129
  %416 = load i64, i64* %415, align 8, !dbg !129, !tbaa !6
  store i64 %416, i64* %2, align 8, !dbg !129, !tbaa !6
  %417 = call i64 @"func_<root>.17<static-init>$153$block_5"(i64 undef, i64 undef, i32 noundef 1, i64* noalias nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, i64 undef) #13, !dbg !129
  call void @llvm.lifetime.end.p0i8(i64 noundef 8, i8* noundef nonnull %403) #13, !dbg !129
  %418 = add nuw nsw i64 %408, 1, !dbg !129
  %419 = load i64, i64* %79, align 8, !dbg !129, !tbaa !25
  %420 = and i64 %419, 8192, !dbg !129
  %421 = icmp eq i64 %420, 0, !dbg !129
  br i1 %421, label %425, label %422, !dbg !129

422:                                              ; preds = %rb_array_const_ptr_transient.exit.i.i
  %423 = lshr i64 %419, 15, !dbg !129
  %424 = and i64 %423, 3, !dbg !129
  br label %rb_array_len.exit.i.i, !dbg !129

425:                                              ; preds = %rb_array_const_ptr_transient.exit.i.i
  %426 = load i64, i64* %405, align 8, !dbg !129, !tbaa !27
  br label %rb_array_len.exit.i.i, !dbg !129

rb_array_len.exit.i.i:                            ; preds = %425, %422
  %427 = phi i64 [ %424, %422 ], [ %426, %425 ], !dbg !129
  %428 = icmp sgt i64 %427, %418, !dbg !129
  br i1 %428, label %407, label %forward_sorbet_rb_array_each_withBlock.10.exit.i, !dbg !129, !llvm.loop !131

forward_sorbet_rb_array_each_withBlock.10.exit.i: ; preds = %rb_array_len.exit.i.i, %rb_array_len.exit1.i.i
  call void @sorbet_popFrame() #13, !dbg !129
  call void @llvm.lifetime.end.p0i8(i64 noundef 40, i8* noundef nonnull %372) #13, !dbg !125
  %429 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !125, !tbaa !15
  %430 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %429, i64 0, i32 5, !dbg !125
  %431 = load i32, i32* %430, align 8, !dbg !125, !tbaa !37
  %432 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %429, i64 0, i32 6, !dbg !125
  %433 = load i32, i32* %432, align 4, !dbg !125, !tbaa !38
  %434 = xor i32 %433, -1, !dbg !125
  %435 = and i32 %434, %431, !dbg !125
  %436 = icmp eq i32 %435, 0, !dbg !125
  br i1 %436, label %"func_<root>.17<static-init>$153.exit", label %437, !dbg !125, !prof !31

437:                                              ; preds = %forward_sorbet_rb_array_each_withBlock.10.exit.i
  %438 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %429, i64 0, i32 8, !dbg !125
  %439 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %438, align 8, !dbg !125, !tbaa !39
  %440 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %439, i32 noundef 0) #13, !dbg !125
  br label %"func_<root>.17<static-init>$153.exit", !dbg !125

"func_<root>.17<static-init>$153.exit":           ; preds = %forward_sorbet_rb_array_each_withBlock.10.exit.i, %437
  store i64* getelementptr inbounds ([32 x i64], [32 x i64]* @iseqEncodedArray, i64 0, i64 28), i64** %53, align 8, !tbaa !15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46)
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #10

; Function Attrs: cold minsize noreturn ssp
define internal fastcc void @"func_<root>.17<static-init>$153$block_1.cold.1"(i64 %el2.sroa.0.0) unnamed_addr #11 !dbg !132 {
newFuncRoot:
  tail call void @sorbet_cast_failure(i64 %el2.sroa.0.0, i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @str_T.let, i64 0, i64 0), i8* noundef getelementptr inbounds ([8 x i8], [8 x i8]* @str_Integer, i64 0, i64 0)) #17, !dbg !134
  unreachable, !dbg !134
}

attributes #0 = { nounwind readnone willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { cold noreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { noreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #6 = { inaccessiblememonly nofree nosync nounwind willreturn }
attributes #7 = { nounwind ssp uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { ssp }
attributes #9 = { sspreq }
attributes #10 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #11 = { cold minsize noreturn ssp }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind }
attributes #14 = { noinline }
attributes #15 = { nounwind willreturn }
attributes #16 = { willreturn }
attributes #17 = { noreturn }

!llvm.module.flags = !{!0, !1, !2}
!llvm.dbg.cu = !{!3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"cf-protection-return", i32 1}
!2 = !{i32 4, !"cf-protection-branch", i32 1}
!3 = distinct !DICompileUnit(language: DW_LANG_C, file: !4, producer: "Sorbet LLVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !5)
!4 = !DIFile(filename: "test/testdata/compiler/block_arg_expand.rb", directory: ".")
!5 = !{}
!6 = !{!7, !7, i64 0}
!7 = !{!"long", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.17<static-init>$153$block_1", scope: !11, file: !4, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!11 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.17<static-init>$153", scope: null, file: !4, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!12 = !DISubroutineType(types: !13)
!13 = !{!14}
!14 = !DIBasicType(name: "VALUE", size: 64, encoding: DW_ATE_signed)
!15 = !{!16, !16, i64 0}
!16 = !{!"any pointer", !8, i64 0}
!17 = !{!18, !16, i64 16}
!18 = !{!"rb_execution_context_struct", !16, i64 0, !7, i64 8, !16, i64 16, !16, i64 24, !16, i64 32, !19, i64 40, !19, i64 44, !16, i64 48, !16, i64 56, !16, i64 64, !7, i64 72, !7, i64 80, !16, i64 88, !7, i64 96, !16, i64 104, !16, i64 112, !7, i64 120, !7, i64 128, !8, i64 136, !8, i64 137, !7, i64 144, !20, i64 152}
!19 = !{!"int", !8, i64 0}
!20 = !{!"", !16, i64 0, !16, i64 8, !7, i64 16, !8, i64 24}
!21 = !{!22, !16, i64 16}
!22 = !{!"rb_control_frame_struct", !16, i64 0, !16, i64 8, !16, i64 16, !7, i64 24, !16, i64 32, !16, i64 40, !16, i64 48}
!23 = !{!22, !16, i64 32}
!24 = !DILocation(line: 5, column: 1, scope: !10)
!25 = !{!26, !7, i64 0}
!26 = !{!"RBasic", !7, i64 0, !7, i64 8}
!27 = !{!8, !8, i64 0}
!28 = !{!"branch_weights", i32 1, i32 2000}
!29 = !DILocation(line: 8, column: 17, scope: !10)
!30 = !DILocation(line: 9, column: 3, scope: !10)
!31 = !{!"branch_weights", i32 2000, i32 1}
!32 = !DILocation(line: 9, column: 25, scope: !10)
!33 = !{!34}
!34 = distinct !{!34, !35, !"sorbet_rb_int_plus: argument 0"}
!35 = distinct !{!35, !"sorbet_rb_int_plus"}
!36 = !{!"branch_weights", i32 4001, i32 4000000}
!37 = !{!18, !19, i64 40}
!38 = !{!18, !19, i64 44}
!39 = !{!18, !16, i64 56}
!40 = !DILocation(line: 8, column: 1, scope: !10)
!41 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.17<static-init>$153$block_2", scope: !11, file: !4, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!42 = !{!22, !7, i64 24}
!43 = !DILocation(line: 5, column: 1, scope: !41)
!44 = !DILocation(line: 13, column: 12, scope: !41)
!45 = !DILocation(line: 14, column: 3, scope: !41)
!46 = !DILocation(line: 13, column: 1, scope: !41)
!47 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.17<static-init>$153$block_3", scope: !11, file: !4, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!48 = !DILocation(line: 5, column: 1, scope: !47)
!49 = !DILocation(line: 18, column: 12, scope: !47)
!50 = !DILocation(line: 18, column: 18, scope: !47)
!51 = !DILocation(line: 0, scope: !47)
!52 = !DILocation(line: 19, column: 3, scope: !47)
!53 = !DILocation(line: 18, column: 1, scope: !47)
!54 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.17<static-init>$153$block_4", scope: !11, file: !4, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!55 = !DILocation(line: 5, column: 1, scope: !54)
!56 = !DILocation(line: 23, column: 14, scope: !54)
!57 = !DILocation(line: 23, column: 24, scope: !54)
!58 = !DILocation(line: 23, column: 26, scope: !54)
!59 = !DILocation(line: 0, scope: !54)
!60 = !DILocation(line: 24, column: 3, scope: !54)
!61 = !DILocation(line: 25, column: 3, scope: !54)
!62 = !DILocation(line: 23, column: 1, scope: !54)
!63 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.17<static-init>$153$block_5", scope: !11, file: !4, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!64 = !DILocation(line: 5, column: 1, scope: !63)
!65 = !DILocation(line: 28, column: 15, scope: !63)
!66 = !DILocation(line: 28, column: 17, scope: !63)
!67 = !DILocation(line: 0, scope: !63)
!68 = !DILocation(line: 29, column: 3, scope: !63)
!69 = !DILocation(line: 30, column: 3, scope: !63)
!70 = !DILocation(line: 28, column: 1, scope: !63)
!71 = !DILocation(line: 0, scope: !11)
!72 = !DILocation(line: 5, column: 6, scope: !11)
!73 = !{!74}
!74 = distinct !{!74, !75, !"sorbet_buildArrayIntrinsic: argument 0"}
!75 = distinct !{!75, !"sorbet_buildArrayIntrinsic"}
!76 = !DILocation(line: 5, column: 5, scope: !11)
!77 = !{!78}
!78 = distinct !{!78, !79, !"sorbet_buildArrayIntrinsic: argument 0"}
!79 = distinct !{!79, !"sorbet_buildArrayIntrinsic"}
!80 = !DILocation(line: 8, column: 1, scope: !11)
!81 = !{!82, !7, i64 0}
!82 = !{!"sorbet_inlineIntrinsicEnv", !7, i64 0, !7, i64 8, !19, i64 16, !16, i64 24, !7, i64 32}
!83 = !{!82, !7, i64 8}
!84 = !{!82, !19, i64 16}
!85 = !{!86}
!86 = distinct !{!86, !87, !"VM_BH_FROM_IFUNC_BLOCK: argument 0"}
!87 = distinct !{!87, !"VM_BH_FROM_IFUNC_BLOCK"}
!88 = !DILocation(line: 8, column: 1, scope: !11, inlinedAt: !89)
!89 = distinct !DILocation(line: 8, column: 1, scope: !11)
!90 = !{!18, !7, i64 128}
!91 = distinct !{!91, !92}
!92 = !{!"llvm.loop.unroll.disable"}
!93 = !DILocation(line: 13, column: 1, scope: !11)
!94 = !{!95}
!95 = distinct !{!95, !96, !"VM_BH_FROM_IFUNC_BLOCK: argument 0"}
!96 = distinct !{!96, !"VM_BH_FROM_IFUNC_BLOCK"}
!97 = !DILocation(line: 13, column: 1, scope: !11, inlinedAt: !98)
!98 = distinct !DILocation(line: 13, column: 1, scope: !11)
!99 = !{!100}
!100 = distinct !{!100, !101, !"func_<root>.17<static-init>$153$block_2: %argArray"}
!101 = distinct !{!101, !"func_<root>.17<static-init>$153$block_2"}
!102 = !DILocation(line: 13, column: 12, scope: !41, inlinedAt: !103)
!103 = distinct !DILocation(line: 13, column: 1, scope: !11, inlinedAt: !98)
!104 = !DILocation(line: 14, column: 3, scope: !41, inlinedAt: !103)
!105 = distinct !{!105, !92}
!106 = !DILocation(line: 18, column: 1, scope: !11)
!107 = !{!108}
!108 = distinct !{!108, !109, !"VM_BH_FROM_IFUNC_BLOCK: argument 0"}
!109 = distinct !{!109, !"VM_BH_FROM_IFUNC_BLOCK"}
!110 = !DILocation(line: 18, column: 1, scope: !11, inlinedAt: !111)
!111 = distinct !DILocation(line: 18, column: 1, scope: !11)
!112 = !{!113}
!113 = distinct !{!113, !114, !"func_<root>.17<static-init>$153$block_3: %argArray"}
!114 = distinct !{!114, !"func_<root>.17<static-init>$153$block_3"}
!115 = !DILocation(line: 19, column: 3, scope: !47, inlinedAt: !116)
!116 = distinct !DILocation(line: 18, column: 1, scope: !11, inlinedAt: !111)
!117 = distinct !{!117, !92}
!118 = !DILocation(line: 23, column: 1, scope: !11)
!119 = !{!120}
!120 = distinct !{!120, !121, !"VM_BH_FROM_IFUNC_BLOCK: argument 0"}
!121 = distinct !{!121, !"VM_BH_FROM_IFUNC_BLOCK"}
!122 = !DILocation(line: 23, column: 1, scope: !11, inlinedAt: !123)
!123 = distinct !DILocation(line: 23, column: 1, scope: !11)
!124 = distinct !{!124, !92}
!125 = !DILocation(line: 28, column: 1, scope: !11)
!126 = !{!127}
!127 = distinct !{!127, !128, !"VM_BH_FROM_IFUNC_BLOCK: argument 0"}
!128 = distinct !{!128, !"VM_BH_FROM_IFUNC_BLOCK"}
!129 = !DILocation(line: 28, column: 1, scope: !11, inlinedAt: !130)
!130 = distinct !DILocation(line: 28, column: 1, scope: !11)
!131 = distinct !{!131, !92}
!132 = distinct !DISubprogram(name: "func_<root>.17<static-init>$153$block_1.cold.1", linkageName: "func_<root>.17<static-init>$153$block_1.cold.1", scope: null, file: !4, type: !133, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !3, retainedNodes: !5)
!133 = !DISubroutineType(types: !5)
!134 = !DILocation(line: 9, column: 25, scope: !132)
