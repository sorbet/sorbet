; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.7 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.17 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_data*, %struct.anon.16, i32, i32, i32, i32, i32, i8, i64 }
%struct.anon = type { %struct.anon.0, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.0 = type { i16, [2 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.iseq_insn_info_entry*, i32*, i32, %struct.succ_index_table* }
%struct.iseq_insn_info_entry = type opaque
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, i64 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.rb_scope_visi_struct }
%struct.rb_scope_visi_struct = type { i8, [3 x i8] }
%struct.rb_call_data = type { %struct.rb_call_cache, %struct.rb_call_info }
%struct.rb_call_cache = type { i64, [3 x i64], %struct.rb_callable_method_entry_struct*, i64, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_data*)*, %union.anon.15 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon.13, i64, i64 }
%union.anon.13 = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64, i32, i64*, i64 (...)*)*, i32 }
%struct.rb_calling_info = type { i64, i64, i32, i32 }
%union.anon.15 = type { i32 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.anon.16 = type { i64, i64, i64, i64* }
%union.anon.17 = type { %struct.anon.18 }
%struct.anon.18 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [5 x i8*], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_fiber_struct = type opaque
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, i64, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %union.pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.10, i32, i64, %struct.rb_fiber_struct*, [5 x i8*], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %union.pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.5, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %union.pthread_mutex_t, i64, i64, i64, i64, i64, i32, %struct.st_table*, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.rb_builtin_function*, i32, %struct.anon.6, [29 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %union.pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%struct.anon.5 = type { [65 x i64] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.rb_builtin_function = type opaque
%struct.anon.6 = type { i64, i64, i64, i64 }
%struct.native_thread_data_struct = type { %struct.list_head, %union.anon.9 }
%union.anon.9 = type { %union.pthread_cond_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.10 = type { %struct.anon.11 }
%struct.anon.11 = type { i64, i64, i32 }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (i64, i64)*, i64 (i64)* }
%struct.st_table_entry = type opaque
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (i64)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.7 = type { i64*, i64*, i64, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.SorbetLineNumberInfo = type { i32, %struct.iseq_insn_info_entry*, i64* }
%struct.FunctionInlineCache = type { %struct.rb_kwarg_call_data }
%struct.rb_kwarg_call_data = type { %struct.rb_call_cache, %struct.rb_call_info_with_kwarg }
%struct.rb_call_info_with_kwarg = type { %struct.rb_call_info, %struct.rb_call_info_kw_arg* }
%struct.rb_call_info_kw_arg = type { i32, [1 x i64] }

@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@ruby_vm_global_constant_state = external local_unnamed_addr global i64, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.9 = private unnamed_addr constant [95 x i8] c"sorbet_getBuildSCMRevision: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@.str.10 = private unnamed_addr constant [93 x i8] c"sorbet_getIsReleaseBuild: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@"stackFramePrecomputed_func_<root>.13<static-init>" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@iseqEncodedArray = internal global [23 x i64] zeroinitializer
@fileLineNumberInfo = internal global %struct.SorbetLineNumberInfo zeroinitializer
@ic_test = internal global %struct.FunctionInlineCache zeroinitializer
@"stackFramePrecomputed_func_Bad#1!" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@ic_puts = internal global %struct.FunctionInlineCache zeroinitializer
@"stackFramePrecomputed_func_Bad.13<static-init>" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@stackFramePrecomputed_func_Main.4test = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"ic_!" = internal global %struct.FunctionInlineCache zeroinitializer
@ic_puts.1 = internal global %struct.FunctionInlineCache zeroinitializer
@"ic_!.2" = internal global %struct.FunctionInlineCache zeroinitializer
@ic_puts.3 = internal global %struct.FunctionInlineCache zeroinitializer
@"ic_!.4" = internal global %struct.FunctionInlineCache zeroinitializer
@ic_puts.5 = internal global %struct.FunctionInlineCache zeroinitializer
@"ic_!.6" = internal global %struct.FunctionInlineCache zeroinitializer
@ic_puts.7 = internal global %struct.FunctionInlineCache zeroinitializer
@ic_new = internal global %struct.FunctionInlineCache zeroinitializer
@ic_initialize = internal global %struct.FunctionInlineCache zeroinitializer
@"ic_!.8" = internal global %struct.FunctionInlineCache zeroinitializer
@ic_puts.9 = internal global %struct.FunctionInlineCache zeroinitializer
@"stackFramePrecomputed_func_Main.13<static-init>" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@sorbet_moduleStringTable = internal unnamed_addr constant [166 x i8] c"<top (required)>\00test/testdata/compiler/intrinsics/bang.rb\00Bad\00Object\00Main\00test\00master\00!\00bad bang overload\00puts\00<class:Bad>\00normal\00hello\00new\00initialize\00<module:Main>\00", align 1
@sorbet_moduleIDTable = internal unnamed_addr global [9 x i64] zeroinitializer, align 8
@sorbet_moduleIDDescriptors = internal unnamed_addr constant [9 x %struct.rb_code_position_struct] [%struct.rb_code_position_struct { i32 0, i32 16 }, %struct.rb_code_position_struct { i32 75, i32 4 }, %struct.rb_code_position_struct { i32 87, i32 1 }, %struct.rb_code_position_struct { i32 107, i32 4 }, %struct.rb_code_position_struct { i32 112, i32 11 }, %struct.rb_code_position_struct { i32 124, i32 6 }, %struct.rb_code_position_struct { i32 137, i32 3 }, %struct.rb_code_position_struct { i32 141, i32 10 }, %struct.rb_code_position_struct { i32 152, i32 13 }], align 8
@sorbet_moduleRubyStringTable = internal unnamed_addr global [8 x i64] zeroinitializer, align 8
@sorbet_moduleRubyStringDescriptors = internal unnamed_addr constant [8 x %struct.rb_code_position_struct] [%struct.rb_code_position_struct { i32 0, i32 16 }, %struct.rb_code_position_struct { i32 17, i32 41 }, %struct.rb_code_position_struct { i32 87, i32 1 }, %struct.rb_code_position_struct { i32 89, i32 17 }, %struct.rb_code_position_struct { i32 112, i32 11 }, %struct.rb_code_position_struct { i32 75, i32 4 }, %struct.rb_code_position_struct { i32 131, i32 5 }, %struct.rb_code_position_struct { i32 152, i32 13 }], align 8
@rb_cObject = external local_unnamed_addr constant i64
@guard_epoch_Bad = linkonce local_unnamed_addr global i64 0
@guarded_const_Bad = linkonce local_unnamed_addr global i64 0
@guard_epoch_Main = linkonce local_unnamed_addr global i64 0
@guarded_const_Main = linkonce local_unnamed_addr global i64 0

; Function Attrs: noreturn
declare void @sorbet_raiseArity(i32, i32, i32) local_unnamed_addr #0

declare %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64, i64, i64, i64, %struct.rb_iseq_struct*, i32, i32, %struct.SorbetLineNumberInfo*, i64*, i32, i32) local_unnamed_addr #1

declare void @sorbet_initLineNumberInfo(%struct.SorbetLineNumberInfo*, i64*, i32) local_unnamed_addr #1

declare i64 @sorbet_getConstant(i8*, i64) local_unnamed_addr #1

declare i64 @sorbet_readRealpath() local_unnamed_addr #1

declare %struct.rb_control_frame_struct* @sorbet_pushStaticInitFrame(i64) local_unnamed_addr #1

declare void @sorbet_popFrame() local_unnamed_addr #1

declare void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache*, i64, i32, i32, i32, ...) local_unnamed_addr #1

declare i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache*, i64) local_unnamed_addr #1

declare void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_iseq_struct*) local_unnamed_addr #1

declare void @sorbet_vm_define_method(i64, i8*, i64 (i32, i64*, i64, %struct.rb_control_frame_struct*, i8*, i8*)*, i8*, %struct.rb_iseq_struct*, i1 zeroext) local_unnamed_addr #1

declare void @sorbet_vm_intern_ids(i64*, %struct.rb_code_position_struct*, i32, i8*) local_unnamed_addr #1

declare void @sorbet_vm_init_string_table(i64*, %struct.rb_code_position_struct*, i32, i8*) local_unnamed_addr #1

declare i64 @sorbet_maybeAllocateObjectFastPath(i64, %struct.FunctionInlineCache*) local_unnamed_addr #1

declare i64 @sorbet_vm_bang(%struct.FunctionInlineCache*, %struct.rb_control_frame_struct*, i64) local_unnamed_addr #1

declare i64 @rb_define_module(i8*) local_unnamed_addr #1

declare i64 @rb_define_class(i8*, i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #0

; Function Attrs: allocsize(0,1)
declare noalias nonnull i8* @ruby_xcalloc(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i32 @sorbet_getIsReleaseBuild() local_unnamed_addr #3 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !6
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* noundef getelementptr inbounds ([93 x i8], [93 x i8]* @.str.10, i64 0, i64 0)) #9
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @sorbet_getBuildSCMRevision() local_unnamed_addr #3 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !6
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* noundef getelementptr inbounds ([95 x i8], [95 x i8]* @.str.9, i64 0, i64 0)) #9
  unreachable
}

define internal fastcc void @sorbet_globalConstructors(i64 %realpath) unnamed_addr {
allocRubyIds:
  tail call void @sorbet_vm_intern_ids(i64* noundef getelementptr inbounds ([9 x i64], [9 x i64]* @sorbet_moduleIDTable, i32 0, i32 0), %struct.rb_code_position_struct* noundef getelementptr inbounds ([9 x %struct.rb_code_position_struct], [9 x %struct.rb_code_position_struct]* @sorbet_moduleIDDescriptors, i32 0, i32 0), i32 noundef 9, i8* noundef getelementptr inbounds ([166 x i8], [166 x i8]* @sorbet_moduleStringTable, i32 0, i32 0))
  tail call void @sorbet_vm_init_string_table(i64* noundef getelementptr inbounds ([8 x i64], [8 x i64]* @sorbet_moduleRubyStringTable, i32 0, i32 0), %struct.rb_code_position_struct* noundef getelementptr inbounds ([8 x %struct.rb_code_position_struct], [8 x %struct.rb_code_position_struct]* @sorbet_moduleRubyStringDescriptors, i32 0, i32 0), i32 noundef 8, i8* noundef getelementptr inbounds ([166 x i8], [166 x i8]* @sorbet_moduleStringTable, i32 0, i32 0))
  tail call void @sorbet_initLineNumberInfo(%struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i32 0, i32 0), i32 noundef 23)
  tail call fastcc void @"Constr_stackFramePrecomputed_func_<root>.13<static-init>"(i64 %realpath)
  %rubyId_test = load i64, i64* getelementptr inbounds ([9 x i64], [9 x i64]* @sorbet_moduleIDTable, i64 0, i64 1), align 8, !dbg !10, !invariant.load !5
  tail call void (%struct.FunctionInlineCache*, i64, i32, i32, i32, ...) @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_test, i64 %rubyId_test, i32 noundef 16, i32 noundef 0, i32 noundef 0), !dbg !10
  tail call fastcc void @"Constr_stackFramePrecomputed_func_Bad#1!"(i64 %realpath)
  %rubyId_puts = load i64, i64* getelementptr inbounds ([9 x i64], [9 x i64]* @sorbet_moduleIDTable, i64 0, i64 3), align 8, !dbg !15, !invariant.load !5
  tail call void (%struct.FunctionInlineCache*, i64, i32, i32, i32, ...) @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_puts, i64 %rubyId_puts, i32 noundef 20, i32 noundef 1, i32 noundef 0), !dbg !15
  tail call fastcc void @"Constr_stackFramePrecomputed_func_Bad.13<static-init>"(i64 %realpath)
  tail call fastcc void @Constr_stackFramePrecomputed_func_Main.4test(i64 %realpath)
  %"rubyId_!" = load i64, i64* getelementptr inbounds ([9 x i64], [9 x i64]* @sorbet_moduleIDTable, i64 0, i64 2), align 8, !dbg !17, !invariant.load !5
  tail call void (%struct.FunctionInlineCache*, i64, i32, i32, i32, ...) @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @"ic_!", i64 %"rubyId_!", i32 noundef 16, i32 noundef 0, i32 noundef 0), !dbg !17
  tail call void (%struct.FunctionInlineCache*, i64, i32, i32, i32, ...) @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_puts.1, i64 %rubyId_puts, i32 noundef 20, i32 noundef 1, i32 noundef 0), !dbg !19
  tail call void (%struct.FunctionInlineCache*, i64, i32, i32, i32, ...) @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @"ic_!.2", i64 %"rubyId_!", i32 noundef 16, i32 noundef 0, i32 noundef 0), !dbg !20
  tail call void (%struct.FunctionInlineCache*, i64, i32, i32, i32, ...) @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_puts.3, i64 %rubyId_puts, i32 noundef 20, i32 noundef 1, i32 noundef 0), !dbg !21
  tail call void (%struct.FunctionInlineCache*, i64, i32, i32, i32, ...) @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @"ic_!.4", i64 %"rubyId_!", i32 noundef 16, i32 noundef 0, i32 noundef 0), !dbg !22
  tail call void (%struct.FunctionInlineCache*, i64, i32, i32, i32, ...) @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_puts.5, i64 %rubyId_puts, i32 noundef 20, i32 noundef 1, i32 noundef 0), !dbg !23
  tail call void (%struct.FunctionInlineCache*, i64, i32, i32, i32, ...) @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @"ic_!.6", i64 %"rubyId_!", i32 noundef 16, i32 noundef 0, i32 noundef 0), !dbg !24
  tail call void (%struct.FunctionInlineCache*, i64, i32, i32, i32, ...) @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_puts.7, i64 %rubyId_puts, i32 noundef 20, i32 noundef 1, i32 noundef 0), !dbg !25
  %rubyId_new = load i64, i64* getelementptr inbounds ([9 x i64], [9 x i64]* @sorbet_moduleIDTable, i64 0, i64 6), align 8, !dbg !26, !invariant.load !5
  tail call void (%struct.FunctionInlineCache*, i64, i32, i32, i32, ...) @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_new, i64 %rubyId_new, i32 noundef 16, i32 noundef 0, i32 noundef 0), !dbg !26
  %rubyId_initialize = load i64, i64* getelementptr inbounds ([9 x i64], [9 x i64]* @sorbet_moduleIDTable, i64 0, i64 7), align 8, !dbg !26, !invariant.load !5
  tail call void (%struct.FunctionInlineCache*, i64, i32, i32, i32, ...) @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_initialize, i64 %rubyId_initialize, i32 noundef 20, i32 noundef 0, i32 noundef 0), !dbg !26
  tail call void (%struct.FunctionInlineCache*, i64, i32, i32, i32, ...) @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @"ic_!.8", i64 %"rubyId_!", i32 noundef 16, i32 noundef 0, i32 noundef 0), !dbg !27
  tail call void (%struct.FunctionInlineCache*, i64, i32, i32, i32, ...) @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_puts.9, i64 %rubyId_puts, i32 noundef 20, i32 noundef 1, i32 noundef 0), !dbg !28
  tail call fastcc void @"Constr_stackFramePrecomputed_func_Main.13<static-init>"(i64 %realpath)
  ret void
}

; Function Attrs: ssp
define internal fastcc void @"Constr_stackFramePrecomputed_func_<root>.13<static-init>"(i64 %realpath) unnamed_addr #4 {
entryInitializers:
  %"rubyId_<top (required)>" = load i64, i64* getelementptr inbounds ([9 x i64], [9 x i64]* @sorbet_moduleIDTable, i64 0, i64 0), align 8, !invariant.load !5
  %"rubyStr_<top (required)>" = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @sorbet_moduleRubyStringTable, i64 0, i64 0), align 8, !invariant.load !5
  %"rubyStr_test/testdata/compiler/intrinsics/bang.rb" = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @sorbet_moduleRubyStringTable, i64 0, i64 1), align 8, !invariant.load !5
  %locals = alloca i64, i32 0, align 8
  %0 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>", i64 %"rubyId_<top (required)>", i64 %"rubyStr_test/testdata/compiler/intrinsics/bang.rb", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 0, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals, i32 noundef 0, i32 noundef 2)
  store %struct.rb_iseq_struct* %0, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.13<static-init>", align 8
  ret void
}

; Function Attrs: sspreq
define void @Init_bang() local_unnamed_addr #5 {
entry:
  %realpath = tail call i64 @sorbet_readRealpath()
  tail call fastcc void @sorbet_globalConstructors(i64 %realpath)
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !29
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !31
  %stackFrame.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.13<static-init>", align 8
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i, %struct.rb_iseq_struct** %3, align 8, !tbaa !35
  %4 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 4
  %5 = load i64*, i64** %4, align 8, !tbaa !37
  %6 = load i64, i64* %5, align 8, !tbaa !6
  %7 = and i64 %6, -33
  store i64 %7, i64* %5, align 8, !tbaa !6
  tail call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %0, %struct.rb_control_frame_struct* %2, %struct.rb_iseq_struct* %stackFrame.i) #10
  %8 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 0
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %8, align 8, !dbg !38, !tbaa !29
  %9 = load i64, i64* @rb_cObject, align 8, !dbg !39
  %10 = tail call i64 @rb_define_class(i8* getelementptr inbounds ([166 x i8], [166 x i8]* @sorbet_moduleStringTable, i64 0, i64 59), i64 %9) #10, !dbg !39
  %11 = tail call %struct.rb_control_frame_struct* @sorbet_pushStaticInitFrame(i64 %10) #10, !dbg !39
  %stackFrame.i1.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Bad.13<static-init>", align 8
  %12 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !29
  %13 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %12, i64 0, i32 2
  %14 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %13, align 8, !tbaa !31
  %15 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %14, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i1.i, %struct.rb_iseq_struct** %15, align 8, !tbaa !35
  %16 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %14, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8, !tbaa !37
  %18 = load i64, i64* %17, align 8, !tbaa !6
  %19 = and i64 %18, -33
  store i64 %19, i64* %17, align 8, !tbaa !6
  tail call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %12, %struct.rb_control_frame_struct* %14, %struct.rb_iseq_struct* %stackFrame.i1.i) #10
  %20 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %11, i64 0, i32 0
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 6), i64** %20, align 8, !dbg !40, !tbaa !29
  %21 = load i64, i64* @guard_epoch_Bad, align 8, !dbg !43
  %22 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !43, !tbaa !44
  %needTakeSlowPath = icmp ne i64 %21, %22, !dbg !43
  br i1 %needTakeSlowPath, label %23, label %24, !dbg !43, !prof !46

23:                                               ; preds = %entry
  tail call void @const_recompute_Bad(), !dbg !43
  br label %24, !dbg !43

24:                                               ; preds = %entry, %23
  %25 = load i64, i64* @guarded_const_Bad, align 8, !dbg !43
  %26 = load i64, i64* @guard_epoch_Bad, align 8, !dbg !43
  %27 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !43, !tbaa !44
  %guardUpdated = icmp eq i64 %26, %27, !dbg !43
  tail call void @llvm.assume(i1 %guardUpdated), !dbg !43
  %stackFrame7.i2.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Bad#1!", align 8, !dbg !43
  %28 = tail call noalias nonnull i8* @ruby_xcalloc(i64 noundef 1, i64 noundef 64) #11, !dbg !43
  %29 = bitcast i8* %28 to i16*, !dbg !43
  %30 = load i16, i16* %29, align 8, !dbg !43
  %31 = and i16 %30, -384, !dbg !43
  store i16 %31, i16* %29, align 8, !dbg !43
  %32 = getelementptr inbounds i8, i8* %28, i64 4, !dbg !43
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %32, i8 0, i64 28, i1 false) #10, !dbg !43
  tail call void @sorbet_vm_define_method(i64 %25, i8* getelementptr inbounds ([166 x i8], [166 x i8]* @sorbet_moduleStringTable, i64 0, i64 87), i64 (i32, i64*, i64, %struct.rb_control_frame_struct*, i8*, i8*)* noundef @"func_Bad#1!", i8* nonnull %28, %struct.rb_iseq_struct* %stackFrame7.i2.i, i1 noundef zeroext false) #10, !dbg !43
  tail call void @sorbet_popFrame() #10, !dbg !39
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 12), i64** %8, align 8, !dbg !39, !tbaa !29
  %33 = tail call i64 @rb_define_module(i8* getelementptr inbounds ([166 x i8], [166 x i8]* @sorbet_moduleStringTable, i64 0, i64 70)) #10, !dbg !47
  %34 = tail call %struct.rb_control_frame_struct* @sorbet_pushStaticInitFrame(i64 %33) #10, !dbg !47
  %stackFrame.i.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Main.13<static-init>", align 8
  %35 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !29
  %36 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %35, i64 0, i32 2
  %37 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %36, align 8, !tbaa !31
  %38 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %37, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i.i, %struct.rb_iseq_struct** %38, align 8, !tbaa !35
  %39 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %37, i64 0, i32 4
  %40 = load i64*, i64** %39, align 8, !tbaa !37
  %41 = load i64, i64* %40, align 8, !tbaa !6
  %42 = and i64 %41, -33
  store i64 %42, i64* %40, align 8, !tbaa !6
  tail call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %35, %struct.rb_control_frame_struct* %37, %struct.rb_iseq_struct* %stackFrame.i.i) #10
  %43 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %34, i64 0, i32 0
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 13), i64** %43, align 8, !dbg !48, !tbaa !29
  %44 = load i64, i64* @guard_epoch_Main, align 8, !dbg !51
  %45 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !51, !tbaa !44
  %needTakeSlowPath1 = icmp ne i64 %44, %45, !dbg !51
  br i1 %needTakeSlowPath1, label %46, label %47, !dbg !51, !prof !46

46:                                               ; preds = %24
  tail call void @const_recompute_Main(), !dbg !51
  br label %47, !dbg !51

47:                                               ; preds = %24, %46
  %48 = load i64, i64* @guarded_const_Main, align 8, !dbg !51
  %49 = load i64, i64* @guard_epoch_Main, align 8, !dbg !51
  %50 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !51, !tbaa !44
  %guardUpdated2 = icmp eq i64 %49, %50, !dbg !51
  tail call void @llvm.assume(i1 %guardUpdated2), !dbg !51
  %stackFrame7.i.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @stackFramePrecomputed_func_Main.4test, align 8, !dbg !51
  %51 = tail call noalias nonnull i8* @ruby_xcalloc(i64 noundef 1, i64 noundef 64) #11, !dbg !51
  %52 = bitcast i8* %51 to i16*, !dbg !51
  %53 = load i16, i16* %52, align 8, !dbg !51
  %54 = and i16 %53, -384, !dbg !51
  store i16 %54, i16* %52, align 8, !dbg !51
  %55 = getelementptr inbounds i8, i8* %51, i64 4, !dbg !51
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %55, i8 0, i64 28, i1 false) #10, !dbg !51
  tail call void @sorbet_vm_define_method(i64 %48, i8* getelementptr inbounds ([166 x i8], [166 x i8]* @sorbet_moduleStringTable, i64 0, i64 75), i64 (i32, i64*, i64, %struct.rb_control_frame_struct*, i8*, i8*)* noundef @func_Main.4test, i8* nonnull %51, %struct.rb_iseq_struct* %stackFrame7.i.i, i1 noundef zeroext true) #10, !dbg !51
  tail call void @sorbet_popFrame() #10, !dbg !47
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 22), i64** %8, align 8, !dbg !47, !tbaa !29
  %56 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 1, !dbg !10
  %57 = load i64*, i64** %56, align 8, !dbg !10
  store i64 %48, i64* %57, align 8, !dbg !10, !tbaa !6
  %58 = getelementptr inbounds i64, i64* %57, i64 1, !dbg !10
  store i64* %58, i64** %56, align 8, !dbg !10
  %send = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_test, i64 0), !dbg !10
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define internal noundef i64 @"func_Bad#1!"(i32 %argc, i64* nocapture nofree readnone %argArray, i64 %selfRaw, %struct.rb_control_frame_struct* nonnull align 8 dereferenceable(8) %cfp, i8* nocapture nofree readnone %calling, i8* nocapture nofree readnone %callData) #6 !dbg !16 {
functionEntryInitializers:
  %0 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 0
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 6), i64** %0, align 8, !tbaa !29
  %tooManyArgs = icmp ugt i32 %argc, 0, !dbg !52
  br i1 %tooManyArgs, label %argCountFailBlock, label %fillRequiredArgs, !dbg !52, !prof !53

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call void @sorbet_raiseArity(i32 %argc, i32 noundef 0, i32 noundef 0) #12, !dbg !52
  unreachable, !dbg !52

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 7), i64** %0, align 8, !dbg !54, !tbaa !29
  %"rubyStr_bad bang overload" = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @sorbet_moduleRubyStringTable, i64 0, i64 3), align 8, !dbg !55, !invariant.load !5
  %1 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 1, !dbg !15
  %2 = load i64*, i64** %1, align 8, !dbg !15
  store i64 %selfRaw, i64* %2, align 8, !dbg !15, !tbaa !6
  %3 = getelementptr inbounds i64, i64* %2, i64 1, !dbg !15
  store i64 %"rubyStr_bad bang overload", i64* %3, align 8, !dbg !15, !tbaa !6
  %4 = getelementptr inbounds i64, i64* %3, i64 1, !dbg !15
  store i64* %4, i64** %1, align 8, !dbg !15
  %send = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_puts, i64 0), !dbg !15
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 8), i64** %0, align 8, !dbg !15, !tbaa !29
  ret i64 20
}

; Function Attrs: ssp
define internal fastcc void @"Constr_stackFramePrecomputed_func_Bad#1!"(i64 %realpath) unnamed_addr #4 {
entryInitializers:
  %"rubyId_!" = load i64, i64* getelementptr inbounds ([9 x i64], [9 x i64]* @sorbet_moduleIDTable, i64 0, i64 2), align 8, !invariant.load !5
  %"rubyStr_!" = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @sorbet_moduleRubyStringTable, i64 0, i64 2), align 8, !invariant.load !5
  %"rubyStr_test/testdata/compiler/intrinsics/bang.rb" = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @sorbet_moduleRubyStringTable, i64 0, i64 1), align 8, !invariant.load !5
  %locals = alloca i64, i32 0, align 8
  %0 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_!", i64 %"rubyId_!", i64 %"rubyStr_test/testdata/compiler/intrinsics/bang.rb", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 1, i32 noundef 6, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals, i32 noundef 0, i32 noundef 2)
  store %struct.rb_iseq_struct* %0, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Bad#1!", align 8
  ret void
}

; Function Attrs: ssp
define internal fastcc void @"Constr_stackFramePrecomputed_func_Bad.13<static-init>"(i64 %realpath) unnamed_addr #4 {
entryInitializers:
  %"rubyId_<class:Bad>" = load i64, i64* getelementptr inbounds ([9 x i64], [9 x i64]* @sorbet_moduleIDTable, i64 0, i64 4), align 8, !invariant.load !5
  %"rubyStr_<class:Bad>" = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @sorbet_moduleRubyStringTable, i64 0, i64 4), align 8, !invariant.load !5
  %"rubyStr_test/testdata/compiler/intrinsics/bang.rb" = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @sorbet_moduleRubyStringTable, i64 0, i64 1), align 8, !invariant.load !5
  %locals = alloca i64, i32 0, align 8
  %0 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<class:Bad>", i64 %"rubyId_<class:Bad>", i64 %"rubyStr_test/testdata/compiler/intrinsics/bang.rb", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 3, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals, i32 noundef 0, i32 noundef 4)
  store %struct.rb_iseq_struct* %0, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Bad.13<static-init>", align 8
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define internal i64 @func_Main.4test(i32 %argc, i64* nocapture nofree readnone %argArray, i64 %selfRaw, %struct.rb_control_frame_struct* nonnull align 8 dereferenceable(8) %cfp, i8* nocapture nofree readnone %calling, i8* nocapture nofree readnone %callData) #6 !dbg !18 {
functionEntryInitializers:
  %0 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 0
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 13), i64** %0, align 8, !tbaa !29
  %tooManyArgs = icmp ugt i32 %argc, 0, !dbg !56
  br i1 %tooManyArgs, label %argCountFailBlock, label %fillRequiredArgs, !dbg !56, !prof !53

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call void @sorbet_raiseArity(i32 %argc, i32 noundef 0, i32 noundef 0) #12, !dbg !56
  unreachable, !dbg !56

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 14), i64** %0, align 8, !dbg !57, !tbaa !29
  %1 = tail call i64 @sorbet_vm_bang(%struct.FunctionInlineCache* noundef @"ic_!", %struct.rb_control_frame_struct* nonnull align 8 dereferenceable(8) %cfp, i64 noundef 20), !dbg !17
  %2 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 1, !dbg !19
  %3 = load i64*, i64** %2, align 8, !dbg !19
  store i64 %selfRaw, i64* %3, align 8, !dbg !19, !tbaa !6
  %4 = getelementptr inbounds i64, i64* %3, i64 1, !dbg !19
  store i64 %1, i64* %4, align 8, !dbg !19, !tbaa !6
  %5 = getelementptr inbounds i64, i64* %4, i64 1, !dbg !19
  store i64* %5, i64** %2, align 8, !dbg !19
  %send = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_puts.1, i64 0), !dbg !19
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 15), i64** %0, align 8, !dbg !19, !tbaa !29
  %6 = tail call i64 @sorbet_vm_bang(%struct.FunctionInlineCache* noundef @"ic_!.2", %struct.rb_control_frame_struct* nonnull %cfp, i64 noundef 0), !dbg !20
  %7 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 1, !dbg !21
  %8 = load i64*, i64** %7, align 8, !dbg !21
  store i64 %selfRaw, i64* %8, align 8, !dbg !21, !tbaa !6
  %9 = getelementptr inbounds i64, i64* %8, i64 1, !dbg !21
  store i64 %6, i64* %9, align 8, !dbg !21, !tbaa !6
  %10 = getelementptr inbounds i64, i64* %9, i64 1, !dbg !21
  store i64* %10, i64** %7, align 8, !dbg !21
  %send98 = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_puts.3, i64 0), !dbg !21
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 16), i64** %0, align 8, !dbg !21, !tbaa !29
  %11 = tail call i64 @sorbet_vm_bang(%struct.FunctionInlineCache* noundef @"ic_!.4", %struct.rb_control_frame_struct* nonnull %cfp, i64 noundef 8), !dbg !22
  %12 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 1, !dbg !23
  %13 = load i64*, i64** %12, align 8, !dbg !23
  store i64 %selfRaw, i64* %13, align 8, !dbg !23, !tbaa !6
  %14 = getelementptr inbounds i64, i64* %13, i64 1, !dbg !23
  store i64 %11, i64* %14, align 8, !dbg !23, !tbaa !6
  %15 = getelementptr inbounds i64, i64* %14, i64 1, !dbg !23
  store i64* %15, i64** %12, align 8, !dbg !23
  %send100 = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_puts.5, i64 0), !dbg !23
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 17), i64** %0, align 8, !dbg !23, !tbaa !29
  %rubyStr_hello = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @sorbet_moduleRubyStringTable, i64 0, i64 6), align 8, !dbg !58, !invariant.load !5
  %16 = tail call i64 @sorbet_vm_bang(%struct.FunctionInlineCache* noundef @"ic_!.6", %struct.rb_control_frame_struct* nonnull %cfp, i64 %rubyStr_hello), !dbg !24
  %17 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 1, !dbg !25
  %18 = load i64*, i64** %17, align 8, !dbg !25
  store i64 %selfRaw, i64* %18, align 8, !dbg !25, !tbaa !6
  %19 = getelementptr inbounds i64, i64* %18, i64 1, !dbg !25
  store i64 %16, i64* %19, align 8, !dbg !25, !tbaa !6
  %20 = getelementptr inbounds i64, i64* %19, i64 1, !dbg !25
  store i64* %20, i64** %17, align 8, !dbg !25
  %send102 = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_puts.7, i64 0), !dbg !25
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 18), i64** %0, align 8, !dbg !25, !tbaa !29
  %21 = load i64, i64* @guard_epoch_Bad, align 8, !dbg !26
  %22 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !26, !tbaa !44
  %needTakeSlowPath = icmp ne i64 %21, %22, !dbg !26
  br i1 %needTakeSlowPath, label %23, label %24, !dbg !26, !prof !46

23:                                               ; preds = %fillRequiredArgs
  tail call void @const_recompute_Bad(), !dbg !26
  br label %24, !dbg !26

24:                                               ; preds = %fillRequiredArgs, %23
  %25 = load i64, i64* @guarded_const_Bad, align 8, !dbg !26
  %26 = load i64, i64* @guard_epoch_Bad, align 8, !dbg !26
  %27 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !26, !tbaa !44
  %guardUpdated = icmp eq i64 %26, %27, !dbg !26
  tail call void @llvm.assume(i1 %guardUpdated), !dbg !26
  %28 = tail call i64 @sorbet_maybeAllocateObjectFastPath(i64 %25, %struct.FunctionInlineCache* noundef @ic_new), !dbg !26
  %29 = icmp eq i64 %28, 52, !dbg !26
  br i1 %29, label %slowNew, label %fastNew, !dbg !26

slowNew:                                          ; preds = %24
  %30 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 1, !dbg !26
  %31 = load i64*, i64** %30, align 8, !dbg !26
  store i64 %25, i64* %31, align 8, !dbg !26, !tbaa !6
  %32 = getelementptr inbounds i64, i64* %31, i64 1, !dbg !26
  store i64* %32, i64** %30, align 8, !dbg !26
  %33 = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_new, i64 noundef 0), !dbg !26
  br label %afterNew, !dbg !26

fastNew:                                          ; preds = %24
  %34 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 1, !dbg !26
  %35 = load i64*, i64** %34, align 8, !dbg !26
  store i64 %28, i64* %35, align 8, !dbg !26, !tbaa !6
  %36 = getelementptr inbounds i64, i64* %35, i64 1, !dbg !26
  store i64* %36, i64** %34, align 8, !dbg !26
  %37 = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_initialize, i64 noundef 0), !dbg !26
  br label %afterNew, !dbg !26

afterNew:                                         ; preds = %fastNew, %slowNew
  %initializedObject = phi i64 [ %33, %slowNew ], [ %28, %fastNew ], !dbg !26
  %38 = tail call i64 @sorbet_vm_bang(%struct.FunctionInlineCache* noundef @"ic_!.8", %struct.rb_control_frame_struct* nonnull %cfp, i64 %initializedObject), !dbg !27
  %39 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 1, !dbg !28
  %40 = load i64*, i64** %39, align 8, !dbg !28
  store i64 %selfRaw, i64* %40, align 8, !dbg !28, !tbaa !6
  %41 = getelementptr inbounds i64, i64* %40, i64 1, !dbg !28
  store i64 %38, i64* %41, align 8, !dbg !28, !tbaa !6
  %42 = getelementptr inbounds i64, i64* %41, i64 1, !dbg !28
  store i64* %42, i64** %39, align 8, !dbg !28
  %send104 = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_puts.9, i64 0), !dbg !28
  ret i64 %send104
}

; Function Attrs: ssp
define internal fastcc void @Constr_stackFramePrecomputed_func_Main.4test(i64 %realpath) unnamed_addr #4 {
entryInitializers:
  %rubyId_test = load i64, i64* getelementptr inbounds ([9 x i64], [9 x i64]* @sorbet_moduleIDTable, i64 0, i64 1), align 8, !invariant.load !5
  %rubyStr_test = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @sorbet_moduleRubyStringTable, i64 0, i64 5), align 8, !invariant.load !5
  %"rubyStr_test/testdata/compiler/intrinsics/bang.rb" = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @sorbet_moduleRubyStringTable, i64 0, i64 1), align 8, !invariant.load !5
  %locals = alloca i64, i32 0, align 8
  %0 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %rubyStr_test, i64 %rubyId_test, i64 %"rubyStr_test/testdata/compiler/intrinsics/bang.rb", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 1, i32 noundef 13, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals, i32 noundef 0, i32 noundef 2)
  store %struct.rb_iseq_struct* %0, %struct.rb_iseq_struct** @stackFramePrecomputed_func_Main.4test, align 8
  ret void
}

; Function Attrs: ssp
define internal fastcc void @"Constr_stackFramePrecomputed_func_Main.13<static-init>"(i64 %realpath) unnamed_addr #4 {
entryInitializers:
  %"rubyId_<module:Main>" = load i64, i64* getelementptr inbounds ([9 x i64], [9 x i64]* @sorbet_moduleIDTable, i64 0, i64 8), align 8, !invariant.load !5
  %"rubyStr_<module:Main>" = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @sorbet_moduleRubyStringTable, i64 0, i64 7), align 8, !invariant.load !5
  %"rubyStr_test/testdata/compiler/intrinsics/bang.rb" = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @sorbet_moduleRubyStringTable, i64 0, i64 1), align 8, !invariant.load !5
  %locals = alloca i64, i32 0, align 8
  %0 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<module:Main>", i64 %"rubyId_<module:Main>", i64 %"rubyStr_test/testdata/compiler/intrinsics/bang.rb", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 3, i32 noundef 12, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals, i32 noundef 0, i32 noundef 4)
  store %struct.rb_iseq_struct* %0, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Main.13<static-init>", align 8
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

; Function Attrs: nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #8

; Function Attrs: ssp
define linkonce void @const_recompute_Bad() local_unnamed_addr #4 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([166 x i8], [166 x i8]* @sorbet_moduleStringTable, i64 0, i64 59), i64 3)
  store i64 %1, i64* @guarded_const_Bad, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !44
  store i64 %2, i64* @guard_epoch_Bad, align 8
  ret void
}

; Function Attrs: ssp
define linkonce void @const_recompute_Main() local_unnamed_addr #4 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([166 x i8], [166 x i8]* @sorbet_moduleStringTable, i64 0, i64 70), i64 4)
  store i64 %1, i64* @guarded_const_Main, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !44
  store i64 %2, i64* @guard_epoch_Main, align 8
  ret void
}

attributes #0 = { noreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { allocsize(0,1) "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { ssp }
attributes #5 = { sspreq }
attributes #6 = { nounwind sspreq uwtable }
attributes #7 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #8 = { nofree nosync nounwind willreturn }
attributes #9 = { noreturn nounwind }
attributes #10 = { nounwind }
attributes #11 = { nounwind allocsize(0,1) }
attributes #12 = { noreturn }

!llvm.module.flags = !{!0, !1, !2}
!llvm.dbg.cu = !{!3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"cf-protection-return", i32 1}
!2 = !{i32 4, !"cf-protection-branch", i32 1}
!3 = distinct !DICompileUnit(language: DW_LANG_C, file: !4, producer: "Sorbet LLVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !5)
!4 = !DIFile(filename: "test/testdata/compiler/intrinsics/bang.rb", directory: ".")
!5 = !{}
!6 = !{!7, !7, i64 0}
!7 = !{!"long", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = !DILocation(line: 22, column: 1, scope: !11)
!11 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.13<static-init>", scope: null, file: !4, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!12 = !DISubroutineType(types: !13)
!13 = !{!14}
!14 = !DIBasicType(name: "VALUE", size: 64, encoding: DW_ATE_signed)
!15 = !DILocation(line: 7, column: 5, scope: !16)
!16 = distinct !DISubprogram(name: "Bad#!", linkageName: "func_Bad#1!", scope: null, file: !4, line: 6, type: !12, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!17 = !DILocation(line: 14, column: 10, scope: !18)
!18 = distinct !DISubprogram(name: "Main.test", linkageName: "func_Main.4test", scope: null, file: !4, line: 13, type: !12, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!19 = !DILocation(line: 14, column: 5, scope: !18)
!20 = !DILocation(line: 15, column: 10, scope: !18)
!21 = !DILocation(line: 15, column: 5, scope: !18)
!22 = !DILocation(line: 16, column: 10, scope: !18)
!23 = !DILocation(line: 16, column: 5, scope: !18)
!24 = !DILocation(line: 17, column: 10, scope: !18)
!25 = !DILocation(line: 17, column: 5, scope: !18)
!26 = !DILocation(line: 18, column: 11, scope: !18)
!27 = !DILocation(line: 18, column: 10, scope: !18)
!28 = !DILocation(line: 18, column: 5, scope: !18)
!29 = !{!30, !30, i64 0}
!30 = !{!"any pointer", !8, i64 0}
!31 = !{!32, !30, i64 16}
!32 = !{!"rb_execution_context_struct", !30, i64 0, !7, i64 8, !30, i64 16, !30, i64 24, !30, i64 32, !33, i64 40, !33, i64 44, !30, i64 48, !30, i64 56, !30, i64 64, !7, i64 72, !7, i64 80, !30, i64 88, !7, i64 96, !30, i64 104, !30, i64 112, !7, i64 120, !7, i64 128, !8, i64 136, !8, i64 137, !7, i64 144, !34, i64 152}
!33 = !{!"int", !8, i64 0}
!34 = !{!"", !30, i64 0, !30, i64 8, !7, i64 16, !8, i64 24}
!35 = !{!36, !30, i64 16}
!36 = !{!"rb_control_frame_struct", !30, i64 0, !30, i64 8, !30, i64 16, !7, i64 24, !30, i64 32, !30, i64 40, !30, i64 48}
!37 = !{!36, !30, i64 32}
!38 = !DILocation(line: 0, scope: !11)
!39 = !DILocation(line: 5, column: 1, scope: !11)
!40 = !DILocation(line: 0, scope: !41, inlinedAt: !42)
!41 = distinct !DISubprogram(name: "Bad.<static-init>", linkageName: "func_Bad.13<static-init>L62", scope: null, file: !4, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!42 = distinct !DILocation(line: 5, column: 1, scope: !11)
!43 = !DILocation(line: 6, column: 3, scope: !41, inlinedAt: !42)
!44 = !{!45, !45, i64 0}
!45 = !{!"long long", !8, i64 0}
!46 = !{!"branch_weights", i32 1, i32 10000}
!47 = !DILocation(line: 12, column: 1, scope: !11)
!48 = !DILocation(line: 0, scope: !49, inlinedAt: !50)
!49 = distinct !DISubprogram(name: "Main.<static-init>", linkageName: "func_Main.13<static-init>L129", scope: null, file: !4, line: 12, type: !12, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !5)
!50 = distinct !DILocation(line: 12, column: 1, scope: !11)
!51 = !DILocation(line: 13, column: 3, scope: !49, inlinedAt: !50)
!52 = !DILocation(line: 6, column: 3, scope: !16)
!53 = !{!"branch_weights", i32 1, i32 2000}
!54 = !DILocation(line: 0, scope: !16)
!55 = !DILocation(line: 7, column: 10, scope: !16)
!56 = !DILocation(line: 13, column: 3, scope: !18)
!57 = !DILocation(line: 0, scope: !18)
!58 = !DILocation(line: 17, column: 11, scope: !18)
