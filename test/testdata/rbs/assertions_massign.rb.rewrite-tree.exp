class <emptyTree><<C <root>>> < (::<todo sym>)
  begin
    <assignTemp>$2 = <cast:let>(<emptyTree>::<C ARGV>, <todo sym>, ::<root>::<C T>::<C Array>.[](<emptyTree>::<C String>))
    <assignTemp>$3 = ::<Magic>.<expand-splat>(<assignTemp>$2, 1, 0)
    let1 = <assignTemp>$3.[](0)
    let2 = <assignTemp>$3.to_ary()
    <assignTemp>$2
  end

  <emptyTree>::<C T>.reveal_type(let1)

  <emptyTree>::<C T>.reveal_type(let2)

  begin
    <assignTemp>$4 = <cast:let>(<emptyTree>::<C ARGV>, <todo sym>, ::<root>::<C T>::<C Array>.[](<emptyTree>::<C String>))
    <assignTemp>$5 = ::<Magic>.<expand-splat>(<assignTemp>$4, 1, 0)
    let3 = <assignTemp>$5.[](0)
    let4 = <assignTemp>$5.to_ary()
    <assignTemp>$4
  end

  <emptyTree>::<C T>.reveal_type(let3)

  <emptyTree>::<C T>.reveal_type(let4)

  begin
    <assignTemp>$6 = <cast:let>(<emptyTree>::<C ARGV>, <todo sym>, ::<root>::<C T>::<C Array>.[](<emptyTree>::<C String>))
    <assignTemp>$7 = ::<Magic>.<expand-splat>(<assignTemp>$6, 1, 0)
    let5 = <assignTemp>$7.[](0)
    let6 = <assignTemp>$7.to_ary()
    <assignTemp>$6
  end

  <emptyTree>::<C T>.reveal_type(let5)

  <emptyTree>::<C T>.reveal_type(let6)

  <cast:let>(begin
    <assignTemp>$8 = <emptyTree>::<C ARGV>
    <assignTemp>$9 = ::<Magic>.<expand-splat>(<assignTemp>$8, 1, 0)
    let7 = <assignTemp>$9.[](0)
    let8 = <assignTemp>$9.to_ary()
    <assignTemp>$8
  end, <todo sym>, ::<root>::<C T>::<C Array>.[](<emptyTree>::<C String>))

  <emptyTree>::<C T>.reveal_type(let7)

  <emptyTree>::<C T>.reveal_type(let8)
end
