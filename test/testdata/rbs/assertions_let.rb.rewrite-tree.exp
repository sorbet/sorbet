class <emptyTree><<C <root>>> < (::<todo sym>)
  ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
    <self>.returns(::<root>::<C T>::<C Hash>.[](<emptyTree>::<C Symbol>, ::<root>::<C T>.untyped()))
  end

  def foo_params<<todo method>>(&<blk>)
    {}
  end

  e1 = <cast:let>(<emptyTree>::<C ARGV>, <todo sym>, <emptyTree>::<C Integer>)

  e2 = <cast:let>(<emptyTree>::<C ARGV>, <todo sym>, <emptyTree>::<C Integer>)

  e3 = <cast:let>(<emptyTree>::<C ARGV>, <todo sym>, <emptyTree>::<C Int>)

  e4 = <emptyTree>::<C ARGV>

  e5 = <emptyTree>::<C ARGV>

  e6 = <cast:let>(<emptyTree>::<C ARGV>, <todo sym>, <emptyTree>::<C Integer>)

  a = <cast:let>(<emptyTree>::<C ARGV>.first(), <todo sym>, <emptyTree>::<C String>)

  <emptyTree>::<C T>.reveal_type(a)

  b = <cast:let>(nil, <todo sym>, ::<root>::<C T>.nilable(<emptyTree>::<C Integer>))

  <emptyTree>::<C T>.reveal_type(b)

  c = <cast:let>(nil, <todo sym>, ::<root>::<C T>.nilable(<emptyTree>::<C Integer>))

  <emptyTree>::<C T>.reveal_type(c)

  d = <cast:let>(<emptyTree>::<C ARGV>.first().strip(), <todo sym>, <emptyTree>::<C String>)

  <emptyTree>::<C T>.reveal_type(d)

  if e
    e
  else
    e = <cast:let>("foo", <todo sym>, ::<root>::<C T>.nilable(<emptyTree>::<C String>))
  end

  <emptyTree>::<C T>.reveal_type(e)

  f = <cast:let>("", <todo sym>, ::<root>::<C T>.nilable(<emptyTree>::<C String>))

  if f
    f = <cast:let>("foo", <todo sym>, <emptyTree>::<C Integer>)
  else
    f
  end

  <emptyTree>::<C T>.reveal_type(f)

  begin
    <assignTemp>$2 = <cast:let>(<emptyTree>::<C ARGV>, <todo sym>, ::<root>::<C T>::<C Array>.[](<emptyTree>::<C String>))
    <assignTemp>$3 = ::<Magic>.<expand-splat>(<assignTemp>$2, 1, 0)
    g = <assignTemp>$3.[](0)
    h = <assignTemp>$3.to_ary()
    <assignTemp>$2
  end

  <emptyTree>::<C T>.reveal_type(g)

  <emptyTree>::<C T>.reveal_type(h)

  i = <cast:let>("#: Integer", <todo sym>, <emptyTree>::<C String>)

  <emptyTree>::<C T>.reveal_type(i)

  j = <cast:let>(42, <todo sym>, <emptyTree>::<C Integer>)

  j = j.+(<cast:let>("", <todo sym>, <emptyTree>::<C String>))

  <emptyTree>::<C T>.reveal_type(j)

  <emptyTree>::<C A> = <cast:let>(<emptyTree>::<C ARGV>.first(), <todo sym>, <emptyTree>::<C String>)

  <emptyTree>::<C T>.reveal_type(<emptyTree>::<C A>)

  <emptyTree>::<C B> = <cast:let>(<emptyTree>::<C T>.must("foo".[](0)), <todo sym>, <emptyTree>::<C String>)

  <emptyTree>::<C T>.reveal_type(<emptyTree>::<C B>)

  @a = <cast:let>(<emptyTree>::<C ARGV>.first(), <todo sym>, <emptyTree>::<C String>)

  <emptyTree>::<C T>.reveal_type(@a)

  @b = <cast:let>(begin
    ||$4 = <emptyTree>::<C ARGV>.first()
    if ||$4
      ||$4
    else
      []
    end
  end, <todo sym>, ::<root>::<C T>::<C Array>.[](<emptyTree>::<C String>))

  <emptyTree>::<C T>.reveal_type(@b)

  @c = <cast:let>(begin
    <assignTemp>$5 = <emptyTree>::<C ARGV>.first()
    if ::NilClass.===(<assignTemp>$5)
      ::<Magic>.<nil-for-safe-navigation>(<assignTemp>$5)
    else
      <assignTemp>$5.strip()
    end
  end, <todo sym>, ::<root>::<C T>.nilable(<emptyTree>::<C String>))

  <emptyTree>::<C T>.reveal_type(@c)

  @@a = <cast:let>(1, <todo sym>, <emptyTree>::<C Integer>)

  <emptyTree>::<C T>.reveal_type(@@a)

  $a = <cast:let>(<emptyTree>::<C ARGV>.first(), <todo sym>, <emptyTree>::<C String>)

  <emptyTree>::<C T>.reveal_type($a)

  class <emptyTree>::<C LetAccessor><<C <todo sym>>> < (::<todo sym>)
    ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
      <self>.returns(<emptyTree>::<C Integer>)
    end

    def x<<todo method>>(&<blk>)
      @x
    end

    ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
      <self>.params(:x, <emptyTree>::<C Integer>).returns(<emptyTree>::<C Integer>)
    end

    def x=<<todo method>>(x, &<blk>)
      @x = x
    end

    ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
      <self>.params(:something, ::<root>::<C T>.untyped()).void()
    end

    def initialize<<todo method>>(something, &<blk>)
      begin
        @x = <cast:let>(something.num(), <todo sym>, <emptyTree>::<C Integer>)
        <emptyTree>::<C T>.reveal_type(@x)
        <emptyTree>::<C T>.reveal_type(<self>.x())
      end
    end

    <runtime method definition of x>

    <runtime method definition of x=>

    <runtime method definition of initialize>
  end

  class <emptyTree>::<C DesugaredLetNilable><<C <todo sym>>> < (::<todo sym>)
    ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
      <self>.returns(<emptyTree>::<C Integer>)
    end

    def foo<<todo method>>(&<blk>)
      begin
        if @x
          @x
        else
          begin
            @x = <cast:let>(@x, <todo sym>, ::<root>::<C T>.nilable(<emptyTree>::<C Integer>))
            <statTemp>$2 = 42
            @x = <statTemp>$2
          end
        end
        <emptyTree>::<C T>.reveal_type(@x)
      end
    end

    ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
      <self>.void()
    end

    def bar<<todo method>>(&<blk>)
      begin
        if @y
          @y
        else
          begin
            @y = <cast:let>(@y, <todo sym>, ::<root>::<C T>.nilable(<emptyTree>::<C Integer>))
            <statTemp>$2 = nil
            @y = <statTemp>$2
          end
        end
        if @y
          @y
        else
          @y = 42
        end
        <emptyTree>::<C T>.reveal_type(@y)
      end
    end

    ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
      <self>.void()
    end

    def baz<<todo method>>(&<blk>)
      begin
        <emptyTree>::<C T>.reveal_type(@x)
        <emptyTree>::<C T>.reveal_type(@y)
      end
    end

    <runtime method definition of foo>

    <runtime method definition of bar>

    <runtime method definition of baz>
  end

  class <emptyTree>::<C TypeParams><<C <todo sym>>> < (::<todo sym>)
    ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
      <self>.type_parameters(:A, :B, :C).params(:a, ::<root>::<C T>.type_parameter(:A), :b, ::<root>::<C T>.nilable(::<root>::<C T>.type_parameter(:B)), :c, ::<root>::<C T>.type_parameter(:C)).void()
    end

    def foo<<todo method>>(a, b, c, &<blk>)
      begin
        x = <cast:let>(a, <todo sym>, ::<root>::<C T>.type_parameter(:A))
        <emptyTree>::<C T>.reveal_type(x)
        y = <cast:let>([], <todo sym>, ::<root>::<C T>::<C Array>.[](::<root>::<C T>.type_parameter(:B)))
        <emptyTree>::<C T>.reveal_type(y)
        z = <cast:let>(nil, <todo sym>, ::<root>::<C T>.nilable(::<root>::<C T>.type_parameter(:C)))
        <emptyTree>::<C T>.reveal_type(z)
      end
    end

    <runtime method definition of foo>
  end

  <emptyTree>::<C HEREDOC_ERROR> = "#: Integer\n".strip()

  <emptyTree>::<C HEREDOC_STRING> = "<<~ #: Integer".strip()

  <emptyTree>::<C HEREDOC1> = <cast:let>("foo\n", <todo sym>, ::<root>::<C T>.nilable(<emptyTree>::<C String>))

  <emptyTree>::<C T>.reveal_type(<emptyTree>::<C HEREDOC1>)

  <emptyTree>::<C HEREDOC2> = <cast:let>(::<Magic>.<string-interpolate>(42, "\n").strip().strip(), <todo sym>, ::<root>::<C T>.nilable(<emptyTree>::<C String>))

  <emptyTree>::<C T>.reveal_type(<emptyTree>::<C HEREDOC2>)

  <emptyTree>::<C HEREDOC3> = <cast:let>(<self>.String("foo\n".strip()), <todo sym>, ::<root>::<C T>.nilable(<emptyTree>::<C String>))

  <emptyTree>::<C T>.reveal_type(<emptyTree>::<C HEREDOC3>)

  <emptyTree>::<C HEREDOC4> = <cast:let>("foo\nbar\nbaz\n", <todo sym>, ::<root>::<C T>.nilable(<emptyTree>::<C String>))

  <emptyTree>::<C T>.reveal_type(<emptyTree>::<C HEREDOC4>)

  class <emptyTree>::<C Foo><<C <todo sym>>> < (::<todo sym>)
    ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
      <self>.params(:x, ::<root>::<C T>.untyped()).void()
    end

    def initialize<<todo method>>(x, &<blk>)
      @x = <cast:let>(x, <todo sym>, ::<root>::<C T>.untyped())
    end

    <runtime method definition of initialize>
  end

  <runtime method definition of foo_params>

  foo = <cast:let>(<emptyTree>::<C Foo>.new(begin
      <hashTemp>$6 = ::<Magic>.<to-hash-dup>(<self>.foo_params())
      <hashTemp>$6
    end), <todo sym>, ::<root>::<C T>.nilable(<emptyTree>::<C Foo>))
end
