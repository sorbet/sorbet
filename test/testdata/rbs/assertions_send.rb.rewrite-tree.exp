class <emptyTree><<C <root>>> < (::<todo sym>)
  <cast:cast>(<self>.puts(), <todo sym>, <emptyTree>::<C String>)

  <cast:cast>(<emptyTree>::<C ARGV>.first(), <todo sym>, <emptyTree>::<C String>)

  <cast:cast>(<emptyTree>::<C ARGV>, <todo sym>, <emptyTree>::<C Integer>).first()

  <cast:cast>(<self>.puts(<cast:cast>(<emptyTree>::<C ARGV>.first(), <todo sym>, <emptyTree>::<C String>)), <todo sym>, <emptyTree>::<C String>)

  <self>.puts(<cast:cast>(42, <todo sym>, <emptyTree>::<C String>))

  <self>.puts(<cast:cast>(42, <todo sym>, <emptyTree>::<C String>), <cast:cast>(42, <todo sym>, <emptyTree>::<C String>))

  arr_nil = <cast:let>(nil, <todo sym>, ::<root>::<C T>.nilable(::<root>::<C T>::<C Array>.[](::<root>::<C T>.untyped())))

  ::<Magic>.<call-with-splat>(<emptyTree>::<C T>.unsafe(<self>), :puts, ::<Magic>.<splat>(::<root>::<C T>.must(arr_nil)).concat(::<Magic>.<splat>(::<root>::<C T>.must(arr_nil))), nil)

  hash_nil = <cast:let>(nil, <todo sym>, ::<root>::<C T>.nilable(::<root>::<C T>::<C Hash>.[](::<root>::<C T>.untyped(), ::<root>::<C T>.untyped())))

  <self>.puts(begin
      <hashTemp>$2 = ::<Magic>.<to-hash-dup>(::<root>::<C T>.must(hash_nil))
      <hashTemp>$2 = ::<Magic>.<merge-hash>(<hashTemp>$2, ::<Magic>.<to-hash-nodup>(::<root>::<C T>.must(hash_nil)))
      <hashTemp>$2
    end)

  <cast:cast>(<emptyTree>::<C ARGV>.first(), <todo sym>, <emptyTree>::<C Integer>)

  <cast:cast>(<cast:cast>(<emptyTree>::<C ARGV>, <todo sym>, <emptyTree>::<C Integer>).first(), <todo sym>, <emptyTree>::<C Integer>)

  <cast:cast>(<cast:cast>(<emptyTree>::<C ARGV>, <todo sym>, <emptyTree>::<C Integer>).first(), <todo sym>, <emptyTree>::<C String>).last()
end
