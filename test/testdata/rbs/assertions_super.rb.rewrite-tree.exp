class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C Foo><<C <todo sym>>> < (::<todo sym>)
    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params(:x, <emptyTree>::<C Integer>, :y, <emptyTree>::<C String>).returns(<emptyTree>::<C String>)
    end

    def foo<<todo method>>(x, y, &<blk>)
      y.*(x)
    end

    <runtime method definition of foo>
  end

  class <emptyTree>::<C Bar><<C <todo sym>>> < (<emptyTree>::<C Foo>)
    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.override().params(:x, <emptyTree>::<C Integer>, :y, <emptyTree>::<C String>).returns(<emptyTree>::<C String>)
    end

    def foo<<todo method>>(x, y, &<blk>)
      <cast:cast>(<self>.<super>(<cast:cast>(<emptyTree>::<C ARGV>.first(), <todo sym>, <emptyTree>::<C String>), <cast:cast>(<emptyTree>::<C ARGV>.last(), <todo sym>, <emptyTree>::<C Integer>)), <todo sym>, <emptyTree>::<C Integer>)
    end

    <runtime method definition of foo>
  end

  class <emptyTree>::<C Baz><<C <todo sym>>> < (<emptyTree>::<C Foo>)
    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.override().params(:x, <emptyTree>::<C Integer>, :y, <emptyTree>::<C String>).returns(<emptyTree>::<C String>)
    end

    def foo<<todo method>>(x, y, &<blk>)
      ::<Magic>.<call-with-splat>(<self>, :<super>, ::<Magic>.<splat>([<cast:cast>(<emptyTree>::<C ARGV>.first(), <todo sym>, <emptyTree>::<C Integer>), <cast:cast>(<emptyTree>::<C ARGV>.last(), <todo sym>, <emptyTree>::<C String>)]), nil)
    end

    <runtime method definition of foo>
  end

  class <emptyTree>::<C Qux><<C <todo sym>>> < (<emptyTree>::<C Foo>)
    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.override().params(:x, <emptyTree>::<C Integer>, :y, <emptyTree>::<C String>).returns(<emptyTree>::<C String>)
    end

    def foo<<todo method>>(x, y, &<blk>)
      <cast:cast>(<self>.<super>(<emptyTree>::<C ARGV>.first(), <emptyTree>::<C ARGV>.last()), <todo sym>, <emptyTree>::<C Integer>)
    end

    <runtime method definition of foo>
  end
end
