class <emptyTree><<C <root>>> < (::<todo sym>)
  while <emptyTree>::<C ARGV>.empty?().!()
    <cast:cast>(<emptyTree>::<C ARGV>.shift(), <todo sym>, <emptyTree>::<C String>)
  end

  while <emptyTree>::<C ARGV>.empty?().!()
    begin
      x = <cast:let>(<emptyTree>::<C ARGV>.shift(), <todo sym>, ::<root>::<C T>.nilable(<emptyTree>::<C String>))
      <self>.puts(x)
      ::<root>::<C T>.must(x)
    end
  end

  y = <cast:let>(while <emptyTree>::<C ARGV>.empty?().!()
    <cast:cast>(<emptyTree>::<C ARGV>.shift(), <todo sym>, <emptyTree>::<C String>)
  end, <todo sym>, ::<root>::<C T>.nilable(<emptyTree>::<C String>))

  <emptyTree>::<C T>.reveal_type(y)

  <cast:let>(while <emptyTree>::<C ARGV>.empty?().!()
    <emptyTree>
  end, <todo sym>, ::<root>::<C T>.nilable(<emptyTree>::<C String>))

  while <cast:cast>(<emptyTree>::<C ARGV>.shift(), <todo sym>, <emptyTree>::<C String>).!()
    <emptyTree>
  end

  while true
    begin
      <cast:cast>(<emptyTree>::<C ARGV>.shift(), <todo sym>, <emptyTree>::<C String>)
      if <emptyTree>::<C ARGV>.any?()
        break(<emptyTree>)
      else
        <emptyTree>
      end
    end
  end

  while true
    if ::<root>::<C T>.must(<emptyTree>::<C ARGV>.shift())
      break(<emptyTree>)
    else
      <emptyTree>
    end
  end
end
