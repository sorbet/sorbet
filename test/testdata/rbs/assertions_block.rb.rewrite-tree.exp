class <emptyTree><<C <root>>> < (::<todo sym>)
  ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
    <self>.params(:args, ::<root>::<C T>.untyped(), :&, ::<root>::<C T>.proc().params(:arg0, ::<root>::<C T>.nilable(<emptyTree>::<C String>)).returns(<emptyTree>::<C String>)).returns(::<root>::<C T>.untyped())
  end

  def take_block<<todo method>>(*args, &&$2)
    <emptyTree>
  end

  <runtime method definition of take_block>

  <self>.take_block() do |x|
    <cast:cast>(x, <todo sym>, <emptyTree>::<C String>)
  end

  <self>.take_block() do |x|
    begin
      <self>.puts(x)
      <cast:cast>(x, <todo sym>, <emptyTree>::<C String>)
    end
  end

  <self>.take_block() do |x|
    <cast:cast>(x, <todo sym>, <emptyTree>::<C String>)
  end

  <self>.take_block() do |x|
    begin
      <self>.puts(x)
      <cast:cast>(x, <todo sym>, <emptyTree>::<C String>)
    end
  end

  <self>.take_block() do |x|
    <cast:cast>(x, <todo sym>, <emptyTree>::<C String>)
  end.to_s()

  <self>.take_block() do |x|
    <cast:cast>(x, <todo sym>, <emptyTree>::<C String>)
  end.take_block() do |x|
    <cast:cast>(x, <todo sym>, <emptyTree>::<C String>)
  end.to_s()

  <self>.take_block(<cast:cast>(42, <todo sym>, <emptyTree>::<C String>)) do |x|
    <cast:cast>(x, <todo sym>, <emptyTree>::<C String>)
  end

  b1 = <cast:cast>(<self>.take_block() do ||
    1
  end, <todo sym>, <emptyTree>::<C String>)

  <emptyTree>::<C T>.reveal_type(b1)

  b2 = <cast:cast>(<self>.take_block() do ||
    1
  end, <todo sym>, <emptyTree>::<C String>)

  <emptyTree>::<C T>.reveal_type(b2)

  b3 = <cast:cast>(<self>.take_block() do ||
    1
  end, <todo sym>, <emptyTree>::<C String>)

  <emptyTree>::<C T>.reveal_type(b3)

  b4 = <cast:cast>(<self>.take_block() do |x|
    ::<root>::<C T>.must(x)
  end, <todo sym>, ::<root>::<C T>.nilable(<emptyTree>::<C Integer>))

  <emptyTree>::<C T>.reveal_type(b4)

  if b5
    b5
  else
    b5 = <cast:let>(<self>.take_block() do |x|
      ::<root>::<C T>.must(x)
    end, <todo sym>, ::<root>::<C T>.nilable(<emptyTree>::<C Integer>))
  end

  <emptyTree>::<C T>.reveal_type(b5)

  b6 = <cast:let>(42, <todo sym>, <emptyTree>::<C Integer>)

  if b6
    b6 = <cast:let>(<self>.take_block() do |x|
      ::<root>::<C T>.must(x)
    end, <todo sym>, <emptyTree>::<C String>)
  else
    b6
  end

  <emptyTree>::<C T>.reveal_type(b6)

  b7 = <cast:let>(42, <todo sym>, <emptyTree>::<C Integer>)

  b7 = b7.+(<cast:let>(<self>.take_block() do |x|
      ::<root>::<C T>.must(x)
    end, <todo sym>, <emptyTree>::<C String>))

  <emptyTree>::<C T>.reveal_type(b7)
end
