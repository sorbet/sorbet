class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C Parent><<C <todo sym>>> < (::<todo sym>)
    def takes_positional<<todo method>>(arg0, &<blk>)
      <self>.p(arg0)
    end

    def takes_keyword<<todo method>>(arg0:, &<blk>)
      <self>.p(arg0)
    end

    def takes_two_keyword<<todo method>>(arg0:, arg1:, &<blk>)
      begin
        <self>.p(arg0)
        <self>.p(arg1)
      end
    end

    def takes_positional_then_keyword<<todo method>>(arg0, arg1:, &<blk>)
      begin
        <self>.p(arg0)
        <self>.p(arg1)
      end
    end

    def takes_rest<<todo method>>(*args, &<blk>)
      <self>.p(args)
    end

    def takes_keyword_rest<<todo method>>(*args:, &<blk>)
      <self>.p(args)
    end

    def takes_block<<todo method>>(&blk)
      <self>.p(blk)
    end

    ::Sorbet::Private::Static.keep_def(<self>, :takes_positional, :normal)

    ::Sorbet::Private::Static.keep_def(<self>, :takes_keyword, :normal)

    ::Sorbet::Private::Static.keep_def(<self>, :takes_two_keyword, :normal)

    ::Sorbet::Private::Static.keep_def(<self>, :takes_positional_then_keyword, :normal)

    ::Sorbet::Private::Static.keep_def(<self>, :takes_rest, :normal)

    ::Sorbet::Private::Static.keep_def(<self>, :takes_keyword_rest, :normal)

    ::Sorbet::Private::Static.keep_def(<self>, :takes_block, :normal)
  end

  class <emptyTree>::<C Child><<C <todo sym>>> < (<emptyTree>::<C Parent>)
    def takes_positional<<todo method>>(arg0, &<blk>)
      ::<Magic>.<call-with-block>(<self>, :<super>, <blk>, arg0)
    end

    def takes_keyword<<todo method>>(arg0:, &<blk>)
      ::<Magic>.<call-with-block>(<self>, :<super>, <blk>, :arg0, arg0)
    end

    def takes_two_keyword<<todo method>>(arg0:, arg1:, &<blk>)
      ::<Magic>.<call-with-block>(<self>, :<super>, <blk>, :arg0, arg0, :arg1, arg1)
    end

    def takes_positional_then_keyword<<todo method>>(arg0, arg1:, &<blk>)
      ::<Magic>.<call-with-block>(<self>, :<super>, <blk>, arg0, :arg1, arg1)
    end

    def takes_rest<<todo method>>(*args, &<blk>)
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :<super>, ::<Magic>.<splat>(args), nil, <blk>)
    end

    def takes_keyword_rest<<todo method>>(*args:, &<blk>)
      ::<Magic>.<call-with-block>(<self>, :<super>, <blk>, ::<Magic>.<to-hash-dup>(args))
    end

    def takes_block<<todo method>>(&blk)
      ::<Magic>.<call-with-block>(<self>, :<super>, blk)
    end

    ::Sorbet::Private::Static.keep_def(<self>, :takes_positional, :normal)

    ::Sorbet::Private::Static.keep_def(<self>, :takes_keyword, :normal)

    ::Sorbet::Private::Static.keep_def(<self>, :takes_two_keyword, :normal)

    ::Sorbet::Private::Static.keep_def(<self>, :takes_positional_then_keyword, :normal)

    ::Sorbet::Private::Static.keep_def(<self>, :takes_rest, :normal)

    ::Sorbet::Private::Static.keep_def(<self>, :takes_keyword_rest, :normal)

    ::Sorbet::Private::Static.keep_def(<self>, :takes_block, :normal)
  end
end
