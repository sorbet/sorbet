ClassDef{
  kind = class
  name = EmptyTree
  symbol = <C <U <root>>>
  ancestors = [ConstantLit{
      symbol = (class ::<todo sym>)
      orig = nullptr
    }]
  rhs = [
    ClassDef{
      kind = class
      name = UnresolvedConstantLit{
        cnst = <C <U Parent>>
        scope = EmptyTree
      }
      symbol = <C <U <todo sym>>>
      ancestors = [ConstantLit{
          symbol = (class ::<todo sym>)
          orig = nullptr
        }]
      rhs = [
        MethodDef{
          flags = {}
          name = <U takes_positional><<U <todo method>>>
          args = [Local{
              localVariable = <U arg0>
            }, BlockArg{ expr = Local{
              localVariable = <U <blk>>
            } }]
          rhs = Send{
            flags = {privateOk}
            recv = Local{
              localVariable = <U <self>>
            }
            fun = <U p>
            block = nullptr
            pos_args = 1
            args = [
              Local{
                localVariable = <U arg0>
              }
            ]
          }
        }

        MethodDef{
          flags = {}
          name = <U takes_keyword><<U <todo method>>>
          args = [KeywordArg{ expr = Local{
              localVariable = <U arg0>
            } }, BlockArg{ expr = Local{
              localVariable = <U <blk>>
            } }]
          rhs = Send{
            flags = {privateOk}
            recv = Local{
              localVariable = <U <self>>
            }
            fun = <U p>
            block = nullptr
            pos_args = 1
            args = [
              Local{
                localVariable = <U arg0>
              }
            ]
          }
        }

        MethodDef{
          flags = {}
          name = <U takes_two_keyword><<U <todo method>>>
          args = [KeywordArg{ expr = Local{
              localVariable = <U arg0>
            } }, KeywordArg{ expr = Local{
              localVariable = <U arg1>
            } }, BlockArg{ expr = Local{
              localVariable = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Send{
                flags = {privateOk}
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U p>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U arg0>
                  }
                ]
              }
            ],
            expr = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U p>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U arg1>
                }
              ]
            }
          }
        }

        MethodDef{
          flags = {}
          name = <U takes_positional_then_keyword><<U <todo method>>>
          args = [Local{
              localVariable = <U arg0>
            }, KeywordArg{ expr = Local{
              localVariable = <U arg1>
            } }, BlockArg{ expr = Local{
              localVariable = <U <blk>>
            } }]
          rhs = InsSeq{
            stats = [
              Send{
                flags = {privateOk}
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U p>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U arg0>
                  }
                ]
              }
            ],
            expr = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U p>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U arg1>
                }
              ]
            }
          }
        }

        MethodDef{
          flags = {}
          name = <U takes_rest><<U <todo method>>>
          args = [RestArg{ expr = Local{
              localVariable = <U args>
            } }, BlockArg{ expr = Local{
              localVariable = <U <blk>>
            } }]
          rhs = Send{
            flags = {privateOk}
            recv = Local{
              localVariable = <U <self>>
            }
            fun = <U p>
            block = nullptr
            pos_args = 1
            args = [
              Local{
                localVariable = <U args>
              }
            ]
          }
        }

        MethodDef{
          flags = {}
          name = <U takes_keyword_rest><<U <todo method>>>
          args = [RestArg{ expr = KeywordArg{ expr = Local{
              localVariable = <U args>
            } } }, BlockArg{ expr = Local{
              localVariable = <U <blk>>
            } }]
          rhs = Send{
            flags = {privateOk}
            recv = Local{
              localVariable = <U <self>>
            }
            fun = <U p>
            block = nullptr
            pos_args = 1
            args = [
              Local{
                localVariable = <U args>
              }
            ]
          }
        }

        MethodDef{
          flags = {}
          name = <U takes_block><<U <todo method>>>
          args = [BlockArg{ expr = Local{
              localVariable = <U blk>
            } }]
          rhs = Send{
            flags = {privateOk}
            recv = Local{
              localVariable = <U <self>>
            }
            fun = <U p>
            block = nullptr
            pos_args = 1
            args = [
              Local{
                localVariable = <U blk>
              }
            ]
          }
        }

        MethodDef{
          flags = {}
          name = <U zsuper_inside_block><<U <todo method>>>
          args = [BlockArg{ expr = Local{
              localVariable = <U <blk>>
            } }]
          rhs = EmptyTree
        }

        <runtime method definition of takes_positional>

        <runtime method definition of takes_keyword>

        <runtime method definition of takes_two_keyword>

        <runtime method definition of takes_positional_then_keyword>

        <runtime method definition of takes_rest>

        <runtime method definition of takes_keyword_rest>

        <runtime method definition of takes_block>

        <runtime method definition of zsuper_inside_block>
      ]
    }

    ClassDef{
      kind = class
      name = UnresolvedConstantLit{
        cnst = <C <U Child>>
        scope = EmptyTree
      }
      symbol = <C <U <todo sym>>>
      ancestors = [UnresolvedConstantLit{
          cnst = <C <U Parent>>
          scope = EmptyTree
        }]
      rhs = [
        MethodDef{
          flags = {}
          name = <U takes_positional><<U <todo method>>>
          args = [Local{
              localVariable = <U arg0>
            }, BlockArg{ expr = Local{
              localVariable = <U <blk>>
            } }]
          rhs = Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-block>>
            block = nullptr
            pos_args = 4
            args = [
              Local{
                localVariable = <U <self>>
              }
              Literal{ value = :<super> }
              Local{
                localVariable = <U <blk>>
              }
              Local{
                localVariable = <U arg0>
              }
            ]
          }
        }

        MethodDef{
          flags = {}
          name = <U takes_keyword><<U <todo method>>>
          args = [KeywordArg{ expr = Local{
              localVariable = <U arg0>
            } }, BlockArg{ expr = Local{
              localVariable = <U <blk>>
            } }]
          rhs = Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-block>>
            block = nullptr
            pos_args = 3
            args = [
              Local{
                localVariable = <U <self>>
              }
              Literal{ value = :<super> }
              Local{
                localVariable = <U <blk>>
              }
              Literal{ value = :arg0 }
              Local{
                localVariable = <U arg0>
              }
            ]
          }
        }

        MethodDef{
          flags = {}
          name = <U takes_two_keyword><<U <todo method>>>
          args = [KeywordArg{ expr = Local{
              localVariable = <U arg0>
            } }, KeywordArg{ expr = Local{
              localVariable = <U arg1>
            } }, BlockArg{ expr = Local{
              localVariable = <U <blk>>
            } }]
          rhs = Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-block>>
            block = nullptr
            pos_args = 3
            args = [
              Local{
                localVariable = <U <self>>
              }
              Literal{ value = :<super> }
              Local{
                localVariable = <U <blk>>
              }
              Literal{ value = :arg0 }
              Local{
                localVariable = <U arg0>
              }
              Literal{ value = :arg1 }
              Local{
                localVariable = <U arg1>
              }
            ]
          }
        }

        MethodDef{
          flags = {}
          name = <U takes_positional_then_keyword><<U <todo method>>>
          args = [Local{
              localVariable = <U arg0>
            }, KeywordArg{ expr = Local{
              localVariable = <U arg1>
            } }, BlockArg{ expr = Local{
              localVariable = <U <blk>>
            } }]
          rhs = Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-block>>
            block = nullptr
            pos_args = 4
            args = [
              Local{
                localVariable = <U <self>>
              }
              Literal{ value = :<super> }
              Local{
                localVariable = <U <blk>>
              }
              Local{
                localVariable = <U arg0>
              }
              Literal{ value = :arg1 }
              Local{
                localVariable = <U arg1>
              }
            ]
          }
        }

        MethodDef{
          flags = {}
          name = <U takes_rest><<U <todo method>>>
          args = [RestArg{ expr = Local{
              localVariable = <U args>
            } }, BlockArg{ expr = Local{
              localVariable = <U <blk>>
            } }]
          rhs = Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<super> }
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <splat>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U args>
                  }
                ]
              }
              Literal{ value = nil }
              Local{
                localVariable = <U <blk>>
              }
            ]
          }
        }

        MethodDef{
          flags = {}
          name = <U takes_keyword_rest><<U <todo method>>>
          args = [RestArg{ expr = KeywordArg{ expr = Local{
              localVariable = <U args>
            } } }, BlockArg{ expr = Local{
              localVariable = <U <blk>>
            } }]
          rhs = Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-block>>
            block = nullptr
            pos_args = 3
            args = [
              Local{
                localVariable = <U <self>>
              }
              Literal{ value = :<super> }
              Local{
                localVariable = <U <blk>>
              }
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <to-hash-dup>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U args>
                  }
                ]
              }
            ]
          }
        }

        MethodDef{
          flags = {}
          name = <U takes_block><<U <todo method>>>
          args = [BlockArg{ expr = Local{
              localVariable = <U blk>
            } }]
          rhs = Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-block>>
            block = nullptr
            pos_args = 3
            args = [
              Local{
                localVariable = <U <self>>
              }
              Literal{ value = :<super> }
              Local{
                localVariable = <U blk>
              }
            ]
          }
        }

        MethodDef{
          flags = {}
          name = <U zsuper_inside_block><<U <todo method>>>
          args = [BlockArg{ expr = Local{
              localVariable = <U <blk>>
            } }]
          rhs = Send{
            flags = {}
            recv = Literal{ value = 1 }
            fun = <U times>
            block = Block {
              args = [
                Local{
                  localVariable = <U i>$1
                }
              ]
              body = Send{
                flags = {privateOk}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <call-with-block>>
                block = nullptr
                pos_args = 3
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :<untypedSuper> }
                  Local{
                    localVariable = <U <blk>>
                  }
                ]
              }
            }
            pos_args = 0
            args = [
            ]
          }
        }

        <runtime method definition of takes_positional>

        <runtime method definition of takes_keyword>

        <runtime method definition of takes_two_keyword>

        <runtime method definition of takes_positional_then_keyword>

        <runtime method definition of takes_rest>

        <runtime method definition of takes_keyword_rest>

        <runtime method definition of takes_block>

        <runtime method definition of zsuper_inside_block>
      ]
    }

    ClassDef{
      kind = module
      name = UnresolvedConstantLit{
        cnst = <C <U M>>
        scope = EmptyTree
      }
      symbol = <C <U <todo sym>>>
      ancestors = []
      rhs = [
        MethodDef{
          flags = {}
          name = <U super_inside_module><<U <todo method>>>
          args = [BlockArg{ expr = Local{
              localVariable = <U <blk>>
            } }]
          rhs = Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-block>>
            block = nullptr
            pos_args = 3
            args = [
              Local{
                localVariable = <U <self>>
              }
              Literal{ value = :<untypedSuper> }
              Local{
                localVariable = <U <blk>>
              }
            ]
          }
        }

        <runtime method definition of super_inside_module>
      ]
    }
  ]
}
