class <emptyTree><<C <root>>> < (::<todo sym>)
  def pos<<todo method>>(x, y, z, &<blk>)
    begin
      ::<Magic>.<call-with-block>(::T.unsafe(<self>), :super, <blk>, x, y, z)
      <self>.super(x, y, z) do ||
        <self>.puts("hi")
      end
    end
  end

  def possplat<<todo method>>(*foo, &<blk>)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo), nil, <blk>)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo), nil) do ||
        <self>.puts("hi")
      end
    end
  end

  def possplat_pos<<todo method>>(*foo, p, q, &<blk>)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo).concat([p, q]), nil, <blk>)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo).concat([p, q]), nil) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_possplat<<todo method>>(x, y, z, *foo, &<blk>)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)), nil, <blk>)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)), nil) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_possplat_pos<<todo method>>(x, y, z, *foo, p, q, &<blk>)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)).concat([p, q]), nil, <blk>)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)).concat([p, q]), nil) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_blk<<todo method>>(x, y, z, &blk)
    begin
      ::<Magic>.<call-with-block>(::T.unsafe(<self>), :super, blk, x, y, z)
      <self>.super(x, y, z) do ||
        <self>.puts("hi")
      end
    end
  end

  def possplat_blk<<todo method>>(*foo, &blk)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo), nil, blk)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo), nil) do ||
        <self>.puts("hi")
      end
    end
  end

  def possplat_pos_blk<<todo method>>(*foo, p, q, &blk)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo).concat([p, q]), nil, blk)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo).concat([p, q]), nil) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_possplat_blk<<todo method>>(x, y, z, *foo, &blk)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)), nil, blk)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)), nil) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_possplat_pos_blk<<todo method>>(x, y, z, *foo, p, q, &blk)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)).concat([p, q]), nil, blk)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)).concat([p, q]), nil) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_kw<<todo method>>(x, y, z, j:, k:, &<blk>)
    begin
      ::<Magic>.<call-with-block>(::T.unsafe(<self>), :super, <blk>, x, y, z, :j, j, :k, k)
      <self>.super(x, y, z, :j, j, :k, k) do ||
        <self>.puts("hi")
      end
    end
  end

  def possplat_kw<<todo method>>(*foo, j:, k:, &<blk>)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo), [:j, j, :k, k], <blk>)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo), [:j, j, :k, k]) do ||
        <self>.puts("hi")
      end
    end
  end

  def possplat_pos_kw<<todo method>>(*foo, p, q, j:, k:, &<blk>)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo).concat([p, q]), [:j, j, :k, k], <blk>)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo).concat([p, q]), [:j, j, :k, k]) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_possplat_kw<<todo method>>(x, y, z, *foo, j:, k:, &<blk>)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)), [:j, j, :k, k], <blk>)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)), [:j, j, :k, k]) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_possplat_pos_kw<<todo method>>(x, y, z, *foo, p, q, j:, k:, &<blk>)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)).concat([p, q]), [:j, j, :k, k], <blk>)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)).concat([p, q]), [:j, j, :k, k]) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_kwsplat<<todo method>>(x, y, z, *bar:, &<blk>)
    begin
      ::<Magic>.<call-with-block>(::T.unsafe(<self>), :super, <blk>, x, y, z, ::<Magic>.<to-hash-dup>(bar))
      <self>.super(x, y, z, ::<Magic>.<to-hash-dup>(bar)) do ||
        <self>.puts("hi")
      end
    end
  end

  def possplat_kwsplat<<todo method>>(*foo, *bar:, &<blk>)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo), [::<Magic>.<to-hash-dup>(bar)], <blk>)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo), [::<Magic>.<to-hash-dup>(bar)]) do ||
        <self>.puts("hi")
      end
    end
  end

  def possplat_pos_kwsplat<<todo method>>(*foo, p, q, *bar:, &<blk>)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo).concat([p, q]), [::<Magic>.<to-hash-dup>(bar)], <blk>)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo).concat([p, q]), [::<Magic>.<to-hash-dup>(bar)]) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_possplat_kwsplat<<todo method>>(x, y, z, *foo, *bar:, &<blk>)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)), [::<Magic>.<to-hash-dup>(bar)], <blk>)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)), [::<Magic>.<to-hash-dup>(bar)]) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_possplat_pos_kwsplat<<todo method>>(x, y, z, *foo, p, q, *bar:, &<blk>)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)).concat([p, q]), [::<Magic>.<to-hash-dup>(bar)], <blk>)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)).concat([p, q]), [::<Magic>.<to-hash-dup>(bar)]) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_kw_kwsplat<<todo method>>(x, y, z, j:, k:, *bar:, &<blk>)
    begin
      ::<Magic>.<call-with-block>(::T.unsafe(<self>), :super, <blk>, x, y, z, {:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar)))
      <self>.super(x, y, z, {:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar))) do ||
        <self>.puts("hi")
      end
    end
  end

  def possplat_kw_kwsplat<<todo method>>(*foo, j:, k:, *bar:, &<blk>)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo), [{:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar))], <blk>)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo), [{:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar))]) do ||
        <self>.puts("hi")
      end
    end
  end

  def possplat_pos_kw_kwsplat<<todo method>>(*foo, p, q, j:, k:, *bar:, &<blk>)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo).concat([p, q]), [{:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar))], <blk>)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo).concat([p, q]), [{:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar))]) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_possplat_kw_kwsplat<<todo method>>(x, y, z, *foo, j:, k:, *bar:, &<blk>)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)), [{:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar))], <blk>)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)), [{:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar))]) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_possplat_pos_kw_kwsplat<<todo method>>(x, y, z, *foo, p, q, j:, k:, *bar:, &<blk>)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)).concat([p, q]), [{:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar))], <blk>)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)).concat([p, q]), [{:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar))]) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_kw_blk<<todo method>>(x, y, z, j:, k:, &blk)
    begin
      ::<Magic>.<call-with-block>(::T.unsafe(<self>), :super, blk, x, y, z, :j, j, :k, k)
      <self>.super(x, y, z, :j, j, :k, k) do ||
        <self>.puts("hi")
      end
    end
  end

  def possplat_kw_blk<<todo method>>(*foo, j:, k:, &blk)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo), [:j, j, :k, k], blk)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo), [:j, j, :k, k]) do ||
        <self>.puts("hi")
      end
    end
  end

  def possplat_pos_kw_blk<<todo method>>(*foo, p, q, j:, k:, &blk)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo).concat([p, q]), [:j, j, :k, k], blk)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo).concat([p, q]), [:j, j, :k, k]) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_possplat_kw_blk<<todo method>>(x, y, z, *foo, j:, k:, &blk)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)), [:j, j, :k, k], blk)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)), [:j, j, :k, k]) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_possplat_pos_kw_blk<<todo method>>(x, y, z, *foo, p, q, j:, k:, &blk)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)).concat([p, q]), [:j, j, :k, k], blk)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)).concat([p, q]), [:j, j, :k, k]) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_kwsplat_blk<<todo method>>(x, y, z, *bar:, &blk)
    begin
      ::<Magic>.<call-with-block>(::T.unsafe(<self>), :super, blk, x, y, z, ::<Magic>.<to-hash-dup>(bar))
      <self>.super(x, y, z, ::<Magic>.<to-hash-dup>(bar)) do ||
        <self>.puts("hi")
      end
    end
  end

  def possplat_kwsplat_blk<<todo method>>(*foo, *bar:, &blk)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo), [::<Magic>.<to-hash-dup>(bar)], blk)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo), [::<Magic>.<to-hash-dup>(bar)]) do ||
        <self>.puts("hi")
      end
    end
  end

  def possplat_pos_kwsplat_blk<<todo method>>(*foo, p, q, *bar:, &blk)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo).concat([p, q]), [::<Magic>.<to-hash-dup>(bar)], blk)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo).concat([p, q]), [::<Magic>.<to-hash-dup>(bar)]) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_possplat_kwsplat_blk<<todo method>>(x, y, z, *foo, *bar:, &blk)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)), [::<Magic>.<to-hash-dup>(bar)], blk)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)), [::<Magic>.<to-hash-dup>(bar)]) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_possplat_pos_kwsplat_blk<<todo method>>(x, y, z, *foo, p, q, *bar:, &blk)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)).concat([p, q]), [::<Magic>.<to-hash-dup>(bar)], blk)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)).concat([p, q]), [::<Magic>.<to-hash-dup>(bar)]) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_kw_kwsplat_blk<<todo method>>(x, y, z, j:, k:, *bar:, &blk)
    begin
      ::<Magic>.<call-with-block>(::T.unsafe(<self>), :super, blk, x, y, z, {:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar)))
      <self>.super(x, y, z, {:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar))) do ||
        <self>.puts("hi")
      end
    end
  end

  def possplat_kw_kwsplat_blk<<todo method>>(*foo, j:, k:, *bar:, &blk)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo), [{:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar))], blk)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo), [{:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar))]) do ||
        <self>.puts("hi")
      end
    end
  end

  def possplat_pos_kw_kwsplat_blk<<todo method>>(*foo, p, q, j:, k:, *bar:, &blk)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo).concat([p, q]), [{:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar))], blk)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, ::<Magic>.<splat>(foo).concat([p, q]), [{:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar))]) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_possplat_kw_kwsplat_blk<<todo method>>(x, y, z, *foo, j:, k:, *bar:, &blk)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)), [{:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar))], blk)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)), [{:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar))]) do ||
        <self>.puts("hi")
      end
    end
  end

  def pos_possplat_pos_kw_kwsplat_blk<<todo method>>(x, y, z, *foo, p, q, j:, k:, *bar:, &blk)
    begin
      ::<Magic>.<call-with-splat-and-block>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)).concat([p, q]), [{:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar))], blk)
      ::<Magic>.<call-with-splat>(::T.unsafe(<self>), :super, [x, y, z].concat(::<Magic>.<splat>(foo)).concat([p, q]), [{:j => j, :k => k}.merge(::<Magic>.<to-hash-dup>(bar))]) do ||
        <self>.puts("hi")
      end
    end
  end

  <self>.extend(<emptyTree>::<C T>::<C Sig>)

  ::Sorbet::Private::Static.keep_def(<self>, :pos, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :possplat, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :possplat_pos, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_possplat, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_possplat_pos, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_blk, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :possplat_blk, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :possplat_pos_blk, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_possplat_blk, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_possplat_pos_blk, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_kw, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :possplat_kw, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :possplat_pos_kw, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_possplat_kw, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_possplat_pos_kw, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_kwsplat, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :possplat_kwsplat, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :possplat_pos_kwsplat, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_possplat_kwsplat, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_possplat_pos_kwsplat, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_kw_kwsplat, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :possplat_kw_kwsplat, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :possplat_pos_kw_kwsplat, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_possplat_kw_kwsplat, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_possplat_pos_kw_kwsplat, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_kw_blk, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :possplat_kw_blk, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :possplat_pos_kw_blk, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_possplat_kw_blk, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_possplat_pos_kw_blk, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_kwsplat_blk, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :possplat_kwsplat_blk, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :possplat_pos_kwsplat_blk, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_possplat_kwsplat_blk, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_possplat_pos_kwsplat_blk, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_kw_kwsplat_blk, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :possplat_kw_kwsplat_blk, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :possplat_pos_kw_kwsplat_blk, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_possplat_kw_kwsplat_blk, :normal)

  ::Sorbet::Private::Static.keep_def(<self>, :pos_possplat_pos_kw_kwsplat_blk, :normal)
end
