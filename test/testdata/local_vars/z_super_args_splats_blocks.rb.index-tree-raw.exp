ClassDef{
  kind = class
  name = EmptyTree
  symbol = <C <U <root>>>
  ancestors = [ConstantLit{
      symbol = (class ::<todo sym>)
      orig = nullptr
    }]
  rhs = [
    MethodDef{
      flags = {}
      name = <U pos><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-block>>
            block = nullptr
            pos_args = 6
            args = [
              Local{
                localVariable = <U <self>>
              }
              Literal{ value = :<untypedSuper> }
              Local{
                localVariable = <U <blk>>
              }
              Local{
                localVariable = <U x>
              }
              Local{
                localVariable = <U y>
              }
              Local{
                localVariable = <U z>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U <untypedSuper>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 3
          args = [
            Local{
              localVariable = <U x>
            }
            Local{
              localVariable = <U y>
            }
            Local{
              localVariable = <U z>
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U possplat><<U <todo method>>>
      args = [RestArg{ expr = Local{
          localVariable = <U foo>
        } }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <splat>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U foo>
                  }
                ]
              }
              Literal{ value = nil }
              Local{
                localVariable = <U <blk>>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (class ::<Magic>)
                orig = nullptr
              }
              fun = <U <splat>>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U foo>
                }
              ]
            }
            Literal{ value = nil }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U possplat_pos><<U <todo method>>>
      args = [RestArg{ expr = Local{
          localVariable = <U foo>
        } }, Local{
          localVariable = <U p>
        }, Local{
          localVariable = <U q>
        }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <splat>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U foo>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Array{
                    elems = [
                      Local{
                        localVariable = <U p>
                      }
                      Local{
                        localVariable = <U q>
                      }
                    ]
                  }
                ]
              }
              Literal{ value = nil }
              Local{
                localVariable = <U <blk>>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <splat>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U foo>
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Array{
                  elems = [
                    Local{
                      localVariable = <U p>
                    }
                    Local{
                      localVariable = <U q>
                    }
                  ]
                }
              ]
            }
            Literal{ value = nil }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_possplat><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, RestArg{ expr = Local{
          localVariable = <U foo>
        } }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Array{
                  elems = [
                    Local{
                      localVariable = <U x>
                    }
                    Local{
                      localVariable = <U y>
                    }
                    Local{
                      localVariable = <U z>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <splat>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U foo>
                      }
                    ]
                  }
                ]
              }
              Literal{ value = nil }
              Local{
                localVariable = <U <blk>>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Array{
                elems = [
                  Local{
                    localVariable = <U x>
                  }
                  Local{
                    localVariable = <U y>
                  }
                  Local{
                    localVariable = <U z>
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <splat>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U foo>
                    }
                  ]
                }
              ]
            }
            Literal{ value = nil }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_possplat_pos><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, RestArg{ expr = Local{
          localVariable = <U foo>
        } }, Local{
          localVariable = <U p>
        }, Local{
          localVariable = <U q>
        }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Send{
                  flags = {}
                  recv = Array{
                    elems = [
                      Local{
                        localVariable = <U x>
                      }
                      Local{
                        localVariable = <U y>
                      }
                      Local{
                        localVariable = <U z>
                      }
                    ]
                  }
                  fun = <U concat>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Send{
                      flags = {}
                      recv = ConstantLit{
                        symbol = (class ::<Magic>)
                        orig = nullptr
                      }
                      fun = <U <splat>>
                      block = nullptr
                      pos_args = 1
                      args = [
                        Local{
                          localVariable = <U foo>
                        }
                      ]
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Array{
                    elems = [
                      Local{
                        localVariable = <U p>
                      }
                      Local{
                        localVariable = <U q>
                      }
                    ]
                  }
                ]
              }
              Literal{ value = nil }
              Local{
                localVariable = <U <blk>>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Send{
                flags = {}
                recv = Array{
                  elems = [
                    Local{
                      localVariable = <U x>
                    }
                    Local{
                      localVariable = <U y>
                    }
                    Local{
                      localVariable = <U z>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <splat>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U foo>
                      }
                    ]
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Array{
                  elems = [
                    Local{
                      localVariable = <U p>
                    }
                    Local{
                      localVariable = <U q>
                    }
                  ]
                }
              ]
            }
            Literal{ value = nil }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_blk><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-block>>
            block = nullptr
            pos_args = 6
            args = [
              Local{
                localVariable = <U <self>>
              }
              Literal{ value = :<untypedSuper> }
              Local{
                localVariable = <U blk>
              }
              Local{
                localVariable = <U x>
              }
              Local{
                localVariable = <U y>
              }
              Local{
                localVariable = <U z>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U <untypedSuper>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 3
          args = [
            Local{
              localVariable = <U x>
            }
            Local{
              localVariable = <U y>
            }
            Local{
              localVariable = <U z>
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U possplat_blk><<U <todo method>>>
      args = [RestArg{ expr = Local{
          localVariable = <U foo>
        } }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <splat>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U foo>
                  }
                ]
              }
              Literal{ value = nil }
              Local{
                localVariable = <U blk>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (class ::<Magic>)
                orig = nullptr
              }
              fun = <U <splat>>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U foo>
                }
              ]
            }
            Literal{ value = nil }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U possplat_pos_blk><<U <todo method>>>
      args = [RestArg{ expr = Local{
          localVariable = <U foo>
        } }, Local{
          localVariable = <U p>
        }, Local{
          localVariable = <U q>
        }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <splat>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U foo>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Array{
                    elems = [
                      Local{
                        localVariable = <U p>
                      }
                      Local{
                        localVariable = <U q>
                      }
                    ]
                  }
                ]
              }
              Literal{ value = nil }
              Local{
                localVariable = <U blk>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <splat>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U foo>
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Array{
                  elems = [
                    Local{
                      localVariable = <U p>
                    }
                    Local{
                      localVariable = <U q>
                    }
                  ]
                }
              ]
            }
            Literal{ value = nil }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_possplat_blk><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, RestArg{ expr = Local{
          localVariable = <U foo>
        } }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Array{
                  elems = [
                    Local{
                      localVariable = <U x>
                    }
                    Local{
                      localVariable = <U y>
                    }
                    Local{
                      localVariable = <U z>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <splat>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U foo>
                      }
                    ]
                  }
                ]
              }
              Literal{ value = nil }
              Local{
                localVariable = <U blk>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Array{
                elems = [
                  Local{
                    localVariable = <U x>
                  }
                  Local{
                    localVariable = <U y>
                  }
                  Local{
                    localVariable = <U z>
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <splat>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U foo>
                    }
                  ]
                }
              ]
            }
            Literal{ value = nil }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_possplat_pos_blk><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, RestArg{ expr = Local{
          localVariable = <U foo>
        } }, Local{
          localVariable = <U p>
        }, Local{
          localVariable = <U q>
        }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Send{
                  flags = {}
                  recv = Array{
                    elems = [
                      Local{
                        localVariable = <U x>
                      }
                      Local{
                        localVariable = <U y>
                      }
                      Local{
                        localVariable = <U z>
                      }
                    ]
                  }
                  fun = <U concat>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Send{
                      flags = {}
                      recv = ConstantLit{
                        symbol = (class ::<Magic>)
                        orig = nullptr
                      }
                      fun = <U <splat>>
                      block = nullptr
                      pos_args = 1
                      args = [
                        Local{
                          localVariable = <U foo>
                        }
                      ]
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Array{
                    elems = [
                      Local{
                        localVariable = <U p>
                      }
                      Local{
                        localVariable = <U q>
                      }
                    ]
                  }
                ]
              }
              Literal{ value = nil }
              Local{
                localVariable = <U blk>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Send{
                flags = {}
                recv = Array{
                  elems = [
                    Local{
                      localVariable = <U x>
                    }
                    Local{
                      localVariable = <U y>
                    }
                    Local{
                      localVariable = <U z>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <splat>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U foo>
                      }
                    ]
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Array{
                  elems = [
                    Local{
                      localVariable = <U p>
                    }
                    Local{
                      localVariable = <U q>
                    }
                  ]
                }
              ]
            }
            Literal{ value = nil }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_kw><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-block>>
            block = nullptr
            pos_args = 6
            args = [
              Local{
                localVariable = <U <self>>
              }
              Literal{ value = :<untypedSuper> }
              Local{
                localVariable = <U <blk>>
              }
              Local{
                localVariable = <U x>
              }
              Local{
                localVariable = <U y>
              }
              Local{
                localVariable = <U z>
              }
              Literal{ value = :j }
              Local{
                localVariable = <U j>
              }
              Literal{ value = :k }
              Local{
                localVariable = <U k>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U <untypedSuper>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 3
          args = [
            Local{
              localVariable = <U x>
            }
            Local{
              localVariable = <U y>
            }
            Local{
              localVariable = <U z>
            }
            Literal{ value = :j }
            Local{
              localVariable = <U j>
            }
            Literal{ value = :k }
            Local{
              localVariable = <U k>
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U possplat_kw><<U <todo method>>>
      args = [RestArg{ expr = Local{
          localVariable = <U foo>
        } }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <splat>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U foo>
                  }
                ]
              }
              Array{
                elems = [
                  Literal{ value = :j }
                  Local{
                    localVariable = <U j>
                  }
                  Literal{ value = :k }
                  Local{
                    localVariable = <U k>
                  }
                ]
              }
              Local{
                localVariable = <U <blk>>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (class ::<Magic>)
                orig = nullptr
              }
              fun = <U <splat>>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U foo>
                }
              ]
            }
            Array{
              elems = [
                Literal{ value = :j }
                Local{
                  localVariable = <U j>
                }
                Literal{ value = :k }
                Local{
                  localVariable = <U k>
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U possplat_pos_kw><<U <todo method>>>
      args = [RestArg{ expr = Local{
          localVariable = <U foo>
        } }, Local{
          localVariable = <U p>
        }, Local{
          localVariable = <U q>
        }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <splat>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U foo>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Array{
                    elems = [
                      Local{
                        localVariable = <U p>
                      }
                      Local{
                        localVariable = <U q>
                      }
                    ]
                  }
                ]
              }
              Array{
                elems = [
                  Literal{ value = :j }
                  Local{
                    localVariable = <U j>
                  }
                  Literal{ value = :k }
                  Local{
                    localVariable = <U k>
                  }
                ]
              }
              Local{
                localVariable = <U <blk>>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <splat>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U foo>
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Array{
                  elems = [
                    Local{
                      localVariable = <U p>
                    }
                    Local{
                      localVariable = <U q>
                    }
                  ]
                }
              ]
            }
            Array{
              elems = [
                Literal{ value = :j }
                Local{
                  localVariable = <U j>
                }
                Literal{ value = :k }
                Local{
                  localVariable = <U k>
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_possplat_kw><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, RestArg{ expr = Local{
          localVariable = <U foo>
        } }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Array{
                  elems = [
                    Local{
                      localVariable = <U x>
                    }
                    Local{
                      localVariable = <U y>
                    }
                    Local{
                      localVariable = <U z>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <splat>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U foo>
                      }
                    ]
                  }
                ]
              }
              Array{
                elems = [
                  Literal{ value = :j }
                  Local{
                    localVariable = <U j>
                  }
                  Literal{ value = :k }
                  Local{
                    localVariable = <U k>
                  }
                ]
              }
              Local{
                localVariable = <U <blk>>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Array{
                elems = [
                  Local{
                    localVariable = <U x>
                  }
                  Local{
                    localVariable = <U y>
                  }
                  Local{
                    localVariable = <U z>
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <splat>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U foo>
                    }
                  ]
                }
              ]
            }
            Array{
              elems = [
                Literal{ value = :j }
                Local{
                  localVariable = <U j>
                }
                Literal{ value = :k }
                Local{
                  localVariable = <U k>
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_possplat_pos_kw><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, RestArg{ expr = Local{
          localVariable = <U foo>
        } }, Local{
          localVariable = <U p>
        }, Local{
          localVariable = <U q>
        }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Send{
                  flags = {}
                  recv = Array{
                    elems = [
                      Local{
                        localVariable = <U x>
                      }
                      Local{
                        localVariable = <U y>
                      }
                      Local{
                        localVariable = <U z>
                      }
                    ]
                  }
                  fun = <U concat>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Send{
                      flags = {}
                      recv = ConstantLit{
                        symbol = (class ::<Magic>)
                        orig = nullptr
                      }
                      fun = <U <splat>>
                      block = nullptr
                      pos_args = 1
                      args = [
                        Local{
                          localVariable = <U foo>
                        }
                      ]
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Array{
                    elems = [
                      Local{
                        localVariable = <U p>
                      }
                      Local{
                        localVariable = <U q>
                      }
                    ]
                  }
                ]
              }
              Array{
                elems = [
                  Literal{ value = :j }
                  Local{
                    localVariable = <U j>
                  }
                  Literal{ value = :k }
                  Local{
                    localVariable = <U k>
                  }
                ]
              }
              Local{
                localVariable = <U <blk>>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Send{
                flags = {}
                recv = Array{
                  elems = [
                    Local{
                      localVariable = <U x>
                    }
                    Local{
                      localVariable = <U y>
                    }
                    Local{
                      localVariable = <U z>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <splat>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U foo>
                      }
                    ]
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Array{
                  elems = [
                    Local{
                      localVariable = <U p>
                    }
                    Local{
                      localVariable = <U q>
                    }
                  ]
                }
              ]
            }
            Array{
              elems = [
                Literal{ value = :j }
                Local{
                  localVariable = <U j>
                }
                Literal{ value = :k }
                Local{
                  localVariable = <U k>
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_kwsplat><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-block>>
            block = nullptr
            pos_args = 6
            args = [
              Local{
                localVariable = <U <self>>
              }
              Literal{ value = :<untypedSuper> }
              Local{
                localVariable = <U <blk>>
              }
              Local{
                localVariable = <U x>
              }
              Local{
                localVariable = <U y>
              }
              Local{
                localVariable = <U z>
              }
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <to-hash-dup>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U bar>
                  }
                ]
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U <untypedSuper>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 3
          args = [
            Local{
              localVariable = <U x>
            }
            Local{
              localVariable = <U y>
            }
            Local{
              localVariable = <U z>
            }
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (class ::<Magic>)
                orig = nullptr
              }
              fun = <U <to-hash-dup>>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U bar>
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U possplat_kwsplat><<U <todo method>>>
      args = [RestArg{ expr = Local{
          localVariable = <U foo>
        } }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <splat>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U foo>
                  }
                ]
              }
              Array{
                elems = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <to-hash-dup>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U bar>
                      }
                    ]
                  }
                ]
              }
              Local{
                localVariable = <U <blk>>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (class ::<Magic>)
                orig = nullptr
              }
              fun = <U <splat>>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U foo>
                }
              ]
            }
            Array{
              elems = [
                Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <to-hash-dup>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U bar>
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U possplat_pos_kwsplat><<U <todo method>>>
      args = [RestArg{ expr = Local{
          localVariable = <U foo>
        } }, Local{
          localVariable = <U p>
        }, Local{
          localVariable = <U q>
        }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <splat>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U foo>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Array{
                    elems = [
                      Local{
                        localVariable = <U p>
                      }
                      Local{
                        localVariable = <U q>
                      }
                    ]
                  }
                ]
              }
              Array{
                elems = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <to-hash-dup>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U bar>
                      }
                    ]
                  }
                ]
              }
              Local{
                localVariable = <U <blk>>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <splat>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U foo>
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Array{
                  elems = [
                    Local{
                      localVariable = <U p>
                    }
                    Local{
                      localVariable = <U q>
                    }
                  ]
                }
              ]
            }
            Array{
              elems = [
                Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <to-hash-dup>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U bar>
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_possplat_kwsplat><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, RestArg{ expr = Local{
          localVariable = <U foo>
        } }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Array{
                  elems = [
                    Local{
                      localVariable = <U x>
                    }
                    Local{
                      localVariable = <U y>
                    }
                    Local{
                      localVariable = <U z>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <splat>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U foo>
                      }
                    ]
                  }
                ]
              }
              Array{
                elems = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <to-hash-dup>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U bar>
                      }
                    ]
                  }
                ]
              }
              Local{
                localVariable = <U <blk>>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Array{
                elems = [
                  Local{
                    localVariable = <U x>
                  }
                  Local{
                    localVariable = <U y>
                  }
                  Local{
                    localVariable = <U z>
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <splat>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U foo>
                    }
                  ]
                }
              ]
            }
            Array{
              elems = [
                Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <to-hash-dup>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U bar>
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_possplat_pos_kwsplat><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, RestArg{ expr = Local{
          localVariable = <U foo>
        } }, Local{
          localVariable = <U p>
        }, Local{
          localVariable = <U q>
        }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Send{
                  flags = {}
                  recv = Array{
                    elems = [
                      Local{
                        localVariable = <U x>
                      }
                      Local{
                        localVariable = <U y>
                      }
                      Local{
                        localVariable = <U z>
                      }
                    ]
                  }
                  fun = <U concat>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Send{
                      flags = {}
                      recv = ConstantLit{
                        symbol = (class ::<Magic>)
                        orig = nullptr
                      }
                      fun = <U <splat>>
                      block = nullptr
                      pos_args = 1
                      args = [
                        Local{
                          localVariable = <U foo>
                        }
                      ]
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Array{
                    elems = [
                      Local{
                        localVariable = <U p>
                      }
                      Local{
                        localVariable = <U q>
                      }
                    ]
                  }
                ]
              }
              Array{
                elems = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <to-hash-dup>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U bar>
                      }
                    ]
                  }
                ]
              }
              Local{
                localVariable = <U <blk>>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Send{
                flags = {}
                recv = Array{
                  elems = [
                    Local{
                      localVariable = <U x>
                    }
                    Local{
                      localVariable = <U y>
                    }
                    Local{
                      localVariable = <U z>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <splat>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U foo>
                      }
                    ]
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Array{
                  elems = [
                    Local{
                      localVariable = <U p>
                    }
                    Local{
                      localVariable = <U q>
                    }
                  ]
                }
              ]
            }
            Array{
              elems = [
                Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <to-hash-dup>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U bar>
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_kw_kwsplat><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-block>>
            block = nullptr
            pos_args = 6
            args = [
              Local{
                localVariable = <U <self>>
              }
              Literal{ value = :<untypedSuper> }
              Local{
                localVariable = <U <blk>>
              }
              Local{
                localVariable = <U x>
              }
              Local{
                localVariable = <U y>
              }
              Local{
                localVariable = <U z>
              }
              Send{
                flags = {}
                recv = Hash{
                  pairs = [
                    [
                      key = Literal{ value = :j }
                      value = Local{
                        localVariable = <U j>
                      }
                    ]
                    [
                      key = Literal{ value = :k }
                      value = Local{
                        localVariable = <U k>
                      }
                    ]
                  ]
                }
                fun = <U merge>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <to-hash-dup>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U bar>
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U <untypedSuper>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 3
          args = [
            Local{
              localVariable = <U x>
            }
            Local{
              localVariable = <U y>
            }
            Local{
              localVariable = <U z>
            }
            Send{
              flags = {}
              recv = Hash{
                pairs = [
                  [
                    key = Literal{ value = :j }
                    value = Local{
                      localVariable = <U j>
                    }
                  ]
                  [
                    key = Literal{ value = :k }
                    value = Local{
                      localVariable = <U k>
                    }
                  ]
                ]
              }
              fun = <U merge>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <to-hash-dup>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U bar>
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U possplat_kw_kwsplat><<U <todo method>>>
      args = [RestArg{ expr = Local{
          localVariable = <U foo>
        } }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <splat>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U foo>
                  }
                ]
              }
              Array{
                elems = [
                  Send{
                    flags = {}
                    recv = Hash{
                      pairs = [
                        [
                          key = Literal{ value = :j }
                          value = Local{
                            localVariable = <U j>
                          }
                        ]
                        [
                          key = Literal{ value = :k }
                          value = Local{
                            localVariable = <U k>
                          }
                        ]
                      ]
                    }
                    fun = <U merge>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Send{
                        flags = {}
                        recv = ConstantLit{
                          symbol = (class ::<Magic>)
                          orig = nullptr
                        }
                        fun = <U <to-hash-dup>>
                        block = nullptr
                        pos_args = 1
                        args = [
                          Local{
                            localVariable = <U bar>
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
              Local{
                localVariable = <U <blk>>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (class ::<Magic>)
                orig = nullptr
              }
              fun = <U <splat>>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U foo>
                }
              ]
            }
            Array{
              elems = [
                Send{
                  flags = {}
                  recv = Hash{
                    pairs = [
                      [
                        key = Literal{ value = :j }
                        value = Local{
                          localVariable = <U j>
                        }
                      ]
                      [
                        key = Literal{ value = :k }
                        value = Local{
                          localVariable = <U k>
                        }
                      ]
                    ]
                  }
                  fun = <U merge>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Send{
                      flags = {}
                      recv = ConstantLit{
                        symbol = (class ::<Magic>)
                        orig = nullptr
                      }
                      fun = <U <to-hash-dup>>
                      block = nullptr
                      pos_args = 1
                      args = [
                        Local{
                          localVariable = <U bar>
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U possplat_pos_kw_kwsplat><<U <todo method>>>
      args = [RestArg{ expr = Local{
          localVariable = <U foo>
        } }, Local{
          localVariable = <U p>
        }, Local{
          localVariable = <U q>
        }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <splat>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U foo>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Array{
                    elems = [
                      Local{
                        localVariable = <U p>
                      }
                      Local{
                        localVariable = <U q>
                      }
                    ]
                  }
                ]
              }
              Array{
                elems = [
                  Send{
                    flags = {}
                    recv = Hash{
                      pairs = [
                        [
                          key = Literal{ value = :j }
                          value = Local{
                            localVariable = <U j>
                          }
                        ]
                        [
                          key = Literal{ value = :k }
                          value = Local{
                            localVariable = <U k>
                          }
                        ]
                      ]
                    }
                    fun = <U merge>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Send{
                        flags = {}
                        recv = ConstantLit{
                          symbol = (class ::<Magic>)
                          orig = nullptr
                        }
                        fun = <U <to-hash-dup>>
                        block = nullptr
                        pos_args = 1
                        args = [
                          Local{
                            localVariable = <U bar>
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
              Local{
                localVariable = <U <blk>>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <splat>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U foo>
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Array{
                  elems = [
                    Local{
                      localVariable = <U p>
                    }
                    Local{
                      localVariable = <U q>
                    }
                  ]
                }
              ]
            }
            Array{
              elems = [
                Send{
                  flags = {}
                  recv = Hash{
                    pairs = [
                      [
                        key = Literal{ value = :j }
                        value = Local{
                          localVariable = <U j>
                        }
                      ]
                      [
                        key = Literal{ value = :k }
                        value = Local{
                          localVariable = <U k>
                        }
                      ]
                    ]
                  }
                  fun = <U merge>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Send{
                      flags = {}
                      recv = ConstantLit{
                        symbol = (class ::<Magic>)
                        orig = nullptr
                      }
                      fun = <U <to-hash-dup>>
                      block = nullptr
                      pos_args = 1
                      args = [
                        Local{
                          localVariable = <U bar>
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_possplat_kw_kwsplat><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, RestArg{ expr = Local{
          localVariable = <U foo>
        } }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Array{
                  elems = [
                    Local{
                      localVariable = <U x>
                    }
                    Local{
                      localVariable = <U y>
                    }
                    Local{
                      localVariable = <U z>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <splat>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U foo>
                      }
                    ]
                  }
                ]
              }
              Array{
                elems = [
                  Send{
                    flags = {}
                    recv = Hash{
                      pairs = [
                        [
                          key = Literal{ value = :j }
                          value = Local{
                            localVariable = <U j>
                          }
                        ]
                        [
                          key = Literal{ value = :k }
                          value = Local{
                            localVariable = <U k>
                          }
                        ]
                      ]
                    }
                    fun = <U merge>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Send{
                        flags = {}
                        recv = ConstantLit{
                          symbol = (class ::<Magic>)
                          orig = nullptr
                        }
                        fun = <U <to-hash-dup>>
                        block = nullptr
                        pos_args = 1
                        args = [
                          Local{
                            localVariable = <U bar>
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
              Local{
                localVariable = <U <blk>>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Array{
                elems = [
                  Local{
                    localVariable = <U x>
                  }
                  Local{
                    localVariable = <U y>
                  }
                  Local{
                    localVariable = <U z>
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <splat>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U foo>
                    }
                  ]
                }
              ]
            }
            Array{
              elems = [
                Send{
                  flags = {}
                  recv = Hash{
                    pairs = [
                      [
                        key = Literal{ value = :j }
                        value = Local{
                          localVariable = <U j>
                        }
                      ]
                      [
                        key = Literal{ value = :k }
                        value = Local{
                          localVariable = <U k>
                        }
                      ]
                    ]
                  }
                  fun = <U merge>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Send{
                      flags = {}
                      recv = ConstantLit{
                        symbol = (class ::<Magic>)
                        orig = nullptr
                      }
                      fun = <U <to-hash-dup>>
                      block = nullptr
                      pos_args = 1
                      args = [
                        Local{
                          localVariable = <U bar>
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_possplat_pos_kw_kwsplat><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, RestArg{ expr = Local{
          localVariable = <U foo>
        } }, Local{
          localVariable = <U p>
        }, Local{
          localVariable = <U q>
        }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U <blk>>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Send{
                  flags = {}
                  recv = Array{
                    elems = [
                      Local{
                        localVariable = <U x>
                      }
                      Local{
                        localVariable = <U y>
                      }
                      Local{
                        localVariable = <U z>
                      }
                    ]
                  }
                  fun = <U concat>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Send{
                      flags = {}
                      recv = ConstantLit{
                        symbol = (class ::<Magic>)
                        orig = nullptr
                      }
                      fun = <U <splat>>
                      block = nullptr
                      pos_args = 1
                      args = [
                        Local{
                          localVariable = <U foo>
                        }
                      ]
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Array{
                    elems = [
                      Local{
                        localVariable = <U p>
                      }
                      Local{
                        localVariable = <U q>
                      }
                    ]
                  }
                ]
              }
              Array{
                elems = [
                  Send{
                    flags = {}
                    recv = Hash{
                      pairs = [
                        [
                          key = Literal{ value = :j }
                          value = Local{
                            localVariable = <U j>
                          }
                        ]
                        [
                          key = Literal{ value = :k }
                          value = Local{
                            localVariable = <U k>
                          }
                        ]
                      ]
                    }
                    fun = <U merge>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Send{
                        flags = {}
                        recv = ConstantLit{
                          symbol = (class ::<Magic>)
                          orig = nullptr
                        }
                        fun = <U <to-hash-dup>>
                        block = nullptr
                        pos_args = 1
                        args = [
                          Local{
                            localVariable = <U bar>
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
              Local{
                localVariable = <U <blk>>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Send{
                flags = {}
                recv = Array{
                  elems = [
                    Local{
                      localVariable = <U x>
                    }
                    Local{
                      localVariable = <U y>
                    }
                    Local{
                      localVariable = <U z>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <splat>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U foo>
                      }
                    ]
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Array{
                  elems = [
                    Local{
                      localVariable = <U p>
                    }
                    Local{
                      localVariable = <U q>
                    }
                  ]
                }
              ]
            }
            Array{
              elems = [
                Send{
                  flags = {}
                  recv = Hash{
                    pairs = [
                      [
                        key = Literal{ value = :j }
                        value = Local{
                          localVariable = <U j>
                        }
                      ]
                      [
                        key = Literal{ value = :k }
                        value = Local{
                          localVariable = <U k>
                        }
                      ]
                    ]
                  }
                  fun = <U merge>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Send{
                      flags = {}
                      recv = ConstantLit{
                        symbol = (class ::<Magic>)
                        orig = nullptr
                      }
                      fun = <U <to-hash-dup>>
                      block = nullptr
                      pos_args = 1
                      args = [
                        Local{
                          localVariable = <U bar>
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_kw_blk><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-block>>
            block = nullptr
            pos_args = 6
            args = [
              Local{
                localVariable = <U <self>>
              }
              Literal{ value = :<untypedSuper> }
              Local{
                localVariable = <U blk>
              }
              Local{
                localVariable = <U x>
              }
              Local{
                localVariable = <U y>
              }
              Local{
                localVariable = <U z>
              }
              Literal{ value = :j }
              Local{
                localVariable = <U j>
              }
              Literal{ value = :k }
              Local{
                localVariable = <U k>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U <untypedSuper>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 3
          args = [
            Local{
              localVariable = <U x>
            }
            Local{
              localVariable = <U y>
            }
            Local{
              localVariable = <U z>
            }
            Literal{ value = :j }
            Local{
              localVariable = <U j>
            }
            Literal{ value = :k }
            Local{
              localVariable = <U k>
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U possplat_kw_blk><<U <todo method>>>
      args = [RestArg{ expr = Local{
          localVariable = <U foo>
        } }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <splat>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U foo>
                  }
                ]
              }
              Array{
                elems = [
                  Literal{ value = :j }
                  Local{
                    localVariable = <U j>
                  }
                  Literal{ value = :k }
                  Local{
                    localVariable = <U k>
                  }
                ]
              }
              Local{
                localVariable = <U blk>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (class ::<Magic>)
                orig = nullptr
              }
              fun = <U <splat>>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U foo>
                }
              ]
            }
            Array{
              elems = [
                Literal{ value = :j }
                Local{
                  localVariable = <U j>
                }
                Literal{ value = :k }
                Local{
                  localVariable = <U k>
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U possplat_pos_kw_blk><<U <todo method>>>
      args = [RestArg{ expr = Local{
          localVariable = <U foo>
        } }, Local{
          localVariable = <U p>
        }, Local{
          localVariable = <U q>
        }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <splat>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U foo>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Array{
                    elems = [
                      Local{
                        localVariable = <U p>
                      }
                      Local{
                        localVariable = <U q>
                      }
                    ]
                  }
                ]
              }
              Array{
                elems = [
                  Literal{ value = :j }
                  Local{
                    localVariable = <U j>
                  }
                  Literal{ value = :k }
                  Local{
                    localVariable = <U k>
                  }
                ]
              }
              Local{
                localVariable = <U blk>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <splat>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U foo>
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Array{
                  elems = [
                    Local{
                      localVariable = <U p>
                    }
                    Local{
                      localVariable = <U q>
                    }
                  ]
                }
              ]
            }
            Array{
              elems = [
                Literal{ value = :j }
                Local{
                  localVariable = <U j>
                }
                Literal{ value = :k }
                Local{
                  localVariable = <U k>
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_possplat_kw_blk><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, RestArg{ expr = Local{
          localVariable = <U foo>
        } }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Array{
                  elems = [
                    Local{
                      localVariable = <U x>
                    }
                    Local{
                      localVariable = <U y>
                    }
                    Local{
                      localVariable = <U z>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <splat>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U foo>
                      }
                    ]
                  }
                ]
              }
              Array{
                elems = [
                  Literal{ value = :j }
                  Local{
                    localVariable = <U j>
                  }
                  Literal{ value = :k }
                  Local{
                    localVariable = <U k>
                  }
                ]
              }
              Local{
                localVariable = <U blk>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Array{
                elems = [
                  Local{
                    localVariable = <U x>
                  }
                  Local{
                    localVariable = <U y>
                  }
                  Local{
                    localVariable = <U z>
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <splat>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U foo>
                    }
                  ]
                }
              ]
            }
            Array{
              elems = [
                Literal{ value = :j }
                Local{
                  localVariable = <U j>
                }
                Literal{ value = :k }
                Local{
                  localVariable = <U k>
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_possplat_pos_kw_blk><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, RestArg{ expr = Local{
          localVariable = <U foo>
        } }, Local{
          localVariable = <U p>
        }, Local{
          localVariable = <U q>
        }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Send{
                  flags = {}
                  recv = Array{
                    elems = [
                      Local{
                        localVariable = <U x>
                      }
                      Local{
                        localVariable = <U y>
                      }
                      Local{
                        localVariable = <U z>
                      }
                    ]
                  }
                  fun = <U concat>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Send{
                      flags = {}
                      recv = ConstantLit{
                        symbol = (class ::<Magic>)
                        orig = nullptr
                      }
                      fun = <U <splat>>
                      block = nullptr
                      pos_args = 1
                      args = [
                        Local{
                          localVariable = <U foo>
                        }
                      ]
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Array{
                    elems = [
                      Local{
                        localVariable = <U p>
                      }
                      Local{
                        localVariable = <U q>
                      }
                    ]
                  }
                ]
              }
              Array{
                elems = [
                  Literal{ value = :j }
                  Local{
                    localVariable = <U j>
                  }
                  Literal{ value = :k }
                  Local{
                    localVariable = <U k>
                  }
                ]
              }
              Local{
                localVariable = <U blk>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Send{
                flags = {}
                recv = Array{
                  elems = [
                    Local{
                      localVariable = <U x>
                    }
                    Local{
                      localVariable = <U y>
                    }
                    Local{
                      localVariable = <U z>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <splat>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U foo>
                      }
                    ]
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Array{
                  elems = [
                    Local{
                      localVariable = <U p>
                    }
                    Local{
                      localVariable = <U q>
                    }
                  ]
                }
              ]
            }
            Array{
              elems = [
                Literal{ value = :j }
                Local{
                  localVariable = <U j>
                }
                Literal{ value = :k }
                Local{
                  localVariable = <U k>
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_kwsplat_blk><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-block>>
            block = nullptr
            pos_args = 6
            args = [
              Local{
                localVariable = <U <self>>
              }
              Literal{ value = :<untypedSuper> }
              Local{
                localVariable = <U blk>
              }
              Local{
                localVariable = <U x>
              }
              Local{
                localVariable = <U y>
              }
              Local{
                localVariable = <U z>
              }
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <to-hash-dup>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U bar>
                  }
                ]
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U <untypedSuper>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 3
          args = [
            Local{
              localVariable = <U x>
            }
            Local{
              localVariable = <U y>
            }
            Local{
              localVariable = <U z>
            }
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (class ::<Magic>)
                orig = nullptr
              }
              fun = <U <to-hash-dup>>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U bar>
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U possplat_kwsplat_blk><<U <todo method>>>
      args = [RestArg{ expr = Local{
          localVariable = <U foo>
        } }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <splat>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U foo>
                  }
                ]
              }
              Array{
                elems = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <to-hash-dup>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U bar>
                      }
                    ]
                  }
                ]
              }
              Local{
                localVariable = <U blk>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (class ::<Magic>)
                orig = nullptr
              }
              fun = <U <splat>>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U foo>
                }
              ]
            }
            Array{
              elems = [
                Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <to-hash-dup>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U bar>
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U possplat_pos_kwsplat_blk><<U <todo method>>>
      args = [RestArg{ expr = Local{
          localVariable = <U foo>
        } }, Local{
          localVariable = <U p>
        }, Local{
          localVariable = <U q>
        }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <splat>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U foo>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Array{
                    elems = [
                      Local{
                        localVariable = <U p>
                      }
                      Local{
                        localVariable = <U q>
                      }
                    ]
                  }
                ]
              }
              Array{
                elems = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <to-hash-dup>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U bar>
                      }
                    ]
                  }
                ]
              }
              Local{
                localVariable = <U blk>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <splat>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U foo>
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Array{
                  elems = [
                    Local{
                      localVariable = <U p>
                    }
                    Local{
                      localVariable = <U q>
                    }
                  ]
                }
              ]
            }
            Array{
              elems = [
                Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <to-hash-dup>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U bar>
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_possplat_kwsplat_blk><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, RestArg{ expr = Local{
          localVariable = <U foo>
        } }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Array{
                  elems = [
                    Local{
                      localVariable = <U x>
                    }
                    Local{
                      localVariable = <U y>
                    }
                    Local{
                      localVariable = <U z>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <splat>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U foo>
                      }
                    ]
                  }
                ]
              }
              Array{
                elems = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <to-hash-dup>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U bar>
                      }
                    ]
                  }
                ]
              }
              Local{
                localVariable = <U blk>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Array{
                elems = [
                  Local{
                    localVariable = <U x>
                  }
                  Local{
                    localVariable = <U y>
                  }
                  Local{
                    localVariable = <U z>
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <splat>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U foo>
                    }
                  ]
                }
              ]
            }
            Array{
              elems = [
                Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <to-hash-dup>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U bar>
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_possplat_pos_kwsplat_blk><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, RestArg{ expr = Local{
          localVariable = <U foo>
        } }, Local{
          localVariable = <U p>
        }, Local{
          localVariable = <U q>
        }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Send{
                  flags = {}
                  recv = Array{
                    elems = [
                      Local{
                        localVariable = <U x>
                      }
                      Local{
                        localVariable = <U y>
                      }
                      Local{
                        localVariable = <U z>
                      }
                    ]
                  }
                  fun = <U concat>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Send{
                      flags = {}
                      recv = ConstantLit{
                        symbol = (class ::<Magic>)
                        orig = nullptr
                      }
                      fun = <U <splat>>
                      block = nullptr
                      pos_args = 1
                      args = [
                        Local{
                          localVariable = <U foo>
                        }
                      ]
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Array{
                    elems = [
                      Local{
                        localVariable = <U p>
                      }
                      Local{
                        localVariable = <U q>
                      }
                    ]
                  }
                ]
              }
              Array{
                elems = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <to-hash-dup>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U bar>
                      }
                    ]
                  }
                ]
              }
              Local{
                localVariable = <U blk>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Send{
                flags = {}
                recv = Array{
                  elems = [
                    Local{
                      localVariable = <U x>
                    }
                    Local{
                      localVariable = <U y>
                    }
                    Local{
                      localVariable = <U z>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <splat>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U foo>
                      }
                    ]
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Array{
                  elems = [
                    Local{
                      localVariable = <U p>
                    }
                    Local{
                      localVariable = <U q>
                    }
                  ]
                }
              ]
            }
            Array{
              elems = [
                Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <to-hash-dup>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U bar>
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_kw_kwsplat_blk><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-block>>
            block = nullptr
            pos_args = 6
            args = [
              Local{
                localVariable = <U <self>>
              }
              Literal{ value = :<untypedSuper> }
              Local{
                localVariable = <U blk>
              }
              Local{
                localVariable = <U x>
              }
              Local{
                localVariable = <U y>
              }
              Local{
                localVariable = <U z>
              }
              Send{
                flags = {}
                recv = Hash{
                  pairs = [
                    [
                      key = Literal{ value = :j }
                      value = Local{
                        localVariable = <U j>
                      }
                    ]
                    [
                      key = Literal{ value = :k }
                      value = Local{
                        localVariable = <U k>
                      }
                    ]
                  ]
                }
                fun = <U merge>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <to-hash-dup>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U bar>
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = Local{
            localVariable = <U <self>>
          }
          fun = <U <untypedSuper>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 3
          args = [
            Local{
              localVariable = <U x>
            }
            Local{
              localVariable = <U y>
            }
            Local{
              localVariable = <U z>
            }
            Send{
              flags = {}
              recv = Hash{
                pairs = [
                  [
                    key = Literal{ value = :j }
                    value = Local{
                      localVariable = <U j>
                    }
                  ]
                  [
                    key = Literal{ value = :k }
                    value = Local{
                      localVariable = <U k>
                    }
                  ]
                ]
              }
              fun = <U merge>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <to-hash-dup>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U bar>
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U possplat_kw_kwsplat_blk><<U <todo method>>>
      args = [RestArg{ expr = Local{
          localVariable = <U foo>
        } }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <splat>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U foo>
                  }
                ]
              }
              Array{
                elems = [
                  Send{
                    flags = {}
                    recv = Hash{
                      pairs = [
                        [
                          key = Literal{ value = :j }
                          value = Local{
                            localVariable = <U j>
                          }
                        ]
                        [
                          key = Literal{ value = :k }
                          value = Local{
                            localVariable = <U k>
                          }
                        ]
                      ]
                    }
                    fun = <U merge>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Send{
                        flags = {}
                        recv = ConstantLit{
                          symbol = (class ::<Magic>)
                          orig = nullptr
                        }
                        fun = <U <to-hash-dup>>
                        block = nullptr
                        pos_args = 1
                        args = [
                          Local{
                            localVariable = <U bar>
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
              Local{
                localVariable = <U blk>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (class ::<Magic>)
                orig = nullptr
              }
              fun = <U <splat>>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U foo>
                }
              ]
            }
            Array{
              elems = [
                Send{
                  flags = {}
                  recv = Hash{
                    pairs = [
                      [
                        key = Literal{ value = :j }
                        value = Local{
                          localVariable = <U j>
                        }
                      ]
                      [
                        key = Literal{ value = :k }
                        value = Local{
                          localVariable = <U k>
                        }
                      ]
                    ]
                  }
                  fun = <U merge>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Send{
                      flags = {}
                      recv = ConstantLit{
                        symbol = (class ::<Magic>)
                        orig = nullptr
                      }
                      fun = <U <to-hash-dup>>
                      block = nullptr
                      pos_args = 1
                      args = [
                        Local{
                          localVariable = <U bar>
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U possplat_pos_kw_kwsplat_blk><<U <todo method>>>
      args = [RestArg{ expr = Local{
          localVariable = <U foo>
        } }, Local{
          localVariable = <U p>
        }, Local{
          localVariable = <U q>
        }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <splat>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U foo>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Array{
                    elems = [
                      Local{
                        localVariable = <U p>
                      }
                      Local{
                        localVariable = <U q>
                      }
                    ]
                  }
                ]
              }
              Array{
                elems = [
                  Send{
                    flags = {}
                    recv = Hash{
                      pairs = [
                        [
                          key = Literal{ value = :j }
                          value = Local{
                            localVariable = <U j>
                          }
                        ]
                        [
                          key = Literal{ value = :k }
                          value = Local{
                            localVariable = <U k>
                          }
                        ]
                      ]
                    }
                    fun = <U merge>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Send{
                        flags = {}
                        recv = ConstantLit{
                          symbol = (class ::<Magic>)
                          orig = nullptr
                        }
                        fun = <U <to-hash-dup>>
                        block = nullptr
                        pos_args = 1
                        args = [
                          Local{
                            localVariable = <U bar>
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
              Local{
                localVariable = <U blk>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (class ::<Magic>)
                  orig = nullptr
                }
                fun = <U <splat>>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U foo>
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Array{
                  elems = [
                    Local{
                      localVariable = <U p>
                    }
                    Local{
                      localVariable = <U q>
                    }
                  ]
                }
              ]
            }
            Array{
              elems = [
                Send{
                  flags = {}
                  recv = Hash{
                    pairs = [
                      [
                        key = Literal{ value = :j }
                        value = Local{
                          localVariable = <U j>
                        }
                      ]
                      [
                        key = Literal{ value = :k }
                        value = Local{
                          localVariable = <U k>
                        }
                      ]
                    ]
                  }
                  fun = <U merge>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Send{
                      flags = {}
                      recv = ConstantLit{
                        symbol = (class ::<Magic>)
                        orig = nullptr
                      }
                      fun = <U <to-hash-dup>>
                      block = nullptr
                      pos_args = 1
                      args = [
                        Local{
                          localVariable = <U bar>
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_possplat_kw_kwsplat_blk><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, RestArg{ expr = Local{
          localVariable = <U foo>
        } }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Array{
                  elems = [
                    Local{
                      localVariable = <U x>
                    }
                    Local{
                      localVariable = <U y>
                    }
                    Local{
                      localVariable = <U z>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <splat>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U foo>
                      }
                    ]
                  }
                ]
              }
              Array{
                elems = [
                  Send{
                    flags = {}
                    recv = Hash{
                      pairs = [
                        [
                          key = Literal{ value = :j }
                          value = Local{
                            localVariable = <U j>
                          }
                        ]
                        [
                          key = Literal{ value = :k }
                          value = Local{
                            localVariable = <U k>
                          }
                        ]
                      ]
                    }
                    fun = <U merge>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Send{
                        flags = {}
                        recv = ConstantLit{
                          symbol = (class ::<Magic>)
                          orig = nullptr
                        }
                        fun = <U <to-hash-dup>>
                        block = nullptr
                        pos_args = 1
                        args = [
                          Local{
                            localVariable = <U bar>
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
              Local{
                localVariable = <U blk>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Array{
                elems = [
                  Local{
                    localVariable = <U x>
                  }
                  Local{
                    localVariable = <U y>
                  }
                  Local{
                    localVariable = <U z>
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Send{
                  flags = {}
                  recv = ConstantLit{
                    symbol = (class ::<Magic>)
                    orig = nullptr
                  }
                  fun = <U <splat>>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Local{
                      localVariable = <U foo>
                    }
                  ]
                }
              ]
            }
            Array{
              elems = [
                Send{
                  flags = {}
                  recv = Hash{
                    pairs = [
                      [
                        key = Literal{ value = :j }
                        value = Local{
                          localVariable = <U j>
                        }
                      ]
                      [
                        key = Literal{ value = :k }
                        value = Local{
                          localVariable = <U k>
                        }
                      ]
                    ]
                  }
                  fun = <U merge>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Send{
                      flags = {}
                      recv = ConstantLit{
                        symbol = (class ::<Magic>)
                        orig = nullptr
                      }
                      fun = <U <to-hash-dup>>
                      block = nullptr
                      pos_args = 1
                      args = [
                        Local{
                          localVariable = <U bar>
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }

    MethodDef{
      flags = {}
      name = <U pos_possplat_pos_kw_kwsplat_blk><<U <todo method>>>
      args = [Local{
          localVariable = <U x>
        }, Local{
          localVariable = <U y>
        }, Local{
          localVariable = <U z>
        }, RestArg{ expr = Local{
          localVariable = <U foo>
        } }, Local{
          localVariable = <U p>
        }, Local{
          localVariable = <U q>
        }, KeywordArg{ expr = Local{
          localVariable = <U j>
        } }, KeywordArg{ expr = Local{
          localVariable = <U k>
        } }, RestArg{ expr = KeywordArg{ expr = Local{
          localVariable = <U bar>
        } } }, BlockArg{ expr = Local{
          localVariable = <U blk>
        } }]
      rhs = InsSeq{
        stats = [
          Send{
            flags = {privateOk}
            recv = ConstantLit{
              symbol = (class ::<Magic>)
              orig = nullptr
            }
            fun = <U <call-with-splat-and-block>>
            block = nullptr
            pos_args = 5
            args = [
              Send{
                flags = {}
                recv = ConstantLit{
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                ]
              }
              Literal{ value = :<untypedSuper> }
              Send{
                flags = {}
                recv = Send{
                  flags = {}
                  recv = Array{
                    elems = [
                      Local{
                        localVariable = <U x>
                      }
                      Local{
                        localVariable = <U y>
                      }
                      Local{
                        localVariable = <U z>
                      }
                    ]
                  }
                  fun = <U concat>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Send{
                      flags = {}
                      recv = ConstantLit{
                        symbol = (class ::<Magic>)
                        orig = nullptr
                      }
                      fun = <U <splat>>
                      block = nullptr
                      pos_args = 1
                      args = [
                        Local{
                          localVariable = <U foo>
                        }
                      ]
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Array{
                    elems = [
                      Local{
                        localVariable = <U p>
                      }
                      Local{
                        localVariable = <U q>
                      }
                    ]
                  }
                ]
              }
              Array{
                elems = [
                  Send{
                    flags = {}
                    recv = Hash{
                      pairs = [
                        [
                          key = Literal{ value = :j }
                          value = Local{
                            localVariable = <U j>
                          }
                        ]
                        [
                          key = Literal{ value = :k }
                          value = Local{
                            localVariable = <U k>
                          }
                        ]
                      ]
                    }
                    fun = <U merge>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Send{
                        flags = {}
                        recv = ConstantLit{
                          symbol = (class ::<Magic>)
                          orig = nullptr
                        }
                        fun = <U <to-hash-dup>>
                        block = nullptr
                        pos_args = 1
                        args = [
                          Local{
                            localVariable = <U bar>
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
              Local{
                localVariable = <U blk>
              }
            ]
          }
        ],
        expr = Send{
          flags = {privateOk}
          recv = ConstantLit{
            symbol = (class ::<Magic>)
            orig = nullptr
          }
          fun = <U <call-with-splat>>
          block = Block {
            args = [
            ]
            body = Send{
              flags = {privateOk}
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U puts>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ value = "hi" }
              ]
            }
          }
          pos_args = 4
          args = [
            Send{
              flags = {}
              recv = ConstantLit{
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                Local{
                  localVariable = <U <self>>
                }
              ]
            }
            Literal{ value = :<untypedSuper> }
            Send{
              flags = {}
              recv = Send{
                flags = {}
                recv = Array{
                  elems = [
                    Local{
                      localVariable = <U x>
                    }
                    Local{
                      localVariable = <U y>
                    }
                    Local{
                      localVariable = <U z>
                    }
                  ]
                }
                fun = <U concat>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    flags = {}
                    recv = ConstantLit{
                      symbol = (class ::<Magic>)
                      orig = nullptr
                    }
                    fun = <U <splat>>
                    block = nullptr
                    pos_args = 1
                    args = [
                      Local{
                        localVariable = <U foo>
                      }
                    ]
                  }
                ]
              }
              fun = <U concat>
              block = nullptr
              pos_args = 1
              args = [
                Array{
                  elems = [
                    Local{
                      localVariable = <U p>
                    }
                    Local{
                      localVariable = <U q>
                    }
                  ]
                }
              ]
            }
            Array{
              elems = [
                Send{
                  flags = {}
                  recv = Hash{
                    pairs = [
                      [
                        key = Literal{ value = :j }
                        value = Local{
                          localVariable = <U j>
                        }
                      ]
                      [
                        key = Literal{ value = :k }
                        value = Local{
                          localVariable = <U k>
                        }
                      ]
                    ]
                  }
                  fun = <U merge>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Send{
                      flags = {}
                      recv = ConstantLit{
                        symbol = (class ::<Magic>)
                        orig = nullptr
                      }
                      fun = <U <to-hash-dup>>
                      block = nullptr
                      pos_args = 1
                      args = [
                        Local{
                          localVariable = <U bar>
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }

    <runtime method definition of pos>

    <runtime method definition of possplat>

    <runtime method definition of possplat_pos>

    <runtime method definition of pos_possplat>

    <runtime method definition of pos_possplat_pos>

    <runtime method definition of pos_blk>

    <runtime method definition of possplat_blk>

    <runtime method definition of possplat_pos_blk>

    <runtime method definition of pos_possplat_blk>

    <runtime method definition of pos_possplat_pos_blk>

    <runtime method definition of pos_kw>

    <runtime method definition of possplat_kw>

    <runtime method definition of possplat_pos_kw>

    <runtime method definition of pos_possplat_kw>

    <runtime method definition of pos_possplat_pos_kw>

    <runtime method definition of pos_kwsplat>

    <runtime method definition of possplat_kwsplat>

    <runtime method definition of possplat_pos_kwsplat>

    <runtime method definition of pos_possplat_kwsplat>

    <runtime method definition of pos_possplat_pos_kwsplat>

    <runtime method definition of pos_kw_kwsplat>

    <runtime method definition of possplat_kw_kwsplat>

    <runtime method definition of possplat_pos_kw_kwsplat>

    <runtime method definition of pos_possplat_kw_kwsplat>

    <runtime method definition of pos_possplat_pos_kw_kwsplat>

    <runtime method definition of pos_kw_blk>

    <runtime method definition of possplat_kw_blk>

    <runtime method definition of possplat_pos_kw_blk>

    <runtime method definition of pos_possplat_kw_blk>

    <runtime method definition of pos_possplat_pos_kw_blk>

    <runtime method definition of pos_kwsplat_blk>

    <runtime method definition of possplat_kwsplat_blk>

    <runtime method definition of possplat_pos_kwsplat_blk>

    <runtime method definition of pos_possplat_kwsplat_blk>

    <runtime method definition of pos_possplat_pos_kwsplat_blk>

    <runtime method definition of pos_kw_kwsplat_blk>

    <runtime method definition of possplat_kw_kwsplat_blk>

    <runtime method definition of possplat_pos_kw_kwsplat_blk>

    <runtime method definition of pos_possplat_kw_kwsplat_blk>

    <runtime method definition of pos_possplat_pos_kw_kwsplat_blk>
  ]
}
