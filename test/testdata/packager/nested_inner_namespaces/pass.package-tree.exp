class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C RootPackage><<C <todo sym>>> < (<emptyTree>::<C PackageSpec>)
    <self>.import(<emptyTree>::<C RootPackage>::<C Foo>)
  end

  module <emptyTree>::<C <PackageRegistry>><<C <todo sym>>> < ()
    module <emptyTree>::<C RootPackage_Package$1>::<C RootPackage>::<C Foo>::<C Bar><<C <todo sym>>> < ()
      <emptyTree>::<C Baz> = <emptyTree>::<C <PackageRegistry>>::<C RootPackage_Foo_Package$1>::<C RootPackage>::<C Foo>::<C Bar>::<C Baz>
    end

    module <emptyTree>::<C RootPackage_Package$1>::<C RootPackage>::<C Foo>::<C Bar><<C <todo sym>>> < ()
      <emptyTree>::<C Constant> = <emptyTree>::<C <PackageRegistry>>::<C RootPackage_Foo_Package$1>::<C RootPackage>::<C Foo>::<C Bar>::<C Constant>
    end

    module <emptyTree>::<C RootPackage_Package$1>::<C RootPackage>::<C Foo><<C <todo sym>>> < ()
      <emptyTree>::<C Constant> = <emptyTree>::<C <PackageRegistry>>::<C RootPackage_Foo_Package$1>::<C RootPackage>::<C Foo>::<C Constant>
    end
  end

  module <emptyTree>::<C <PackageTests>><<C <todo sym>>> < ()
    module <emptyTree>::<C RootPackage_Package$1>::<C RootPackage>::<C Foo>::<C Bar><<C <todo sym>>> < ()
      <emptyTree>::<C Baz> = <emptyTree>::<C <PackageRegistry>>::<C RootPackage_Foo_Package$1>::<C RootPackage>::<C Foo>::<C Bar>::<C Baz>
    end

    module <emptyTree>::<C RootPackage_Package$1>::<C RootPackage>::<C Foo>::<C Bar><<C <todo sym>>> < ()
      <emptyTree>::<C Constant> = <emptyTree>::<C <PackageRegistry>>::<C RootPackage_Foo_Package$1>::<C RootPackage>::<C Foo>::<C Bar>::<C Constant>
    end

    module <emptyTree>::<C RootPackage_Package$1>::<C RootPackage>::<C Foo><<C <todo sym>>> < ()
      <emptyTree>::<C Constant> = <emptyTree>::<C <PackageRegistry>>::<C RootPackage_Foo_Package$1>::<C RootPackage>::<C Foo>::<C Constant>
    end

    <emptyTree>::<C RootPackage_Package$1>::<C RootPackage> = <emptyTree>::<C <PackageRegistry>>::<C RootPackage_Package$1>::<C RootPackage>
  end
end
class <emptyTree><<C <root>>> < (::<todo sym>)
  module <emptyTree>::<C <PackageRegistry>>::<C RootPackage_Package$1><<C <todo sym>>> < ()
    module <emptyTree>::<C RootPackage>::<C Bar><<C <todo sym>>> < ()
      ::Sorbet::Private::Static.sig(<self>) do ||
        <self>.params(:a, <emptyTree>::<C Integer>).returns(<emptyTree>::<C String>)
      end

      def main<<todo method>>(a, &<blk>)
        if a.>(10)
          <emptyTree>::<C RootPackage>::<C Foo>::<C Constant>
        else
          if a.<(4)
            <emptyTree>::<C RootPackage>::<C Foo>::<C Bar>::<C Constant>
          else
            <emptyTree>::<C RootPackage>::<C Foo>::<C Bar>::<C Baz>::<C Constant>
          end
        end
      end

      <self>.extend(<emptyTree>::<C T>::<C Sig>)

      ::Sorbet::Private::Static.keep_def(<self>, :main, :normal)
    end
  end
end
class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C RootPackage>::<C Foo><<C <todo sym>>> < (<emptyTree>::<C PackageSpec>)
    <self>.export(<emptyTree>::<C <PackageRegistry>>::<C RootPackage_Foo_Package$1>::<C RootPackage>::<C Foo>::<C Constant>)

    <self>.export(<emptyTree>::<C <PackageRegistry>>::<C RootPackage_Foo_Package$1>::<C RootPackage>::<C Foo>::<C Bar>::<C Constant>)

    <self>.export(<emptyTree>::<C <PackageRegistry>>::<C RootPackage_Foo_Package$1>::<C RootPackage>::<C Foo>::<C Bar>::<C Baz>)
  end

  module <emptyTree>::<C <PackageRegistry>><<C <todo sym>>> < ()
  end

  module <emptyTree>::<C <PackageTests>><<C <todo sym>>> < ()
    <emptyTree>::<C RootPackage_Foo_Package$1>::<C RootPackage>::<C Foo> = <emptyTree>::<C <PackageRegistry>>::<C RootPackage_Foo_Package$1>::<C RootPackage>::<C Foo>
  end
end
class <emptyTree><<C <root>>> < (::<todo sym>)
  module <emptyTree>::<C <PackageRegistry>>::<C RootPackage_Foo_Package$1><<C <todo sym>>> < ()
    module <emptyTree>::<C RootPackage>::<C Foo><<C <todo sym>>> < ()
      <emptyTree>::<C Constant> = "Foo"

      module <emptyTree>::<C Bar><<C <todo sym>>> < ()
        <emptyTree>::<C Constant> = "Bar"

        module <emptyTree>::<C Baz><<C <todo sym>>> < ()
          <emptyTree>::<C Constant> = "Baz"
        end
      end
    end
  end
end
