# -- test/testdata/packager/invalid_imports_and_exports/__package.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  class ::<PackageSpecRegistry>::A<<C A>> < (::Sorbet::Private::Static::PackageSpec)
    <self>.import(123)

    <self>.import("hello")

    <self>.import(<self>.method())

    <self>.import(::<PackageSpecRegistry>::<C REFERENCE>)

    <self>.import(::<PackageSpecRegistry>::<C B>)

    <self>.import(::<PackageSpecRegistry>::<C B>)

    <self>.export(123)

    <self>.export("hello")

    <self>.export(<self>.method())

    <self>.export(<emptyTree>::<C A>::<C REFERENCE>)

    <self>.export(<emptyTree>::<C A>::<C AClass>)

    <self>.export(<emptyTree>::<C A>::<C AModule>)

    <self>.test_import(::<PackageSpecRegistry>::<C B>)

    <self>.test_import(::<PackageSpecRegistry>::<C C>)

    <self>.test_import(::<PackageSpecRegistry>::<C C>)
  end
end
# -- test/testdata/packager/invalid_imports_and_exports/b/__package.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  class ::<PackageSpecRegistry>::B<<C B>> < (::Sorbet::Private::Static::PackageSpec)
    <self>.import(::<PackageSpecRegistry>::<C A>)

    <self>.export(<emptyTree>::<C B>::<C BClass>)

    <self>.export(<emptyTree>::<C B>::<C BModule>)
  end
end
# -- test/testdata/packager/invalid_imports_and_exports/c/__package.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  class ::<PackageSpecRegistry>::C<<C C>> < (::Sorbet::Private::Static::PackageSpec)
  end
end
# -- test/testdata/packager/invalid_imports_and_exports/a.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  module ::A<<C A>> < ()
    ::A::REFERENCE = <emptyTree>::<C ASecondClass>

    class ::A::ASecondClass<<C ASecondClass>> < (::<todo sym>)
    end

    class ::A::AClass<<C AClass>> < (::<todo sym>)
      ::Sorbet::Private::Static.sig(<self>) do ||
        <self>.returns(<emptyTree>::<C AClass>)
      end

      def get_a(<blk>)
        <emptyTree>::<C B>::<C BModule>.get_a()
      end

      <self>.extend(<emptyTree>::<C T>::<C Sig>)

      <runtime method definition of get_a>
    end

    module ::A::AModule<<C AModule>> < ()
      ::Sorbet::Private::Static.sig(<self>) do ||
        <self>.returns(<emptyTree>::<C Integer>)
      end

      def self.one(<blk>)
        1
      end

      <self>.extend(<emptyTree>::<C T>::<C Sig>)

      <runtime method definition of self.one>
    end
  end
end
# -- test/testdata/packager/invalid_imports_and_exports/b/b.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  module ::B<<C B>> < ()
    class ::B::BClass<<C BClass>> < (::<todo sym>)
      ::Sorbet::Private::Static.sig(<self>) do ||
        <self>.returns(<emptyTree>::<C Integer>)
      end

      def get_one(<blk>)
        <emptyTree>::<C A>::<C AModule>.one()
      end

      <self>.extend(<emptyTree>::<C T>::<C Sig>)

      <runtime method definition of get_one>
    end

    module ::B::BModule<<C BModule>> < ()
      ::Sorbet::Private::Static.sig(<self>) do ||
        <self>.returns(<emptyTree>::<C A>::<C AClass>)
      end

      def self.get_a(<blk>)
        <emptyTree>::<C A>::<C AClass>.new()
      end

      <self>.extend(<emptyTree>::<C T>::<C Sig>)

      <runtime method definition of self.get_a>
    end
  end
end
