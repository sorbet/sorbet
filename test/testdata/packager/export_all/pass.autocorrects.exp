# -- test/testdata/packager/export_all/__package.rb --
# frozen_string_literal: true
# typed: strict
# enable-packager: true

class Foo::Bar < PackageSpec
  export_all!
# ^^^^^^^^^^^ error: Package `Foo::Bar` declares `export_all!` and therefore should not use explicit exports

  export_all!()
            # ^^^^^^^^^^^^^^ error: Too many arguments


end
# ------------------------------
# -- test/testdata/packager/export_all/foo_bar.rb --
# typed: strict

module Foo::Bar
  class Thing
    extend T::Sig

    sig {void}
    def self.hello; end
  end

  class OtherThing
  end
end
# ------------------------------
# -- test/testdata/packager/export_all/foo_bar_baz/__package.rb --
# frozen_string_literal: true
# typed: strict
# enable-packager: true

class Foo::Bar::Baz < PackageSpec
  export Foo::Bar::Baz::Quux
end
# ------------------------------
# -- test/testdata/packager/export_all/foo_bar_baz/foo_bar_baz.rb --
# typed: strict

module Foo::Bar::Baz
  class Quux
    extend T::Sig

    sig { void }
    def example; end
  end
end
# ------------------------------
# -- test/testdata/packager/export_all/other/__package.rb --
# frozen_string_literal: true
# typed: strict

class Other < PackageSpec
  import Foo::Bar
  import Foo::Bar::Baz
  import Typical

  export_all!
# ^^^^^^^^^^^ error: Package `Other` declares `export_all!` and therefore should not use explicit exports

end
# ------------------------------
# -- test/testdata/packager/export_all/other/other.rb --
# frozen_string_literal: true
# typed: strict

class Other::OtherClass
  Foo::Bar::Thing.hello # This ref still works
  Foo::Bar::OtherThing # anything from the package should be fine

  # because `Foo::Bar::Baz` is a subpackage, the export walk should stop
  # and not export the stuff under that namespace
  Foo::Bar::Baz::Quux
# ^^^^^^^^^^^^^^^^^^^ error: `Foo::Bar::Baz::Quux` resolves but is not exported

  Typical::Example # packages that don't use `export_all` are not affected
  Typical::NonExported # packages that don't use `export_all` are not affected
# ^^^^^^^^^^^^^^^^^^^^ error: `Typical::NonExported` resolves but is not exported
end
# ------------------------------
# -- test/testdata/packager/export_all/other/other2.rb --
# frozen_string_literal: true
# typed: strict

class Other::OtherClass2
end
# ------------------------------
# -- test/testdata/packager/export_all/typical/__package.rb --
# frozen_string_literal: true
# typed: strict

class Typical < PackageSpec
  export Typical::Example
end
# ------------------------------
# -- test/testdata/packager/export_all/typical/typical.rb --
# typed: strict

module Typical
  class Example; end
  class NonExported; end
end
# ------------------------------
