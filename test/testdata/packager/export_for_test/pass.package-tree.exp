# -- test/testdata/packager/export_for_test/__package.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  class ::<PackageSpecRegistry>::RootPkg<<C RootPkg>> < (::Sorbet::Private::Static::PackageSpec)
  end
end
# -- test/testdata/packager/export_for_test/foo/__package.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  class ::<PackageSpecRegistry>::Opus::Foo<<C Foo>> < (::Sorbet::Private::Static::PackageSpec)
    <self>.import(::<PackageSpecRegistry>::<C Opus>::<C Foo>::<C Bar>)

    <self>.import(::<PackageSpecRegistry>::<C Opus>::<C Util>)

    <self>.test_import(::<PackageSpecRegistry>::<C Opus>::<C TestImported>)

    <self>.export(<emptyTree>::<C Opus>::<C Foo>::<C FooClass>)

    <self>.export_for_test(<emptyTree>::<C Opus>::<C Foo>::<C Private>::<C ImplDetail>)

    <self>.export_for_test(<emptyTree>::<C Test>::<C Opus>::<C Foo>::<C FooTest>)
  end
end
# -- test/testdata/packager/export_for_test/foo/bar/__package.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  class ::<PackageSpecRegistry>::Opus::Foo::Bar<<C Bar>> < (::Sorbet::Private::Static::PackageSpec)
    <self>.export(<emptyTree>::<C Opus>::<C Foo>::<C Bar>::<C BarClass>)

    <self>.export(<emptyTree>::<C Test>::<C Opus>::<C Foo>::<C Bar>::<C BarClassTest>)
  end
end
# -- test/testdata/packager/export_for_test/test_imported/__package.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  class ::<PackageSpecRegistry>::Opus::TestImported<<C TestImported>> < (::Sorbet::Private::Static::PackageSpec)
    <self>.export(<emptyTree>::<C Opus>::<C TestImported>::<C TIClass>)

    <self>.export(<emptyTree>::<C Test>::<C Opus>::<C TestImported>::<C TITestClass>)
  end
end
# -- test/testdata/packager/export_for_test/util/__package.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  class ::<PackageSpecRegistry>::Opus::Util<<C Util>> < (::Sorbet::Private::Static::PackageSpec)
    <self>.export(<emptyTree>::<C Opus>::<C Util>::<C UtilClass>)

    <self>.export(<emptyTree>::<C Test>::<C Opus>::<C Util>::<C TestUtil>)

    <self>.export(<emptyTree>::<C Opus>::<C Util>::<C Nesting>::<C Public>)

    <self>.export_for_test(<emptyTree>::<C Opus>::<C Util>::<C Nesting>)
  end
end
# -- test/testdata/packager/export_for_test/foo/bar/bar.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  class ::Opus::Foo::Bar::BarClass<<C BarClass>> < (::<todo sym>)
  end
end
# -- test/testdata/packager/export_for_test/foo/bar/bar.test.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  module ::Test::Opus::Foo::Bar<<C Bar>> < ()
    class ::Test::Opus::Foo::Bar::BarClassTest<<C BarClassTest>> < (::<todo sym>)
    end
  end
end
# -- test/testdata/packager/export_for_test/foo/foo.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  module ::Opus::Foo<<C Foo>> < ()
    class ::Opus::Foo::FooClass<<C FooClass>> < (::<todo sym>)
      ::Opus::Foo::FooClass::Inner = 1
    end

    class ::Opus::Foo::FooUnexported<<C FooUnexported>> < (::<todo sym>)
    end

    class ::Opus::Foo::Private::ImplDetail<<C ImplDetail>> < (::<todo sym>)
      ::Sorbet::Private::Static.sig(<self>) do ||
        <self>.void()
      end

      def self.stub_stuff!(<blk>)
        <emptyTree>
      end

      <self>.extend(<emptyTree>::<C T>::<C Sig>)

      <runtime method definition of self.stub_stuff!>
    end

    <emptyTree>::<C Opus>::<C Foo>::<C Bar>::<C BarClass>

    <emptyTree>::<C Test>::<C Opus>::<C Foo>::<C Bar>::<C BarClassTest>

    <emptyTree>::<C Opus>::<C Util>::<C UtilClass>

    <emptyTree>::<C Test>::<C Opus>::<C Util>::<C TestUtil>

    <emptyTree>::<C Opus>::<C Util>::<C Nesting>::<C Public>.public_method()

    <emptyTree>::<C Opus>::<C Util>::<C Nesting>.nesting_method()

    <emptyTree>::<C Opus>::<C TestImported>::<C TIClass>

    <emptyTree>::<C Test>::<C Opus>::<C TestImported>::<C TITestClass>

    <emptyTree>::<C Opus>::<C Foo>::<C Private>::<C ImplDetail>.stub_stuff!()

    <emptyTree>::<C Opus>::<C Foo>::<C FooUnexported>
  end
end
# -- test/testdata/packager/export_for_test/foo/foo.test.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  class ::Test::Opus::Foo::FooTest<<C FooTest>> < (::<todo sym>)
    <emptyTree>::<C Opus>::<C Foo>::<C Bar>::<C BarClass>

    <emptyTree>::<C Test>::<C Opus>::<C Foo>::<C Bar>::<C BarClassTest>

    <emptyTree>::<C Opus>::<C Util>::<C UtilClass>

    <emptyTree>::<C Test>::<C Opus>::<C Util>::<C TestUtil>

    <emptyTree>::<C Opus>::<C Util>::<C Nesting>::<C Public>.public_method()

    <emptyTree>::<C Opus>::<C Util>::<C Nesting>.nesting_method()

    <emptyTree>::<C Opus>::<C TestImported>::<C TIClass>

    <emptyTree>::<C Test>::<C Opus>::<C TestImported>::<C TITestClass>

    <emptyTree>::<C Opus>::<C Foo>::<C FooClass>

    <emptyTree>::<C Opus>::<C Foo>::<C FooClass>::<C Inner>

    <emptyTree>::<C Opus>::<C Foo>::<C Private>::<C ImplDetail>.stub_stuff!()

    <emptyTree>::<C Opus>::<C Foo>::<C FooUnexported>
  end
end
# -- test/testdata/packager/export_for_test/test_imported/test_imported.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  module ::Opus::TestImported<<C TestImported>> < ()
    class ::Opus::TestImported::TIClass<<C TIClass>> < (::<todo sym>)
    end
  end
end
# -- test/testdata/packager/export_for_test/test_imported/test_imported.test.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  module ::Test::Opus::TestImported<<C TestImported>> < ()
    class ::Test::Opus::TestImported::TITestClass<<C TITestClass>> < (::<todo sym>)
    end
  end
end
# -- test/testdata/packager/export_for_test/util/util.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  module ::Opus::Util<<C Util>> < ()
    class ::Opus::Util::UtilClass<<C UtilClass>> < (::<todo sym>)
    end

    module ::Opus::Util::Nesting<<C Nesting>> < ()
      ::Sorbet::Private::Static.sig(<self>) do ||
        <self>.void()
      end

      def self.nesting_method(<blk>)
        <emptyTree>
      end

      <self>.extend(<emptyTree>::<C T>::<C Sig>)

      <runtime method definition of self.nesting_method>

      class ::Opus::Util::Nesting::OnlyForSelf<<C OnlyForSelf>> < (::<todo sym>)
      end

      class ::Opus::Util::Nesting::Public<<C Public>> < (::<todo sym>)
        ::Sorbet::Private::Static.sig(<self>) do ||
          <self>.void()
        end

        def self.public_method(<blk>)
          <emptyTree>
        end

        <self>.extend(<emptyTree>::<C T>::<C Sig>)

        <runtime method definition of self.public_method>
      end
    end
  end
end
# -- test/testdata/packager/export_for_test/util/util.test.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  module ::Test::Opus::Util<<C Util>> < ()
    class ::Test::Opus::Util::TestUtil<<C TestUtil>> < (::<todo sym>)
    end

    <emptyTree>::<C Opus>::<C Util>::<C Nesting>.nesting_method()

    <emptyTree>::<C Opus>::<C Util>::<C Nesting>::<C Public>.public_method()
  end
end
