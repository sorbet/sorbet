# -- test/testdata/packager/simple_package/bar/__package.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  class ::<PackageSpecRegistry>::<C Project>::<C Bar><<C <todo sym>>> < (::PackageSpec)
    <self>.import(::<PackageSpecRegistry>::<C Project>::<C Foo>)

    <self>.export(::<root>::<C Project>::<C Bar>::<C Bar>)

    <self>.export(::<root>::<C Project>::<C Bar>::<C CallsFoo>)
  end
end
# -- test/testdata/packager/simple_package/foo/__package.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  class ::<PackageSpecRegistry>::<C Project>::<C Foo><<C <todo sym>>> < (::PackageSpec)
    <self>.import(::<PackageSpecRegistry>::<C Project>::<C Bar>)

    <self>.export(::<root>::<C Project>::<C Foo>::<C Foo>)

    <self>.export(::<root>::<C Project>::<C Foo>::<C CallsBar>)
  end
end
# -- test/testdata/packager/simple_package/bar/bar.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C Project>::<C Bar>::<C Bar><<C <todo sym>>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.params(:value, <emptyTree>::<C Integer>).void()
    end

    def initialize<<todo method>>(value, &<blk>)
      @value = <cast:let>(value, <todo sym>, <emptyTree>::<C Integer>)
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <runtime method definition of initialize>
  end
end
# -- test/testdata/packager/simple_package/bar/calls_foo.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  module <emptyTree>::<C Project>::<C Bar>::<C CallsFoo><<C <todo sym>>> < ()
    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.returns(<emptyTree>::<C Project>::<C Foo>::<C Foo>)
    end

    def self.build_foo<<todo method>>(&<blk>)
      <emptyTree>::<C Project>::<C Foo>::<C Foo>.new(10)
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.returns(<emptyTree>::<C Project>::<C Bar>::<C Bar>)
    end

    def self.build_bar<<todo method>>(&<blk>)
      <emptyTree>::<C Project>::<C Foo>::<C CallsBar>.build_bar()
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <runtime method definition of self.build_foo>

    <runtime method definition of self.build_bar>
  end
end
# -- test/testdata/packager/simple_package/foo/calls_bar.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  module <emptyTree>::<C Project>::<C Foo>::<C CallsBar><<C <todo sym>>> < ()
    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.returns(<emptyTree>::<C Project>::<C Bar>::<C Bar>)
    end

    def self.build_bar<<todo method>>(&<blk>)
      <emptyTree>::<C Project>::<C Bar>::<C Bar>.new(10)
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <runtime method definition of self.build_bar>
  end
end
# -- test/testdata/packager/simple_package/foo/foo.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C Project>::<C Foo>::<C Foo><<C <todo sym>>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.params(:value, <emptyTree>::<C Integer>).void()
    end

    def initialize<<todo method>>(value, &<blk>)
      @value = <cast:let>(value, <todo sym>, <emptyTree>::<C Integer>)
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <runtime method definition of initialize>
  end
end
