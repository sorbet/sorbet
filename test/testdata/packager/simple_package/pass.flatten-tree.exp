begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        ::<Magic>.<define-top-class-or-module>(::<PackageRegistry>::Project_Bar_Package_Private)
        ::Sorbet::Private::Static.keep_for_ide(::<PackageRegistry>::Project_Bar_Package_Private)
        <emptyTree>
      end
    end
  end
  module ::<PackageRegistry>::Project_Bar_Package_Private<<C Project_Bar_Package_Private$1>> < ()
    def self.<static-init>(<blk>)
      begin
        ::<Magic>.<define-top-class-or-module>(::<PackageRegistry>::Project_Bar_Package_Private::Project::Bar::CallsFoo)
        ::Sorbet::Private::Static.keep_for_ide(::<PackageRegistry>::Project_Bar_Package_Private::Project::Bar::CallsFoo)
        <emptyTree>
      end
    end
  end
  module ::<PackageRegistry>::Project_Bar_Package_Private::Project::Bar::CallsFoo<<C CallsFoo>> < ()
    def self.build_foo(<blk>)
      ::<PackageRegistry>::Project_Foo_Package_Private::Project::Foo::Foo.new(10)
    end

    def self.build_bar(<blk>)
      ::<PackageRegistry>::Project_Foo_Package_Private::Project::Foo::CallsBar.build_bar()
    end

    def self.<static-init>(<blk>)
      begin
        ::Sorbet::Private::Static::ResolvedSig.sig(<self>, true, :build_foo) do ||
          <self>.returns(::<PackageRegistry>::Project_Foo_Package_Private::Project::Foo::Foo)
        end
        ::Sorbet::Private::Static::ResolvedSig.sig(<self>, true, :build_bar) do ||
          <self>.returns(::<PackageRegistry>::Project_Bar_Package_Private::Project::Bar::Bar)
        end
        <self>.extend(::T::Sig)
        ::Sorbet::Private::Static.keep_self_def(<self>, :build_foo, :normal)
        ::Sorbet::Private::Static.keep_self_def(<self>, :build_bar, :normal)
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        ::<Magic>.<define-top-class-or-module>(::<PackageRegistry>::Project_Foo_Package_Private)
        ::Sorbet::Private::Static.keep_for_ide(::<PackageRegistry>::Project_Foo_Package_Private)
        <emptyTree>
      end
    end
  end
  module ::<PackageRegistry>::Project_Foo_Package_Private<<C Project_Foo_Package_Private$1>> < ()
    def self.<static-init>(<blk>)
      begin
        ::<Magic>.<define-top-class-or-module>(::<PackageRegistry>::Project_Foo_Package_Private::Project::Foo::CallsBar)
        ::Sorbet::Private::Static.keep_for_ide(::<PackageRegistry>::Project_Foo_Package_Private::Project::Foo::CallsBar)
        <emptyTree>
      end
    end
  end
  module ::<PackageRegistry>::Project_Foo_Package_Private::Project::Foo::CallsBar<<C CallsBar>> < ()
    def self.build_bar(<blk>)
      ::<PackageRegistry>::Project_Bar_Package_Private::Project::Bar::Bar.new(10)
    end

    def self.<static-init>(<blk>)
      begin
        ::Sorbet::Private::Static::ResolvedSig.sig(<self>, true, :build_bar) do ||
          <self>.returns(::<PackageRegistry>::Project_Bar_Package_Private::Project::Bar::Bar)
        end
        <self>.extend(::T::Sig)
        ::Sorbet::Private::Static.keep_self_def(<self>, :build_bar, :normal)
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        ::<Magic>.<define-top-class-or-module>(::<PackageRegistry>::Project_Bar_Package_Private)
        ::Sorbet::Private::Static.keep_for_ide(::<PackageRegistry>::Project_Bar_Package_Private)
        <emptyTree>
      end
    end
  end
  module ::<PackageRegistry>::Project_Bar_Package_Private<<C Project_Bar_Package_Private$1>> < ()
    def self.<static-init>(<blk>)
      begin
        ::<Magic>.<define-top-class-or-module>(::<PackageRegistry>::Project_Bar_Package_Private::Project::Bar::Bar)
        ::Sorbet::Private::Static.keep_for_ide(::<PackageRegistry>::Project_Bar_Package_Private::Project::Bar::Bar)
        <emptyTree>
      end
    end
  end
  class ::<PackageRegistry>::Project_Bar_Package_Private::Project::Bar::Bar<<C Bar>> < (::<todo sym>)
    def initialize(value, <blk>)
      @value = begin
        ::Sorbet::Private::Static.keep_for_typechecking(::Integer)
        T.let(value, Integer)
      end
    end

    def self.<static-init>(<blk>)
      begin
        ::Sorbet::Private::Static::ResolvedSig.sig(<self>, false, :initialize) do ||
          <self>.params(:value, ::Integer).void()
        end
        <self>.extend(::T::Sig)
        ::Sorbet::Private::Static.keep_def(<self>, :initialize, :normal)
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        ::<Magic>.<define-top-class-or-module>(::<PackageRegistry>::Project_Foo_Package_Private)
        ::Sorbet::Private::Static.keep_for_ide(::<PackageRegistry>::Project_Foo_Package_Private)
        <emptyTree>
      end
    end
  end
  module ::<PackageRegistry>::Project_Foo_Package_Private<<C Project_Foo_Package_Private$1>> < ()
    def self.<static-init>(<blk>)
      begin
        ::<Magic>.<define-top-class-or-module>(::<PackageRegistry>::Project_Foo_Package_Private::Project::Foo::Foo)
        ::Sorbet::Private::Static.keep_for_ide(::<PackageRegistry>::Project_Foo_Package_Private::Project::Foo::Foo)
        <emptyTree>
      end
    end
  end
  class ::<PackageRegistry>::Project_Foo_Package_Private::Project::Foo::Foo<<C Foo>> < (::<todo sym>)
    def initialize(value, <blk>)
      @value = begin
        ::Sorbet::Private::Static.keep_for_typechecking(::Integer)
        T.let(value, Integer)
      end
    end

    def self.<static-init>(<blk>)
      begin
        ::Sorbet::Private::Static::ResolvedSig.sig(<self>, false, :initialize) do ||
          <self>.params(:value, ::Integer).void()
        end
        <self>.extend(::T::Sig)
        ::Sorbet::Private::Static.keep_def(<self>, :initialize, :normal)
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        begin
          ::<Magic>.<define-top-class-or-module>(::<PackageSpecRegistry>::Project::Bar)
          ::Sorbet::Private::Static.keep_for_ide(::<PackageSpecRegistry>::Project::Bar)
          ::Sorbet::Private::Static.keep_for_ide(::PackageSpec)
          <emptyTree>
        end
        begin
          ::<Magic>.<define-top-class-or-module>(::<PackageRegistry>)
          ::Sorbet::Private::Static.keep_for_ide(::<PackageRegistry>)
          <emptyTree>
        end
        begin
          ::<Magic>.<define-top-class-or-module>(::<PackageTests>)
          ::Sorbet::Private::Static.keep_for_ide(::<PackageTests>)
          <emptyTree>
        end
        begin
          ::<Magic>.<define-top-class-or-module>(::<PackageRegistry>)
          ::Sorbet::Private::Static.keep_for_ide(::<PackageRegistry>)
          <emptyTree>
        end
        begin
          ::<Magic>.<define-top-class-or-module>(::<PackageTests>)
          ::Sorbet::Private::Static.keep_for_ide(::<PackageTests>)
          <emptyTree>
        end
        <emptyTree>
      end
    end
  end
  class ::<PackageSpecRegistry>::Project::Bar<<C Bar>> < (::PackageSpec)
    def self.<static-init>(<blk>)
      begin
        <self>.import(::<PackageSpecRegistry>::Project::Foo)
        <self>.export(::<PackageRegistry>::Project_Bar_Package_Private::Project::Bar::Bar)
        <self>.export(::<PackageRegistry>::Project_Bar_Package_Private::Project::Bar::CallsFoo)
        <emptyTree>
      end
    end
  end
  module ::<PackageRegistry><<C <PackageRegistry>>> < ()
    def self.<static-init>(<blk>)
      ::<PackageRegistry>::Project_Bar_Package_Private::Project::Foo = ::<PackageRegistry>::Project_Foo_Package::Project::Foo
    end
  end
  module ::<PackageTests><<C <PackageTests>>> < ()
    def self.<static-init>(<blk>)
      begin
        ::<PackageTests>::Project_Bar_Package_Private::Project::Bar::Bar = ::<PackageRegistry>::Project_Bar_Package_Private::Project::Bar::Bar
        ::<PackageTests>::Project_Bar_Package_Private::Project::Bar::CallsFoo = ::<PackageRegistry>::Project_Bar_Package_Private::Project::Bar::CallsFoo
        ::<PackageTests>::Project_Bar_Package_Private::Project::Foo = ::<PackageRegistry>::Project_Foo_Package::Project::Foo
        <emptyTree>
      end
    end
  end
  module ::<PackageRegistry><<C <PackageRegistry>>> < ()
    def self.<static-init>(<blk>)
      begin
        ::<PackageRegistry>::Project_Bar_Package::Project::Bar::Bar = ::<PackageRegistry>::Project_Bar_Package_Private::Project::Bar::Bar
        ::<PackageRegistry>::Project_Bar_Package::Project::Bar::CallsFoo = ::<PackageRegistry>::Project_Bar_Package_Private::Project::Bar::CallsFoo
        <emptyTree>
      end
    end
  end
  module ::<PackageTests><<C <PackageTests>>> < ()
    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  <emptyTree>
end
begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        begin
          ::<Magic>.<define-top-class-or-module>(::<PackageSpecRegistry>::Project::Foo)
          ::Sorbet::Private::Static.keep_for_ide(::<PackageSpecRegistry>::Project::Foo)
          ::Sorbet::Private::Static.keep_for_ide(::PackageSpec)
          <emptyTree>
        end
        begin
          ::<Magic>.<define-top-class-or-module>(::<PackageRegistry>)
          ::Sorbet::Private::Static.keep_for_ide(::<PackageRegistry>)
          <emptyTree>
        end
        begin
          ::<Magic>.<define-top-class-or-module>(::<PackageTests>)
          ::Sorbet::Private::Static.keep_for_ide(::<PackageTests>)
          <emptyTree>
        end
        begin
          ::<Magic>.<define-top-class-or-module>(::<PackageRegistry>)
          ::Sorbet::Private::Static.keep_for_ide(::<PackageRegistry>)
          <emptyTree>
        end
        begin
          ::<Magic>.<define-top-class-or-module>(::<PackageTests>)
          ::Sorbet::Private::Static.keep_for_ide(::<PackageTests>)
          <emptyTree>
        end
        <emptyTree>
      end
    end
  end
  class ::<PackageSpecRegistry>::Project::Foo<<C Foo>> < (::PackageSpec)
    def self.<static-init>(<blk>)
      begin
        <self>.import(::<PackageSpecRegistry>::Project::Bar)
        <self>.export(::<PackageRegistry>::Project_Foo_Package_Private::Project::Foo::Foo)
        <self>.export(::<PackageRegistry>::Project_Foo_Package_Private::Project::Foo::CallsBar)
        <emptyTree>
      end
    end
  end
  module ::<PackageRegistry><<C <PackageRegistry>>> < ()
    def self.<static-init>(<blk>)
      ::<PackageRegistry>::Project_Foo_Package_Private::Project::Bar = ::<PackageRegistry>::Project_Bar_Package::Project::Bar
    end
  end
  module ::<PackageTests><<C <PackageTests>>> < ()
    def self.<static-init>(<blk>)
      begin
        ::<PackageTests>::Project_Foo_Package_Private::Project::Bar = ::<PackageRegistry>::Project_Bar_Package::Project::Bar
        ::<PackageTests>::Project_Foo_Package_Private::Project::Foo::CallsBar = ::<PackageRegistry>::Project_Foo_Package_Private::Project::Foo::CallsBar
        ::<PackageTests>::Project_Foo_Package_Private::Project::Foo::Foo = ::<PackageRegistry>::Project_Foo_Package_Private::Project::Foo::Foo
        <emptyTree>
      end
    end
  end
  module ::<PackageRegistry><<C <PackageRegistry>>> < ()
    def self.<static-init>(<blk>)
      begin
        ::<PackageRegistry>::Project_Foo_Package::Project::Foo::CallsBar = ::<PackageRegistry>::Project_Foo_Package_Private::Project::Foo::CallsBar
        ::<PackageRegistry>::Project_Foo_Package::Project::Foo::Foo = ::<PackageRegistry>::Project_Foo_Package_Private::Project::Foo::Foo
        <emptyTree>
      end
    end
  end
  module ::<PackageTests><<C <PackageTests>>> < ()
    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  <emptyTree>
end
