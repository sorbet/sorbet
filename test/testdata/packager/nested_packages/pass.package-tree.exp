class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C Package><<C <todo sym>>> < (<emptyTree>::<C PackageSpec>)
    <self>.import(<emptyTree>::<C Package>::<C Subpackage>)

    <self>.export(<emptyTree>::<C <PackageRegistry>>::<C Package_Package$1>::<C Package>::<C PackageClass>)
  end

  module <emptyTree>::<C <PackageRegistry>><<C <todo sym>>> < ()
    module <emptyTree>::<C Package_Package$1>::<C Package>::<C Subpackage><<C <todo sym>>> < ()
      <emptyTree>::<C SubpackageClass> = <emptyTree>::<C <PackageRegistry>>::<C Package_Subpackage_Package$1>::<C Package>::<C Subpackage>::<C SubpackageClass>
    end
  end

  module <emptyTree>::<C <PackageTests>><<C <todo sym>>> < ()
    module <emptyTree>::<C Package_Package$1>::<C Package>::<C Subpackage><<C <todo sym>>> < ()
      <emptyTree>::<C SubpackageClass> = <emptyTree>::<C <PackageRegistry>>::<C Package_Subpackage_Package$1>::<C Package>::<C Subpackage>::<C SubpackageClass>
    end

    <emptyTree>::<C Package_Package$1>::<C Package> = <emptyTree>::<C <PackageRegistry>>::<C Package_Package$1>::<C Package>
  end
end
class <emptyTree><<C <root>>> < (::<todo sym>)
  module <emptyTree>::<C <PackageRegistry>>::<C Package_Package$1><<C <todo sym>>> < ()
    class <emptyTree>::<C Package>::<C PackageClass><<C <todo sym>>> < (::<todo sym>)
      ::Sorbet::Private::Static.sig(<self>) do ||
        <self>.returns(<emptyTree>::<C Package>::<C Subpackage>::<C SubpackageClass>)
      end

      def self.subpkg_class<<todo method>>(&<blk>)
        <emptyTree>::<C Package>::<C Subpackage>::<C SubpackageClass>.new()
      end

      <self>.extend(<emptyTree>::<C T>::<C Sig>)

      ::Sorbet::Private::Static.keep_self_def(<self>, :subpkg_class, :normal)
    end
  end
end
class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C Package>::<C Subpackage><<C <todo sym>>> < (<emptyTree>::<C PackageSpec>)
    <self>.import(<emptyTree>::<C Package>)

    <self>.export(<emptyTree>::<C <PackageRegistry>>::<C Package_Subpackage_Package$1>::<C Package>::<C Subpackage>::<C SubpackageClass>)
  end

  module <emptyTree>::<C <PackageRegistry>><<C <todo sym>>> < ()
    module <emptyTree>::<C Package_Subpackage_Package$1>::<C Package><<C <todo sym>>> < ()
      <emptyTree>::<C PackageClass> = <emptyTree>::<C <PackageRegistry>>::<C Package_Package$1>::<C Package>::<C PackageClass>
    end
  end

  module <emptyTree>::<C <PackageTests>><<C <todo sym>>> < ()
    module <emptyTree>::<C Package_Subpackage_Package$1>::<C Package><<C <todo sym>>> < ()
      <emptyTree>::<C PackageClass> = <emptyTree>::<C <PackageRegistry>>::<C Package_Package$1>::<C Package>::<C PackageClass>
    end

    <emptyTree>::<C Package_Subpackage_Package$1>::<C Package>::<C Subpackage> = <emptyTree>::<C <PackageRegistry>>::<C Package_Subpackage_Package$1>::<C Package>::<C Subpackage>
  end
end
class <emptyTree><<C <root>>> < (::<todo sym>)
  module <emptyTree>::<C <PackageRegistry>>::<C Package_Subpackage_Package$1><<C <todo sym>>> < ()
    class <emptyTree>::<C Package>::<C Subpackage>::<C SubpackageClass><<C <todo sym>>> < (::<todo sym>)
      ::Sorbet::Private::Static.sig(<self>) do ||
        <self>.returns(<emptyTree>::<C Package>::<C PackageClass>)
      end

      def self.package_class<<todo method>>(&<blk>)
        return <emptyTree>::<C Package>::<C PackageClass>.new()
      end

      <self>.extend(<emptyTree>::<C T>::<C Sig>)

      ::Sorbet::Private::Static.keep_self_def(<self>, :package_class, :normal)
    end
  end
end
