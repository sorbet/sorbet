# -- test/testdata/packager/nested_packages/__package.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  class ::Package::<PackageSpec><<C <PackageSpec>>> < (::Sorbet::Private::Static::PackageSpec)
    <self>.import(<emptyTree>::<C Package>::<C Subpackage>::<C <PackageSpec>>)

    <self>.export(<emptyTree>::<C Package>::<C PackageClass>)
  end
end
# -- test/testdata/packager/nested_packages/subpackage/__package.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  class ::Package::Subpackage::<PackageSpec><<C <PackageSpec>>> < (::Sorbet::Private::Static::PackageSpec)
    <self>.import(<emptyTree>::<C Package>::<C <PackageSpec>>)

    <self>.export(<emptyTree>::<C Package>::<C Subpackage>::<C SubpackageClass>)
  end
end
# -- test/testdata/packager/nested_packages/mainpackage.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  class ::Package::PackageClass<<C PackageClass>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.returns(<emptyTree>::<C Package>::<C Subpackage>::<C SubpackageClass>)
    end

    def self.subpkg_class(<blk>)
      <emptyTree>::<C Package>::<C Subpackage>::<C SubpackageClass>.new()
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <runtime method definition of self.subpkg_class>
  end
end
# -- test/testdata/packager/nested_packages/subpackage/subpackage.rb --
class <emptyTree><<C <root>>> < (::<todo sym>)
  class ::Package::Subpackage::SubpackageClass<<C SubpackageClass>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.returns(<emptyTree>::<C Package>::<C PackageClass>)
    end

    def self.package_class(<blk>)
      return <emptyTree>::<C Package>::<C PackageClass>.new()
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <runtime method definition of self.package_class>
  end
end
