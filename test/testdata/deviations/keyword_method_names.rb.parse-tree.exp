Begin {
  stmts = [
    DefMethod {
      name = <U method_named_alias>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U alias>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U alias>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
          Alias {
            from = Symbol {
              val = <U foo>
            }
            to = Symbol {
              val = <U bar>
            }
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_and>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U and>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U and>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
          Const {
            scope = NULL
            name = <C <U <ErrorNode>>>
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_begin>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U begin>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U begin>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
          Kwbegin {
            stmts = [
            ]
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_break>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U break>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U break>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
          Break {
            exprs = [
            ]
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_case>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U case>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U case>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
          Case {
            condition = Const {
              scope = NULL
              name = <C <U <ErrorNode>>>
            }
            whens = [
              When {
                patterns = [
                  Const {
                    scope = NULL
                    name = <C <U <ErrorNode>>>
                  }
                ]
                body = NULL
              }
            ]
            else_ = NULL
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_class>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = NULL
    }
    DefMethod {
      name = <U method_named_defined?>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = NULL
    }
    DefMethod {
      name = <U method_named_do>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = NULL
    }
    DefMethod {
      name = <U method_named_else>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U else>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U else>
            args = [
            ]
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_elsif>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = NULL
    }
    DefMethod {
      name = <U method_named_ensure>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Ensure {
        body = Begin {
          stmts = [
            Send {
              receiver = LVar {
                name = <U x>
              }
              method = <U ensure>
              args = [
              ]
            }
            Send {
              receiver = LVar {
                name = <U x>
              }
              method = <U ensure>
              args = [
              ]
            }
            Send {
              receiver = LVar {
                name = <U x>
              }
              method = <U <method-name-missing>>
              args = [
              ]
            }
          ]
        }
        ensure = NULL
      }
    }
    DefMethod {
      name = <U method_named_false>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U false>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U false>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
          False {
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_for>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = NULL
    }
    DefMethod {
      name = <U method_named_if>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U if>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U if>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
          If {
            condition = Const {
              scope = NULL
              name = <C <U <ErrorNode>>>
            }
            then_ = NULL
            else_ = NULL
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_in>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = NULL
    }
    DefMethod {
      name = <U method_named_module>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = NULL
    }
    DefMethod {
      name = <U method_named_next>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U next>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U next>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
          Next {
            exprs = [
            ]
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_nil>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U nil>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U nil>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
          Nil {
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_not>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = NULL
    }
    DefMethod {
      name = <U method_named_or>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = NULL
    }
    DefMethod {
      name = <U method_named_redo>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U redo>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U redo>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
          Redo {
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_rescue>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Rescue {
        body = Begin {
          stmts = [
            Send {
              receiver = LVar {
                name = <U x>
              }
              method = <U rescue>
              args = [
              ]
            }
            Send {
              receiver = LVar {
                name = <U x>
              }
              method = <U rescue>
              args = [
              ]
            }
            Send {
              receiver = LVar {
                name = <U x>
              }
              method = <U <method-name-missing>>
              args = [
              ]
            }
          ]
        }
        rescue = [
          Resbody {
            exception = NULL
            var = NULL
            body = NULL
          }
        ]
        else_ = NULL
      }
    }
    DefMethod {
      name = <U method_named_retry>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U retry>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U retry>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
          Retry {
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_return>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U return>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U return>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
          Return {
            exprs = [
            ]
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_self>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U self>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U self>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
          Self {
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_super>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U super>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U super>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
          ZSuper {
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_then>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = NULL
    }
    DefMethod {
      name = <U method_named_true>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U true>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U true>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
          True {
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_unless>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U unless>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U unless>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
          If {
            condition = Const {
              scope = NULL
              name = <C <U <ErrorNode>>>
            }
            then_ = NULL
            else_ = NULL
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_until>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U until>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U until>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
          Until {
            cond = Const {
              scope = NULL
              name = <C <U <ErrorNode>>>
            }
            body = NULL
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_when>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = NULL
    }
    DefMethod {
      name = <U method_named_while>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U while>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U while>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
          While {
            cond = Const {
              scope = NULL
              name = <C <U <ErrorNode>>>
            }
            body = NULL
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_yield>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U yield>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U yield>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
          Yield {
            exprs = [
            ]
          }
        ]
      }
    }
    DefMethod {
      name = <U method_named_end>
      params = Params {
        params = [
          Param {
            name = <U x>
          }
        ]
      }
      body = Begin {
        stmts = [
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U end>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U end>
            args = [
            ]
          }
          Send {
            receiver = LVar {
              name = <U x>
            }
            method = <U <method-name-missing>>
            args = [
            ]
          }
        ]
      }
    }
  ]
}
