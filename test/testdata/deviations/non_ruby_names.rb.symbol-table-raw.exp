class <C <U <root>>> < <C <U Object>> ()
  class <S <C <U <root>>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> ()
    method <S <C <U <root>>> $1>#<N <U <static-init>> $CENSORED> (<blk>) @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=2:1 end=9:4}
      argument <blk><block> @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=??? end=???}
  module <C <U A>> < <C <U Sorbet>>::<C <U Private>>::<C <U Static>>::<C <U ImplicitModuleSuperclass>> () @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=5:1 end=5:9}
    module <C <U A>>::<C <U B>> < <C <U Sorbet>>::<C <U Private>>::<C <U Static>>::<C <U ImplicitModuleSuperclass>> () @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=7:9 end=7:10}
      class <C <U A>>::<C <U B>>::<C <U C>> < <C <U Object>> () @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=7:3 end=7:13}
      class <C <U A>>::<C <U B>>::<S <C <U C>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=7:3 end=7:13}
        type-member(+) <C <U A>>::<C <U B>>::<S <C <U C>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<C <U A>>::<C <U B>>::<S <C <U C>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=A::B::C) @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=7:3 end=7:13}
        method <C <U A>>::<C <U B>>::<S <C <U C>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=7:3 end=8:6}
          argument <blk><block> @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=??? end=???}
    class <C <U A>>::<S <C <U B>> $1>[<C <U <AttachedClass>>>] < <C <U Module>> () @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=7:9 end=7:10}
      type-member(+) <C <U A>>::<S <C <U B>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<C <U A>>::<S <C <U B>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=A::B) @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=7:9 end=7:10}
  class <S <C <U A>> $1>[<C <U <AttachedClass>>>] < <C <U Module>> () @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=5:1 end=5:9}
    type-member(+) <S <C <U A>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U A>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=A) @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=5:1 end=5:9}
    method <S <C <U A>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=5:1 end=9:4}
      argument <blk><block> @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=??? end=???}
  module <C <U B>> < <C <U Sorbet>>::<C <U Private>>::<C <U Static>>::<C <U ImplicitModuleSuperclass>> () @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=2:1 end=2:9}
  class <S <C <U B>> $1>[<C <U <AttachedClass>>>] < <C <U Module>> () @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=2:1 end=2:9}
    type-member(+) <S <C <U B>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U B>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=B) @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=2:1 end=2:9}
    method <S <C <U B>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=2:1 end=3:4}
      argument <blk><block> @ Loc {file=test/testdata/deviations/non_ruby_names.rb start=??? end=???}

