# typed: true
# selective-apply-code-action: refactor.rewrite
extend T::Sig

class A
  extend T::Sig

  sig {params(this: A).void}
  def self.nullary(this)
    # | apply-code-action: [A] Convert to singleton class method (best effort)
    puts "Hello, peter."
  end

  def example
    A.nullary(self)
    A.nullary(self)
    A.nullary(self) {}
    A.nullary(self) {}
    A.nullary(self) do
    end
    A.nullary(self) do
    end
  end

  sig {params(other: A).returns(T.self_type)}
  def +(other); self; end
end

A.nullary(A.new) do
end
A.nullary(A.new) {}
A.nullary(A.new) do
end

(T.unsafe(A.new)).nullary

A.nullary((A.new + A.new))
