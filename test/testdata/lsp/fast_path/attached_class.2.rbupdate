# typed: true
# assert-slow-path: true

class Parent1
  extend T::Sig
  extend T::Generic

  X = type_member

  sig {returns(T.attached_class)}
  def self.make
    res = new
    T.reveal_type(res) # error: `T.attached_class (of Parent1)`
    res
  end

  sig {params(x: X).void}
  def example(x)
    T.reveal_type(x) # error: `Parent1::X`
  end
end

class Child < Parent1
  X = type_member
end

T.reveal_type(Parent1.make) # error: `Parent1[T.untyped]`
T.reveal_type(Child.make) # error: `Child[T.untyped]`
