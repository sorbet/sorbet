class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C A><<C <todo sym>>> < (::<todo sym>)
    def self.each<<todo method>>(&blk)
      begin
        blk.call(1, 2, 3, 4, 5)
        blk.call(6, 7, 8, 9, 0)
      end
    end
  end

  class <emptyTree>::<C E><<C <todo sym>>> < (::<todo sym>)
    def self.e=<<todo method>>(e, &<blk>)
      @e = e
    end

    def self.e<<todo method>>(&<blk>)
      @e
    end
  end

  class <emptyTree>::<C Main><<C <todo sym>>> < (::<todo sym>)
    def self.main<<todo method>>(&<blk>)
      begin
        <emptyTree>::<C A>.each() do |a|
          <self>.puts(a.inspect())
        end
        <emptyTree>::<C A>.each() do |*forTemp|
          begin
            begin
              <assignTemp>$2 = ::<Magic>.<splat>(forTemp)
              <assignTemp>$3 = ::<Magic>.<expand-splat>(<assignTemp>$2, 1, 0)
              a = <assignTemp>$3.[](0)
              ::<Magic>.<mlhs use all>(<assignTemp>$2, 1)
              <assignTemp>$2
            end
            <self>.puts(a.inspect())
          end
        end
        <emptyTree>::<C A>.each() do |a, b|
          begin
            <self>.puts(a.inspect())
            <self>.puts(b.inspect())
          end
        end
        <emptyTree>::<C A>.each() do |*forTemp|
          begin
            begin
              <assignTemp>$4 = ::<Magic>.<splat>(forTemp)
              <assignTemp>$5 = ::<Magic>.<expand-splat>(<assignTemp>$4, 2, 0)
              a = <assignTemp>$5.[](0)
              b = <assignTemp>$5.[](1)
              ::<Magic>.<mlhs use all>(<assignTemp>$4, 2)
              <assignTemp>$4
            end
            <self>.puts(a.inspect())
            <self>.puts(b.inspect())
          end
        end
        <self>.puts("main")
        <emptyTree>::<C A>.each() do ||
          begin
            begin
              <assignTemp>$7 = forTemp$6
              <assignTemp>$8 = ::<Magic>.<expand-splat>(<assignTemp>$7, 5, 0)
              @a = <assignTemp>$8.[](0)
              @@b = <assignTemp>$8.[](1)
              $c = <assignTemp>$8.[](2)
              d = <assignTemp>$8.[](3)
              <emptyTree>::<C E>.e=(<assignTemp>$8.[](4))
              ::<Magic>.<mlhs use all>(<assignTemp>$7, 5)
              <assignTemp>$7
            end
            begin
              <self>.puts(@a.inspect())
              <self>.puts(@@b.inspect())
              <self>.puts($c.inspect())
              <self>.puts(d.inspect())
              <self>.puts(<emptyTree>::<C E>.e().inspect())
            end
          end
        end
        <emptyTree>::<C A>.each() do |*forTemp|
          begin
            begin
              <assignTemp>$9 = ::<Magic>.<splat>(forTemp)
              <assignTemp>$10 = ::<Magic>.<expand-splat>(<assignTemp>$9, 5, 0)
              @a = <assignTemp>$10.[](0)
              @@b = <assignTemp>$10.[](1)
              $c = <assignTemp>$10.[](2)
              d = <assignTemp>$10.[](3)
              <emptyTree>::<C E>.e=(<assignTemp>$10.[](4))
              ::<Magic>.<mlhs use all>(<assignTemp>$9, 5)
              <assignTemp>$9
            end
            <self>.puts(@a.inspect())
            <self>.puts(@@b.inspect())
            <self>.puts($c.inspect())
            <self>.puts(d.inspect())
            <self>.puts(<emptyTree>::<C E>.e().inspect())
          end
        end
      end
    end
  end

  <emptyTree>::<C Main>.main()
end
