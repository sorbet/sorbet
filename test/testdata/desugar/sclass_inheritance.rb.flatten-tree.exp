class <emptyTree><<C <root>>> < (::<todo sym>)
  def main(<blk>)
    begin
      <self>.puts(::A.newer())
      <self>.puts(::B.newer())
      <self>.puts(::C.newerer())
    end
  end

  module ::MM<<C MM>> < ()
  end

  class ::A<<C A>> < (::<todo sym>)
    class <singleton class><<Class:A>> < (::MM)
      def newer(<blk>)
        <self>.new()
      end

      def self.<static-init>(<blk>)
        begin
          <self>.include(::MM)
          <runtime method definition of newer>
          <emptyTree>
        end
      end
    end
  end

  class ::B<<C B>> < (::<todo sym>)
    def self.newer(<blk>)
      <self>.new()
    end

    def self.<static-init>(<blk>)
      begin
        <self>.extend(::MM)
        <runtime method definition of self.newer>
        <emptyTree>
      end
    end
  end

  class ::C<<C C>> < (::A)
    class <singleton class><<Class:C>> < ()
      def newerer(<blk>)
        <self>.newer()
      end

      def self.<static-init>(<blk>)
        <runtime method definition of newerer>
      end
    end
  end

  def self.<static-init><<static-init>$CENSORED>(<blk>)
    begin
      <runtime method definition of main>
      <self>.main()
      <emptyTree>
    end
  end
end
