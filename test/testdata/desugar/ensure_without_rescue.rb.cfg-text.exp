method ::Object#main {

bb0[rubyBlockId=0, firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    <magic>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb6(rubyBlockId=3)
# - bb7(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
# - bb4(rubyBlockId=1)
bb3[rubyBlockId=2, firstDead=-1](<self>: Object, <returnMethodTemp>$2: T.untyped):
    <gotoDeadTemp>$6: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb0(rubyBlockId=0)
bb4[rubyBlockId=1, firstDead=-1](<self>: Object):
    <returnMethodTemp>$2: T.untyped = <self>: Object.a()
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3 -> (T.untyped ? bb3 : bb5)

# backedges
# - bb4(rubyBlockId=1)
bb5[rubyBlockId=4, firstDead=-1](<self>: Object, <returnMethodTemp>$2: T.untyped):
    <unconditional> -> bb6

# backedges
# - bb3(rubyBlockId=2)
# - bb5(rubyBlockId=4)
bb6[rubyBlockId=3, firstDead=-1](<self>: Object, <returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$6: T.nilable(TrueClass)):
    <throwAwayTemp>$7: T.untyped = <self>: Object.b()
    <gotoDeadTemp>$6 -> (T.nilable(TrueClass) ? bb1 : bb7)

# backedges
# - bb6(rubyBlockId=3)
bb7[rubyBlockId=0, firstDead=1](<returnMethodTemp>$2: T.untyped):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

}

method ::Object#a {

bb0[rubyBlockId=0, firstDead=2]():
    <self>: Object = cast(<self>: NilClass, Object);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Object#b {

bb0[rubyBlockId=0, firstDead=2]():
    <self>: Object = cast(<self>: NilClass, Object);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[rubyBlockId=0, firstDead=15]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$7: Symbol(:main) = :main
    <statTemp>$8: Symbol(:normal) = :normal
    <statTemp>$3: Symbol(:main) = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$7: Symbol(:main), <statTemp>$8: Symbol(:normal))
    <cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$13: Symbol(:a) = :a
    <statTemp>$14: Symbol(:normal) = :normal
    <statTemp>$9: Symbol(:a) = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$13: Symbol(:a), <statTemp>$14: Symbol(:normal))
    <cfgAlias>$17: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$19: Symbol(:b) = :b
    <statTemp>$20: Symbol(:normal) = :normal
    <statTemp>$15: Symbol(:b) = <cfgAlias>$17: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$19: Symbol(:b), <statTemp>$20: Symbol(:normal))
    <statTemp>$21: T.untyped = <self>: T.class_of(<root>).main()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyBlockId=0)
bb1[rubyBlockId=0, firstDead=-1]():
    <unconditional> -> bb1

}

