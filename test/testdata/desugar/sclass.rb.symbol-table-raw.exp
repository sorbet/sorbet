class <C <U <root>>> < <C <U Object>> ()
  class <S <C <U <root>>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> ()
    method <S <C <U <root>>> $1>#<N <U <static-init>> $CENSORED> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=2:1 end=94:5}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
  class <C <U A>> < <C <U Object>> () @ Loc {file=test/testdata/desugar/sclass.rb start=2:1 end=2:8}
  class <S <C <U A>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/desugar/sclass.rb start=2:1 end=2:8}
    type-member(+) <S <C <U A>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U A>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=A) @ Loc {file=test/testdata/desugar/sclass.rb start=2:1 end=2:8}
    method <S <C <U A>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=2:1 end=3:4}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
  class <C <U B>> < <C <U Object>> () @ Loc {file=test/testdata/desugar/sclass.rb start=11:1 end=11:8}
  class <S <C <U B>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/desugar/sclass.rb start=12:5 end=12:10}
    type-member(+) <S <C <U B>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U B>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=B) @ Loc {file=test/testdata/desugar/sclass.rb start=11:1 end=11:8}
    method <S <C <U B>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=11:1 end=17:4}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
    method <S <C <U B>> $1>#<U b> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=13:9 end=13:14}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
  class <S <S <C <U B>> $1> $1>[<C <U <AttachedClass>>>] < <C <U Class>> () @ Loc {file=test/testdata/desugar/sclass.rb start=12:5 end=12:10}
    type-member(+) <S <S <C <U B>> $1> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <S <C <U B>> $1> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {   klass = <S <C <U B>> $1>   targs = [     <C <U <AttachedClass>>> = B   ] }) @ Loc {file=test/testdata/desugar/sclass.rb start=12:5 end=12:10}
    method <S <S <C <U B>> $1> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=12:5 end=16:8}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
  class <C <U D>> < <C <U Object>> () @ Loc {file=test/testdata/desugar/sclass.rb start=26:1 end=26:8}
  class <S <C <U D>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/desugar/sclass.rb start=27:5 end=27:10}
    type-member(+) <S <C <U D>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U D>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=D) @ Loc {file=test/testdata/desugar/sclass.rb start=26:1 end=26:8}
    method <S <C <U D>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=26:1 end=34:4}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
  class <S <S <C <U D>> $1> $1>[<C <U <AttachedClass>>>] < <C <U Class>> () @ Loc {file=test/testdata/desugar/sclass.rb start=28:9 end=28:14}
    type-member(+) <S <S <C <U D>> $1> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <S <C <U D>> $1> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {   klass = <S <C <U D>> $1>   targs = [     <C <U <AttachedClass>>> = D   ] }) @ Loc {file=test/testdata/desugar/sclass.rb start=27:5 end=27:10}
    method <S <S <C <U D>> $1> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=27:5 end=33:8}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
    method <S <S <C <U D>> $1> $1>#<U d> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=29:13 end=29:18}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
  class <S <S <S <C <U D>> $1> $1> $1>[<C <U <AttachedClass>>>] < <S <C <U Class>> $1> () @ Loc {file=test/testdata/desugar/sclass.rb start=28:9 end=28:14}
    type-member(+) <S <S <S <C <U D>> $1> $1> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <S <S <C <U D>> $1> $1> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {   klass = <S <S <C <U D>> $1> $1>   targs = [     <C <U <AttachedClass>>> = AppliedType {         klass = <S <C <U D>> $1>         targs = [           <C <U <AttachedClass>>> = D         ]       }   ] }) @ Loc {file=test/testdata/desugar/sclass.rb start=28:9 end=28:14}
    method <S <S <S <C <U D>> $1> $1> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=28:9 end=32:12}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
  class <C <U E>> < <C <U Object>> () @ Loc {file=test/testdata/desugar/sclass.rb start=36:1 end=36:8}
  class <S <C <U E>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/desugar/sclass.rb start=37:5 end=37:10}
    type-member(+) <S <C <U E>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U E>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=E) @ Loc {file=test/testdata/desugar/sclass.rb start=36:1 end=36:8}
    method <S <C <U E>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=36:1 end=45:4}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
    method <S <C <U E>> $1>#<U e> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=39:13 end=39:18}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
    method <S <C <U E>> $1>#<U wrapper> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=38:9 end=38:20}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
  class <S <S <C <U E>> $1> $1>[<C <U <AttachedClass>>>] < <C <U Class>> () @ Loc {file=test/testdata/desugar/sclass.rb start=37:5 end=37:10}
    type-member(+) <S <S <C <U E>> $1> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <S <C <U E>> $1> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {   klass = <S <C <U E>> $1>   targs = [     <C <U <AttachedClass>>> = E   ] }) @ Loc {file=test/testdata/desugar/sclass.rb start=37:5 end=37:10}
    method <S <S <C <U E>> $1> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=37:5 end=43:8}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
  class <C <U F>> < <C <U Object>> () @ Loc {file=test/testdata/desugar/sclass.rb start=47:1 end=47:8}
  class <S <C <U F>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/desugar/sclass.rb start=48:3 end=48:8}
    type-member(+) <S <C <U F>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U F>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=F) @ Loc {file=test/testdata/desugar/sclass.rb start=47:1 end=47:8}
    method <S <C <U F>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=47:1 end=58:4}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
    field <S <C <U F>> $1>#<U @f> -> Integer @ Loc {file=test/testdata/desugar/sclass.rb start=50:11 end=50:13}
    method <S <C <U F>> $1>#<U f=> (f, <blk>) -> Integer @ Loc {file=test/testdata/desugar/sclass.rb start=56:9 end=56:23}
      argument f<> -> Integer @ Loc {file=test/testdata/desugar/sclass.rb start=55:21 end=55:22}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
    method <S <C <U F>> $1>#<U initialize> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=49:9 end=49:23}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
  class <S <S <C <U F>> $1> $1>[<C <U <AttachedClass>>>] < <C <U Class>> (<C <U Sig>>) @ Loc {file=test/testdata/desugar/sclass.rb start=48:3 end=48:8}
    type-member(+) <S <S <C <U F>> $1> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <S <C <U F>> $1> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {   klass = <S <C <U F>> $1>   targs = [     <C <U <AttachedClass>>> = F   ] }) @ Loc {file=test/testdata/desugar/sclass.rb start=48:3 end=48:8}
    method <S <S <C <U F>> $1> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=48:3 end=57:8}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
  class <C <U G>> < <C <U Object>> () @ Loc {file=test/testdata/desugar/sclass.rb start=60:1 end=60:8}
    method <C <U G>>#<U wrapper> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=61:5 end=61:16}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
  class <S <C <U G>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/desugar/sclass.rb start=62:9 end=62:14}
    type-member(+) <S <C <U G>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U G>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=G) @ Loc {file=test/testdata/desugar/sclass.rb start=60:1 end=60:8}
    method <S <C <U G>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=60:1 end=72:4}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
    method <S <C <U G>> $1>#<U g> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=69:5 end=69:15}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
    method <S <C <U G>> $1>#<U inner> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=63:13 end=63:22}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
  class <S <S <C <U G>> $1> $1>[<C <U <AttachedClass>>>] < <C <U Class>> () @ Loc {file=test/testdata/desugar/sclass.rb start=62:9 end=62:14}
    type-member(+) <S <S <C <U G>> $1> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <S <C <U G>> $1> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {   klass = <S <C <U G>> $1>   targs = [     <C <U <AttachedClass>>> = G   ] }) @ Loc {file=test/testdata/desugar/sclass.rb start=62:9 end=62:14}
    method <S <S <C <U G>> $1> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=62:9 end=66:12}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
  class <C <U H>> < <C <U Object>> () @ Loc {file=test/testdata/desugar/sclass.rb start=74:1 end=74:8}
  class <S <C <U H>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/desugar/sclass.rb start=75:5 end=75:10}
    type-member(+) <S <C <U H>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U H>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=H) @ Loc {file=test/testdata/desugar/sclass.rb start=74:1 end=74:8}
    method <S <C <U H>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=74:1 end=82:4}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
    class <S <C <U H>> $1>::<C <U H2>> < <C <U Object>> () @ Loc {file=test/testdata/desugar/sclass.rb start=76:9 end=76:17}
    class <S <C <U H>> $1>::<S <C <U H2>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/desugar/sclass.rb start=76:9 end=76:17}
      type-member(+) <S <C <U H>> $1>::<S <C <U H2>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U H>> $1>::<S <C <U H2>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=T.class_of(H)::H2) @ Loc {file=test/testdata/desugar/sclass.rb start=76:9 end=76:17}
      method <S <C <U H>> $1>::<S <C <U H2>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=76:9 end=80:12}
        argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
      method <S <C <U H>> $1>::<S <C <U H2>> $1>#<U h> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=77:13 end=77:23}
        argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
  class <S <S <C <U H>> $1> $1>[<C <U <AttachedClass>>>] < <C <U Class>> () @ Loc {file=test/testdata/desugar/sclass.rb start=75:5 end=75:10}
    type-member(+) <S <S <C <U H>> $1> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <S <C <U H>> $1> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {   klass = <S <C <U H>> $1>   targs = [     <C <U <AttachedClass>>> = H   ] }) @ Loc {file=test/testdata/desugar/sclass.rb start=75:5 end=75:10}
    method <S <S <C <U H>> $1> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=75:5 end=81:8}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}
  class <C <U Object>> < <C <U BasicObject>> (<C <U Kernel>>) @ Loc {file=https://github.com/sorbet/sorbet/tree/master/rbi/core/object.rbi start=removed end=removed}
    method <C <U Object>>#<U main> : private (<blk>) @ Loc {file=test/testdata/desugar/sclass.rb start=84:1 end=84:9}
      argument <blk><block> @ Loc {file=test/testdata/desugar/sclass.rb start=??? end=???}

