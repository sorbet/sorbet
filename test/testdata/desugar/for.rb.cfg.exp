digraph "for.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;

    "bb::<Class:<root>>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$6: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$8: T.class_of(A) = alias <C A>\l<statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$8: T.class_of(A))\l<cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$13: T.class_of(A) = alias <C A>\l<statTemp>$9: Sorbet::Private::Static::Void = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$13: T.class_of(A))\l<cfgAlias>$17: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$19: T.class_of(E) = alias <C E>\l<statTemp>$15: Sorbet::Private::Static::Void = <cfgAlias>$17: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$19: T.class_of(E))\l<cfgAlias>$22: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$24: T.class_of(E) = alias <C E>\l<statTemp>$20: Sorbet::Private::Static::Void = <cfgAlias>$22: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$24: T.class_of(E))\l<cfgAlias>$28: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$30: T.class_of(Main) = alias <C Main>\l<statTemp>$26: Sorbet::Private::Static::Void = <cfgAlias>$28: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$30: T.class_of(Main))\l<cfgAlias>$33: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$35: T.class_of(Main) = alias <C Main>\l<statTemp>$31: Sorbet::Private::Static::Void = <cfgAlias>$33: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$35: T.class_of(Main))\l<cfgAlias>$38: T.class_of(Main) = alias <C Main>\l<statTemp>$36: T.untyped = <cfgAlias>$38: T.class_of(Main).main()\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:A>#each" {
    label = "::<Class:A>#each";
    color = blue;

    "bb::<Class:A>#each_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(A) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U A>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U A>> $1><C <U <AttachedClass>>>)\l  ]\l});\lblk: T.untyped = load_arg(blk)\l<statTemp>$5: Integer(1) = 1\l<statTemp>$6: Integer(2) = 2\l<statTemp>$7: Integer(3) = 3\l<statTemp>$8: Integer(4) = 4\l<statTemp>$9: Integer(5) = 5\l<statTemp>$3: T.untyped = blk: T.untyped.call(<statTemp>$5: Integer(1), <statTemp>$6: Integer(2), <statTemp>$7: Integer(3), <statTemp>$8: Integer(4), <statTemp>$9: Integer(5))\l<statTemp>$11: Integer(6) = 6\l<statTemp>$12: Integer(7) = 7\l<statTemp>$13: Integer(8) = 8\l<statTemp>$14: Integer(9) = 9\l<statTemp>$15: Integer(0) = 0\l<returnMethodTemp>$2: T.untyped = blk: T.untyped.call(<statTemp>$11: Integer(6), <statTemp>$12: Integer(7), <statTemp>$13: Integer(8), <statTemp>$14: Integer(9), <statTemp>$15: Integer(0))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:A>#each_0" -> "bb::<Class:A>#each_1" [style="bold"];
    "bb::<Class:A>#each_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:A>#each_1" -> "bb::<Class:A>#each_1" [style="bold"];
}

subgraph "cluster_::<Class:A>#<static-init>" {
    label = "::<Class:A>#<static-init>";
    color = blue;

    "bb::<Class:A>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(A) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U A>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U A>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: Symbol(:each) = :each\l<statTemp>$7: Symbol(:normal) = :normal\l<returnMethodTemp>$2: Symbol(:each) = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_self_def(<self>: T.class_of(A), <statTemp>$6: Symbol(:each), <statTemp>$7: Symbol(:normal))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:each)\l<unconditional>\l"
    ];

    "bb::<Class:A>#<static-init>_0" -> "bb::<Class:A>#<static-init>_1" [style="bold"];
    "bb::<Class:A>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:A>#<static-init>_1" -> "bb::<Class:A>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:E>#e=" {
    label = "::<Class:E>#e=";
    color = blue;

    "bb::<Class:E>#e=_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l@e$3: T.untyped = alias <C <undeclared-field-stub>> (@e)\l<self>: T.class_of(E) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U E>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U E>> $1><C <U <AttachedClass>>>)\l  ]\l});\le: T.untyped = load_arg(e)\l@e$3: T.untyped = e\l<returnMethodTemp>$2: T.untyped = @e$3\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:E>#e=_0" -> "bb::<Class:E>#e=_1" [style="bold"];
    "bb::<Class:E>#e=_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:E>#e=_1" -> "bb::<Class:E>#e=_1" [style="bold"];
}

subgraph "cluster_::<Class:E>#e" {
    label = "::<Class:E>#e";
    color = blue;

    "bb::<Class:E>#e_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l@e$3: T.untyped = alias <C <undeclared-field-stub>> (@e)\l<self>: T.class_of(E) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U E>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U E>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<returnMethodTemp>$2: T.untyped = @e$3\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:E>#e_0" -> "bb::<Class:E>#e_1" [style="bold"];
    "bb::<Class:E>#e_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:E>#e_1" -> "bb::<Class:E>#e_1" [style="bold"];
}

subgraph "cluster_::<Class:E>#<static-init>" {
    label = "::<Class:E>#<static-init>";
    color = blue;

    "bb::<Class:E>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(E) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U E>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U E>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$7: Symbol(:e=) = :e=\l<statTemp>$8: Symbol(:normal) = :normal\l<statTemp>$3: Symbol(:e=) = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).keep_self_def(<self>: T.class_of(E), <statTemp>$7: Symbol(:e=), <statTemp>$8: Symbol(:normal))\l<cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$13: Symbol(:e) = :e\l<statTemp>$14: Symbol(:normal) = :normal\l<statTemp>$9: Symbol(:e) = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_self_def(<self>: T.class_of(E), <statTemp>$13: Symbol(:e), <statTemp>$14: Symbol(:normal))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:E>#<static-init>_0" -> "bb::<Class:E>#<static-init>_1" [style="bold"];
    "bb::<Class:E>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:E>#<static-init>_1" -> "bb::<Class:E>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:Main>#main" {
    label = "::<Class:Main>#main";
    color = blue;

    "bb::<Class:Main>#main_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l@a$105: T.untyped = alias <C <undeclared-field-stub>> (@a)\l@@b$109: T.untyped = alias <C <undeclared-field-stub>> (@@b)\l$c$113: T.untyped = alias <C <undeclared-field-stub>> ($c)\l<self>: T.class_of(Main) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Main>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Main>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$5: T.class_of(A) = alias <C A>\l<block-pre-call-temp>$6: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(A).each()\l<selfRestore>$7: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_0" -> "bb::<Class:Main>#main_2" [style="bold"];
    "bb::<Class:Main>#main_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_1" -> "bb::<Class:Main>#main_1" [style="bold"];
    "bb::<Class:Main>#main_2" [
        shape = rectangle;
        color = black;
        label = "block[id=2, rubyBlockId=1](<self>: T.class_of(Main), <block-pre-call-temp>$6: Sorbet::Private::Static::Void, <selfRestore>$7: T.class_of(Main), @a$105: T.untyped, @@b$109: T.untyped, $c$113: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_2" -> "bb::<Class:Main>#main_5" [style="bold"];
    "bb::<Class:Main>#main_2" -> "bb::<Class:Main>#main_3" [style="tapered"];

    "bb::<Class:Main>#main_3" [
        shape = rectangle;
        color = black;
        label = "block[id=3, rubyBlockId=0](<block-pre-call-temp>$6: Sorbet::Private::Static::Void, <selfRestore>$7: T.class_of(Main), @a$105: T.untyped, @@b$109: T.untyped, $c$113: T.untyped)\l<statTemp>$3: T.untyped = Solve<<block-pre-call-temp>$6, each>\l<self>: T.class_of(Main) = <selfRestore>$7\l<cfgAlias>$16: T.class_of(A) = alias <C A>\l<block-pre-call-temp>$17: Sorbet::Private::Static::Void = <cfgAlias>$16: T.class_of(A).each()\l<selfRestore>$18: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_3" -> "bb::<Class:Main>#main_6" [style="bold"];
    "bb::<Class:Main>#main_5" [
        shape = rectangle;
        color = black;
        label = "block[id=5, rubyBlockId=1](<self>: T.class_of(Main), <block-pre-call-temp>$6: Sorbet::Private::Static::Void, <selfRestore>$7: T.class_of(Main), @a$105: T.untyped, @@b$109: T.untyped, $c$113: T.untyped)\louterLoops: 1\l<self>: T.class_of(Main) = loadSelf\l<blk>$8: T.untyped = load_yield_params(each)\la$1: T.untyped = yield_load_arg(0)\l<statTemp>$11: T.untyped = a$1: T.untyped.inspect()\l<blockReturnTemp>$9: NilClass = <self>: T.class_of(Main).puts(<statTemp>$11: T.untyped)\l<blockReturnTemp>$13: T.noreturn = blockreturn<each> <blockReturnTemp>$9: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_5" -> "bb::<Class:Main>#main_2" [style="bold"];
    "bb::<Class:Main>#main_6" [
        shape = rectangle;
        color = black;
        label = "block[id=6, rubyBlockId=2](<self>: T.class_of(Main), <block-pre-call-temp>$17: Sorbet::Private::Static::Void, <selfRestore>$18: T.class_of(Main), @a$105: T.untyped, @@b$109: T.untyped, $c$113: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_6" -> "bb::<Class:Main>#main_9" [style="bold"];
    "bb::<Class:Main>#main_6" -> "bb::<Class:Main>#main_7" [style="tapered"];

    "bb::<Class:Main>#main_7" [
        shape = rectangle;
        color = black;
        label = "block[id=7, rubyBlockId=0](<block-pre-call-temp>$17: Sorbet::Private::Static::Void, <selfRestore>$18: T.class_of(Main), @a$105: T.untyped, @@b$109: T.untyped, $c$113: T.untyped)\l<statTemp>$14: T.untyped = Solve<<block-pre-call-temp>$17, each>\l<self>: T.class_of(Main) = <selfRestore>$18\l<cfgAlias>$41: T.class_of(A) = alias <C A>\l<block-pre-call-temp>$42: Sorbet::Private::Static::Void = <cfgAlias>$41: T.class_of(A).each()\l<selfRestore>$43: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_7" -> "bb::<Class:Main>#main_10" [style="bold"];
    "bb::<Class:Main>#main_9" [
        shape = rectangle;
        color = black;
        label = "block[id=9, rubyBlockId=2](<self>: T.class_of(Main), <block-pre-call-temp>$17: Sorbet::Private::Static::Void, <selfRestore>$18: T.class_of(Main), @a$105: T.untyped, @@b$109: T.untyped, $c$113: T.untyped)\louterLoops: 1\l<self>: T.class_of(Main) = loadSelf\l<blk>$19: T.untyped = load_yield_params(each)\lforTemp$2: T.untyped = yield_load_arg(0)\l<cfgAlias>$24: T.class_of(<Magic>) = alias <C <Magic>>\l<assignTemp>$2$2: T.untyped = <cfgAlias>$24: T.class_of(<Magic>).<splat>(forTemp$2: T.untyped)\l<cfgAlias>$28: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$30: Integer(1) = 1\l<statTemp>$31: Integer(0) = 0\l<assignTemp>$3$2: T.untyped = <cfgAlias>$28: T.class_of(<Magic>).<expand-splat>(<assignTemp>$2$2: T.untyped, <statTemp>$30: Integer(1), <statTemp>$31: Integer(0))\l<statTemp>$34: Integer(0) = 0\la$2: T.untyped = <assignTemp>$3$2: T.untyped.[](<statTemp>$34: Integer(0))\l<statTemp>$36: T.untyped = a$2: T.untyped.inspect()\l<blockReturnTemp>$20: NilClass = <self>: T.class_of(Main).puts(<statTemp>$36: T.untyped)\l<blockReturnTemp>$38: T.noreturn = blockreturn<each> <blockReturnTemp>$20: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_9" -> "bb::<Class:Main>#main_6" [style="bold"];
    "bb::<Class:Main>#main_10" [
        shape = rectangle;
        color = black;
        label = "block[id=10, rubyBlockId=3](<self>: T.class_of(Main), <block-pre-call-temp>$42: Sorbet::Private::Static::Void, <selfRestore>$43: T.class_of(Main), @a$105: T.untyped, @@b$109: T.untyped, $c$113: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_10" -> "bb::<Class:Main>#main_13" [style="bold"];
    "bb::<Class:Main>#main_10" -> "bb::<Class:Main>#main_11" [style="tapered"];

    "bb::<Class:Main>#main_11" [
        shape = rectangle;
        color = black;
        label = "block[id=11, rubyBlockId=0](<block-pre-call-temp>$42: Sorbet::Private::Static::Void, <selfRestore>$43: T.class_of(Main), @a$105: T.untyped, @@b$109: T.untyped, $c$113: T.untyped)\l<statTemp>$39: T.untyped = Solve<<block-pre-call-temp>$42, each>\l<self>: T.class_of(Main) = <selfRestore>$43\l<cfgAlias>$56: T.class_of(A) = alias <C A>\l<block-pre-call-temp>$57: Sorbet::Private::Static::Void = <cfgAlias>$56: T.class_of(A).each()\l<selfRestore>$58: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_11" -> "bb::<Class:Main>#main_14" [style="bold"];
    "bb::<Class:Main>#main_13" [
        shape = rectangle;
        color = black;
        label = "block[id=13, rubyBlockId=3](<self>: T.class_of(Main), <block-pre-call-temp>$42: Sorbet::Private::Static::Void, <selfRestore>$43: T.class_of(Main), @a$105: T.untyped, @@b$109: T.untyped, $c$113: T.untyped)\louterLoops: 1\l<self>: T.class_of(Main) = loadSelf\l<blk>$44: T.untyped = load_yield_params(each)\la$3: T.untyped = yield_load_arg(0)\lb$3: T.untyped = yield_load_arg(1)\l<statTemp>$48: T.untyped = a$3: T.untyped.inspect()\l<statTemp>$46: NilClass = <self>: T.class_of(Main).puts(<statTemp>$48: T.untyped)\l<statTemp>$51: T.untyped = b$3: T.untyped.inspect()\l<blockReturnTemp>$45: NilClass = <self>: T.class_of(Main).puts(<statTemp>$51: T.untyped)\l<blockReturnTemp>$53: T.noreturn = blockreturn<each> <blockReturnTemp>$45: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_13" -> "bb::<Class:Main>#main_10" [style="bold"];
    "bb::<Class:Main>#main_14" [
        shape = rectangle;
        color = black;
        label = "block[id=14, rubyBlockId=4](<self>: T.class_of(Main), <block-pre-call-temp>$57: Sorbet::Private::Static::Void, <selfRestore>$58: T.class_of(Main), @a$105: T.untyped, @@b$109: T.untyped, $c$113: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_14" -> "bb::<Class:Main>#main_17" [style="bold"];
    "bb::<Class:Main>#main_14" -> "bb::<Class:Main>#main_15" [style="tapered"];

    "bb::<Class:Main>#main_15" [
        shape = rectangle;
        color = black;
        label = "block[id=15, rubyBlockId=0](<block-pre-call-temp>$57: Sorbet::Private::Static::Void, <selfRestore>$58: T.class_of(Main), @a$105: T.untyped, @@b$109: T.untyped, $c$113: T.untyped)\l<statTemp>$54: T.untyped = Solve<<block-pre-call-temp>$57, each>\l<self>: T.class_of(Main) = <selfRestore>$58\l<statTemp>$88: String(\"main\") = \"main\"\l<statTemp>$86: NilClass = <self>: T.class_of(Main).puts(<statTemp>$88: String(\"main\"))\l<cfgAlias>$91: T.class_of(A) = alias <C A>\l<block-pre-call-temp>$92: Sorbet::Private::Static::Void = <cfgAlias>$91: T.class_of(A).each()\l<selfRestore>$93: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_15" -> "bb::<Class:Main>#main_18" [style="bold"];
    "bb::<Class:Main>#main_17" [
        shape = rectangle;
        color = black;
        label = "block[id=17, rubyBlockId=4](<self>: T.class_of(Main), <block-pre-call-temp>$57: Sorbet::Private::Static::Void, <selfRestore>$58: T.class_of(Main), @a$105: T.untyped, @@b$109: T.untyped, $c$113: T.untyped)\louterLoops: 1\l<self>: T.class_of(Main) = loadSelf\l<blk>$59: T.untyped = load_yield_params(each)\lforTemp$4: T.untyped = yield_load_arg(0)\l<cfgAlias>$64: T.class_of(<Magic>) = alias <C <Magic>>\l<assignTemp>$4$4: T.untyped = <cfgAlias>$64: T.class_of(<Magic>).<splat>(forTemp$4: T.untyped)\l<cfgAlias>$68: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$70: Integer(2) = 2\l<statTemp>$71: Integer(0) = 0\l<assignTemp>$5$4: T.untyped = <cfgAlias>$68: T.class_of(<Magic>).<expand-splat>(<assignTemp>$4$4: T.untyped, <statTemp>$70: Integer(2), <statTemp>$71: Integer(0))\l<statTemp>$74: Integer(0) = 0\la$4: T.untyped = <assignTemp>$5$4: T.untyped.[](<statTemp>$74: Integer(0))\l<statTemp>$77: Integer(1) = 1\lb$4: T.untyped = <assignTemp>$5$4: T.untyped.[](<statTemp>$77: Integer(1))\l<statTemp>$80: T.untyped = a$4: T.untyped.inspect()\l<statTemp>$78: NilClass = <self>: T.class_of(Main).puts(<statTemp>$80: T.untyped)\l<statTemp>$83: T.untyped = b$4: T.untyped.inspect()\l<blockReturnTemp>$60: NilClass = <self>: T.class_of(Main).puts(<statTemp>$83: T.untyped)\l<blockReturnTemp>$85: T.noreturn = blockreturn<each> <blockReturnTemp>$60: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_17" -> "bb::<Class:Main>#main_14" [style="bold"];
    "bb::<Class:Main>#main_18" [
        shape = rectangle;
        color = black;
        label = "block[id=18, rubyBlockId=5](<self>: T.class_of(Main), <block-pre-call-temp>$92: Sorbet::Private::Static::Void, <selfRestore>$93: T.class_of(Main), @a$105: T.untyped, @@b$109: T.untyped, $c$113: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_18" -> "bb::<Class:Main>#main_21" [style="bold"];
    "bb::<Class:Main>#main_18" -> "bb::<Class:Main>#main_19" [style="tapered"];

    "bb::<Class:Main>#main_19" [
        shape = rectangle;
        color = black;
        label = "block[id=19, rubyBlockId=0](<block-pre-call-temp>$92: Sorbet::Private::Static::Void, <selfRestore>$93: T.class_of(Main), @a$105: T.untyped, @@b$109: T.untyped, $c$113: T.untyped)\l<statTemp>$89: T.untyped = Solve<<block-pre-call-temp>$92, each>\l<self>: T.class_of(Main) = <selfRestore>$93\l<cfgAlias>$148: T.class_of(A) = alias <C A>\l<block-pre-call-temp>$149: Sorbet::Private::Static::Void = <cfgAlias>$148: T.class_of(A).each()\l<selfRestore>$150: T.class_of(Main) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_19" -> "bb::<Class:Main>#main_22" [style="bold"];
    "bb::<Class:Main>#main_21" [
        shape = rectangle;
        color = black;
        label = "block[id=21, rubyBlockId=5](<self>: T.class_of(Main), <block-pre-call-temp>$92: Sorbet::Private::Static::Void, <selfRestore>$93: T.class_of(Main), @a$105: T.untyped, @@b$109: T.untyped, $c$113: T.untyped)\louterLoops: 1\l<self>: T.class_of(Main) = loadSelf\l<cfgAlias>$100: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$102: Integer(5) = 5\l<statTemp>$103: Integer(0) = 0\l<assignTemp>$8$5: [NilClass, NilClass, NilClass, NilClass, NilClass] = <cfgAlias>$100: T.class_of(<Magic>).<expand-splat>(forTemp$6$5: NilClass, <statTemp>$102: Integer(5), <statTemp>$103: Integer(0))\l<statTemp>$107: Integer(0) = 0\l@a$105: NilClass = <assignTemp>$8$5: [NilClass, NilClass, NilClass, NilClass, NilClass].[](<statTemp>$107: Integer(0))\l<statTemp>$111: Integer(1) = 1\l@@b$109: NilClass = <assignTemp>$8$5: [NilClass, NilClass, NilClass, NilClass, NilClass].[](<statTemp>$111: Integer(1))\l<statTemp>$115: Integer(2) = 2\l$c$113: NilClass = <assignTemp>$8$5: [NilClass, NilClass, NilClass, NilClass, NilClass].[](<statTemp>$115: Integer(2))\l<statTemp>$118: Integer(3) = 3\ld$5: NilClass = <assignTemp>$8$5: [NilClass, NilClass, NilClass, NilClass, NilClass].[](<statTemp>$118: Integer(3))\l<cfgAlias>$121: T.class_of(E) = alias <C E>\l<statTemp>$124: Integer(4) = 4\l<statTemp>$122: NilClass = <assignTemp>$8$5: [NilClass, NilClass, NilClass, NilClass, NilClass].[](<statTemp>$124: Integer(4))\l<statTemp>$119: NilClass = <cfgAlias>$121: T.class_of(E).e=(<statTemp>$122: NilClass)\l<statTemp>$127: T.untyped = @a$105: NilClass.inspect()\l<statTemp>$125: NilClass = <self>: T.class_of(Main).puts(<statTemp>$127: T.untyped)\l<statTemp>$131: T.untyped = @@b$109: NilClass.inspect()\l<statTemp>$129: NilClass = <self>: T.class_of(Main).puts(<statTemp>$131: T.untyped)\l<statTemp>$135: T.untyped = $c$113: NilClass.inspect()\l<statTemp>$133: NilClass = <self>: T.class_of(Main).puts(<statTemp>$135: T.untyped)\l<statTemp>$139: T.untyped = d$5: NilClass.inspect()\l<statTemp>$137: NilClass = <self>: T.class_of(Main).puts(<statTemp>$139: T.untyped)\l<cfgAlias>$145: T.class_of(E) = alias <C E>\l<statTemp>$143: T.untyped = <cfgAlias>$145: T.class_of(E).e()\l<statTemp>$142: T.untyped = <statTemp>$143: T.untyped.inspect()\l<blockReturnTemp>$95: NilClass = <self>: T.class_of(Main).puts(<statTemp>$142: T.untyped)\l<blockReturnTemp>$146: T.noreturn = blockreturn<each> <blockReturnTemp>$95: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_21" -> "bb::<Class:Main>#main_18" [style="bold"];
    "bb::<Class:Main>#main_22" [
        shape = rectangle;
        color = black;
        label = "block[id=22, rubyBlockId=6](<self>: T.class_of(Main), @a$105: T.untyped, @@b$109: T.untyped, $c$113: T.untyped, <block-pre-call-temp>$149: Sorbet::Private::Static::Void, <selfRestore>$150: T.class_of(Main))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_22" -> "bb::<Class:Main>#main_25" [style="bold"];
    "bb::<Class:Main>#main_22" -> "bb::<Class:Main>#main_23" [style="tapered"];

    "bb::<Class:Main>#main_23" [
        shape = rectangle;
        color = black;
        label = "block[id=23, rubyBlockId=0](<block-pre-call-temp>$149: Sorbet::Private::Static::Void, <selfRestore>$150: T.class_of(Main))\l<returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$149, each>\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_23" -> "bb::<Class:Main>#main_1" [style="bold"];
    "bb::<Class:Main>#main_25" [
        shape = rectangle;
        color = black;
        label = "block[id=25, rubyBlockId=6](<self>: T.class_of(Main), @a$105: T.untyped, @@b$109: T.untyped, $c$113: T.untyped, <block-pre-call-temp>$149: Sorbet::Private::Static::Void, <selfRestore>$150: T.class_of(Main))\louterLoops: 1\l<self>: T.class_of(Main) = loadSelf\l<blk>$151: T.untyped = load_yield_params(each)\lforTemp$6: T.untyped = yield_load_arg(0)\l<cfgAlias>$156: T.class_of(<Magic>) = alias <C <Magic>>\l<assignTemp>$9$6: T.untyped = <cfgAlias>$156: T.class_of(<Magic>).<splat>(forTemp$6: T.untyped)\l<cfgAlias>$160: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$162: Integer(5) = 5\l<statTemp>$163: Integer(0) = 0\l<assignTemp>$10$6: T.untyped = <cfgAlias>$160: T.class_of(<Magic>).<expand-splat>(<assignTemp>$9$6: T.untyped, <statTemp>$162: Integer(5), <statTemp>$163: Integer(0))\l<statTemp>$166: Integer(0) = 0\l@a$105: T.untyped = <assignTemp>$10$6: T.untyped.[](<statTemp>$166: Integer(0))\l<statTemp>$169: Integer(1) = 1\l@@b$109: T.untyped = <assignTemp>$10$6: T.untyped.[](<statTemp>$169: Integer(1))\l<statTemp>$172: Integer(2) = 2\l$c$113: T.untyped = <assignTemp>$10$6: T.untyped.[](<statTemp>$172: Integer(2))\l<statTemp>$175: Integer(3) = 3\ld$6: T.untyped = <assignTemp>$10$6: T.untyped.[](<statTemp>$175: Integer(3))\l<cfgAlias>$178: T.class_of(E) = alias <C E>\l<statTemp>$181: Integer(4) = 4\l<statTemp>$179: T.untyped = <assignTemp>$10$6: T.untyped.[](<statTemp>$181: Integer(4))\l<statTemp>$176: T.untyped = <cfgAlias>$178: T.class_of(E).e=(<statTemp>$179: T.untyped)\l<statTemp>$184: T.untyped = @a$105: T.untyped.inspect()\l<statTemp>$182: NilClass = <self>: T.class_of(Main).puts(<statTemp>$184: T.untyped)\l<statTemp>$188: T.untyped = @@b$109: T.untyped.inspect()\l<statTemp>$186: NilClass = <self>: T.class_of(Main).puts(<statTemp>$188: T.untyped)\l<statTemp>$192: T.untyped = $c$113: T.untyped.inspect()\l<statTemp>$190: NilClass = <self>: T.class_of(Main).puts(<statTemp>$192: T.untyped)\l<statTemp>$196: T.untyped = d$6: T.untyped.inspect()\l<statTemp>$194: NilClass = <self>: T.class_of(Main).puts(<statTemp>$196: T.untyped)\l<cfgAlias>$202: T.class_of(E) = alias <C E>\l<statTemp>$200: T.untyped = <cfgAlias>$202: T.class_of(E).e()\l<statTemp>$199: T.untyped = <statTemp>$200: T.untyped.inspect()\l<blockReturnTemp>$152: NilClass = <self>: T.class_of(Main).puts(<statTemp>$199: T.untyped)\l<blockReturnTemp>$203: T.noreturn = blockreturn<each> <blockReturnTemp>$152: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_25" -> "bb::<Class:Main>#main_22" [style="bold"];
}

subgraph "cluster_::<Class:Main>#<static-init>" {
    label = "::<Class:Main>#<static-init>";
    color = blue;

    "bb::<Class:Main>#<static-init>_0" [
        shape = invhouse;
        color = black;
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Main) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Main>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Main>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: Symbol(:main) = :main\l<statTemp>$7: Symbol(:normal) = :normal\l<returnMethodTemp>$2: Symbol(:main) = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_self_def(<self>: T.class_of(Main), <statTemp>$6: Symbol(:main), <statTemp>$7: Symbol(:normal))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:main)\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_0" -> "bb::<Class:Main>#<static-init>_1" [style="bold"];
    "bb::<Class:Main>#<static-init>_1" [
        shape = parallelogram;
        color = black;
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#<static-init>_1" -> "bb::<Class:Main>#<static-init>_1" [style="bold"];
}

}

