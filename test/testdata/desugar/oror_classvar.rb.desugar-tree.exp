class <emptyTree><<C <root>>> < (::<todo sym>)
  <self>.extend(<emptyTree>::<C T>::<C Sig>)

  x = <emptyTree>::<C T>.let(0, <emptyTree>::<C Integer>)

  <emptyTree>::<C T>.must(x)

  class <emptyTree>::<C Config><<C <todo sym>>> < (::<todo sym>)
    if @@supported_methods
      @@supported_methods
    else
      begin
        @@supported_methods = <emptyTree>::<C T>.let(@@supported_methods, <emptyTree>::<C T>.nilable(<emptyTree>::<C T>::<C Array>.[](<emptyTree>::<C String>)))
        <statTemp>$2 = nil
        @@supported_methods = <statTemp>$2
      end
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <self>.sig() do ||
      <self>.returns(<emptyTree>::<C T>::<C Array>.[](<emptyTree>::<C String>))
    end

    def self.supported_methods<<todo method>>(&<blk>)
      begin
        if @@supported_methods
          @@supported_methods
        else
          @@supported_methods = begin
            temp = <emptyTree>::<C T>.let(["fast", "slow", "special"].uniq().freeze(), <emptyTree>::<C T>.nilable(<emptyTree>::<C T>::<C Array>.[](<emptyTree>::<C String>)))
            temp
          end
        end
        <emptyTree>::<C T>.reveal_type(@@supported_methods)
        <emptyTree>::<C T>.must(@@supported_methods)
      end
    end

    if @@suggest_t_let_class_rhs
      @@suggest_t_let_class_rhs
    else
      @@suggest_t_let_class_rhs = ""
    end

    <self>.sig() do ||
      <self>.returns(<emptyTree>::<C Integer>)
    end

    def self.suggest_t_let_method<<todo method>>(&<blk>)
      if @@suggest_t_let_method
        @@suggest_t_let_method
      else
        @@suggest_t_let_method = ""
      end
    end
  end
end
