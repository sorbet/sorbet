class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C HasMeth><<C <todo sym>>> < (::<todo sym>)
    def meth<<todo method>>(&<blk>)
      "meth"
    end
  end

  def returns_lambda<<todo method>>(&<blk>)
    <self>.lambda() do |x|
      "returns_lambda"
    end
  end

  class <emptyTree>::<C HasToProc><<C <todo sym>>> < (::<todo sym>)
    def to_proc<<todo method>>(&<blk>)
      <self>.returns_lambda()
    end
  end

  def calls_arg_with_object<<todo method>>(arg, &blk)
    blk.call(arg)
  end

  def calls_with_object<<todo method>>(&blk)
    ::<Magic>.<call-with-block>(<self>, :calls_arg_with_object, blk, <emptyTree>::<C HasMeth>.new())
  end

  class <emptyTree>::<C CallsWithObject><<C <todo sym>>> < (::<todo sym>)
    def self.calls_with_object<<todo method>>(&blk)
      blk.call(<emptyTree>::<C HasMeth>.new())
    end
  end

  class <emptyTree>::<C CallsWithObjectChild><<C <todo sym>>> < (<emptyTree>::<C CallsWithObject>)
    def self.calls_with_object<<todo method>>(&blk)
      ::<Magic>.<call-with-block>(<self>, :<super>, blk)
    end
  end

  def foo<<todo method>>(&blk)
    begin
      <self>.calls_with_object() do |*<block-pass>$2|
        ::<Magic>.<call-with-splat>(<block-pass>$2.[](0), :meth, ::<Magic>.<splat>(<block-pass>$2.[](1, 9223372036854775807)), nil)
      end
      <self>.calls_with_object() do |*args|
        ::<Magic>.<call-with-splat>(:meth.to_proc(), :call, ::<Magic>.<splat>(args), nil)
      end
      <self>.calls_with_object() do |x|
        :meth.to_proc().call(x)
      end
      <self>.calls_with_object() do |x|
        x.meth()
      end
      ::<Magic>.<call-with-block>(<self>, :calls_with_object, blk)
      ::<Magic>.<call-with-block>(<self>, :calls_with_object, <self>.returns_lambda())
      ::<Magic>.<call-with-block>(<self>, :calls_with_object, <emptyTree>::<C HasToProc>.new())
      <self>.calls_with_object() do |*args|
        ::<Magic>.<call-with-splat>(<emptyTree>::<C HasToProc>.new().to_proc(), :call, ::<Magic>.<splat>(args), nil)
      end
      <emptyTree>::<C CallsWithObject>.calls_with_object() do |*<block-pass>$3|
        ::<Magic>.<call-with-splat>(<block-pass>$3.[](0), :meth, ::<Magic>.<splat>(<block-pass>$3.[](1, 9223372036854775807)), nil)
      end
      begin
        <assignTemp>$4 = <emptyTree>::<C CallsWithObject>
        if ::NilClass.===(<assignTemp>$4)
          ::<Magic>.<nil-for-safe-navigation>(<assignTemp>$4)
        else
          <assignTemp>$4.calls_with_object() do |*<block-pass>$5|
            ::<Magic>.<call-with-splat>(<block-pass>$5.[](0), :meth, ::<Magic>.<splat>(<block-pass>$5.[](1, 9223372036854775807)), nil)
          end
        end
      end
      <emptyTree>::<C CallsWithObjectChild>.calls_with_object() do |*<block-pass>$6|
        ::<Magic>.<call-with-splat>(<block-pass>$6.[](0), :meth, ::<Magic>.<splat>(<block-pass>$6.[](1, 9223372036854775807)), nil)
      end
      <self>.calls_arg_with_object(<emptyTree>::<C HasMeth>.new()) do |*<block-pass>$7|
        ::<Magic>.<call-with-splat>(<block-pass>$7.[](0), :meth, ::<Magic>.<splat>(<block-pass>$7.[](1, 9223372036854775807)), nil)
      end
      <self>.calls_arg_with_object(<emptyTree>::<C HasMeth>.new()) do |x|
        x.meth()
      end
    end
  end

  <self>.foo() do |x|
    "foo"
  end
end
