begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        <emptyTree>
        ::Sorbet::Private::Static.keep_for_ide(::Test)
        <emptyTree>
      end
    end
  end
  class ::Test<<C Test>> < (::<todo sym>)
    def foo(x, <blk>)
      x
    end

    def bar(y, <blk>)
      y
    end

    def qux(z, <blk>)
      z
    end

    def baz(w, <blk>)
      w
    end

    def self.<static-init>(<blk>)
      begin
        ::Sorbet::Private::Static::ResolvedSig.sig(<self>, false, :foo) do ||
          <self>.params(:x, ::String).returns(::String)
        end
        ::Sorbet::Private::Static::ResolvedSig.sig(<self>, false, :bar) do ||
          <self>.params(:y, ::String).returns(::String)
        end
        ::Sorbet::Private::Static::ResolvedSig.sig(<self>, false, :qux) do ||
          <self>.params(:z, ::String).returns(::String)
        end
        ::Sorbet::Private::Static::ResolvedSig.sig(<self>, false, :baz) do ||
          <self>.params(:w, ::String).returns(::String)
        end
        <self>.extend(::T::Sig)
        :foo
        :bar
        :qux
        :baz
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
