class <C <U <root>>> < <C <U Object>> ()
  class <S <C <U <root>>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> ()
    method <S <C <U <root>>> $1><N <U <static-init>> $CENSORED> (<blk>) @ Loc {file=test/testdata/resolver/sig_bad.rb start=2:1 end=47:4}
      argument <blk><block> @ Loc {file=test/testdata/resolver/sig_bad.rb start=??? end=???}
  class <C <U A>> < <C <U Object>> () @ Loc {file=test/testdata/resolver/sig_bad.rb start=10:1 end=10:8}
    method <C <U A>><U bad> (a, b, c, d, e, b1, c1, d1, e1, f, g, h, i, j, k, l, m, n, o, <blk>) -> T2 @ Loc {file=test/testdata/resolver/sig_bad.rb start=44:3 end=44:71}
      argument a<> -> T.untyped @ Loc {file=test/testdata/resolver/sig_bad.rb start=17:7 end=17:8}
      argument b<> -> T.untyped @ Loc {file=test/testdata/resolver/sig_bad.rb start=18:7 end=18:8}
      argument c<> -> Object @ Loc {file=test/testdata/resolver/sig_bad.rb start=19:7 end=19:8}
      argument d<> -> T.untyped @ Loc {file=test/testdata/resolver/sig_bad.rb start=20:7 end=20:8}
      argument e<> -> T.untyped @ Loc {file=test/testdata/resolver/sig_bad.rb start=21:7 end=21:8}
      argument b1<> -> T.untyped @ Loc {file=test/testdata/resolver/sig_bad.rb start=22:7 end=22:9}
      argument c1<> -> Object @ Loc {file=test/testdata/resolver/sig_bad.rb start=23:7 end=23:9}
      argument d1<> -> T.untyped @ Loc {file=test/testdata/resolver/sig_bad.rb start=24:7 end=24:9}
      argument e1<> -> T.untyped @ Loc {file=test/testdata/resolver/sig_bad.rb start=25:7 end=25:9}
      argument f<> -> Integer @ Loc {file=test/testdata/resolver/sig_bad.rb start=26:7 end=26:8}
      argument g<> -> T.untyped @ Loc {file=test/testdata/resolver/sig_bad.rb start=27:7 end=27:8}
      argument h<> -> T.untyped @ Loc {file=test/testdata/resolver/sig_bad.rb start=28:7 end=28:8}
      argument i<> -> T.untyped @ Loc {file=test/testdata/resolver/sig_bad.rb start=30:7 end=30:8}
      argument j<> -> T.untyped @ Loc {file=test/testdata/resolver/sig_bad.rb start=32:7 end=32:8}
      argument k<> -> T.untyped @ Loc {file=test/testdata/resolver/sig_bad.rb start=33:7 end=33:8}
      argument l<> -> {} @ Loc {file=test/testdata/resolver/sig_bad.rb start=37:7 end=37:8}
      argument m<> -> {foo: Integer} @ Loc {file=test/testdata/resolver/sig_bad.rb start=38:7 end=38:8}
      argument n<> -> T.untyped @ Loc {file=test/testdata/resolver/sig_bad.rb start=39:7 end=39:8}
      argument o<> -> T.untyped @ Loc {file=test/testdata/resolver/sig_bad.rb start=40:7 end=40:8}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/resolver/sig_bad.rb start=??? end=???}
  class <S <C <U A>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> (<C <U Sig>>) @ Loc {file=test/testdata/resolver/sig_bad.rb start=10:7 end=10:8}
    type-member(+) <S <C <U A>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U A>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=A) @ Loc {file=test/testdata/resolver/sig_bad.rb start=10:7 end=10:8}
    method <S <C <U A>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/sig_bad.rb start=10:1 end=47:4}
      argument <blk><block> @ Loc {file=test/testdata/resolver/sig_bad.rb start=??? end=???}
    method <S <C <U A>> $1><U unsupported> (<blk>) @ Loc {file=test/testdata/resolver/sig_bad.rb start=13:3 end=13:23}
      argument <blk><block> @ Loc {file=test/testdata/resolver/sig_bad.rb start=??? end=???}
  module <C <U T>> < <C <U Sorbet>><C <U Private>><C <U Static>><C <U ImplicitModuleSuperclass>> () @ Loc {file=https://github.com/sorbet/sorbet/tree/master/rbi/sorbet/t.rbi start=removed end=removed}
    module <C <U T>><C <U Private>> < <C <U Sorbet>><C <U Private>><C <U Static>><C <U ImplicitModuleSuperclass>> ()
      module <C <U T>><C <U Private>><C <U Methods>> < <C <U Sorbet>><C <U Private>><C <U Static>><C <U ImplicitModuleSuperclass>> () @ (Loc {file=https://github.com/sorbet/sorbet/tree/master/rbi/sorbet/tprivate.rbi start=removed end=removed}, Loc {file=https://github.com/sorbet/sorbet/tree/master/rbi/sorbet/builder.rbi start=removed end=removed})
        class <C <U T>><C <U Private>><C <U Methods>><C <U DeclBuilder>> < <C <U Object>> () @ (Loc {file=test/testdata/resolver/sig_bad.rb start=5:1 end=5:39}, Loc {file=https://github.com/sorbet/sorbet/tree/master/rbi/sorbet/builder.rbi start=removed end=removed})
          method <C <U T>><C <U Private>><C <U Methods>><C <U DeclBuilder>><U unsupported> (<blk>) @ Loc {file=test/testdata/resolver/sig_bad.rb start=6:3 end=6:18}
            argument <blk><block> @ Loc {file=test/testdata/resolver/sig_bad.rb start=??? end=???}
  class <C <U T1>> < <C <U Object>> () @ Loc {file=test/testdata/resolver/sig_bad.rb start=2:1 end=2:9}
  class <S <C <U T1>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/resolver/sig_bad.rb start=2:7 end=2:9}
    type-member(+) <S <C <U T1>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U T1>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=T1) @ Loc {file=test/testdata/resolver/sig_bad.rb start=2:7 end=2:9}
    method <S <C <U T1>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/sig_bad.rb start=2:1 end=2:14}
      argument <blk><block> @ Loc {file=test/testdata/resolver/sig_bad.rb start=??? end=???}
  class <C <U T2>> < <C <U Object>> () @ Loc {file=test/testdata/resolver/sig_bad.rb start=3:1 end=3:9}
  class <S <C <U T2>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/resolver/sig_bad.rb start=3:7 end=3:9}
    type-member(+) <S <C <U T2>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U T2>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=T2) @ Loc {file=test/testdata/resolver/sig_bad.rb start=3:7 end=3:9}
    method <S <C <U T2>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/sig_bad.rb start=3:1 end=3:14}
      argument <blk><block> @ Loc {file=test/testdata/resolver/sig_bad.rb start=??? end=???}

