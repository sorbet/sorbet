class <C <U <root>>> < <C <U Object>> ()
  class <S <C <U <root>>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> ()
    method <S <C <U <root>>> $1>#<N <U <static-init>> $CENSORED> (<blk>) @ Loc {file=test/testdata/resolver/type_member_singleton_members.rb start=3:1 end=13:4}
      argument <blk><block> @ Loc {file=test/testdata/resolver/type_member_singleton_members.rb start=??? end=???}
  class <C <U A>> < <C <U Object>> () @ Loc {file=test/testdata/resolver/type_member_singleton_members.rb start=3:1 end=3:8}
  class <S <C <U A>> $1>[<C <U <AttachedClass>>>, <C <U X>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/resolver/type_member_singleton_members.rb start=4:3 end=4:8}
    type-member(+) <S <C <U A>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U A>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=A) @ Loc {file=test/testdata/resolver/type_member_singleton_members.rb start=3:1 end=3:8}
    method <S <C <U A>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/type_member_singleton_members.rb start=3:1 end=13:4}
      argument <blk><block> @ Loc {file=test/testdata/resolver/type_member_singleton_members.rb start=??? end=???}
    type-member(+) <S <C <U A>> $1>::<C <U X>> -> LambdaParam(<S <C <U A>> $1>::<C <U X>>, lower=T.noreturn, upper=String) @ Loc {file=test/testdata/resolver/type_member_singleton_members.rb start=6:5 end=6:44}
  class <S <S <C <U A>> $1> $1>[<C <U <AttachedClass>>>, <C <U X>>] < <S <S <C <U Object>> $1> $1> (<C <U Generic>>, <C <U Helpers>>) @ Loc {file=test/testdata/resolver/type_member_singleton_members.rb start=8:5 end=8:10}
    type-member(+) <S <S <C <U A>> $1> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <S <C <U A>> $1> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {   klass = <S <C <U A>> $1>   targs = [     <C <U <AttachedClass>>> = A     <C <U X>> = String   ] }) @ Loc {file=test/testdata/resolver/type_member_singleton_members.rb start=4:3 end=4:8}
    method <S <S <C <U A>> $1> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/type_member_singleton_members.rb start=4:3 end=12:6}
      argument <blk><block> @ Loc {file=test/testdata/resolver/type_member_singleton_members.rb start=??? end=???}
    type-member(+) <S <S <C <U A>> $1> $1>::<C <U X>> -> LambdaParam(<S <S <C <U A>> $1> $1>::<C <U X>>, lower=T.noreturn, upper=Integer) @ Loc {file=test/testdata/resolver/type_member_singleton_members.rb start=10:7 end=10:47}
  class <S <S <S <C <U A>> $1> $1> $1>[<C <U <AttachedClass>>>] < <S <S <S <C <U Object>> $1> $1> $1> (<C <U Generic>>, <C <U Helpers>>) @ Loc {file=test/testdata/resolver/type_member_singleton_members.rb start=8:5 end=8:10}
    type-member(+) <S <S <S <C <U A>> $1> $1> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <S <S <C <U A>> $1> $1> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=AppliedType {   klass = <S <S <C <U A>> $1> $1>   targs = [     <C <U <AttachedClass>>> = AppliedType {         klass = <S <C <U A>> $1>         targs = [           <C <U <AttachedClass>>> = A           <C <U X>> = String         ]       }     <C <U X>> = Integer   ] }) @ Loc {file=test/testdata/resolver/type_member_singleton_members.rb start=8:5 end=8:10}
    method <S <S <S <C <U A>> $1> $1> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/type_member_singleton_members.rb start=8:5 end=11:8}
      argument <blk><block> @ Loc {file=test/testdata/resolver/type_member_singleton_members.rb start=??? end=???}

