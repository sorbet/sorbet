class <C <U <root>>> < <C <U Object>> ()
  class <S <C <U <root>>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> ()
    method <S <C <U <root>>> $1><N <U <static-init>> $CENSORED> (<blk>) @ Loc {file=test/testdata/resolver/sig_good.rb start=2:1 end=33:4}
      argument <blk><block> @ Loc {file=test/testdata/resolver/sig_good.rb start=??? end=???}
  class <C <U A>> < <C <U Object>> () @ Loc {file=test/testdata/resolver/sig_good.rb start=7:1 end=7:8}
    method <C <U A>><U good> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, <blk>) -> T2 @ Loc {file=test/testdata/resolver/sig_good.rb start=31:3 end=31:56}
      argument a<> -> [T1, T2] @ Loc {file=test/testdata/resolver/sig_good.rb start=10:7 end=10:8}
      argument b<> -> T1 @ Loc {file=test/testdata/resolver/sig_good.rb start=11:7 end=11:8}
      argument c<> -> T.nilable(T1) @ Loc {file=test/testdata/resolver/sig_good.rb start=12:7 end=12:8}
      argument d<> -> T.any(T1, T2) @ Loc {file=test/testdata/resolver/sig_good.rb start=13:7 end=13:8}
      argument e<> -> T.untyped @ Loc {file=test/testdata/resolver/sig_good.rb start=14:7 end=14:8}
      argument f<> -> T::Array[T1] @ Loc {file=test/testdata/resolver/sig_good.rb start=15:7 end=15:8}
      argument g<> -> T::Hash[T1, T2] @ Loc {file=test/testdata/resolver/sig_good.rb start=16:7 end=16:8}
      argument h<> -> T.any(FalseClass, Integer, Float, String, Symbol) @ Loc {file=test/testdata/resolver/sig_good.rb start=17:7 end=17:8}
      argument i<> -> T1 @ Loc {file=test/testdata/resolver/sig_good.rb start=18:7 end=18:8}
      argument j<> -> T.class_of(T1) @ Loc {file=test/testdata/resolver/sig_good.rb start=19:7 end=19:8}
      argument k<> -> T.class_of(T1) @ Loc {file=test/testdata/resolver/sig_good.rb start=20:7 end=20:8}
      argument l<> -> T.class_of(M1) @ Loc {file=test/testdata/resolver/sig_good.rb start=21:7 end=21:8}
      argument m<> -> {foo: String, bar: T.nilable(Integer)} @ Loc {file=test/testdata/resolver/sig_good.rb start=22:7 end=22:8}
      argument n<> -> {} @ Loc {file=test/testdata/resolver/sig_good.rb start=26:7 end=26:8}
      argument o<> -> {String("hi") => String, bye: String} @ Loc {file=test/testdata/resolver/sig_good.rb start=27:7 end=27:8}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/resolver/sig_good.rb start=??? end=???}
  class <S <C <U A>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/resolver/sig_good.rb start=7:7 end=7:8}
    type-member(+) <S <C <U A>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U A>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=A) @ Loc {file=test/testdata/resolver/sig_good.rb start=7:7 end=7:8}
    method <S <C <U A>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/sig_good.rb start=7:1 end=33:4}
      argument <blk><block> @ Loc {file=test/testdata/resolver/sig_good.rb start=??? end=???}
  static-field <C <U A1>> -> AliasType { symbol = <C <U T1>> } @ Loc {file=test/testdata/resolver/sig_good.rb start=5:1 end=5:3}
  module <C <U M1>> < <C <U Sorbet>><C <U Private>><C <U Static>><C <U ImplicitModuleSuperclass>> () @ Loc {file=test/testdata/resolver/sig_good.rb start=4:1 end=4:10}
  class <S <C <U M1>> $1>[<C <U <AttachedClass>>>] < <C <U Module>> () @ Loc {file=test/testdata/resolver/sig_good.rb start=4:8 end=4:10}
    type-member(+) <S <C <U M1>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U M1>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=M1) @ Loc {file=test/testdata/resolver/sig_good.rb start=4:8 end=4:10}
    method <S <C <U M1>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/sig_good.rb start=4:1 end=4:15}
      argument <blk><block> @ Loc {file=test/testdata/resolver/sig_good.rb start=??? end=???}
  class <C <U T1>> < <C <U Object>> () @ Loc {file=test/testdata/resolver/sig_good.rb start=2:1 end=2:9}
  class <S <C <U T1>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/resolver/sig_good.rb start=2:7 end=2:9}
    type-member(+) <S <C <U T1>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U T1>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=T1) @ Loc {file=test/testdata/resolver/sig_good.rb start=2:7 end=2:9}
    method <S <C <U T1>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/sig_good.rb start=2:1 end=2:14}
      argument <blk><block> @ Loc {file=test/testdata/resolver/sig_good.rb start=??? end=???}
  class <C <U T2>> < <C <U Object>> () @ Loc {file=test/testdata/resolver/sig_good.rb start=3:1 end=3:9}
  class <S <C <U T2>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/resolver/sig_good.rb start=3:7 end=3:9}
    type-member(+) <S <C <U T2>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U T2>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=T2) @ Loc {file=test/testdata/resolver/sig_good.rb start=3:7 end=3:9}
    method <S <C <U T2>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/sig_good.rb start=3:1 end=3:14}
      argument <blk><block> @ Loc {file=test/testdata/resolver/sig_good.rb start=??? end=???}

