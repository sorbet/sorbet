class <C <U <root>>> < <C <U Object>> ()
  class <S <C <U <root>>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> ()
    method <S <C <U <root>>> $1>#<N <U <static-init>> $CENSORED> (<blk>) @ Loc {file=test/testdata/resolver/type_arguments.rb start=3:1 end=13:4}
      argument <blk><block> @ Loc {file=test/testdata/resolver/type_arguments.rb start=??? end=???}
  class <C <U Func>> < <C <U Object>> () @ Loc {file=test/testdata/resolver/type_arguments.rb start=3:1 end=3:11}
  class <S <C <U Func>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> (<C <U Sig>>) @ Loc {file=test/testdata/resolver/type_arguments.rb start=3:1 end=3:11}
    type-member(+) <S <C <U Func>> $1>::<C <U <AttachedClass>>> -> LambdaParam(<S <C <U Func>> $1>::<C <U <AttachedClass>>>, lower=T.noreturn, upper=Func) @ Loc {file=test/testdata/resolver/type_arguments.rb start=3:1 end=3:11}
    method <S <C <U Func>> $1>#<U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/type_arguments.rb start=3:1 end=13:4}
      argument <blk><block> @ Loc {file=test/testdata/resolver/type_arguments.rb start=??? end=???}
    method <S <C <U Func>> $1>#<U id>[<T <U U> $1>] (x, <blk>) -> TypeVar(<T <U U> $1>) @ Loc {file=test/testdata/resolver/type_arguments.rb start=10:3 end=10:17}
      type-argument(+) <S <C <U Func>> $1>#<U id>#<T <U U> $1> -> TypeVar(<T <U U> $1>) @ Loc {file=test/testdata/resolver/type_arguments.rb start=6:21 end=6:23}
      argument x<> -> T.type_parameter(:U) @ Loc {file=test/testdata/resolver/type_arguments.rb start=7:15 end=7:16}
      argument <blk><block> -> T.untyped @ Loc {file=test/testdata/resolver/type_arguments.rb start=??? end=???}

