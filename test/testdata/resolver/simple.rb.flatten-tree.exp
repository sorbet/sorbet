begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::Outer1)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::Outer2)
          <emptyTree>
        end
        <emptyTree>
      end
    end
  end
  class ::Outer1<<C Outer1>> < (::<todo sym>)
    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  class ::Outer2<<C Outer2>> < (::<todo sym>)
    def self.<static-init>(<blk>)
      begin
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::Outer2::C)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::Outer2::Inner1)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::Outer2::Inner1::Inner2)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::Outer2::Other)
          ::Sorbet::Private::Static.keep_for_ide(::Outer2::Inner1::Inner2)
          <emptyTree>
        end
        <emptyTree>
      end
    end
  end
  class ::Outer2::C<<C C>> < (::<todo sym>)
    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  class ::Outer2::Inner1<<C Inner1>> < (::<todo sym>)
    def self.<static-init>(<blk>)
      begin
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::Outer2::Inner1::A)
          <emptyTree>
        end
        begin
          <emptyTree>
          ::Sorbet::Private::Static.keep_for_ide(::Outer2::Inner1::Inner2)
          <emptyTree>
        end
        <emptyTree>
      end
    end
  end
  class ::Outer2::Inner1::A<<C A>> < (::<todo sym>)
    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  class ::Outer2::Inner1::Inner2<<C Inner2>> < (::<todo sym>)
    def self.<static-init>(<blk>)
      begin
        ::Outer2::Inner1::A
        ::Outer2::Inner1
        ::Outer2::Inner1::Inner2
        ::Outer1
        <emptyTree>
      end
    end
  end
  class ::Outer2::Inner1::Inner2<<C Inner2>> < (::<todo sym>)
    def self.<static-init>(<blk>)
      begin
        ::Outer2::C
        Unresolved: <emptyTree>::<C A>
        <emptyTree>
      end
    end
  end
  class ::Outer2::Other<<C Other>> < (::Outer2::Inner1::Inner2)
    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  <emptyTree>
end
