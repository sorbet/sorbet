class ::<root> < ::Object ()
  class ::<Class:<root>>[<AttachedClass>] < ::<Class:Object> ()
    method ::<Class:<root>>#<static-init> (<blk>) @ test/testdata/resolver/multi_alias_method.rb:3
      argument <blk><block> @ Loc {file=test/testdata/resolver/multi_alias_method.rb start=??? end=???}
  class ::A < ::Object () @ test/testdata/resolver/multi_alias_method.rb:3
    method ::A#from () -> <Alias: ::A#to > @ test/testdata/resolver/multi_alias_method.rb:6
    method ::A#to (<blk>) @ test/testdata/resolver/multi_alias_method.rb:4
      argument <blk><block> @ Loc {file=test/testdata/resolver/multi_alias_method.rb start=??? end=???}
  class ::<Class:A>[<AttachedClass>] < ::<Class:Object> () @ test/testdata/resolver/multi_alias_method.rb:3
    type-member(+) ::<Class:A>::<AttachedClass> -> T.attached_class (of A) @ test/testdata/resolver/multi_alias_method.rb:3
    method ::<Class:A>#<static-init> (<blk>) @ test/testdata/resolver/multi_alias_method.rb:3
      argument <blk><block> @ Loc {file=test/testdata/resolver/multi_alias_method.rb start=??? end=???}
  class ::B < ::Object () @ test/testdata/resolver/multi_alias_method.rb:10
    method ::B#from () -> <Alias: ::Sorbet::Private::Static#<bad-method-alias-stub> > @ test/testdata/resolver/multi_alias_method.rb:11
  class ::<Class:B>[<AttachedClass>] < ::<Class:Object> () @ test/testdata/resolver/multi_alias_method.rb:10
    type-member(+) ::<Class:B>::<AttachedClass> -> T.attached_class (of B) @ test/testdata/resolver/multi_alias_method.rb:10
    method ::<Class:B>#<static-init> (<blk>) @ test/testdata/resolver/multi_alias_method.rb:10
      argument <blk><block> @ Loc {file=test/testdata/resolver/multi_alias_method.rb start=??? end=???}

