[2023-08-10 22:56:26.753] [consoleAndFile] [debug] Running sorbet version 0.5.0 (non-release) debug_symbols=true clean=0 debug_mode=true with arguments: ../../../bazel-bin/main/sorbet --debug-log-file=sorbet-vscode.log --lsp --dir=.
[2023-08-10 22:56:27.230] [consoleAndFile] [debug] Starting sorbet version 0.5.0 (non-release) debug_symbols=true clean=0 debug_mode=true in LSP server mode. Talk ‘\r\n’-separated JSON-RPC to me. More details at https://microsoft.github.io/language-server-protocol/specification.If you're developing an LSP extension to some editor, make sure to run sorbet with `-v` flag,it will enable outputing the LSP session to stderr(`Write: ` and `Read: ` log lines)
[2023-08-10 22:56:27.230] [consoleAndFile] [debug] Starting monitoring path . with watchman for files with extensions rb,rbi. Subscription id: ruby-typer-880962
[2023-08-10 22:56:27.230] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":880759,"clientInfo":{"name":"Visual Studio Code","version":"1.76.1"},"locale":"en-us","rootPath":"/home/jez/stripe/sorbet/test/sandbox/vscode","rootUri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional","normalizesLineEndings":true,"changeAnnotationSupport":{"groupsOnLabel":true}},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"tagSupport":{"valueSet":[1]}},"codeLens":{"refreshSupport":true},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true,"semanticTokens":{"refreshSupport":true},"fileOperations":{"dynamicRegistration":true,"didCreate":true,"didRename":true,"didDelete":true,"willCreate":true,"willRename":true,"willDelete":true}},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]},"codeDescriptionSupport":true,"dataSupport":true},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]},"insertReplaceSupport":true,"resolveSupport":{"properties":["documentation","detail","additionalTextEdits"]},"insertTextModeSupport":{"valueSet":[1,2]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true},"activeParameterSupport":true},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true,"tagSupport":{"valueSet":[1]},"labelSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"disabledSupport":true,"dataSupport":true,"resolveSupport":{"properties":["edit"]},"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}},"honorsChangeAnnotations":false},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true,"prepareSupportDefaultBehavior":1,"honorsChangeAnnotations":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true},"callHierarchy":{"dynamicRegistration":true},"semanticTokens":{"dynamicRegistration":true,"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"formats":["relative"],"requests":{"range":true,"full":{"delta":true}},"multilineTokenSupport":false,"overlappingTokenSupport":false},"linkedEditingRange":{"dynamicRegistration":true}},"window":{"showMessage":{"messageActionItem":{"additionalPropertiesSupport":true}},"showDocument":{"support":true},"workDoneProgress":true},"general":{"regularExpressions":{"engine":"ECMAScript","version":"ES2020"},"markdown":{"parser":"marked","version":"1.1.0"}}},"initializationOptions":{"supportsOperationNotifications":true,"supportsSorbetURIs":true,"highlightUntyped":false},"trace":"off","workspaceFolders":[{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode","name":"vscode"}]}}

[2023-08-10 22:56:27.231] [consoleAndFile] [debug] ["subscribe", ".", "ruby-typer-880962", {"expression": ["allof", ["type", "f"], ["anyof", ["suffix", "rb"], ["suffix", "rbi"]], ["not", ["match", "**/.~tmp~/**", "wholename", {"includedotfiles": true}]]], "fields": ["name"], "empty_on_fresh_instance": true}]
[2023-08-10 22:56:27.235] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":0,"requestMethod":"initialize","result":{"capabilities":{"textDocumentSync":1,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".",":","@","#"]},"definitionProvider":true,"typeDefinitionProvider":true,"implementationProvider":true,"referencesProvider":true,"documentHighlightProvider":false,"documentSymbolProvider":false,"workspaceSymbolProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","source.fixAll.sorbet","refactor.extract","refactor.rewrite"],"resolveProvider":true},"documentFormattingProvider":false,"renameProvider":{"prepareProvider":true},"sorbetShowSymbolProvider":true}}}

[2023-08-10 22:56:27.242] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"initialized","params":{}}

[2023-08-10 22:56:27.243] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","languageId":"ruby","version":1,"text":"# typed: strict\n\nclass A\nend\n"}}}

[2023-08-10 22:56:27.243] [consoleAndFile] [error] Pausing
[2023-08-10 22:56:27.243] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"sorbet/showOperation","params":{"operationName":"Indexing","description":"Indexing files...","status":"start"}}

[2023-08-10 22:56:27.245] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"context":{"diagnostics":[]}}}

[2023-08-10 22:56:27.265] [consoleAndFile] [debug] {"version":"2022.12.05.00","error":"watchman::RootResolveError: failed to resolve root: unable to resolve root /home/jez/stripe/sorbet/test/sandbox/vscode: failed to resolve root: directory /home/jez/stripe/sorbet/test/sandbox/vscode is not watched"}
[2023-08-10 22:56:27.265] [consoleAndFile] [debug] Unknown Watchman response:
{"version":"2022.12.05.00","error":"watchman::RootResolveError: failed to resolve root: unable to resolve root /home/jez/stripe/sorbet/test/sandbox/vscode: failed to resolve root: directory /home/jez/stripe/sorbet/test/sandbox/vscode is not watched"}
[2023-08-10 22:56:27.563] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"sorbet/showOperation","params":{"operationName":"Indexing","description":"Indexing files...","status":"end"}}

[2023-08-10 22:56:27.563] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"sorbet/showOperation","params":{"operationName":"SlowPathBlocking","description":"Typechecking...","status":"start"}}

[2023-08-10 22:56:27.563] [consoleAndFile] [debug] Taking slow path
[2023-08-10 22:56:27.602] [consoleAndFile] [debug] [Typechecker] Typecheck run for epoch 0 successfully finished.
[2023-08-10 22:56:27.602] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"sorbet/showOperation","params":{"operationName":"SlowPathBlocking","description":"Typechecking...","status":"end"}}

[2023-08-10 22:56:27.602] [consoleAndFile] [error] Resuming
[2023-08-10 22:56:27.697] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:27.697] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:27.697] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:27.697] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:27.701] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:27.701] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:27.707] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":1,"requestMethod":"textDocument/codeAction","result":[]}

[2023-08-10 22:56:31.260] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":2,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":2,"character":6}}}

[2023-08-10 22:56:31.265] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":2,"requestMethod":"textDocument/hover","result":{"contents":{"kind":"markdown","value":"```ruby\nT.class_of(A)\n```"}}}

[2023-08-10 22:56:33.631] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":2},"contentChanges":[{"text":"# typed: strict\n\nclass A\n    \nend\n"}]}}

[2023-08-10 22:56:33.723] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:33.723] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:33.723] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:33.724] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:33.745] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":3},"contentChanges":[{"text":"# typed: strict\n\nclass A\n    d\nend\n"}]}}

[2023-08-10 22:56:33.745] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":3,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":3,"character":5},"context":{"triggerKind":1}}}

[2023-08-10 22:56:33.841] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:33.841] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:33.841] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:33.841] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:33.844] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 3
[2023-08-10 22:56:33.845] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `d` does not exist on `T.class_of(A)`","relatedInformation":[]}]}}

[2023-08-10 22:56:33.886] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":3,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[{"label":"def","kind":15,"detail":"(sorbet) New method","documentation":{"kind":"markdown","value":"```ruby\ndef ${1:method_name}($2)\n  $0\nend\n```\n\n---\n\nDefines a method."},"sortText":"000000","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"def ${1:method_name}($2)\n  $0\nend"}},{"label":"defined?","kind":15,"detail":"(sorbet) Snippet: defined?","documentation":{"kind":"markdown","value":"```ruby\ndefined?(${1:Constant})$0\n```\n\n---\n\nReturns a string describing its argument."},"sortText":"000001","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"defined?(${1:Constant})$0"}},{"label":"do","kind":15,"detail":"(sorbet) Snippet: do","documentation":{"kind":"markdown","value":"```ruby\ndo\n  $0\nend\n```\n\n---\n\nStarts a block."},"sortText":"000002","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"do\n  $0\nend"}},{"label":"attached_object","kind":2,"detail":"Class#attached_object","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(BasicObject)}\ndef attached_object; end\n```\n\n---\n\nReturns the object for which the receiver is the singleton class.\n\nRaises a `TypeError` if the class is not a singleton class.\n\n```ruby\nclass Foo; end\n\nFoo.singleton_class.attached_object        #=> Foo\nFoo.attached_object                        #=> TypeError: `Foo' is not a singleton class\nFoo.new.singleton_class.attached_object    #=> #<Foo:0x000000010491a370>\nTrueClass.attached_object                  #=> TypeError: `TrueClass' is not a singleton class\nNilClass.attached_object                   #=> TypeError: `NilClass' is not a singleton class\n```"},"sortText":"000003","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"attached_object${0}"}},{"label":"inherited","kind":2,"detail":"Class#inherited","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T::Class[T.anything]).returns(T.untyped)}\ndef inherited(arg0); end\n```\n\n---\n\nCallback invoked whenever a subclass of the current class is created.\n\nExample:\n\n```ruby\nclass Foo\n  def self.inherited(subclass)\n    puts \"New subclass: #{subclass}\"\n  end\nend\n\nclass Bar < Foo\nend\n\nclass Baz < Bar\nend\n```\n\n*produces:*\n\n```ruby\nNew subclass: Bar\nNew subclass: Baz\n```"},"sortText":"000004","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"inherited(${1:T::Class[T.anything]})${0}"}},{"label":"instance_methods","kind":2,"detail":"Class#instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T::Boolean).returns(T::Array[Symbol])}\ndef instance_methods(arg0=…); end\n```"},"sortText":"000005","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"instance_methods${0}"}},{"label":"define_method","kind":2,"detail":"Module#define_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    arg1: T.any(Proc, Method, UnboundMethod)\n  )\n  .returns(Symbol)\nend\ndef define_method(arg0, arg1=…); end\n```\n\n---\n\nDefines an instance method in the receiver. The *method* parameter can be a\n`Proc`, a `Method` or an `UnboundMethod` object. If a block is specified, it\nis used as the method body. If a block or the *method* parameter has\nparameters, they're used as method parameters. This block is evaluated using\n[`instance_eval`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html#method-i-instance_eval).\n\n```ruby\nclass A\n  def fred\n    puts \"In Fred\"\n  end\n  def create_method(name, &block)\n    self.class.define_method(name, &block)\n  end\n  define_method(:wilma) { puts \"Charge it!\" }\n  define_method(:flint) {|name| puts \"I'm #{name}!\"}\nend\nclass B < A\n  define_method(:barney, instance_method(:fred))\nend\na = B.new\na.barney\na.wilma\na.flint('Dino')\na.create_method(:betty) { p self }\na.betty\n```\n\n*produces:*\n\n```\nIn Fred\nCharge it!\nI'm Dino!\n#<B:0x401b39e8>\n```"},"sortText":"000006","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"define_method(${1:T.any(Symbol, String)})${0}"}},{"label":"define_method","kind":2,"detail":"Module#define_method (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String), blk: T.untyped).returns(Symbol)}\ndef define_method (overload.1)(arg0, &blk); end\n```\n\n---\n\nDefines an instance method in the receiver. The *method* parameter can be a\n`Proc`, a `Method` or an `UnboundMethod` object. If a block is specified, it\nis used as the method body. If a block or the *method* parameter has\nparameters, they're used as method parameters. This block is evaluated using\n[`instance_eval`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html#method-i-instance_eval).\n\n```ruby\nclass A\n  def fred\n    puts \"In Fred\"\n  end\n  def create_method(name, &block)\n    self.class.define_method(name, &block)\n  end\n  define_method(:wilma) { puts \"Charge it!\" }\n  define_method(:flint) {|name| puts \"I'm #{name}!\"}\nend\nclass B < A\n  define_method(:barney, instance_method(:fred))\nend\na = B.new\na.barney\na.wilma\na.flint('Dino')\na.create_method(:betty) { p self }\na.betty\n```\n\n*produces:*\n\n```\nIn Fred\nCharge it!\nI'm Dino!\n#<B:0x401b39e8>\n```"},"sortText":"000007","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"define_method(${1:T.any(Symbol, String)})${0}"}},{"label":"deprecate_constant","kind":2,"detail":"Module#deprecate_constant","documentation":{"kind":"markdown","value":"```ruby\nsig {params(_: T.untyped).returns(T.untyped)}\ndef deprecate_constant(*_); end\n```\n\n---\n\nMakes a list of existing constants deprecated. Attempt to refer to them will\nproduce a warning.\n\n```ruby\nmodule HTTP\n  NotFound = Exception.new\n  NOT_FOUND = NotFound # previous version of the library used this name\n\n  deprecate_constant :NOT_FOUND\nend\n\nHTTP::NOT_FOUND\n# warning: constant HTTP::NOT_FOUND is deprecated\n```"},"sortText":"000008","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"deprecate_constant${0}"}},{"label":"alias_method","kind":2,"detail":"Module#alias_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(new_name: Symbol, old_name: Symbol).returns(Symbol)}\ndef alias_method(new_name, old_name); end\n```\n\n---\n\nMakes *new\\_name* a new copy of the method *old\\_name*. This can be used to\nretain access to methods that are overridden.\n\n```ruby\nmodule Mod\n  alias_method :orig_exit, :exit #=> :orig_exit\n  def exit(code=0)\n    puts \"Exiting with code #{code}\"\n    orig_exit(code)\n  end\nend\ninclude Mod\nexit(99)\n```\n\n*produces:*\n\n```ruby\nExiting with code 99\n```"},"sortText":"000009","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"alias_method(${1:Symbol}, ${2:Symbol})${0}"}},{"label":"append_features","kind":2,"detail":"Module#append_features","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef append_features(arg0); end\n```\n\n---\n\nWhen this module is included in another, Ruby calls\n[`append_features`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-append_features)\nin this module, passing it the receiving module in *mod*. Ruby's default\nimplementation is to add the constants, methods, and module variables of\nthis module to *mod* if this module has not already been added to *mod* or\none of its ancestors. See also\n[`Module#include`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-include)."},"sortText":"000010","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"append_features(${1:Module})${0}"}},{"label":"attr_reader","kind":2,"detail":"Module#attr_reader","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(NilClass)}\ndef attr_reader(*arg0); end\n```\n\n---\n\nCreates instance variables and corresponding methods that return the value\nof each instance variable. Equivalent to calling \"`attr`*:name*\" on each\nname in turn. [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html)\narguments are converted to symbols. Returns an array of defined method names\nas symbols."},"sortText":"000011","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"attr_reader${0}"}},{"label":"autoload","kind":2,"detail":"Module#autoload","documentation":{"kind":"markdown","value":"```ruby\nsig {params(_module: Symbol, filename: String).returns(NilClass)}\ndef autoload(_module, filename); end\n```\n\n---\n\nRegisters *filename* to be loaded (using Kernel::require) the first time\nthat *module* (which may be a\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) or a symbol) is\naccessed in the namespace of *mod*.\n\n```ruby\nmodule A\nend\nA.autoload(:B, \"b\")\nA::B.doit            # autoloads \"b\"\n```"},"sortText":"000012","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"autoload(${1:Symbol}, ${2:String})${0}"}},{"label":"autoload?","kind":2,"detail":"Module#autoload?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    name: T.any(Symbol, String),\n    inherit: T.nilable(T::Boolean)\n  )\n  .returns(T.nilable(String))\nend\ndef autoload?(name, inherit=…); end\n```\n\n---\n\nReturns *filename* to be loaded if *name* is registered as `autoload` in the\nnamespace of *mod* or one of its ancestors.\n\n```ruby\nmodule A\nend\nA.autoload(:B, \"b\")\nA.autoload?(:B)            #=> \"b\"\n```\n\nIf `inherit` is false, the lookup only checks the autoloads in the receiver:\n\n```ruby\nclass A\n  autoload :CONST, \"const.rb\"\nend\n\nclass B < A\nend\n\nB.autoload?(:CONST)          #=> \"const.rb\", found in A (ancestor)\nB.autoload?(:CONST, false)   #=> nil, not found in B itself\n```"},"sortText":"000013","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"autoload?(${1:T.any(Symbol, String)})${0}"}},{"label":"class_variable_defined?","kind":2,"detail":"Module#class_variable_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef class_variable_defined?(arg0); end\n```\n\n---\n\nReturns `true` if the given class variable is defined in *obj*.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nclass Fred\n  @@foo = 99\nend\nFred.class_variable_defined?(:@@foo)    #=> true\nFred.class_variable_defined?(:@@bar)    #=> false\n```"},"sortText":"000014","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"class_variable_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"const_added","kind":2,"detail":"Module#const_added","documentation":{"kind":"markdown","value":"```ruby\nsig {params(const_name: Symbol).returns(T.untyped)}\ndef const_added(const_name); end\n```\n\n---\n\nInvoked as a callback whenever a constant is assigned on the receiver\n\n```ruby\nmodule Chatty\n  def self.const_added(const_name)\n    super\n    puts \"Added #{const_name.inspect}\"\n  end\n  FOO = 1\nend\n```\n\n*produces:*\n\n```\nAdded :FOO\n```"},"sortText":"000015","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"const_added(${1:Symbol})${0}"}},{"label":"const_defined?","kind":2,"detail":"Module#const_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    inherit: T::Boolean\n  )\n  .returns(T::Boolean)\nend\ndef const_defined?(arg0, inherit=…); end\n```\n\n---\n\nSays whether *mod* or its ancestors have a constant with the given name:\n\n```ruby\nFloat.const_defined?(:EPSILON)      #=> true, found in Float itself\nFloat.const_defined?(\"String\")      #=> true, found in Object (ancestor)\nBasicObject.const_defined?(:Hash)   #=> false\n```\n\nIf *mod* is a `Module`, additionally `Object` and its ancestors are checked:\n\n```ruby\nMath.const_defined?(:String)   #=> true, found in Object\n```\n\nIn each of the checked classes or modules, if the constant is not present\nbut there is an autoload for it, `true` is returned directly without\nautoloading:\n\n```ruby\nmodule Admin\n  autoload :User, 'admin/user'\nend\nAdmin.const_defined?(:User)   #=> true\n```\n\nIf the constant is not found the callback `const_missing` is **not** called\nand the method returns `false`.\n\nIf `inherit` is false, the lookup only checks the constants in the receiver:\n\n```ruby\nIO.const_defined?(:SYNC)          #=> true, found in File::Constants (ancestor)\nIO.const_defined?(:SYNC, false)   #=> false, not found in IO itself\n```\n\nIn this case, the same logic for autoloading applies.\n\nIf the argument is not a valid constant name a `NameError` is raised with\nthe message \"wrong constant name *name*\":\n\n```ruby\nHash.const_defined? 'foobar'   #=> NameError: wrong constant name foobar\n```"},"sortText":"000016","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"const_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"extend_object","kind":2,"detail":"Module#extend_object","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BasicObject).returns(T.untyped)}\ndef extend_object(arg0); end\n```\n\n---\n\nExtends the specified object by adding this module's constants and methods\n(which are added as singleton methods). This is the callback method used by\n[`Object#extend`](https://docs.ruby-lang.org/en/2.7.0/Object.html#method-i-extend).\n\n```ruby\nmodule Picky\n  def Picky.extend_object(o)\n    if String === o\n      puts \"Can't add Picky to a String\"\n    else\n      puts \"Picky added to #{o.class}\"\n      super\n    end\n  end\nend\n(s = Array.new).extend Picky  # Call Object.extend\n(s = \"quick brown fox\").extend Picky\n```\n\n*produces:*\n\n```\nPicky added to Array\nCan't add Picky to a String\n```"},"sortText":"000017","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"extend_object(${1:BasicObject})${0}"}},{"label":"extended","kind":2,"detail":"Module#extended","documentation":{"kind":"markdown","value":"```ruby\nsig {params(othermod: Module).returns(T.untyped)}\ndef extended(othermod); end\n```\n\n---\n\nThe equivalent of `included`, but for extended modules.\n\n```ruby\nmodule A\n  def self.extended(mod)\n    puts \"#{self} extended in #{mod}\"\n  end\nend\nmodule Enumerable\n  extend A\nend\n # => prints \"A extended in Enumerable\"\n```"},"sortText":"000018","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"extended(${1:Module})${0}"}},{"label":"include","kind":2,"detail":"Module#include","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef include(*arg0); end\n```\n\n---\n\nInvokes\n[`Module.append_features`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-append_features)\non each parameter in reverse order."},"sortText":"000019","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"include${0}"}},{"label":"include?","kind":2,"detail":"Module#include?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T::Boolean)}\ndef include?(arg0); end\n```\n\n---\n\nReturns `true` if *module* is included or prepended in *mod* or one of\n*mod*'s ancestors.\n\n```ruby\nmodule A\nend\nclass B\n  include A\nend\nclass C < B\nend\nB.include?(A)   #=> true\nC.include?(A)   #=> true\nA.include?(A)   #=> false\n```"},"sortText":"000020","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"include?(${1:Module})${0}"}},{"label":"included","kind":2,"detail":"Module#included","documentation":{"kind":"markdown","value":"```ruby\nsig {params(othermod: Module).returns(T.untyped)}\ndef included(othermod); end\n```\n\n---\n\nCallback invoked whenever the receiver is included in another module or\nclass. This should be used in preference to `Module.append_features` if your\ncode wants to perform some action when a module is included in another.\n\n```ruby\nmodule A\n  def A.included(mod)\n    puts \"#{self} included in #{mod}\"\n  end\nend\nmodule Enumerable\n  include A\nend\n # => prints \"A included in Enumerable\"\n```"},"sortText":"000021","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"included(${1:Module})${0}"}},{"label":"included_modules","kind":2,"detail":"Module#included_modules","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Module])}\ndef included_modules; end\n```\n\n---\n\nReturns the list of modules included or prepended in *mod* or one of *mod*'s\nancestors.\n\n```ruby\nmodule Sub\nend\n\nmodule Mixin\n  prepend Sub\nend\n\nmodule Outer\n  include Mixin\nend\n\nMixin.included_modules   #=> [Sub]\nOuter.included_modules   #=> [Sub, Mixin]\n```"},"sortText":"000022","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"included_modules${0}"}},{"label":"instance_method","kind":2,"detail":"Module#instance_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(UnboundMethod)}\ndef instance_method(arg0); end\n```\n\n---\n\nReturns an `UnboundMethod` representing the given instance method in *mod*.\n\n```ruby\nclass Interpreter\n  def do_a() print \"there, \"; end\n  def do_d() print \"Hello \";  end\n  def do_e() print \"!\\n\";     end\n  def do_v() print \"Dave\";    end\n  Dispatcher = {\n    \"a\" => instance_method(:do_a),\n    \"d\" => instance_method(:do_d),\n    \"e\" => instance_method(:do_e),\n    \"v\" => instance_method(:do_v)\n  }\n  def interpret(string)\n    string.each_char {|b| Dispatcher[b].bind(self).call }\n  end\nend\n\ninterpreter = Interpreter.new\ninterpreter.interpret('dave')\n```\n\n*produces:*\n\n```ruby\nHello there, Dave!\n```"},"sortText":"000023","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"instance_method(${1:T.any(Symbol, String)})${0}"}},{"label":"method_added","kind":2,"detail":"Module#method_added","documentation":{"kind":"markdown","value":"```ruby\nsig {params(meth: Symbol).returns(T.untyped)}\ndef method_added(meth); end\n```\n\n---\n\nInvoked as a callback whenever an instance method is added to the receiver.\n\n```ruby\nmodule Chatty\n  def self.method_added(method_name)\n    puts \"Adding #{method_name.inspect}\"\n  end\n  def self.some_class_method() end\n  def some_instance_method() end\nend\n```\n\n*produces:*\n\n```ruby\nAdding :some_instance_method\n```"},"sortText":"000024","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"method_added(${1:Symbol})${0}"}},{"label":"method_defined?","kind":2,"detail":"Module#method_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method_name: T.any(Symbol, String),\n    inherit: T::Boolean\n  )\n  .returns(T::Boolean)\nend\ndef method_defined?(method_name, inherit=…); end\n```\n\n---\n\nReturns `true` if the named method is defined by *mod*. If *inherit* is set,\nthe lookup will also search *mod*'s ancestors. Public and protected methods\nare matched. [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html)\narguments are converted to symbols.\n\n```ruby\nmodule A\n  def method1()  end\n  def protected_method1()  end\n  protected :protected_method1\nend\nclass B\n  def method2()  end\n  def private_method2()  end\n  private :private_method2\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1              #=> true\nC.method_defined? \"method1\"             #=> true\nC.method_defined? \"method2\"             #=> true\nC.method_defined? \"method2\", true       #=> true\nC.method_defined? \"method2\", false      #=> false\nC.method_defined? \"method3\"             #=> true\nC.method_defined? \"protected_method1\"   #=> true\nC.method_defined? \"method4\"             #=> false\nC.method_defined? \"private_method2\"     #=> false\n```"},"sortText":"000025","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"method_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"method_removed","kind":2,"detail":"Module#method_removed","documentation":{"kind":"markdown","value":"```ruby\nsig {params(method_name: Symbol).returns(T.untyped)}\ndef method_removed(method_name); end\n```\n\n---\n\nInvoked as a callback whenever an instance method is removed from the\nreceiver.\n\n```ruby\nmodule Chatty\n  def self.method_removed(method_name)\n    puts \"Removing #{method_name.inspect}\"\n  end\n  def self.some_class_method() end\n  def some_instance_method() end\n  class << self\n    remove_method :some_class_method\n  end\n  remove_method :some_instance_method\nend\n```\n\n*produces:*\n\n```ruby\nRemoving :some_instance_method\n```"},"sortText":"000026","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"method_removed(${1:Symbol})${0}"}},{"label":"module_eval","kind":2,"detail":"Module#module_eval","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, filename: String, lineno: Integer).returns(T.untyped)}\ndef module_eval(arg0, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates the string or block in the context of *mod*, except that when a\nblock is given, constant/class variable lookup is not affected. This can be\nused to add methods to a class. `module_eval` returns the result of\nevaluating its argument. The optional *filename* and *lineno* parameters set\nthe text for error messages.\n\n```ruby\nclass Thing\nend\na = %q{def hello() \"Hello there!\" end}\nThing.module_eval(a)\nputs Thing.new.hello()\nThing.module_eval(\"invalid code\", \"dummy\", 123)\n```\n\n*produces:*\n\n```\nHello there!\ndummy:123:in `module_eval': undefined local variable\n    or method `code' for Thing:Class\n```\n\n\nAlso aliased as:\n[`class_eval`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-class_eval)"},"sortText":"000027","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"module_eval(${1:String})${0}"}},{"label":"module_eval","kind":2,"detail":"Module#module_eval (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef module_eval (overload.1)(&blk); end\n```\n\n---\n\nEvaluates the string or block in the context of *mod*, except that when a\nblock is given, constant/class variable lookup is not affected. This can be\nused to add methods to a class. `module_eval` returns the result of\nevaluating its argument. The optional *filename* and *lineno* parameters set\nthe text for error messages.\n\n```ruby\nclass Thing\nend\na = %q{def hello() \"Hello there!\" end}\nThing.module_eval(a)\nputs Thing.new.hello()\nThing.module_eval(\"invalid code\", \"dummy\", 123)\n```\n\n*produces:*\n\n```\nHello there!\ndummy:123:in `module_eval': undefined local variable\n    or method `code' for Thing:Class\n```\n\n\nAlso aliased as:\n[`class_eval`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-class_eval)"},"sortText":"000028","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"module_eval do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"module_exec","kind":2,"detail":"Module#module_exec","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: BasicObject, blk: T.untyped).returns(T.untyped)}\ndef module_exec(*args, &blk); end\n```\n\n---\n\nEvaluates the given block in the context of the class/module. The method\ndefined in the block will belong to the receiver. Any arguments passed to\nthe method will be passed to the block. This can be used if the block needs\nto access instance variables.\n\n```ruby\nclass Thing\nend\nThing.class_exec{\n  def hello() \"Hello there!\" end\n}\nputs Thing.new.hello()\n```\n\n*produces:*\n\n```ruby\nHello there!\n```\n\n\nAlso aliased as:\n[`class_exec`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-class_exec)"},"sortText":"000029","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"module_exec${0}"}},{"label":"module_function","kind":2,"detail":"Module#module_function","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef module_function(*arg0); end\n```\n\n---\n\nCreates module functions for the named methods. These functions may be\ncalled with the module as a receiver, and also become available as instance\nmethods to classes that mix in the module.\n[`Module`](https://docs.ruby-lang.org/en/2.7.0/Module.html) functions are\ncopies of the original, and so may be changed independently. The\ninstance-method versions are made private. If used with no arguments,\nsubsequently defined methods become module functions.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. If a single argument is passed, it is returned. If no\nargument is passed, nil is returned. If multiple arguments are passed, the\narguments are returned as an array.\n\n```ruby\nmodule Mod\n  def one\n    \"This is one\"\n  end\n  module_function :one\nend\nclass Cls\n  include Mod\n  def call_one\n    one\n  end\nend\nMod.one     #=> \"This is one\"\nc = Cls.new\nc.call_one  #=> \"This is one\"\nmodule Mod\n  def one\n    \"This is the new one\"\n  end\nend\nMod.one     #=> \"This is one\"\nc.call_one  #=> \"This is the new one\"\n```"},"sortText":"000030","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"module_function${0}"}},{"label":"prepend","kind":2,"detail":"Module#prepend","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef prepend(*arg0); end\n```\n\n---\n\nInvokes\n[`Module.prepend_features`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-prepend_features)\non each parameter in reverse order."},"sortText":"000031","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"prepend${0}"}},{"label":"prepend_features","kind":2,"detail":"Module#prepend_features","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef prepend_features(arg0); end\n```\n\n---\n\nWhen this module is prepended in another, Ruby calls\n[`prepend_features`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-prepend_features)\nin this module, passing it the receiving module in *mod*. Ruby's default\nimplementation is to overlay the constants, methods, and module variables of\nthis module to *mod* if this module has not already been added to *mod* or\none of its ancestors. See also\n[`Module#prepend`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-prepend)."},"sortText":"000032","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"prepend_features(${1:Module})${0}"}},{"label":"prepended","kind":2,"detail":"Module#prepended","documentation":{"kind":"markdown","value":"```ruby\nsig {params(othermod: Module).returns(T.untyped)}\ndef prepended(othermod); end\n```\n\n---\n\nThe equivalent of `included`, but for prepended modules.\n\n```ruby\nmodule A\n  def self.prepended(mod)\n    puts \"#{self} prepended to #{mod}\"\n  end\nend\nmodule Enumerable\n  prepend A\nend\n # => prints \"A prepended to Enumerable\"\n```"},"sortText":"000033","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"prepended(${1:Module})${0}"}},{"label":"private_class_method","kind":2,"detail":"Module#private_class_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Array[T.any(Symbol, String)], Symbol, String)\n  )\n  .returns(T.class_of(A))\nend\ndef private_class_method(*arg0); end\n```\n\n---\n\nMakes existing class methods private. Often used to hide the default\nconstructor `new`.\n\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. An\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of Symbols and/or\nStrings is also accepted.\n\n```ruby\nclass SimpleSingleton  # Not thread safe\n  private_class_method :new\n  def SimpleSingleton.create(*args, &block)\n    @me = new(*args, &block) if ! @me\n    @me\n  end\nend\n```"},"sortText":"000034","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"private_class_method${0}"}},{"label":"private_instance_methods","kind":2,"detail":"Module#private_instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(include_super: T::Boolean).returns(T::Array[Symbol])}\ndef private_instance_methods(include_super=…); end\n```\n\n---\n\nReturns a list of the private instance methods defined in *mod*. If the\noptional parameter is `false`, the methods of any ancestors are not\nincluded.\n\n```ruby\nmodule Mod\n  def method1()  end\n  private :method1\n  def method2()  end\nend\nMod.instance_methods           #=> [:method2]\nMod.private_instance_methods   #=> [:method1]\n```"},"sortText":"000035","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"private_instance_methods${0}"}},{"label":"private_method_defined?","kind":2,"detail":"Module#private_method_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef private_method_defined?(arg0); end\n```\n\n---\n\nReturns `true` if the named private method is defined by *mod*. If *inherit*\nis set, the lookup will also search *mod*'s ancestors.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nmodule A\n  def method1()  end\nend\nclass B\n  private\n  def method2()  end\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1                   #=> true\nC.private_method_defined? \"method1\"          #=> false\nC.private_method_defined? \"method2\"          #=> true\nC.private_method_defined? \"method2\", true    #=> true\nC.private_method_defined? \"method2\", false   #=> false\nC.method_defined? \"method2\"                  #=> false\n```"},"sortText":"000036","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"private_method_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"protected","kind":2,"detail":"Module#protected","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef protected(*arg0); end\n```\n\n---\n\nWith no arguments, sets the default visibility for subsequently defined\nmethods to protected. With arguments, sets the named methods to have\nprotected visibility.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. An\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of Symbols and/or\nStrings is also accepted. If a single argument is passed, it is returned. If\nno argument is passed, nil is returned. If multiple arguments are passed,\nthe arguments are returned as an array.\n\nIf a method has protected visibility, it is callable only where `self` of\nthe context is the same as the method. (method definition or\ninstance\\_eval). This behavior is different from Java's protected method.\nUsually `private` should be used.\n\nNote that a protected method is slow because it can't use inline cache.\n\nTo show a private method on\n[`RDoc`](https://docs.ruby-lang.org/en/2.7.0/RDoc.html), use `:doc:` instead\nof this."},"sortText":"000037","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"protected${0}"}},{"label":"protected_instance_methods","kind":2,"detail":"Module#protected_instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(include_super: T::Boolean).returns(T::Array[Symbol])}\ndef protected_instance_methods(include_super=…); end\n```\n\n---\n\nReturns a list of the protected instance methods defined in *mod*. If the\noptional parameter is `false`, the methods of any ancestors are not\nincluded."},"sortText":"000038","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"protected_instance_methods${0}"}},{"label":"protected_method_defined?","kind":2,"detail":"Module#protected_method_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef protected_method_defined?(arg0); end\n```\n\n---\n\nReturns `true` if the named protected method is defined *mod*. If *inherit*\nis set, the lookup will also search *mod*'s ancestors.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nmodule A\n  def method1()  end\nend\nclass B\n  protected\n  def method2()  end\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1                    #=> true\nC.protected_method_defined? \"method1\"         #=> false\nC.protected_method_defined? \"method2\"         #=> true\nC.protected_method_defined? \"method2\", true   #=> true\nC.protected_method_defined? \"method2\", false  #=> false\nC.method_defined? \"method2\"                   #=> true\n```"},"sortText":"000039","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"protected_method_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"public_class_method","kind":2,"detail":"Module#public_class_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Array[T.any(Symbol, String)], Symbol, String)\n  )\n  .returns(T.class_of(A))\nend\ndef public_class_method(*arg0); end\n```\n\n---\n\nMakes a list of existing class methods public.\n\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. An\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of Symbols and/or\nStrings is also accepted."},"sortText":"000040","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"public_class_method${0}"}},{"label":"public_instance_method","kind":2,"detail":"Module#public_instance_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(UnboundMethod)}\ndef public_instance_method(arg0); end\n```\n\n---\n\nSimilar to *instance\\_method*, searches public method only."},"sortText":"000041","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"public_instance_method(${1:Symbol})${0}"}},{"label":"public_instance_methods","kind":2,"detail":"Module#public_instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(include_super: T::Boolean).returns(T::Array[Symbol])}\ndef public_instance_methods(include_super=…); end\n```\n\n---\n\nReturns a list of the public instance methods defined in *mod*. If the\noptional parameter is `false`, the methods of any ancestors are not\nincluded."},"sortText":"000042","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"public_instance_methods${0}"}},{"label":"public_method_defined?","kind":2,"detail":"Module#public_method_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef public_method_defined?(arg0); end\n```\n\n---\n\nReturns `true` if the named public method is defined by *mod*. If *inherit*\nis set, the lookup will also search *mod*'s ancestors.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nmodule A\n  def method1()  end\nend\nclass B\n  protected\n  def method2()  end\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1                 #=> true\nC.public_method_defined? \"method1\"         #=> true\nC.public_method_defined? \"method1\", true   #=> true\nC.public_method_defined? \"method1\", false  #=> true\nC.public_method_defined? \"method2\"         #=> false\nC.method_defined? \"method2\"                #=> true\n```"},"sortText":"000043","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"public_method_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"remove_method","kind":2,"detail":"Module#remove_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef remove_method(arg0); end\n```\n\n---\n\nRemoves the method identified by *symbol* from the current class. For an\nexample, see\n[`Module#undef_method`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-undef_method).\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols."},"sortText":"000044","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"remove_method(${1:T.any(Symbol, String)})${0}"}},{"label":"ruby2_keywords","kind":2,"detail":"Module#ruby2_keywords","documentation":{"kind":"markdown","value":"```ruby\nsig {params(method_name: Symbol).returns(T.class_of(A))}\ndef ruby2_keywords(*method_name); end\n```\n\n---\n\nFor the given method names, marks the method as passing keywords through a\nnormal argument splat. This should only be called on methods that accept an\nargument splat (`*args`) but not explicit keywords or a keyword splat. It\nmarks the method such that if the method is called with keyword arguments,\nthe final hash argument is marked with a special flag such that if it is the\nfinal element of a normal argument splat to another method call, and that\nmethod call does not include explicit keywords or a keyword splat, the final\nelement is interpreted as keywords. In other words, keywords will be passed\nthrough the method to other methods.\n\nThis should only be used for methods that delegate keywords to another\nmethod, and only for backwards compatibility with Ruby versions before 3.0.\nSee\nhttps://www.ruby-lang.org/en/news/2019/12/12/separation-of-positional-and-keyword-arguments-in-ruby-3-0/\nfor details on why `ruby2_keywords` exists and when and how to use it.\n\nThis method will probably be removed at some point, as it exists only for\nbackwards compatibility. As it does not exist in Ruby versions before 2.7,\ncheck that the module responds to this method before calling it:\n\n```ruby\nmodule Mod\n  def foo(meth, *args, &block)\n    send(:\"do_#{meth}\", *args, &block)\n  end\n  ruby2_keywords(:foo) if respond_to?(:ruby2_keywords, true)\nend\n```\n\nHowever, be aware that if the `ruby2_keywords` method is removed, the\nbehavior of the `foo` method using the above approach will change so that\nthe method does not pass through keywords."},"sortText":"000045","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"ruby2_keywords${0}"}},{"label":"undef_method","kind":2,"detail":"Module#undef_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef undef_method(arg0); end\n```\n\n---\n\nPrevents the current class from responding to calls to the named method.\nContrast this with `remove_method`, which deletes the method from the\nparticular class; Ruby will still search superclasses and mixed-in modules\nfor a possible receiver.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nclass Parent\n  def hello\n    puts \"In parent\"\n  end\nend\nclass Child < Parent\n  def hello\n    puts \"In child\"\n  end\nend\n\nc = Child.new\nc.hello\n\nclass Child\n  remove_method :hello  # remove from child, still in parent\nend\nc.hello\n\nclass Child\n  undef_method :hello   # prevent any calls to 'hello'\nend\nc.hello\n```\n\n*produces:*\n\n```\nIn child\nIn parent\nprog.rb:23: undefined method `hello' for #<Child:0x401b3bb4> (NoMethodError)\n```"},"sortText":"000046","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"undef_method(${1:T.any(Symbol, String)})${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    symbol: T.any(Symbol, String),\n    method: T.any(Proc, Method, UnboundMethod)\n  )\n  .returns(Symbol)\nend\ndef define_singleton_method(symbol, method=…); end\n```"},"sortText":"000047","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"define_singleton_method(${1:T.any(Symbol, String)})${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(symbol: T.any(Symbol, String), blk: T.untyped).returns(Symbol)}\ndef define_singleton_method (overload.1)(symbol, &blk); end\n```"},"sortText":"000048","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"define_singleton_method(${1:T.any(Symbol, String)})${0}"}},{"label":"display","kind":2,"detail":"Kernel#display","documentation":{"kind":"markdown","value":"```ruby\nsig {params(port: IO).returns(NilClass)}\ndef display(port); end\n```"},"sortText":"000049","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"display(${1:IO})${0}"}},{"label":"dup","kind":2,"detail":"Kernel#dup","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.class_of(A))}\ndef dup; end\n```"},"sortText":"000050","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"dup${0}"}},{"label":"__dir__","kind":2,"detail":"Kernel#__dir__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(String))}\ndef __dir__; end\n```\n\n---\n\nReturns the canonicalized absolute path of the directory of the file from\nwhich this method is called. It means symlinks in the path is resolved. If\n`__FILE__` is `nil`, it returns `nil`. The return value equals to\n`File.dirname(File.realpath(__FILE__))`."},"sortText":"000051","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"__dir__${0}"}},{"label":"__method__","kind":2,"detail":"Kernel#__method__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(Symbol))}\ndef __method__; end\n```\n\n---\n\nReturns the name at the definition of the current method as a\n[`Symbol`](https://docs.ruby-lang.org/en/2.7.0/Symbol.html). If called\noutside of a method, it returns `nil`."},"sortText":"000052","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"__method__${0}"}},{"label":"binding","kind":2,"detail":"Kernel#binding","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Binding)}\ndef binding; end\n```\n\n---\n\nReturns a `Binding` object, describing the variable and method bindings at\nthe point of call. This object can be used when calling `eval` to execute\nthe evaluated command in this environment. See also the description of class\n`Binding`.\n\n```ruby\ndef get_binding(param)\n  binding\nend\nb = get_binding(\"hello\")\neval(\"param\", b)   #=> \"hello\"\n```"},"sortText":"000053","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"binding${0}"}},{"label":"extend","kind":2,"detail":"Kernel#extend","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef extend(*arg0); end\n```"},"sortText":"000054","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"extend${0}"}},{"label":"instance_variable_defined?","kind":2,"detail":"Kernel#instance_variable_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef instance_variable_defined?(arg0); end\n```"},"sortText":"000055","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"instance_variable_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"kind_of?","kind":2,"detail":"Kernel#kind_of?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T::Boolean)}\ndef kind_of?(arg0); end\n```"},"sortText":"000056","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"kind_of?(${1:Module})${0}"}},{"label":"lambda","kind":2,"detail":"Kernel#lambda","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.untyped).returns(Proc)}\ndef lambda(&blk); end\n```\n\n---\n\nEquivalent to\n[`Proc.new`](https://docs.ruby-lang.org/en/2.7.0/Proc.html#method-c-new),\nexcept the resulting [`Proc`](https://docs.ruby-lang.org/en/2.7.0/Proc.html)\nobjects check the number of parameters passed when called."},"sortText":"000057","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"lambda${0}"}},{"label":"load","kind":2,"detail":"Kernel#load","documentation":{"kind":"markdown","value":"```ruby\nsig {params(filename: String, arg0: T::Boolean).returns(T::Boolean)}\ndef load(filename, arg0=…); end\n```\n\n---\n\nLoads and executes the Ruby program in the file *filename*.\n\nIf the filename is an absolute path (e.g. starts with '/'), the file will be\nloaded directly using the absolute path.\n\nIf the filename is an explicit relative path (e.g. starts with './' or\n'../'), the file will be loaded using the relative path from the current\ndirectory.\n\nOtherwise, the file will be searched for in the library directories listed\nin `$LOAD_PATH` (`$:`). If the file is found in a directory, it will attempt\nto load the file relative to that directory. If the file is not found in any\nof the directories in `$LOAD_PATH`, the file will be loaded using the\nrelative path from the current directory.\n\nIf the file doesn't exist when there is an attempt to load it, a\n[`LoadError`](https://docs.ruby-lang.org/en/2.7.0/LoadError.html) will be\nraised.\n\nIf the optional *wrap* parameter is `true`, the loaded script will be\nexecuted under an anonymous module, protecting the calling program's global\nnamespace. If the optional *wrap* parameter is a module, the loaded script\nwill be executed under the given module. In no circumstance will any local\nvariables in the loaded file be propagated to the loading environment."},"sortText":"000058","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"load(${1:String})${0}"}},{"label":"method","kind":2,"detail":"Kernel#method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef method(arg0); end\n```"},"sortText":"000059","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"method(${1:Symbol})${0}"}},{"label":"methods","kind":2,"detail":"Kernel#methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(regular: T::Boolean).returns(T::Array[Symbol])}\ndef methods(regular=…); end\n```"},"sortText":"000060","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"methods${0}"}},{"label":"object_id","kind":2,"detail":"Kernel#object_id","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef object_id; end\n```\n\n---\n\nReturns an integer identifier for `obj`.\n\nThe same number will be returned on all calls to `object_id` for a given\nobject, and no two active objects will share an id.\n\nNote: that some objects of builtin classes are reused for optimization. This\nis the case for immediate values and frozen string literals.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_id\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`object_id`.\n\nImmediate values are not passed by reference but are passed by value: `nil`,\n`true`, `false`, Fixnums, Symbols, and some Floats.\n\n```ruby\nObject.new.object_id  == Object.new.object_id  # => false\n(21 * 2).object_id    == (21 * 2).object_id    # => true\n\"hello\".object_id     == \"hello\".object_id     # => false\n\"hi\".freeze.object_id == \"hi\".freeze.object_id # => true\n```"},"sortText":"000061","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"object_id${0}"}},{"label":"private_methods","kind":2,"detail":"Kernel#private_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef private_methods(all=…); end\n```"},"sortText":"000062","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"private_methods${0}"}},{"label":"protected_methods","kind":2,"detail":"Kernel#protected_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef protected_methods(all=…); end\n```"},"sortText":"000063","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"protected_methods${0}"}},{"label":"public_method","kind":2,"detail":"Kernel#public_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef public_method(arg0); end\n```"},"sortText":"000064","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"public_method(${1:Symbol})${0}"}},{"label":"public_methods","kind":2,"detail":"Kernel#public_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef public_methods(all=…); end\n```"},"sortText":"000065","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"public_methods${0}"}},{"label":"public_send","kind":2,"detail":"Kernel#public_send","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef public_send(arg0, *args, &blk); end\n```"},"sortText":"000066","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"public_send(${1:T.any(Symbol, String)})${0}"}},{"label":"rand","kind":2,"detail":"Kernel#rand","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Float)}\ndef rand; end\n```\n\n---\n\nIf called without an argument, or if `max.to_i.abs == 0`, rand returns a\npseudo-random floating point number between 0.0 and 1.0, including 0.0 and\nexcluding 1.0.\n\n```ruby\nrand        #=> 0.2725926052826416\n```\n\nWhen `max.abs` is greater than or equal to 1, `rand` returns a pseudo-random\ninteger greater than or equal to 0 and less than `max.to_i.abs`.\n\n```ruby\nrand(100)   #=> 12\n```\n\nWhen `max` is a [`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html),\n`rand` returns a random number where range.member?(number) == true.\n\nNegative or floating point values for `max` are allowed, but may give\nsurprising results.\n\n```ruby\nrand(-100) # => 87\nrand(-0.5) # => 0.8130921818028143\nrand(1.9)  # equivalent to rand(1), which is always 0\n```\n\n[`Kernel.srand`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-srand)\nmay be used to ensure that sequences of random numbers are reproducible\nbetween different runs of a program.\n\nSee also\n[`Random.rand`](https://docs.ruby-lang.org/en/2.7.0/Random.html#method-c-rand)."},"sortText":"000067","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"rand${0}"}},{"label":"rand","kind":2,"detail":"Kernel#rand (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(T::Range[Integer], Integer)).returns(Integer)}\ndef rand (overload.1)(arg0=…); end\n```\n\n---\n\nIf called without an argument, or if `max.to_i.abs == 0`, rand returns a\npseudo-random floating point number between 0.0 and 1.0, including 0.0 and\nexcluding 1.0.\n\n```ruby\nrand        #=> 0.2725926052826416\n```\n\nWhen `max.abs` is greater than or equal to 1, `rand` returns a pseudo-random\ninteger greater than or equal to 0 and less than `max.to_i.abs`.\n\n```ruby\nrand(100)   #=> 12\n```\n\nWhen `max` is a [`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html),\n`rand` returns a random number where range.member?(number) == true.\n\nNegative or floating point values for `max` are allowed, but may give\nsurprising results.\n\n```ruby\nrand(-100) # => 87\nrand(-0.5) # => 0.8130921818028143\nrand(1.9)  # equivalent to rand(1), which is always 0\n```\n\n[`Kernel.srand`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-srand)\nmay be used to ensure that sequences of random numbers are reproducible\nbetween different runs of a program.\n\nSee also\n[`Random.rand`](https://docs.ruby-lang.org/en/2.7.0/Random.html#method-c-rand)."},"sortText":"000068","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"rand${0}"}},{"label":"rand","kind":2,"detail":"Kernel#rand (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.nilable(T.any(Float, T::Range[Float]))).returns(Float)}\ndef rand (overload.2)(arg0=…); end\n```\n\n---\n\nIf called without an argument, or if `max.to_i.abs == 0`, rand returns a\npseudo-random floating point number between 0.0 and 1.0, including 0.0 and\nexcluding 1.0.\n\n```ruby\nrand        #=> 0.2725926052826416\n```\n\nWhen `max.abs` is greater than or equal to 1, `rand` returns a pseudo-random\ninteger greater than or equal to 0 and less than `max.to_i.abs`.\n\n```ruby\nrand(100)   #=> 12\n```\n\nWhen `max` is a [`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html),\n`rand` returns a random number where range.member?(number) == true.\n\nNegative or floating point values for `max` are allowed, but may give\nsurprising results.\n\n```ruby\nrand(-100) # => 87\nrand(-0.5) # => 0.8130921818028143\nrand(1.9)  # equivalent to rand(1), which is always 0\n```\n\n[`Kernel.srand`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-srand)\nmay be used to ensure that sequences of random numbers are reproducible\nbetween different runs of a program.\n\nSee also\n[`Random.rand`](https://docs.ruby-lang.org/en/2.7.0/Random.html#method-c-rand)."},"sortText":"000069","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"rand${0}"}},{"label":"rand","kind":2,"detail":"Kernel#rand (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(T::Range[Numeric], Numeric)).returns(Numeric)}\ndef rand (overload.3)(arg0=…); end\n```\n\n---\n\nIf called without an argument, or if `max.to_i.abs == 0`, rand returns a\npseudo-random floating point number between 0.0 and 1.0, including 0.0 and\nexcluding 1.0.\n\n```ruby\nrand        #=> 0.2725926052826416\n```\n\nWhen `max.abs` is greater than or equal to 1, `rand` returns a pseudo-random\ninteger greater than or equal to 0 and less than `max.to_i.abs`.\n\n```ruby\nrand(100)   #=> 12\n```\n\nWhen `max` is a [`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html),\n`rand` returns a random number where range.member?(number) == true.\n\nNegative or floating point values for `max` are allowed, but may give\nsurprising results.\n\n```ruby\nrand(-100) # => 87\nrand(-0.5) # => 0.8130921818028143\nrand(1.9)  # equivalent to rand(1), which is always 0\n```\n\n[`Kernel.srand`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-srand)\nmay be used to ensure that sequences of random numbers are reproducible\nbetween different runs of a program.\n\nSee also\n[`Random.rand`](https://docs.ruby-lang.org/en/2.7.0/Random.html#method-c-rand)."},"sortText":"000070","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"rand${0}"}},{"label":"readline","kind":2,"detail":"Kernel#readline","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(String)}\ndef readline(arg0=…, arg1=…); end\n```\n\n---\n\nEquivalent to Kernel::gets, except `readline` raises `EOFError` at end of\nfile."},"sortText":"000071","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"readline${0}"}},{"label":"readlines","kind":2,"detail":"Kernel#readlines","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(T::Array[String])}\ndef readlines(arg0=…, arg1=…); end\n```\n\n---\n\nReturns an array containing the lines returned by calling `Kernel.gets(sep)`\nuntil the end of file."},"sortText":"000072","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"readlines${0}"}},{"label":"respond_to?","kind":2,"detail":"Kernel#respond_to?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    include_all: T.untyped\n  )\n  .returns(T::Boolean)\nend\ndef respond_to?(arg0, include_all=…); end\n```"},"sortText":"000073","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"respond_to?(${1:T.any(String, Symbol)})${0}"}},{"label":"send","kind":2,"detail":"Kernel#send","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(String, Symbol), arg1: T.anything).returns(T.untyped)}\ndef send(arg0, *arg1); end\n```"},"sortText":"000074","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"send(${1:T.any(String, Symbol)})${0}"}},{"label":"send","kind":2,"detail":"Kernel#send (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    arg1: T.anything,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef send (overload.1)(arg0, *arg1, &blk); end\n```"},"sortText":"000075","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"send(${1:T.any(String, Symbol)})${0}"}},{"label":"singleton_method","kind":2,"detail":"Kernel#singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef singleton_method(arg0); end\n```"},"sortText":"000076","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"singleton_method(${1:Symbol})${0}"}},{"label":"singleton_methods","kind":2,"detail":"Kernel#singleton_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef singleton_methods(all=…); end\n```"},"sortText":"000077","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"singleton_methods${0}"}},{"label":"srand","kind":2,"detail":"Kernel#srand","documentation":{"kind":"markdown","value":"```ruby\nsig {params(number: Numeric).returns(Numeric)}\ndef srand(number=…); end\n```\n\n---\n\nSeeds the system pseudo-random number generator, with `number`. The previous\nseed value is returned.\n\nIf `number` is omitted, seeds the generator using a source of entropy\nprovided by the operating system, if available (/dev/urandom on Unix systems\nor the RSA cryptographic provider on Windows), which is then combined with\nthe time, the process id, and a sequence number.\n\nsrand may be used to ensure repeatable sequences of pseudo-random numbers\nbetween different runs of the program. By setting the seed to a known value,\nprograms can be made deterministic during testing.\n\n```ruby\nsrand 1234               # => 268519324636777531569100071560086917274\n[ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]\n[ rand(10), rand(1000) ] # => [4, 664]\nsrand 1234               # => 1234\n[ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]\n```"},"sortText":"000078","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"srand${0}"}},{"label":"tainted?","kind":2,"detail":"Kernel#tainted?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef tainted?; end\n```"},"sortText":"000079","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"tainted?${0}"}},{"label":"undef","kind":2,"detail":"Kernel#undef","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg: BasicObject).void}\ndef undef(*arg); end\n```"},"sortText":"000080","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"undef${0}"}},{"label":"untrusted?","kind":2,"detail":"Kernel#untrusted?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef untrusted?; end\n```"},"sortText":"000081","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"untrusted?${0}"}},{"label":"yield_self","kind":2,"detail":"Kernel#yield_self","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:X))\n  )\n  .returns(T.type_parameter(:X))\nend\ndef yield_self(&blk); end\n```\n\n---\n\nYields self to the block and returns the result of the block.\n\n```ruby\n\"my string\".yield_self {|s| s.upcase }   #=> \"MY STRING\"\n```\n\nGood usage for `then` is value piping in method chains:\n\n```ruby\nrequire 'open-uri'\nrequire 'json'\n\nconstruct_url(arguments).\n  then {|url| URI(url).read }.\n  then {|response| JSON.parse(response) }\n```"},"sortText":"000082","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"yield_self do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"__id__","kind":2,"detail":"BasicObject#__id__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef __id__; end\n```\n\n---\n\nReturns an integer identifier for `obj`.\n\nThe same number will be returned on all calls to `object_id` for a given\nobject, and no two active objects will share an id.\n\nNote: that some objects of builtin classes are reused for optimization. This\nis the case for immediate values and frozen string literals.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_id\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`object_id`.\n\nImmediate values are not passed by reference but are passed by value: `nil`,\n`true`, `false`, Fixnums, Symbols, and some Floats.\n\n```ruby\nObject.new.object_id  == Object.new.object_id  # => false\n(21 * 2).object_id    == (21 * 2).object_id    # => true\n\"hello\".object_id     == \"hello\".object_id     # => false\n\"hi\".freeze.object_id == \"hi\".freeze.object_id # => true\n```"},"sortText":"000083","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"__id__${0}"}},{"label":"__send__","kind":2,"detail":"BasicObject#__send__","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol, arg1: BasicObject).returns(T.untyped)}\ndef __send__(arg0, *arg1); end\n```\n\n---\n\nInvokes the method identified by *symbol*, passing it any arguments\nspecified. You can use `__send__` if the name `send` clashes with an\nexisting method in *obj*. When the method is identified by a string, the\nstring is converted to a symbol.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_send\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`send`.\n\n```ruby\nclass Klass\n  def hello(*args)\n    \"Hello \" + args.join(' ')\n  end\nend\nk = Klass.new\nk.send :hello, \"gentle\", \"readers\"   #=> \"Hello gentle readers\"\n```"},"sortText":"000084","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"__send__(${1:Symbol})${0}"}}]}}

[2023-08-10 22:56:34.249] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":6},"contentChanges":[{"text":"# typed: strict\n\nclass A\n    def \nend\n"}]}}

[2023-08-10 22:56:34.343] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:34.343] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:34.343] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:34.343] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:34.369] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 4
[2023-08-10 22:56:34.370] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":4,"character":3},"end":{"line":5,"character":0}},"severity":1,"code":2001,"codeDescription":{"href":"https://srb.help/2001"},"message":"unexpected token \"end of file\"","relatedInformation":[]},{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":7}},"severity":1,"code":2003,"codeDescription":{"href":"https://srb.help/2003"},"message":"Hint: this \"def\" token might not be followed by a method name","relatedInformation":[]},{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":7}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `<method-def-name-missing>` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":4},"end":{"line":3,"character":4}}},"message":"Insert `sig { returns(NilClass) }`"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}},"message":"Insert `extend T::Sig`"}]},{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":7}},"severity":1,"code":2003,"codeDescription":{"href":"https://srb.help/2003"},"message":"Hint: this \"def\" token might not be properly closed","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":0},"end":{"line":4,"character":3}}},"message":"Matching `end` found here but is not indented as far"}]}]}}

[2023-08-10 22:56:34.697] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":7},"contentChanges":[{"text":"# typed: strict\n\nclass A\n    \nend\n"}]}}

[2023-08-10 22:56:34.791] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:34.791] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:34.791] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:34.791] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:34.813] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 5
[2023-08-10 22:56:34.813] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[]}}

[2023-08-10 22:56:36.817] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":9},"contentChanges":[{"text":"# typed: strict\n\nclass A\nend\n"}]}}

[2023-08-10 22:56:36.869] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"context":{"diagnostics":[]}}}

[2023-08-10 22:56:36.913] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:36.913] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:36.913] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:36.913] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:36.917] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:36.917] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:36.922] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":4,"requestMethod":"textDocument/codeAction","result":[]}

[2023-08-10 22:56:37.323] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":10},"contentChanges":[{"text":"# typed: strict\n\nclass A\n    \nend\n"}]}}

[2023-08-10 22:56:37.419] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:37.419] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:37.419] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:37.419] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:37.585] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":11},"contentChanges":[{"text":"# typed: strict\n\nclass A\n     \nend\n"}]}}

[2023-08-10 22:56:37.682] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:37.682] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:37.682] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:37.682] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:37.856] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":12},"contentChanges":[{"text":"# typed: strict\n\nclass A\n    \nend\n"}]}}

[2023-08-10 22:56:37.952] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:37.953] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:37.953] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:37.953] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:38.135] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":13},"contentChanges":[{"text":"# typed: strict\n\nclass A\n\nend\n"}]}}

[2023-08-10 22:56:38.231] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:38.231] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:38.231] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:38.231] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:38.408] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":14},"contentChanges":[{"text":"# typed: strict\n\nclass A\nend\n"}]}}

[2023-08-10 22:56:38.460] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"context":{"diagnostics":[]}}}

[2023-08-10 22:56:38.504] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:38.504] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:38.505] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:38.505] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:38.508] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:38.508] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:38.515] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":5,"requestMethod":"textDocument/codeAction","result":[]}

[2023-08-10 22:56:39.001] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":15},"contentChanges":[{"text":"# typed: strict\n\nclass A\n    \nend\n"}]}}

[2023-08-10 22:56:39.096] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:39.096] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:39.096] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:39.097] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:39.295] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":16},"contentChanges":[{"text":"# typed: strict\n\nclass A\n\nend\n"}]}}

[2023-08-10 22:56:39.393] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:39.393] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:39.394] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:39.394] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:39.623] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":18},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  \nend\n"}]}}

[2023-08-10 22:56:39.718] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:39.718] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:39.718] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:39.718] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:39.740] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":19},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  d\nend\n"}]}}

[2023-08-10 22:56:39.740] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":6,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":3,"character":3},"context":{"triggerKind":1}}}

[2023-08-10 22:56:39.836] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:39.836] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:39.836] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:39.836] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:39.840] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 15
[2023-08-10 22:56:39.840] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `d` does not exist on `T.class_of(A)`","relatedInformation":[]}]}}

[2023-08-10 22:56:39.881] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":6,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[{"label":"def","kind":15,"detail":"(sorbet) New method","documentation":{"kind":"markdown","value":"```ruby\ndef ${1:method_name}($2)\n  $0\nend\n```\n\n---\n\nDefines a method."},"sortText":"000000","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"def ${1:method_name}($2)\n  $0\nend"}},{"label":"defined?","kind":15,"detail":"(sorbet) Snippet: defined?","documentation":{"kind":"markdown","value":"```ruby\ndefined?(${1:Constant})$0\n```\n\n---\n\nReturns a string describing its argument."},"sortText":"000001","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"defined?(${1:Constant})$0"}},{"label":"do","kind":15,"detail":"(sorbet) Snippet: do","documentation":{"kind":"markdown","value":"```ruby\ndo\n  $0\nend\n```\n\n---\n\nStarts a block."},"sortText":"000002","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"do\n  $0\nend"}},{"label":"attached_object","kind":2,"detail":"Class#attached_object","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(BasicObject)}\ndef attached_object; end\n```\n\n---\n\nReturns the object for which the receiver is the singleton class.\n\nRaises a `TypeError` if the class is not a singleton class.\n\n```ruby\nclass Foo; end\n\nFoo.singleton_class.attached_object        #=> Foo\nFoo.attached_object                        #=> TypeError: `Foo' is not a singleton class\nFoo.new.singleton_class.attached_object    #=> #<Foo:0x000000010491a370>\nTrueClass.attached_object                  #=> TypeError: `TrueClass' is not a singleton class\nNilClass.attached_object                   #=> TypeError: `NilClass' is not a singleton class\n```"},"sortText":"000003","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"attached_object${0}"}},{"label":"inherited","kind":2,"detail":"Class#inherited","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T::Class[T.anything]).returns(T.untyped)}\ndef inherited(arg0); end\n```\n\n---\n\nCallback invoked whenever a subclass of the current class is created.\n\nExample:\n\n```ruby\nclass Foo\n  def self.inherited(subclass)\n    puts \"New subclass: #{subclass}\"\n  end\nend\n\nclass Bar < Foo\nend\n\nclass Baz < Bar\nend\n```\n\n*produces:*\n\n```ruby\nNew subclass: Bar\nNew subclass: Baz\n```"},"sortText":"000004","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"inherited(${1:T::Class[T.anything]})${0}"}},{"label":"instance_methods","kind":2,"detail":"Class#instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T::Boolean).returns(T::Array[Symbol])}\ndef instance_methods(arg0=…); end\n```"},"sortText":"000005","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"instance_methods${0}"}},{"label":"define_method","kind":2,"detail":"Module#define_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    arg1: T.any(Proc, Method, UnboundMethod)\n  )\n  .returns(Symbol)\nend\ndef define_method(arg0, arg1=…); end\n```\n\n---\n\nDefines an instance method in the receiver. The *method* parameter can be a\n`Proc`, a `Method` or an `UnboundMethod` object. If a block is specified, it\nis used as the method body. If a block or the *method* parameter has\nparameters, they're used as method parameters. This block is evaluated using\n[`instance_eval`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html#method-i-instance_eval).\n\n```ruby\nclass A\n  def fred\n    puts \"In Fred\"\n  end\n  def create_method(name, &block)\n    self.class.define_method(name, &block)\n  end\n  define_method(:wilma) { puts \"Charge it!\" }\n  define_method(:flint) {|name| puts \"I'm #{name}!\"}\nend\nclass B < A\n  define_method(:barney, instance_method(:fred))\nend\na = B.new\na.barney\na.wilma\na.flint('Dino')\na.create_method(:betty) { p self }\na.betty\n```\n\n*produces:*\n\n```\nIn Fred\nCharge it!\nI'm Dino!\n#<B:0x401b39e8>\n```"},"sortText":"000006","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"define_method(${1:T.any(Symbol, String)})${0}"}},{"label":"define_method","kind":2,"detail":"Module#define_method (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String), blk: T.untyped).returns(Symbol)}\ndef define_method (overload.1)(arg0, &blk); end\n```\n\n---\n\nDefines an instance method in the receiver. The *method* parameter can be a\n`Proc`, a `Method` or an `UnboundMethod` object. If a block is specified, it\nis used as the method body. If a block or the *method* parameter has\nparameters, they're used as method parameters. This block is evaluated using\n[`instance_eval`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html#method-i-instance_eval).\n\n```ruby\nclass A\n  def fred\n    puts \"In Fred\"\n  end\n  def create_method(name, &block)\n    self.class.define_method(name, &block)\n  end\n  define_method(:wilma) { puts \"Charge it!\" }\n  define_method(:flint) {|name| puts \"I'm #{name}!\"}\nend\nclass B < A\n  define_method(:barney, instance_method(:fred))\nend\na = B.new\na.barney\na.wilma\na.flint('Dino')\na.create_method(:betty) { p self }\na.betty\n```\n\n*produces:*\n\n```\nIn Fred\nCharge it!\nI'm Dino!\n#<B:0x401b39e8>\n```"},"sortText":"000007","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"define_method(${1:T.any(Symbol, String)})${0}"}},{"label":"deprecate_constant","kind":2,"detail":"Module#deprecate_constant","documentation":{"kind":"markdown","value":"```ruby\nsig {params(_: T.untyped).returns(T.untyped)}\ndef deprecate_constant(*_); end\n```\n\n---\n\nMakes a list of existing constants deprecated. Attempt to refer to them will\nproduce a warning.\n\n```ruby\nmodule HTTP\n  NotFound = Exception.new\n  NOT_FOUND = NotFound # previous version of the library used this name\n\n  deprecate_constant :NOT_FOUND\nend\n\nHTTP::NOT_FOUND\n# warning: constant HTTP::NOT_FOUND is deprecated\n```"},"sortText":"000008","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"deprecate_constant${0}"}},{"label":"alias_method","kind":2,"detail":"Module#alias_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(new_name: Symbol, old_name: Symbol).returns(Symbol)}\ndef alias_method(new_name, old_name); end\n```\n\n---\n\nMakes *new\\_name* a new copy of the method *old\\_name*. This can be used to\nretain access to methods that are overridden.\n\n```ruby\nmodule Mod\n  alias_method :orig_exit, :exit #=> :orig_exit\n  def exit(code=0)\n    puts \"Exiting with code #{code}\"\n    orig_exit(code)\n  end\nend\ninclude Mod\nexit(99)\n```\n\n*produces:*\n\n```ruby\nExiting with code 99\n```"},"sortText":"000009","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"alias_method(${1:Symbol}, ${2:Symbol})${0}"}},{"label":"append_features","kind":2,"detail":"Module#append_features","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef append_features(arg0); end\n```\n\n---\n\nWhen this module is included in another, Ruby calls\n[`append_features`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-append_features)\nin this module, passing it the receiving module in *mod*. Ruby's default\nimplementation is to add the constants, methods, and module variables of\nthis module to *mod* if this module has not already been added to *mod* or\none of its ancestors. See also\n[`Module#include`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-include)."},"sortText":"000010","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"append_features(${1:Module})${0}"}},{"label":"attr_reader","kind":2,"detail":"Module#attr_reader","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(NilClass)}\ndef attr_reader(*arg0); end\n```\n\n---\n\nCreates instance variables and corresponding methods that return the value\nof each instance variable. Equivalent to calling \"`attr`*:name*\" on each\nname in turn. [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html)\narguments are converted to symbols. Returns an array of defined method names\nas symbols."},"sortText":"000011","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"attr_reader${0}"}},{"label":"autoload","kind":2,"detail":"Module#autoload","documentation":{"kind":"markdown","value":"```ruby\nsig {params(_module: Symbol, filename: String).returns(NilClass)}\ndef autoload(_module, filename); end\n```\n\n---\n\nRegisters *filename* to be loaded (using Kernel::require) the first time\nthat *module* (which may be a\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) or a symbol) is\naccessed in the namespace of *mod*.\n\n```ruby\nmodule A\nend\nA.autoload(:B, \"b\")\nA::B.doit            # autoloads \"b\"\n```"},"sortText":"000012","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"autoload(${1:Symbol}, ${2:String})${0}"}},{"label":"autoload?","kind":2,"detail":"Module#autoload?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    name: T.any(Symbol, String),\n    inherit: T.nilable(T::Boolean)\n  )\n  .returns(T.nilable(String))\nend\ndef autoload?(name, inherit=…); end\n```\n\n---\n\nReturns *filename* to be loaded if *name* is registered as `autoload` in the\nnamespace of *mod* or one of its ancestors.\n\n```ruby\nmodule A\nend\nA.autoload(:B, \"b\")\nA.autoload?(:B)            #=> \"b\"\n```\n\nIf `inherit` is false, the lookup only checks the autoloads in the receiver:\n\n```ruby\nclass A\n  autoload :CONST, \"const.rb\"\nend\n\nclass B < A\nend\n\nB.autoload?(:CONST)          #=> \"const.rb\", found in A (ancestor)\nB.autoload?(:CONST, false)   #=> nil, not found in B itself\n```"},"sortText":"000013","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"autoload?(${1:T.any(Symbol, String)})${0}"}},{"label":"class_variable_defined?","kind":2,"detail":"Module#class_variable_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef class_variable_defined?(arg0); end\n```\n\n---\n\nReturns `true` if the given class variable is defined in *obj*.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nclass Fred\n  @@foo = 99\nend\nFred.class_variable_defined?(:@@foo)    #=> true\nFred.class_variable_defined?(:@@bar)    #=> false\n```"},"sortText":"000014","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"class_variable_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"const_added","kind":2,"detail":"Module#const_added","documentation":{"kind":"markdown","value":"```ruby\nsig {params(const_name: Symbol).returns(T.untyped)}\ndef const_added(const_name); end\n```\n\n---\n\nInvoked as a callback whenever a constant is assigned on the receiver\n\n```ruby\nmodule Chatty\n  def self.const_added(const_name)\n    super\n    puts \"Added #{const_name.inspect}\"\n  end\n  FOO = 1\nend\n```\n\n*produces:*\n\n```\nAdded :FOO\n```"},"sortText":"000015","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"const_added(${1:Symbol})${0}"}},{"label":"const_defined?","kind":2,"detail":"Module#const_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    inherit: T::Boolean\n  )\n  .returns(T::Boolean)\nend\ndef const_defined?(arg0, inherit=…); end\n```\n\n---\n\nSays whether *mod* or its ancestors have a constant with the given name:\n\n```ruby\nFloat.const_defined?(:EPSILON)      #=> true, found in Float itself\nFloat.const_defined?(\"String\")      #=> true, found in Object (ancestor)\nBasicObject.const_defined?(:Hash)   #=> false\n```\n\nIf *mod* is a `Module`, additionally `Object` and its ancestors are checked:\n\n```ruby\nMath.const_defined?(:String)   #=> true, found in Object\n```\n\nIn each of the checked classes or modules, if the constant is not present\nbut there is an autoload for it, `true` is returned directly without\nautoloading:\n\n```ruby\nmodule Admin\n  autoload :User, 'admin/user'\nend\nAdmin.const_defined?(:User)   #=> true\n```\n\nIf the constant is not found the callback `const_missing` is **not** called\nand the method returns `false`.\n\nIf `inherit` is false, the lookup only checks the constants in the receiver:\n\n```ruby\nIO.const_defined?(:SYNC)          #=> true, found in File::Constants (ancestor)\nIO.const_defined?(:SYNC, false)   #=> false, not found in IO itself\n```\n\nIn this case, the same logic for autoloading applies.\n\nIf the argument is not a valid constant name a `NameError` is raised with\nthe message \"wrong constant name *name*\":\n\n```ruby\nHash.const_defined? 'foobar'   #=> NameError: wrong constant name foobar\n```"},"sortText":"000016","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"const_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"extend_object","kind":2,"detail":"Module#extend_object","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BasicObject).returns(T.untyped)}\ndef extend_object(arg0); end\n```\n\n---\n\nExtends the specified object by adding this module's constants and methods\n(which are added as singleton methods). This is the callback method used by\n[`Object#extend`](https://docs.ruby-lang.org/en/2.7.0/Object.html#method-i-extend).\n\n```ruby\nmodule Picky\n  def Picky.extend_object(o)\n    if String === o\n      puts \"Can't add Picky to a String\"\n    else\n      puts \"Picky added to #{o.class}\"\n      super\n    end\n  end\nend\n(s = Array.new).extend Picky  # Call Object.extend\n(s = \"quick brown fox\").extend Picky\n```\n\n*produces:*\n\n```\nPicky added to Array\nCan't add Picky to a String\n```"},"sortText":"000017","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"extend_object(${1:BasicObject})${0}"}},{"label":"extended","kind":2,"detail":"Module#extended","documentation":{"kind":"markdown","value":"```ruby\nsig {params(othermod: Module).returns(T.untyped)}\ndef extended(othermod); end\n```\n\n---\n\nThe equivalent of `included`, but for extended modules.\n\n```ruby\nmodule A\n  def self.extended(mod)\n    puts \"#{self} extended in #{mod}\"\n  end\nend\nmodule Enumerable\n  extend A\nend\n # => prints \"A extended in Enumerable\"\n```"},"sortText":"000018","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"extended(${1:Module})${0}"}},{"label":"include","kind":2,"detail":"Module#include","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef include(*arg0); end\n```\n\n---\n\nInvokes\n[`Module.append_features`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-append_features)\non each parameter in reverse order."},"sortText":"000019","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"include${0}"}},{"label":"include?","kind":2,"detail":"Module#include?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T::Boolean)}\ndef include?(arg0); end\n```\n\n---\n\nReturns `true` if *module* is included or prepended in *mod* or one of\n*mod*'s ancestors.\n\n```ruby\nmodule A\nend\nclass B\n  include A\nend\nclass C < B\nend\nB.include?(A)   #=> true\nC.include?(A)   #=> true\nA.include?(A)   #=> false\n```"},"sortText":"000020","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"include?(${1:Module})${0}"}},{"label":"included","kind":2,"detail":"Module#included","documentation":{"kind":"markdown","value":"```ruby\nsig {params(othermod: Module).returns(T.untyped)}\ndef included(othermod); end\n```\n\n---\n\nCallback invoked whenever the receiver is included in another module or\nclass. This should be used in preference to `Module.append_features` if your\ncode wants to perform some action when a module is included in another.\n\n```ruby\nmodule A\n  def A.included(mod)\n    puts \"#{self} included in #{mod}\"\n  end\nend\nmodule Enumerable\n  include A\nend\n # => prints \"A included in Enumerable\"\n```"},"sortText":"000021","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"included(${1:Module})${0}"}},{"label":"included_modules","kind":2,"detail":"Module#included_modules","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Module])}\ndef included_modules; end\n```\n\n---\n\nReturns the list of modules included or prepended in *mod* or one of *mod*'s\nancestors.\n\n```ruby\nmodule Sub\nend\n\nmodule Mixin\n  prepend Sub\nend\n\nmodule Outer\n  include Mixin\nend\n\nMixin.included_modules   #=> [Sub]\nOuter.included_modules   #=> [Sub, Mixin]\n```"},"sortText":"000022","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"included_modules${0}"}},{"label":"instance_method","kind":2,"detail":"Module#instance_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(UnboundMethod)}\ndef instance_method(arg0); end\n```\n\n---\n\nReturns an `UnboundMethod` representing the given instance method in *mod*.\n\n```ruby\nclass Interpreter\n  def do_a() print \"there, \"; end\n  def do_d() print \"Hello \";  end\n  def do_e() print \"!\\n\";     end\n  def do_v() print \"Dave\";    end\n  Dispatcher = {\n    \"a\" => instance_method(:do_a),\n    \"d\" => instance_method(:do_d),\n    \"e\" => instance_method(:do_e),\n    \"v\" => instance_method(:do_v)\n  }\n  def interpret(string)\n    string.each_char {|b| Dispatcher[b].bind(self).call }\n  end\nend\n\ninterpreter = Interpreter.new\ninterpreter.interpret('dave')\n```\n\n*produces:*\n\n```ruby\nHello there, Dave!\n```"},"sortText":"000023","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"instance_method(${1:T.any(Symbol, String)})${0}"}},{"label":"method_added","kind":2,"detail":"Module#method_added","documentation":{"kind":"markdown","value":"```ruby\nsig {params(meth: Symbol).returns(T.untyped)}\ndef method_added(meth); end\n```\n\n---\n\nInvoked as a callback whenever an instance method is added to the receiver.\n\n```ruby\nmodule Chatty\n  def self.method_added(method_name)\n    puts \"Adding #{method_name.inspect}\"\n  end\n  def self.some_class_method() end\n  def some_instance_method() end\nend\n```\n\n*produces:*\n\n```ruby\nAdding :some_instance_method\n```"},"sortText":"000024","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"method_added(${1:Symbol})${0}"}},{"label":"method_defined?","kind":2,"detail":"Module#method_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method_name: T.any(Symbol, String),\n    inherit: T::Boolean\n  )\n  .returns(T::Boolean)\nend\ndef method_defined?(method_name, inherit=…); end\n```\n\n---\n\nReturns `true` if the named method is defined by *mod*. If *inherit* is set,\nthe lookup will also search *mod*'s ancestors. Public and protected methods\nare matched. [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html)\narguments are converted to symbols.\n\n```ruby\nmodule A\n  def method1()  end\n  def protected_method1()  end\n  protected :protected_method1\nend\nclass B\n  def method2()  end\n  def private_method2()  end\n  private :private_method2\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1              #=> true\nC.method_defined? \"method1\"             #=> true\nC.method_defined? \"method2\"             #=> true\nC.method_defined? \"method2\", true       #=> true\nC.method_defined? \"method2\", false      #=> false\nC.method_defined? \"method3\"             #=> true\nC.method_defined? \"protected_method1\"   #=> true\nC.method_defined? \"method4\"             #=> false\nC.method_defined? \"private_method2\"     #=> false\n```"},"sortText":"000025","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"method_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"method_removed","kind":2,"detail":"Module#method_removed","documentation":{"kind":"markdown","value":"```ruby\nsig {params(method_name: Symbol).returns(T.untyped)}\ndef method_removed(method_name); end\n```\n\n---\n\nInvoked as a callback whenever an instance method is removed from the\nreceiver.\n\n```ruby\nmodule Chatty\n  def self.method_removed(method_name)\n    puts \"Removing #{method_name.inspect}\"\n  end\n  def self.some_class_method() end\n  def some_instance_method() end\n  class << self\n    remove_method :some_class_method\n  end\n  remove_method :some_instance_method\nend\n```\n\n*produces:*\n\n```ruby\nRemoving :some_instance_method\n```"},"sortText":"000026","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"method_removed(${1:Symbol})${0}"}},{"label":"module_eval","kind":2,"detail":"Module#module_eval","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, filename: String, lineno: Integer).returns(T.untyped)}\ndef module_eval(arg0, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates the string or block in the context of *mod*, except that when a\nblock is given, constant/class variable lookup is not affected. This can be\nused to add methods to a class. `module_eval` returns the result of\nevaluating its argument. The optional *filename* and *lineno* parameters set\nthe text for error messages.\n\n```ruby\nclass Thing\nend\na = %q{def hello() \"Hello there!\" end}\nThing.module_eval(a)\nputs Thing.new.hello()\nThing.module_eval(\"invalid code\", \"dummy\", 123)\n```\n\n*produces:*\n\n```\nHello there!\ndummy:123:in `module_eval': undefined local variable\n    or method `code' for Thing:Class\n```\n\n\nAlso aliased as:\n[`class_eval`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-class_eval)"},"sortText":"000027","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"module_eval(${1:String})${0}"}},{"label":"module_eval","kind":2,"detail":"Module#module_eval (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef module_eval (overload.1)(&blk); end\n```\n\n---\n\nEvaluates the string or block in the context of *mod*, except that when a\nblock is given, constant/class variable lookup is not affected. This can be\nused to add methods to a class. `module_eval` returns the result of\nevaluating its argument. The optional *filename* and *lineno* parameters set\nthe text for error messages.\n\n```ruby\nclass Thing\nend\na = %q{def hello() \"Hello there!\" end}\nThing.module_eval(a)\nputs Thing.new.hello()\nThing.module_eval(\"invalid code\", \"dummy\", 123)\n```\n\n*produces:*\n\n```\nHello there!\ndummy:123:in `module_eval': undefined local variable\n    or method `code' for Thing:Class\n```\n\n\nAlso aliased as:\n[`class_eval`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-class_eval)"},"sortText":"000028","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"module_eval do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"module_exec","kind":2,"detail":"Module#module_exec","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: BasicObject, blk: T.untyped).returns(T.untyped)}\ndef module_exec(*args, &blk); end\n```\n\n---\n\nEvaluates the given block in the context of the class/module. The method\ndefined in the block will belong to the receiver. Any arguments passed to\nthe method will be passed to the block. This can be used if the block needs\nto access instance variables.\n\n```ruby\nclass Thing\nend\nThing.class_exec{\n  def hello() \"Hello there!\" end\n}\nputs Thing.new.hello()\n```\n\n*produces:*\n\n```ruby\nHello there!\n```\n\n\nAlso aliased as:\n[`class_exec`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-class_exec)"},"sortText":"000029","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"module_exec${0}"}},{"label":"module_function","kind":2,"detail":"Module#module_function","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef module_function(*arg0); end\n```\n\n---\n\nCreates module functions for the named methods. These functions may be\ncalled with the module as a receiver, and also become available as instance\nmethods to classes that mix in the module.\n[`Module`](https://docs.ruby-lang.org/en/2.7.0/Module.html) functions are\ncopies of the original, and so may be changed independently. The\ninstance-method versions are made private. If used with no arguments,\nsubsequently defined methods become module functions.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. If a single argument is passed, it is returned. If no\nargument is passed, nil is returned. If multiple arguments are passed, the\narguments are returned as an array.\n\n```ruby\nmodule Mod\n  def one\n    \"This is one\"\n  end\n  module_function :one\nend\nclass Cls\n  include Mod\n  def call_one\n    one\n  end\nend\nMod.one     #=> \"This is one\"\nc = Cls.new\nc.call_one  #=> \"This is one\"\nmodule Mod\n  def one\n    \"This is the new one\"\n  end\nend\nMod.one     #=> \"This is one\"\nc.call_one  #=> \"This is the new one\"\n```"},"sortText":"000030","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"module_function${0}"}},{"label":"prepend","kind":2,"detail":"Module#prepend","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef prepend(*arg0); end\n```\n\n---\n\nInvokes\n[`Module.prepend_features`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-prepend_features)\non each parameter in reverse order."},"sortText":"000031","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"prepend${0}"}},{"label":"prepend_features","kind":2,"detail":"Module#prepend_features","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef prepend_features(arg0); end\n```\n\n---\n\nWhen this module is prepended in another, Ruby calls\n[`prepend_features`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-prepend_features)\nin this module, passing it the receiving module in *mod*. Ruby's default\nimplementation is to overlay the constants, methods, and module variables of\nthis module to *mod* if this module has not already been added to *mod* or\none of its ancestors. See also\n[`Module#prepend`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-prepend)."},"sortText":"000032","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"prepend_features(${1:Module})${0}"}},{"label":"prepended","kind":2,"detail":"Module#prepended","documentation":{"kind":"markdown","value":"```ruby\nsig {params(othermod: Module).returns(T.untyped)}\ndef prepended(othermod); end\n```\n\n---\n\nThe equivalent of `included`, but for prepended modules.\n\n```ruby\nmodule A\n  def self.prepended(mod)\n    puts \"#{self} prepended to #{mod}\"\n  end\nend\nmodule Enumerable\n  prepend A\nend\n # => prints \"A prepended to Enumerable\"\n```"},"sortText":"000033","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"prepended(${1:Module})${0}"}},{"label":"private_class_method","kind":2,"detail":"Module#private_class_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Array[T.any(Symbol, String)], Symbol, String)\n  )\n  .returns(T.class_of(A))\nend\ndef private_class_method(*arg0); end\n```\n\n---\n\nMakes existing class methods private. Often used to hide the default\nconstructor `new`.\n\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. An\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of Symbols and/or\nStrings is also accepted.\n\n```ruby\nclass SimpleSingleton  # Not thread safe\n  private_class_method :new\n  def SimpleSingleton.create(*args, &block)\n    @me = new(*args, &block) if ! @me\n    @me\n  end\nend\n```"},"sortText":"000034","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"private_class_method${0}"}},{"label":"private_instance_methods","kind":2,"detail":"Module#private_instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(include_super: T::Boolean).returns(T::Array[Symbol])}\ndef private_instance_methods(include_super=…); end\n```\n\n---\n\nReturns a list of the private instance methods defined in *mod*. If the\noptional parameter is `false`, the methods of any ancestors are not\nincluded.\n\n```ruby\nmodule Mod\n  def method1()  end\n  private :method1\n  def method2()  end\nend\nMod.instance_methods           #=> [:method2]\nMod.private_instance_methods   #=> [:method1]\n```"},"sortText":"000035","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"private_instance_methods${0}"}},{"label":"private_method_defined?","kind":2,"detail":"Module#private_method_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef private_method_defined?(arg0); end\n```\n\n---\n\nReturns `true` if the named private method is defined by *mod*. If *inherit*\nis set, the lookup will also search *mod*'s ancestors.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nmodule A\n  def method1()  end\nend\nclass B\n  private\n  def method2()  end\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1                   #=> true\nC.private_method_defined? \"method1\"          #=> false\nC.private_method_defined? \"method2\"          #=> true\nC.private_method_defined? \"method2\", true    #=> true\nC.private_method_defined? \"method2\", false   #=> false\nC.method_defined? \"method2\"                  #=> false\n```"},"sortText":"000036","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"private_method_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"protected","kind":2,"detail":"Module#protected","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef protected(*arg0); end\n```\n\n---\n\nWith no arguments, sets the default visibility for subsequently defined\nmethods to protected. With arguments, sets the named methods to have\nprotected visibility.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. An\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of Symbols and/or\nStrings is also accepted. If a single argument is passed, it is returned. If\nno argument is passed, nil is returned. If multiple arguments are passed,\nthe arguments are returned as an array.\n\nIf a method has protected visibility, it is callable only where `self` of\nthe context is the same as the method. (method definition or\ninstance\\_eval). This behavior is different from Java's protected method.\nUsually `private` should be used.\n\nNote that a protected method is slow because it can't use inline cache.\n\nTo show a private method on\n[`RDoc`](https://docs.ruby-lang.org/en/2.7.0/RDoc.html), use `:doc:` instead\nof this."},"sortText":"000037","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"protected${0}"}},{"label":"protected_instance_methods","kind":2,"detail":"Module#protected_instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(include_super: T::Boolean).returns(T::Array[Symbol])}\ndef protected_instance_methods(include_super=…); end\n```\n\n---\n\nReturns a list of the protected instance methods defined in *mod*. If the\noptional parameter is `false`, the methods of any ancestors are not\nincluded."},"sortText":"000038","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"protected_instance_methods${0}"}},{"label":"protected_method_defined?","kind":2,"detail":"Module#protected_method_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef protected_method_defined?(arg0); end\n```\n\n---\n\nReturns `true` if the named protected method is defined *mod*. If *inherit*\nis set, the lookup will also search *mod*'s ancestors.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nmodule A\n  def method1()  end\nend\nclass B\n  protected\n  def method2()  end\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1                    #=> true\nC.protected_method_defined? \"method1\"         #=> false\nC.protected_method_defined? \"method2\"         #=> true\nC.protected_method_defined? \"method2\", true   #=> true\nC.protected_method_defined? \"method2\", false  #=> false\nC.method_defined? \"method2\"                   #=> true\n```"},"sortText":"000039","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"protected_method_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"public_class_method","kind":2,"detail":"Module#public_class_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Array[T.any(Symbol, String)], Symbol, String)\n  )\n  .returns(T.class_of(A))\nend\ndef public_class_method(*arg0); end\n```\n\n---\n\nMakes a list of existing class methods public.\n\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. An\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of Symbols and/or\nStrings is also accepted."},"sortText":"000040","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"public_class_method${0}"}},{"label":"public_instance_method","kind":2,"detail":"Module#public_instance_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(UnboundMethod)}\ndef public_instance_method(arg0); end\n```\n\n---\n\nSimilar to *instance\\_method*, searches public method only."},"sortText":"000041","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"public_instance_method(${1:Symbol})${0}"}},{"label":"public_instance_methods","kind":2,"detail":"Module#public_instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(include_super: T::Boolean).returns(T::Array[Symbol])}\ndef public_instance_methods(include_super=…); end\n```\n\n---\n\nReturns a list of the public instance methods defined in *mod*. If the\noptional parameter is `false`, the methods of any ancestors are not\nincluded."},"sortText":"000042","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"public_instance_methods${0}"}},{"label":"public_method_defined?","kind":2,"detail":"Module#public_method_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef public_method_defined?(arg0); end\n```\n\n---\n\nReturns `true` if the named public method is defined by *mod*. If *inherit*\nis set, the lookup will also search *mod*'s ancestors.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nmodule A\n  def method1()  end\nend\nclass B\n  protected\n  def method2()  end\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1                 #=> true\nC.public_method_defined? \"method1\"         #=> true\nC.public_method_defined? \"method1\", true   #=> true\nC.public_method_defined? \"method1\", false  #=> true\nC.public_method_defined? \"method2\"         #=> false\nC.method_defined? \"method2\"                #=> true\n```"},"sortText":"000043","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"public_method_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"remove_method","kind":2,"detail":"Module#remove_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef remove_method(arg0); end\n```\n\n---\n\nRemoves the method identified by *symbol* from the current class. For an\nexample, see\n[`Module#undef_method`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-undef_method).\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols."},"sortText":"000044","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"remove_method(${1:T.any(Symbol, String)})${0}"}},{"label":"ruby2_keywords","kind":2,"detail":"Module#ruby2_keywords","documentation":{"kind":"markdown","value":"```ruby\nsig {params(method_name: Symbol).returns(T.class_of(A))}\ndef ruby2_keywords(*method_name); end\n```\n\n---\n\nFor the given method names, marks the method as passing keywords through a\nnormal argument splat. This should only be called on methods that accept an\nargument splat (`*args`) but not explicit keywords or a keyword splat. It\nmarks the method such that if the method is called with keyword arguments,\nthe final hash argument is marked with a special flag such that if it is the\nfinal element of a normal argument splat to another method call, and that\nmethod call does not include explicit keywords or a keyword splat, the final\nelement is interpreted as keywords. In other words, keywords will be passed\nthrough the method to other methods.\n\nThis should only be used for methods that delegate keywords to another\nmethod, and only for backwards compatibility with Ruby versions before 3.0.\nSee\nhttps://www.ruby-lang.org/en/news/2019/12/12/separation-of-positional-and-keyword-arguments-in-ruby-3-0/\nfor details on why `ruby2_keywords` exists and when and how to use it.\n\nThis method will probably be removed at some point, as it exists only for\nbackwards compatibility. As it does not exist in Ruby versions before 2.7,\ncheck that the module responds to this method before calling it:\n\n```ruby\nmodule Mod\n  def foo(meth, *args, &block)\n    send(:\"do_#{meth}\", *args, &block)\n  end\n  ruby2_keywords(:foo) if respond_to?(:ruby2_keywords, true)\nend\n```\n\nHowever, be aware that if the `ruby2_keywords` method is removed, the\nbehavior of the `foo` method using the above approach will change so that\nthe method does not pass through keywords."},"sortText":"000045","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"ruby2_keywords${0}"}},{"label":"undef_method","kind":2,"detail":"Module#undef_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef undef_method(arg0); end\n```\n\n---\n\nPrevents the current class from responding to calls to the named method.\nContrast this with `remove_method`, which deletes the method from the\nparticular class; Ruby will still search superclasses and mixed-in modules\nfor a possible receiver.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nclass Parent\n  def hello\n    puts \"In parent\"\n  end\nend\nclass Child < Parent\n  def hello\n    puts \"In child\"\n  end\nend\n\nc = Child.new\nc.hello\n\nclass Child\n  remove_method :hello  # remove from child, still in parent\nend\nc.hello\n\nclass Child\n  undef_method :hello   # prevent any calls to 'hello'\nend\nc.hello\n```\n\n*produces:*\n\n```\nIn child\nIn parent\nprog.rb:23: undefined method `hello' for #<Child:0x401b3bb4> (NoMethodError)\n```"},"sortText":"000046","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"undef_method(${1:T.any(Symbol, String)})${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    symbol: T.any(Symbol, String),\n    method: T.any(Proc, Method, UnboundMethod)\n  )\n  .returns(Symbol)\nend\ndef define_singleton_method(symbol, method=…); end\n```"},"sortText":"000047","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"define_singleton_method(${1:T.any(Symbol, String)})${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(symbol: T.any(Symbol, String), blk: T.untyped).returns(Symbol)}\ndef define_singleton_method (overload.1)(symbol, &blk); end\n```"},"sortText":"000048","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"define_singleton_method(${1:T.any(Symbol, String)})${0}"}},{"label":"display","kind":2,"detail":"Kernel#display","documentation":{"kind":"markdown","value":"```ruby\nsig {params(port: IO).returns(NilClass)}\ndef display(port); end\n```"},"sortText":"000049","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"display(${1:IO})${0}"}},{"label":"dup","kind":2,"detail":"Kernel#dup","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.class_of(A))}\ndef dup; end\n```"},"sortText":"000050","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"dup${0}"}},{"label":"__dir__","kind":2,"detail":"Kernel#__dir__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(String))}\ndef __dir__; end\n```\n\n---\n\nReturns the canonicalized absolute path of the directory of the file from\nwhich this method is called. It means symlinks in the path is resolved. If\n`__FILE__` is `nil`, it returns `nil`. The return value equals to\n`File.dirname(File.realpath(__FILE__))`."},"sortText":"000051","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"__dir__${0}"}},{"label":"__method__","kind":2,"detail":"Kernel#__method__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(Symbol))}\ndef __method__; end\n```\n\n---\n\nReturns the name at the definition of the current method as a\n[`Symbol`](https://docs.ruby-lang.org/en/2.7.0/Symbol.html). If called\noutside of a method, it returns `nil`."},"sortText":"000052","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"__method__${0}"}},{"label":"binding","kind":2,"detail":"Kernel#binding","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Binding)}\ndef binding; end\n```\n\n---\n\nReturns a `Binding` object, describing the variable and method bindings at\nthe point of call. This object can be used when calling `eval` to execute\nthe evaluated command in this environment. See also the description of class\n`Binding`.\n\n```ruby\ndef get_binding(param)\n  binding\nend\nb = get_binding(\"hello\")\neval(\"param\", b)   #=> \"hello\"\n```"},"sortText":"000053","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"binding${0}"}},{"label":"extend","kind":2,"detail":"Kernel#extend","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef extend(*arg0); end\n```"},"sortText":"000054","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"extend${0}"}},{"label":"instance_variable_defined?","kind":2,"detail":"Kernel#instance_variable_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef instance_variable_defined?(arg0); end\n```"},"sortText":"000055","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"instance_variable_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"kind_of?","kind":2,"detail":"Kernel#kind_of?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T::Boolean)}\ndef kind_of?(arg0); end\n```"},"sortText":"000056","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"kind_of?(${1:Module})${0}"}},{"label":"lambda","kind":2,"detail":"Kernel#lambda","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.untyped).returns(Proc)}\ndef lambda(&blk); end\n```\n\n---\n\nEquivalent to\n[`Proc.new`](https://docs.ruby-lang.org/en/2.7.0/Proc.html#method-c-new),\nexcept the resulting [`Proc`](https://docs.ruby-lang.org/en/2.7.0/Proc.html)\nobjects check the number of parameters passed when called."},"sortText":"000057","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"lambda${0}"}},{"label":"load","kind":2,"detail":"Kernel#load","documentation":{"kind":"markdown","value":"```ruby\nsig {params(filename: String, arg0: T::Boolean).returns(T::Boolean)}\ndef load(filename, arg0=…); end\n```\n\n---\n\nLoads and executes the Ruby program in the file *filename*.\n\nIf the filename is an absolute path (e.g. starts with '/'), the file will be\nloaded directly using the absolute path.\n\nIf the filename is an explicit relative path (e.g. starts with './' or\n'../'), the file will be loaded using the relative path from the current\ndirectory.\n\nOtherwise, the file will be searched for in the library directories listed\nin `$LOAD_PATH` (`$:`). If the file is found in a directory, it will attempt\nto load the file relative to that directory. If the file is not found in any\nof the directories in `$LOAD_PATH`, the file will be loaded using the\nrelative path from the current directory.\n\nIf the file doesn't exist when there is an attempt to load it, a\n[`LoadError`](https://docs.ruby-lang.org/en/2.7.0/LoadError.html) will be\nraised.\n\nIf the optional *wrap* parameter is `true`, the loaded script will be\nexecuted under an anonymous module, protecting the calling program's global\nnamespace. If the optional *wrap* parameter is a module, the loaded script\nwill be executed under the given module. In no circumstance will any local\nvariables in the loaded file be propagated to the loading environment."},"sortText":"000058","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"load(${1:String})${0}"}},{"label":"method","kind":2,"detail":"Kernel#method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef method(arg0); end\n```"},"sortText":"000059","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"method(${1:Symbol})${0}"}},{"label":"methods","kind":2,"detail":"Kernel#methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(regular: T::Boolean).returns(T::Array[Symbol])}\ndef methods(regular=…); end\n```"},"sortText":"000060","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"methods${0}"}},{"label":"object_id","kind":2,"detail":"Kernel#object_id","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef object_id; end\n```\n\n---\n\nReturns an integer identifier for `obj`.\n\nThe same number will be returned on all calls to `object_id` for a given\nobject, and no two active objects will share an id.\n\nNote: that some objects of builtin classes are reused for optimization. This\nis the case for immediate values and frozen string literals.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_id\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`object_id`.\n\nImmediate values are not passed by reference but are passed by value: `nil`,\n`true`, `false`, Fixnums, Symbols, and some Floats.\n\n```ruby\nObject.new.object_id  == Object.new.object_id  # => false\n(21 * 2).object_id    == (21 * 2).object_id    # => true\n\"hello\".object_id     == \"hello\".object_id     # => false\n\"hi\".freeze.object_id == \"hi\".freeze.object_id # => true\n```"},"sortText":"000061","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"object_id${0}"}},{"label":"private_methods","kind":2,"detail":"Kernel#private_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef private_methods(all=…); end\n```"},"sortText":"000062","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"private_methods${0}"}},{"label":"protected_methods","kind":2,"detail":"Kernel#protected_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef protected_methods(all=…); end\n```"},"sortText":"000063","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"protected_methods${0}"}},{"label":"public_method","kind":2,"detail":"Kernel#public_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef public_method(arg0); end\n```"},"sortText":"000064","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"public_method(${1:Symbol})${0}"}},{"label":"public_methods","kind":2,"detail":"Kernel#public_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef public_methods(all=…); end\n```"},"sortText":"000065","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"public_methods${0}"}},{"label":"public_send","kind":2,"detail":"Kernel#public_send","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef public_send(arg0, *args, &blk); end\n```"},"sortText":"000066","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"public_send(${1:T.any(Symbol, String)})${0}"}},{"label":"rand","kind":2,"detail":"Kernel#rand","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Float)}\ndef rand; end\n```\n\n---\n\nIf called without an argument, or if `max.to_i.abs == 0`, rand returns a\npseudo-random floating point number between 0.0 and 1.0, including 0.0 and\nexcluding 1.0.\n\n```ruby\nrand        #=> 0.2725926052826416\n```\n\nWhen `max.abs` is greater than or equal to 1, `rand` returns a pseudo-random\ninteger greater than or equal to 0 and less than `max.to_i.abs`.\n\n```ruby\nrand(100)   #=> 12\n```\n\nWhen `max` is a [`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html),\n`rand` returns a random number where range.member?(number) == true.\n\nNegative or floating point values for `max` are allowed, but may give\nsurprising results.\n\n```ruby\nrand(-100) # => 87\nrand(-0.5) # => 0.8130921818028143\nrand(1.9)  # equivalent to rand(1), which is always 0\n```\n\n[`Kernel.srand`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-srand)\nmay be used to ensure that sequences of random numbers are reproducible\nbetween different runs of a program.\n\nSee also\n[`Random.rand`](https://docs.ruby-lang.org/en/2.7.0/Random.html#method-c-rand)."},"sortText":"000067","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"rand${0}"}},{"label":"rand","kind":2,"detail":"Kernel#rand (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(T::Range[Integer], Integer)).returns(Integer)}\ndef rand (overload.1)(arg0=…); end\n```\n\n---\n\nIf called without an argument, or if `max.to_i.abs == 0`, rand returns a\npseudo-random floating point number between 0.0 and 1.0, including 0.0 and\nexcluding 1.0.\n\n```ruby\nrand        #=> 0.2725926052826416\n```\n\nWhen `max.abs` is greater than or equal to 1, `rand` returns a pseudo-random\ninteger greater than or equal to 0 and less than `max.to_i.abs`.\n\n```ruby\nrand(100)   #=> 12\n```\n\nWhen `max` is a [`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html),\n`rand` returns a random number where range.member?(number) == true.\n\nNegative or floating point values for `max` are allowed, but may give\nsurprising results.\n\n```ruby\nrand(-100) # => 87\nrand(-0.5) # => 0.8130921818028143\nrand(1.9)  # equivalent to rand(1), which is always 0\n```\n\n[`Kernel.srand`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-srand)\nmay be used to ensure that sequences of random numbers are reproducible\nbetween different runs of a program.\n\nSee also\n[`Random.rand`](https://docs.ruby-lang.org/en/2.7.0/Random.html#method-c-rand)."},"sortText":"000068","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"rand${0}"}},{"label":"rand","kind":2,"detail":"Kernel#rand (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.nilable(T.any(Float, T::Range[Float]))).returns(Float)}\ndef rand (overload.2)(arg0=…); end\n```\n\n---\n\nIf called without an argument, or if `max.to_i.abs == 0`, rand returns a\npseudo-random floating point number between 0.0 and 1.0, including 0.0 and\nexcluding 1.0.\n\n```ruby\nrand        #=> 0.2725926052826416\n```\n\nWhen `max.abs` is greater than or equal to 1, `rand` returns a pseudo-random\ninteger greater than or equal to 0 and less than `max.to_i.abs`.\n\n```ruby\nrand(100)   #=> 12\n```\n\nWhen `max` is a [`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html),\n`rand` returns a random number where range.member?(number) == true.\n\nNegative or floating point values for `max` are allowed, but may give\nsurprising results.\n\n```ruby\nrand(-100) # => 87\nrand(-0.5) # => 0.8130921818028143\nrand(1.9)  # equivalent to rand(1), which is always 0\n```\n\n[`Kernel.srand`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-srand)\nmay be used to ensure that sequences of random numbers are reproducible\nbetween different runs of a program.\n\nSee also\n[`Random.rand`](https://docs.ruby-lang.org/en/2.7.0/Random.html#method-c-rand)."},"sortText":"000069","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"rand${0}"}},{"label":"rand","kind":2,"detail":"Kernel#rand (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(T::Range[Numeric], Numeric)).returns(Numeric)}\ndef rand (overload.3)(arg0=…); end\n```\n\n---\n\nIf called without an argument, or if `max.to_i.abs == 0`, rand returns a\npseudo-random floating point number between 0.0 and 1.0, including 0.0 and\nexcluding 1.0.\n\n```ruby\nrand        #=> 0.2725926052826416\n```\n\nWhen `max.abs` is greater than or equal to 1, `rand` returns a pseudo-random\ninteger greater than or equal to 0 and less than `max.to_i.abs`.\n\n```ruby\nrand(100)   #=> 12\n```\n\nWhen `max` is a [`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html),\n`rand` returns a random number where range.member?(number) == true.\n\nNegative or floating point values for `max` are allowed, but may give\nsurprising results.\n\n```ruby\nrand(-100) # => 87\nrand(-0.5) # => 0.8130921818028143\nrand(1.9)  # equivalent to rand(1), which is always 0\n```\n\n[`Kernel.srand`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-srand)\nmay be used to ensure that sequences of random numbers are reproducible\nbetween different runs of a program.\n\nSee also\n[`Random.rand`](https://docs.ruby-lang.org/en/2.7.0/Random.html#method-c-rand)."},"sortText":"000070","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"rand${0}"}},{"label":"readline","kind":2,"detail":"Kernel#readline","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(String)}\ndef readline(arg0=…, arg1=…); end\n```\n\n---\n\nEquivalent to Kernel::gets, except `readline` raises `EOFError` at end of\nfile."},"sortText":"000071","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"readline${0}"}},{"label":"readlines","kind":2,"detail":"Kernel#readlines","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(T::Array[String])}\ndef readlines(arg0=…, arg1=…); end\n```\n\n---\n\nReturns an array containing the lines returned by calling `Kernel.gets(sep)`\nuntil the end of file."},"sortText":"000072","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"readlines${0}"}},{"label":"respond_to?","kind":2,"detail":"Kernel#respond_to?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    include_all: T.untyped\n  )\n  .returns(T::Boolean)\nend\ndef respond_to?(arg0, include_all=…); end\n```"},"sortText":"000073","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"respond_to?(${1:T.any(String, Symbol)})${0}"}},{"label":"send","kind":2,"detail":"Kernel#send","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(String, Symbol), arg1: T.anything).returns(T.untyped)}\ndef send(arg0, *arg1); end\n```"},"sortText":"000074","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"send(${1:T.any(String, Symbol)})${0}"}},{"label":"send","kind":2,"detail":"Kernel#send (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    arg1: T.anything,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef send (overload.1)(arg0, *arg1, &blk); end\n```"},"sortText":"000075","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"send(${1:T.any(String, Symbol)})${0}"}},{"label":"singleton_method","kind":2,"detail":"Kernel#singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef singleton_method(arg0); end\n```"},"sortText":"000076","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"singleton_method(${1:Symbol})${0}"}},{"label":"singleton_methods","kind":2,"detail":"Kernel#singleton_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef singleton_methods(all=…); end\n```"},"sortText":"000077","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"singleton_methods${0}"}},{"label":"srand","kind":2,"detail":"Kernel#srand","documentation":{"kind":"markdown","value":"```ruby\nsig {params(number: Numeric).returns(Numeric)}\ndef srand(number=…); end\n```\n\n---\n\nSeeds the system pseudo-random number generator, with `number`. The previous\nseed value is returned.\n\nIf `number` is omitted, seeds the generator using a source of entropy\nprovided by the operating system, if available (/dev/urandom on Unix systems\nor the RSA cryptographic provider on Windows), which is then combined with\nthe time, the process id, and a sequence number.\n\nsrand may be used to ensure repeatable sequences of pseudo-random numbers\nbetween different runs of the program. By setting the seed to a known value,\nprograms can be made deterministic during testing.\n\n```ruby\nsrand 1234               # => 268519324636777531569100071560086917274\n[ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]\n[ rand(10), rand(1000) ] # => [4, 664]\nsrand 1234               # => 1234\n[ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]\n```"},"sortText":"000078","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"srand${0}"}},{"label":"tainted?","kind":2,"detail":"Kernel#tainted?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef tainted?; end\n```"},"sortText":"000079","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"tainted?${0}"}},{"label":"undef","kind":2,"detail":"Kernel#undef","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg: BasicObject).void}\ndef undef(*arg); end\n```"},"sortText":"000080","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"undef${0}"}},{"label":"untrusted?","kind":2,"detail":"Kernel#untrusted?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef untrusted?; end\n```"},"sortText":"000081","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"untrusted?${0}"}},{"label":"yield_self","kind":2,"detail":"Kernel#yield_self","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:X))\n  )\n  .returns(T.type_parameter(:X))\nend\ndef yield_self(&blk); end\n```\n\n---\n\nYields self to the block and returns the result of the block.\n\n```ruby\n\"my string\".yield_self {|s| s.upcase }   #=> \"MY STRING\"\n```\n\nGood usage for `then` is value piping in method chains:\n\n```ruby\nrequire 'open-uri'\nrequire 'json'\n\nconstruct_url(arguments).\n  then {|url| URI(url).read }.\n  then {|response| JSON.parse(response) }\n```"},"sortText":"000082","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"yield_self do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"__id__","kind":2,"detail":"BasicObject#__id__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef __id__; end\n```\n\n---\n\nReturns an integer identifier for `obj`.\n\nThe same number will be returned on all calls to `object_id` for a given\nobject, and no two active objects will share an id.\n\nNote: that some objects of builtin classes are reused for optimization. This\nis the case for immediate values and frozen string literals.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_id\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`object_id`.\n\nImmediate values are not passed by reference but are passed by value: `nil`,\n`true`, `false`, Fixnums, Symbols, and some Floats.\n\n```ruby\nObject.new.object_id  == Object.new.object_id  # => false\n(21 * 2).object_id    == (21 * 2).object_id    # => true\n\"hello\".object_id     == \"hello\".object_id     # => false\n\"hi\".freeze.object_id == \"hi\".freeze.object_id # => true\n```"},"sortText":"000083","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"__id__${0}"}},{"label":"__send__","kind":2,"detail":"BasicObject#__send__","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol, arg1: BasicObject).returns(T.untyped)}\ndef __send__(arg0, *arg1); end\n```\n\n---\n\nInvokes the method identified by *symbol*, passing it any arguments\nspecified. You can use `__send__` if the name `send` clashes with an\nexisting method in *obj*. When the method is identified by a string, the\nstring is converted to a symbol.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_send\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`send`.\n\n```ruby\nclass Klass\n  def hello(*args)\n    \"Hello \" + args.join(' ')\n  end\nend\nk = Klass.new\nk.send :hello, \"gentle\", \"readers\"   #=> \"Hello gentle readers\"\n```"},"sortText":"000084","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"__send__(${1:Symbol})${0}"}}]}}

[2023-08-10 22:56:40.180] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":23},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  def e\nend\n"}]}}

[2023-08-10 22:56:40.180] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":7,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":3,"character":7},"context":{"triggerKind":1}}}

[2023-08-10 22:56:40.277] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:40.277] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:40.277] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:40.277] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:40.303] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 16
[2023-08-10 22:56:40.304] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":4,"character":3},"end":{"line":5,"character":0}},"severity":1,"code":2001,"codeDescription":{"href":"https://srb.help/2001"},"message":"unexpected token \"end of file\"","relatedInformation":[]},{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":7}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `e` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}},"message":"Insert `extend T::Sig`"}]},{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":5}},"severity":1,"code":2003,"codeDescription":{"href":"https://srb.help/2003"},"message":"Hint: this \"def\" token might not be properly closed","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":0},"end":{"line":4,"character":3}}},"message":"Matching `end` found here but is not indented as far"}]}]}}

[2023-08-10 22:56:40.307] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":7,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[]}}

[2023-08-10 22:56:40.346] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":24},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  def ex\nend\n"}]}}

[2023-08-10 22:56:40.347] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":8,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":3,"character":8},"context":{"triggerKind":1}}}

[2023-08-10 22:56:40.445] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:40.445] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:40.445] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:40.445] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:40.471] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 17
[2023-08-10 22:56:40.472] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":4,"character":3},"end":{"line":5,"character":0}},"severity":1,"code":2001,"codeDescription":{"href":"https://srb.help/2001"},"message":"unexpected token \"end of file\"","relatedInformation":[]},{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":8}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `ex` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}},"message":"Insert `extend T::Sig`"}]},{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":5}},"severity":1,"code":2003,"codeDescription":{"href":"https://srb.help/2003"},"message":"Hint: this \"def\" token might not be properly closed","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":0},"end":{"line":4,"character":3}}},"message":"Matching `end` found here but is not indented as far"}]}]}}

[2023-08-10 22:56:40.475] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":8,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[]}}

[2023-08-10 22:56:40.506] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":25},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  def exa\nend\n"}]}}

[2023-08-10 22:56:40.507] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":9,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":3,"character":9},"context":{"triggerKind":1}}}

[2023-08-10 22:56:40.602] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:40.603] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:40.603] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:40.603] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:40.621] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 18
[2023-08-10 22:56:40.622] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":4,"character":3},"end":{"line":5,"character":0}},"severity":1,"code":2001,"codeDescription":{"href":"https://srb.help/2001"},"message":"unexpected token \"end of file\"","relatedInformation":[]},{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":9}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `exa` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}},"message":"Insert `extend T::Sig`"}]},{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":5}},"severity":1,"code":2003,"codeDescription":{"href":"https://srb.help/2003"},"message":"Hint: this \"def\" token might not be properly closed","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":0},"end":{"line":4,"character":3}}},"message":"Matching `end` found here but is not indented as far"}]}]}}

[2023-08-10 22:56:40.626] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":9,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[]}}

[2023-08-10 22:56:40.779] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":28},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  def exampl\nend\n"}]}}

[2023-08-10 22:56:40.780] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":10,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":3,"character":12},"context":{"triggerKind":1}}}

[2023-08-10 22:56:40.875] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:40.875] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:40.875] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:40.875] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:40.894] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 19
[2023-08-10 22:56:40.894] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":4,"character":3},"end":{"line":5,"character":0}},"severity":1,"code":2001,"codeDescription":{"href":"https://srb.help/2001"},"message":"unexpected token \"end of file\"","relatedInformation":[]},{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":12}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `exampl` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}},"message":"Insert `extend T::Sig`"}]},{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":5}},"severity":1,"code":2003,"codeDescription":{"href":"https://srb.help/2003"},"message":"Hint: this \"def\" token might not be properly closed","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":0},"end":{"line":4,"character":3}}},"message":"Matching `end` found here but is not indented as far"}]}]}}

[2023-08-10 22:56:40.898] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":10,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[]}}

[2023-08-10 22:56:41.134] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":30},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  def example\n    \nend\n"}]}}

[2023-08-10 22:56:41.231] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:41.231] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:41.231] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:41.231] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:41.250] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 20
[2023-08-10 22:56:41.250] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":5,"character":3},"end":{"line":6,"character":0}},"severity":1,"code":2001,"codeDescription":{"href":"https://srb.help/2001"},"message":"unexpected token \"end of file\"","relatedInformation":[]},{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":13}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}},"message":"Insert `extend T::Sig`"}]},{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":5}},"severity":1,"code":2003,"codeDescription":{"href":"https://srb.help/2003"},"message":"Hint: this \"def\" token might not be properly closed","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":5,"character":0},"end":{"line":5,"character":3}}},"message":"Matching `end` found here but is not indented as far"}]}]}}

[2023-08-10 22:56:41.332] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":31},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  def example\n    e\nend\n"}]}}

[2023-08-10 22:56:41.332] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":11,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":4,"character":5},"context":{"triggerKind":1}}}

[2023-08-10 22:56:41.428] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:41.428] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:41.428] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:41.428] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:41.433] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 21
[2023-08-10 22:56:41.434] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `e` does not exist on `A`","relatedInformation":[]},{"range":{"start":{"line":5,"character":3},"end":{"line":6,"character":0}},"severity":1,"code":2001,"codeDescription":{"href":"https://srb.help/2001"},"message":"unexpected token \"end of file\"","relatedInformation":[]},{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":13}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig`","relatedInformation":[]},{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":5}},"severity":1,"code":2003,"codeDescription":{"href":"https://srb.help/2003"},"message":"Hint: this \"def\" token might not be properly closed","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":5,"character":0},"end":{"line":5,"character":3}}},"message":"Matching `end` found here but is not indented as far"}]}]}}

[2023-08-10 22:56:41.475] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":11}}

[2023-08-10 22:56:41.485] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":11,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[{"label":"else","kind":14,"detail":"(sorbet) Ruby keyword: else","documentation":"The unhandled condition in case, if and unless expressions.","sortText":"000000","insertTextFormat":1,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"else"}},{"label":"elsif","kind":15,"detail":"(sorbet) Snippet: elsif","documentation":{"kind":"markdown","value":"```ruby\nelsif ${1:expr}$0\n```\n\n---\n\nAn alternate condition for an if expression."},"sortText":"000001","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"elsif ${1:expr}$0"}},{"label":"end","kind":14,"detail":"(sorbet) Ruby keyword: end","documentation":"The end of a syntax block. Used by classes, modules, methods, exception handling and control expressions.","sortText":"000002","insertTextFormat":1,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"end"}},{"label":"ensure","kind":14,"detail":"(sorbet) Ruby keyword: ensure","documentation":"Starts a section of code that is always run when an exception is raised.","sortText":"000003","insertTextFormat":1,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"ensure"}},{"label":"enum","kind":15,"detail":"(sorbet) Snippet: enum","documentation":{"kind":"markdown","value":"```ruby\nclass ${1:EnumName} < T::Enum\n  enums do\n    $0\n  end\nend\n```\n\n---\n\nCreates an enum class"},"sortText":"000004","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"class ${1:EnumName} < T::Enum\n  enums do\n    $0\n  end\nend"}},{"label":"example","kind":2,"detail":"A#example","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.untyped)}\ndef example; end\n```"},"sortText":"000005","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"example${0}"}},{"label":"singleton_class","kind":2,"detail":"Object#singleton_class","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.untyped)}\ndef singleton_class; end\n```"},"sortText":"000006","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"singleton_class${0}"}},{"label":"enum_for","kind":2,"detail":"Kernel#enum_for","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef enum_for(method=…, *args); end\n```"},"sortText":"000007","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"enum_for${0}"}},{"label":"enum_for","kind":2,"detail":"Kernel#enum_for (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef enum_for (overload.1)(method=…, *args, &blk); end\n```"},"sortText":"000008","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"enum_for${0}"}},{"label":"eql?","kind":2,"detail":"Kernel#eql?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(other: BasicObject).returns(T::Boolean)}\ndef eql?(other); end\n```"},"sortText":"000009","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"eql?(${1:BasicObject})${0}"}},{"label":"eval","kind":2,"detail":"Kernel#eval","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: String,\n    arg1: T.nilable(Binding),\n    filename: String,\n    lineno: Integer\n  )\n  .returns(T.untyped)\nend\ndef eval(arg0, arg1=…, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates the Ruby expression(s) in *string*. If *binding* is given, which\nmust be a [`Binding`](https://docs.ruby-lang.org/en/2.7.0/Binding.html)\nobject, the evaluation is performed in its context. If the optional\n*filename* and *lineno* parameters are present, they will be used when\nreporting syntax errors.\n\n```ruby\ndef get_binding(str)\n  return binding\nend\nstr = \"hello\"\neval \"str + ' Fred'\"                      #=> \"hello Fred\"\neval \"str + ' Fred'\", get_binding(\"bye\")  #=> \"bye Fred\"\n```"},"sortText":"000010","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"eval(${1:String})${0}"}},{"label":"exec","kind":2,"detail":"Kernel#exec","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: String).returns(T.noreturn)}\ndef exec(*args); end\n```\n\n---\n\nReplaces the current process by running the given external *command*, which\ncan take one of the following forms:\n\n`exec(commandline)`\n:   command line string which is passed to the standard shell\n`exec(cmdname, arg1, ...)`\n:   command name and one or more arguments (no shell)\n`exec([cmdname, argv0], arg1, ...)`\n:   command name, [argv](0) and zero or more arguments (no shell)\n\n\nIn the first form, the string is taken as a command line that is subject to\nshell expansion before being executed.\n\nThe standard shell always means `\"/bin/sh\"` on Unix-like systems, otherwise,\n`ENV[\"RUBYSHELL\"]` or `ENV[\"COMSPEC\"]` on Windows and similar. The command\nis passed as an argument to the `\"-c\"` switch to the shell, except in the\ncase of `COMSPEC`.\n\nIf the string from the first form (`exec(\"command\")`) follows these simple\nrules:\n\n*   no meta characters\n*   not starting with shell reserved word or special built-in\n*   Ruby invokes the command directly without shell\n\n\nYou can force shell invocation by adding \";\" to the string (because \";\" is a\nmeta character).\n\nNote that this behavior is observable by pid obtained (return value of\nspawn() and\n[`IO#pid`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-pid) for\n[`IO.popen`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-popen)) is\nthe pid of the invoked command, not shell.\n\nIn the second form (`exec(\"command1\", \"arg1\", ...)`), the first is taken as\na command name and the rest are passed as parameters to command with no\nshell expansion.\n\nIn the third form (`exec([\"command\", \"argv0\"], \"arg1\", ...)`), starting a\ntwo-element array at the beginning of the command, the first element is the\ncommand to be executed, and the second argument is used as the `argv[0]`\nvalue, which may show up in process listings.\n\nIn order to execute the command, one of the `exec(2)` system calls are used,\nso the running command may inherit some of the environment of the original\nprogram (including open file descriptors).\n\nThis behavior is modified by the given `env` and `options` parameters. See\n::spawn for details.\n\nIf the command fails to execute (typically Errno::ENOENT when it was not\nfound) a\n[`SystemCallError`](https://docs.ruby-lang.org/en/2.7.0/SystemCallError.html)\nexception is raised.\n\nThis method modifies process attributes according to given `options` before\n`exec(2)` system call. See ::spawn for more details about the given\n`options`.\n\nThe modified attributes may be retained when `exec(2)` system call fails.\n\nFor example, hard resource limits are not restorable.\n\nConsider to create a child process using ::spawn or\n[`Kernel#system`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-system)\nif this is not acceptable.\n\n```ruby\nexec \"echo *\"       # echoes list of files in current directory\n# never get here\n\nexec \"echo\", \"*\"    # echoes an asterisk\n# never get here\n```"},"sortText":"000011","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"exec${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef exit; end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000012","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"exit${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit (overload.1)(status=…); end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000013","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"exit${0}"}},{"label":"exit!","kind":2,"detail":"Kernel#exit!","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit!(status=…); end\n```\n\n---\n\nExits the process immediately. No exit handlers are run. *status* is\nreturned to the underlying system as the exit status.\n\n```ruby\nProcess.exit!(true)\n```"},"sortText":"000014","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"exit!${0}"}},{"label":"extend","kind":2,"detail":"Kernel#extend","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(A)}\ndef extend(*arg0); end\n```"},"sortText":"000015","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"extend${0}"}},{"label":"BigDecimal","kind":2,"detail":"Kernel#BigDecimal","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    initial: T.any(Integer, Float, Rational, BigDecimal, String),\n    digits: Integer,\n    exception: T::Boolean\n  )\n  .returns(BigDecimal)\nend\ndef BigDecimal(initial, digits=…, exception: …); end\n```\n\n---\n\n```\nReturns the \\BigDecimal converted from +value+\nwith a precision of +ndigits+ decimal digits.\n\nWhen +ndigits+ is less than the number of significant digits\nin the value, the result is rounded to that number of digits,\naccording to the current rounding mode; see BigDecimal.mode.\n```\n\nReturns `value` converted to a\n[`BigDecimal`](https://docs.ruby-lang.org/en/2.7.0/BigDecimal.html),\ndepending on the type of `value`:\n\n*   [`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html),\n    [`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html),\n    [`Rational`](https://docs.ruby-lang.org/en/2.7.0/Rational.html),\n    [`Complex`](https://docs.ruby-lang.org/en/2.7.0/Complex.html), or\n    BigDecimal: converted directly:\n\n```ruby\n# Integer, Complex, or BigDecimal value does not require ndigits; ignored if given.\nBigDecimal(2)                     # => 0.2e1\nBigDecimal(Complex(2, 0))         # => 0.2e1\nBigDecimal(BigDecimal(2))         # => 0.2e1\n# Float or Rational value requires ndigits.\nBigDecimal(2.0, 0)                # => 0.2e1\nBigDecimal(Rational(2, 1), 0)     # => 0.2e1\n```\n\n*   String: converted by parsing if it contains an integer or floating-point\n    literal; leading and trailing whitespace is ignored:\n\n```ruby\n# String does not require ndigits; ignored if given.\nBigDecimal('2')     # => 0.2e1\nBigDecimal('2.0')   # => 0.2e1\nBigDecimal('0.2e1') # => 0.2e1\nBigDecimal(' 2.0 ') # => 0.2e1\n```\n\n*   Other type that responds to method `:to_str`: first converted to a\n    string, then converted to a\n    [`BigDecimal`](https://docs.ruby-lang.org/en/2.7.0/BigDecimal.html), as\n    above.\n\n*   Other type:\n\n    *   Raises an exception if keyword argument `exception` is `true`.\n    *   Returns `nil` if keyword argument `exception` is `true`.\n\n\n\nRaises an exception if `value` evaluates to a\n[`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html) and `digits` is\nlarger than Float::DIG + 1."},"sortText":"000016","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"BigDecimal(${1:T.any(Integer, Float, Rational, BigDecimal, String)})${0}"}},{"label":"Complex","kind":2,"detail":"Kernel#Complex","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: T.any(Numeric, String),\n    y: T.any(Numeric, String),\n    exception: T::Boolean\n  )\n  .returns(Complex)\nend\ndef Complex(x, y=…, exception: …); end\n```\n\n---\n\nReturns x+i\\*y;\n\n```ruby\nComplex(1, 2)    #=> (1+2i)\nComplex('1+2i')  #=> (1+2i)\nComplex(nil)     #=> TypeError\nComplex(1, nil)  #=> TypeError\n\nComplex(1, nil, exception: false)  #=> nil\nComplex('1+2', exception: false)   #=> nil\n```\n\nSyntax of string form:\n\n```\nstring form = extra spaces , complex , extra spaces ;\ncomplex = real part | [ sign ] , imaginary part\n        | real part , sign , imaginary part\n        | rational , \"@\" , rational ;\nreal part = rational ;\nimaginary part = imaginary unit | unsigned rational , imaginary unit ;\nrational = [ sign ] , unsigned rational ;\nunsigned rational = numerator | numerator , \"/\" , denominator ;\nnumerator = integer part | fractional part | integer part , fractional part ;\ndenominator = digits ;\ninteger part = digits ;\nfractional part = \".\" , digits , [ ( \"e\" | \"E\" ) , [ sign ] , digits ] ;\nimaginary unit = \"i\" | \"I\" | \"j\" | \"J\" ;\nsign = \"-\" | \"+\" ;\ndigits = digit , { digit | \"_\" , digit };\ndigit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\nextra spaces = ? \\s* ? ;\n```\n\nSee\n[`String#to_c`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_c)."},"sortText":"000017","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"Complex(${1:T.any(Numeric, String)})${0}"}},{"label":"Integer","kind":2,"detail":"Kernel#Integer","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg: T.any(Numeric, String),\n    base: Integer,\n    exception: T::Boolean\n  )\n  .returns(Integer)\nend\ndef Integer(arg, base=…, exception: …); end\n```\n\n---\n\nConverts *arg* to an\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html).\n[`Numeric`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html) types are\nconverted directly (with floating point numbers being truncated). *base* (0,\nor between 2 and 36) is a base for integer string representation. If *arg*\nis a [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html), when\n*base* is omitted or equals zero, radix indicators (`0`, `0b`, and `0x`) are\nhonored. In any case, strings should consist only of one or more digits,\nexcept for that a sign, one underscore between two digits, and\nleading/trailing spaces are optional. This behavior is different from that\nof\n[`String#to_i`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_i).\nNon string values will be converted by first trying `to_int`, then `to_i`.\n\nPassing `nil` raises a\n[`TypeError`](https://docs.ruby-lang.org/en/2.7.0/TypeError.html), while\npassing a [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) that\ndoes not conform with numeric representation raises an\n[`ArgumentError`](https://docs.ruby-lang.org/en/2.7.0/ArgumentError.html).\nThis behavior can be altered by passing `exception: false`, in this case a\nnot convertible value will return `nil`.\n\n```ruby\nInteger(123.999)    #=> 123\nInteger(\"0x1a\")     #=> 26\nInteger(Time.new)   #=> 1204973019\nInteger(\"0930\", 10) #=> 930\nInteger(\"111\", 2)   #=> 7\nInteger(\" +1_0 \")   #=> 10\nInteger(nil)        #=> TypeError: can't convert nil into Integer\nInteger(\"x\")        #=> ArgumentError: invalid value for Integer(): \"x\"\n\nInteger(\"x\", exception: false)        #=> nil\n```"},"sortText":"000018","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"Integer(${1:T.any(Numeric, String)})${0}"}},{"label":"Pathname","kind":2,"detail":"Kernel#Pathname","documentation":{"kind":"markdown","value":"```ruby\nsig {params(path: T.any(String, Pathname)).returns(Pathname)}\ndef Pathname(path); end\n```\n\n---\n\nCreates a new\n[`Pathname`](https://docs.ruby-lang.org/en/2.7.0/Pathname.html) object from\nthe given string, `path`, and returns pathname object.\n\nIn order to use this constructor, you must first require the\n[`Pathname`](https://docs.ruby-lang.org/en/2.7.0/Pathname.html) standard\nlibrary extension.\n\n```ruby\nrequire 'pathname'\nPathname(\"/home/zzak\")\n#=> #<Pathname:/home/zzak>\n```\n\nSee also\n[`Pathname::new`](https://docs.ruby-lang.org/en/2.7.0/Pathname.html#method-c-new)\nfor more information."},"sortText":"000019","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"Pathname(${1:T.any(String, Pathname)})${0}"}},{"label":"__callee__","kind":2,"detail":"Kernel#__callee__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(Symbol))}\ndef __callee__; end\n```\n\n---\n\nReturns the called name of the current method as a\n[`Symbol`](https://docs.ruby-lang.org/en/2.7.0/Symbol.html). If called\noutside of a method, it returns `nil`."},"sortText":"000020","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"__callee__${0}"}},{"label":"__method__","kind":2,"detail":"Kernel#__method__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(Symbol))}\ndef __method__; end\n```\n\n---\n\nReturns the name at the definition of the current method as a\n[`Symbol`](https://docs.ruby-lang.org/en/2.7.0/Symbol.html). If called\noutside of a method, it returns `nil`."},"sortText":"000021","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"__method__${0}"}},{"label":"at_exit","kind":2,"detail":"Kernel#at_exit","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.proc.returns(BasicObject)).returns(Proc)}\ndef at_exit(&blk); end\n```\n\n---\n\nConverts *block* to a `Proc` object (and therefore binds it at the point of\ncall) and registers it for execution when the program exits. If multiple\nhandlers are registered, they are executed in reverse order of registration.\n\n```ruby\ndef do_at_exit(str1)\n  at_exit { print str1 }\nend\nat_exit { puts \"cruel world\" }\ndo_at_exit(\"goodbye \")\nexit\n```\n\n*produces:*\n\n```ruby\ngoodbye cruel world\n```"},"sortText":"000022","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"at_exit do\n  ${1}\nend${0}"}},{"label":"block_given?","kind":2,"detail":"Kernel#block_given?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef block_given?; end\n```\n\n---\n\nReturns `true` if `yield` would execute a block in the current context. The\n`iterator?` form is mildly deprecated.\n\n```ruby\ndef try\n  if block_given?\n    yield\n  else\n    \"no block\"\n  end\nend\ntry                  #=> \"no block\"\ntry { \"hello\" }      #=> \"hello\"\ntry do \"hello\" end   #=> \"hello\"\n```"},"sortText":"000023","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"block_given?${0}"}},{"label":"caller","kind":2,"detail":"Kernel#caller","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: Integer,\n    length: Integer\n  )\n  .returns(T.nilable(T::Array[String]))\nend\ndef caller(start_or_range=…, length=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing strings in the\nform `file:line` or `file:line: in `method'`.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.\n\n```ruby\ndef a(skip)\n  caller(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\nc(0)   #=> [\"prog:2:in `a'\", \"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:10:in `<main>'\"]\nc(1)   #=> [\"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:11:in `<main>'\"]\nc(2)   #=> [\"prog:8:in `c'\", \"prog:12:in `<main>'\"]\nc(3)   #=> [\"prog:13:in `<main>'\"]\nc(4)   #=> []\nc(5)   #=> nil\n```"},"sortText":"000024","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"caller${0}"}},{"label":"caller","kind":2,"detail":"Kernel#caller (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: T::Range[Integer]\n  )\n  .returns(T.nilable(T::Array[String]))\nend\ndef caller (overload.1)(start_or_range=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing strings in the\nform `file:line` or `file:line: in `method'`.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.\n\n```ruby\ndef a(skip)\n  caller(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\nc(0)   #=> [\"prog:2:in `a'\", \"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:10:in `<main>'\"]\nc(1)   #=> [\"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:11:in `<main>'\"]\nc(2)   #=> [\"prog:8:in `c'\", \"prog:12:in `<main>'\"]\nc(3)   #=> [\"prog:13:in `<main>'\"]\nc(4)   #=> []\nc(5)   #=> nil\n```"},"sortText":"000025","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"caller${0}"}},{"label":"caller","kind":2,"detail":"Kernel#caller (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[String])}\ndef caller (overload.2); end\n```\n\n---\n\nReturns the current execution stack---an array containing strings in the\nform `file:line` or `file:line: in `method'`.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.\n\n```ruby\ndef a(skip)\n  caller(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\nc(0)   #=> [\"prog:2:in `a'\", \"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:10:in `<main>'\"]\nc(1)   #=> [\"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:11:in `<main>'\"]\nc(2)   #=> [\"prog:8:in `c'\", \"prog:12:in `<main>'\"]\nc(3)   #=> [\"prog:13:in `<main>'\"]\nc(4)   #=> []\nc(5)   #=> nil\n```"},"sortText":"000026","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"caller${0}"}},{"label":"caller_locations","kind":2,"detail":"Kernel#caller_locations","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: Integer,\n    length: Integer\n  )\n  .returns(T.nilable(T::Array[Thread::Backtrace::Location]))\nend\ndef caller_locations(start_or_range=…, length=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing backtrace location\nobjects.\n\nSee\n[`Thread::Backtrace::Location`](https://docs.ruby-lang.org/en/2.7.0/Thread/Backtrace/Location.html)\nfor more information.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range."},"sortText":"000027","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"caller_locations${0}"}},{"label":"caller_locations","kind":2,"detail":"Kernel#caller_locations (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: T::Range[Integer]\n  )\n  .returns(T.nilable(T::Array[Thread::Backtrace::Location]))\nend\ndef caller_locations (overload.1)(start_or_range=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing backtrace location\nobjects.\n\nSee\n[`Thread::Backtrace::Location`](https://docs.ruby-lang.org/en/2.7.0/Thread/Backtrace/Location.html)\nfor more information.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range."},"sortText":"000028","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"caller_locations${0}"}},{"label":"clone","kind":2,"detail":"Kernel#clone","documentation":{"kind":"markdown","value":"```ruby\nsig {params(freeze: T.nilable(T::Boolean)).returns(A)}\ndef clone(freeze: …); end\n```\n\n---\n\nProduces a shallow copy of *obj*---the instance variables of *obj* are\ncopied, but not the objects they reference.\n[`clone`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-clone)\ncopies the frozen value state of *obj*, unless the `:freeze` keyword\nargument is given with a false or true value. See also the discussion under\n[`Object#dup`](https://docs.ruby-lang.org/en/2.7.0/Object.html#method-i-dup).\n\n```ruby\nclass Klass\n   attr_accessor :str\nend\ns1 = Klass.new      #=> #<Klass:0x401b3a38>\ns1.str = \"Hello\"    #=> \"Hello\"\ns2 = s1.clone       #=> #<Klass:0x401b3998 @str=\"Hello\">\ns2.str[1,4] = \"i\"   #=> \"i\"\ns1.inspect          #=> \"#<Klass:0x401b3a38 @str=\\\"Hi\\\">\"\ns2.inspect          #=> \"#<Klass:0x401b3998 @str=\\\"Hi\\\">\"\n```\n\nThis method may have class-specific behavior. If so, that behavior will be\ndocumented under the #`initialize_copy` method of the class."},"sortText":"000029","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"clone${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    symbol: T.any(Symbol, String),\n    method: T.any(Proc, Method, UnboundMethod)\n  )\n  .returns(Symbol)\nend\ndef define_singleton_method(symbol, method=…); end\n```"},"sortText":"000030","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"define_singleton_method(${1:T.any(Symbol, String)})${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(symbol: T.any(Symbol, String), blk: T.untyped).returns(Symbol)}\ndef define_singleton_method (overload.1)(symbol, &blk); end\n```"},"sortText":"000031","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"define_singleton_method(${1:T.any(Symbol, String)})${0}"}},{"label":"freeze","kind":2,"detail":"Kernel#freeze","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(A)}\ndef freeze; end\n```"},"sortText":"000032","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"freeze${0}"}},{"label":"frozen?","kind":2,"detail":"Kernel#frozen?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef frozen?; end\n```\n\n---\n\nReturns the freeze status of *obj*.\n\n```ruby\na = [ \"a\", \"b\", \"c\" ]\na.freeze    #=> [\"a\", \"b\", \"c\"]\na.frozen?   #=> true\n```"},"sortText":"000033","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"frozen?${0}"}},{"label":"gem","kind":2,"detail":"Kernel#gem","documentation":{"kind":"markdown","value":"```ruby\nsig {params(dep: T.untyped, reqs: T.untyped).returns(T.untyped)}\ndef gem(dep, *reqs); end\n```\n\n---\n\nUse\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nto activate a specific version of `gem_name`.\n\n`requirements` is a list of version requirements that the specified gem must\nmatch, most commonly \"= example.version.number\". See\n[`Gem::Requirement`](https://docs.ruby-lang.org/en/2.7.0/Gem/Requirement.html)\nfor how to specify a version requirement.\n\nIf you will be activating the latest version of a gem, there is no need to\ncall\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem),\n[`Kernel#require`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-require)\nwill do the right thing for you.\n\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nreturns true if the gem was activated, otherwise false. If the gem could not\nbe found, didn't match the version requirements, or a different version was\nalready activated, an exception will be raised.\n\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nshould be called **before** any require statements (otherwise RubyGems may\nload a conflicting library version).\n\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nonly loads prerelease versions when prerelease `requirements` are given:\n\n```ruby\ngem 'rake', '>= 1.1.a', '< 2'\n```\n\nIn older RubyGems versions, the environment variable GEM\\_SKIP could be used\nto skip activation of specified gems, for example to test out changes that\nhaven't been installed yet. Now RubyGems defers to -I and the RUBYLIB\nenvironment variable to skip activation of a gem.\n\nExample:\n\n```\nGEM_SKIP=libA:libB ruby -I../libA -I../libB ./mycode.rb\n```"},"sortText":"000034","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"gem(${1})${0}"}},{"label":"gets","kind":2,"detail":"Kernel#gets","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(String)}\ndef gets(arg0=…, arg1=…); end\n```\n\n---\n\nReturns (and assigns to `$_`) the next line from the list of files in `ARGV`\n(or `$*`), or from standard input if no files are present on the command\nline. Returns `nil` at end of file. The optional argument specifies the\nrecord separator. The separator is included with the contents of each\nrecord. A separator of `nil` reads the entire contents, and a zero-length\nseparator reads the input one paragraph at a time, where paragraphs are\ndivided by two consecutive newlines. If the first argument is an integer, or\noptional second argument is given, the returning string would not be longer\nthan the given value in bytes. If multiple filenames are present in `ARGV`,\n`gets(nil)` will read the contents one file at a time.\n\n```ruby\nARGV << \"testfile\"\nprint while gets\n```\n\n*produces:*\n\n```ruby\nThis is line one\nThis is line two\nThis is line three\nAnd so on...\n```\n\nThe style of programming using `$_` as an implicit parameter is gradually\nlosing favor in the Ruby community."},"sortText":"000035","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"gets${0}"}},{"label":"global_variables","kind":2,"detail":"Kernel#global_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef global_variables; end\n```\n\n---\n\nReturns an array of the names of global variables. This includes special\nregexp global variables such as `$~` and `$+`, but does not include the\nnumbered regexp global variables (`$1`, `$2`, etc.).\n\n```ruby\nglobal_variables.grep /std/   #=> [:$stdin, :$stdout, :$stderr]\n```"},"sortText":"000036","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"global_variables${0}"}},{"label":"initialize_copy","kind":2,"detail":"Kernel#initialize_copy","documentation":{"kind":"markdown","value":"```ruby\nsig {params(object: A).returns(A)}\ndef initialize_copy(object); end\n```"},"sortText":"000037","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"initialize_copy(${1:A})${0}"}},{"label":"inspect","kind":2,"detail":"Kernel#inspect","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(String)}\ndef inspect; end\n```"},"sortText":"000038","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"inspect${0}"}},{"label":"instance_of?","kind":2,"detail":"Kernel#instance_of?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T::Class[T.anything]).returns(T::Boolean)}\ndef instance_of?(arg0); end\n```"},"sortText":"000039","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"instance_of?(${1:T::Class[T.anything]})${0}"}},{"label":"instance_variable_defined?","kind":2,"detail":"Kernel#instance_variable_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef instance_variable_defined?(arg0); end\n```"},"sortText":"000040","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"instance_variable_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"instance_variable_get","kind":2,"detail":"Kernel#instance_variable_get","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.untyped)}\ndef instance_variable_get(arg0); end\n```"},"sortText":"000041","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"instance_variable_get(${1:T.any(Symbol, String)})${0}"}},{"label":"instance_variable_set","kind":2,"detail":"Kernel#instance_variable_set","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String), arg1: BasicObject).returns(T.untyped)}\ndef instance_variable_set(arg0, arg1); end\n```"},"sortText":"000042","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"instance_variable_set(${1:T.any(Symbol, String)}, ${2:BasicObject})${0}"}},{"label":"instance_variables","kind":2,"detail":"Kernel#instance_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef instance_variables; end\n```"},"sortText":"000043","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"instance_variables${0}"}},{"label":"iterator?","kind":2,"detail":"Kernel#iterator?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef iterator?; end\n```\n\n---\n\nDeprecated. Use block\\_given? instead."},"sortText":"000044","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"iterator?${0}"}},{"label":"itself","kind":2,"detail":"Kernel#itself","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(A)}\ndef itself; end\n```\n\n---\n\nReturns the receiver `obj`.\n\n```ruby\nobj = Object.new; obj.itself.object_id == o.object_id # => true\n```"},"sortText":"000045","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"itself${0}"}},{"label":"local_variables","kind":2,"detail":"Kernel#local_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef local_variables; end\n```\n\n---\n\nReturns the names of the current local variables.\n\n```ruby\nfred = 1\nfor i in 1..10\n   # ...\nend\nlocal_variables   #=> [:fred, :i]\n```"},"sortText":"000046","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"local_variables${0}"}},{"label":"method","kind":2,"detail":"Kernel#method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef method(arg0); end\n```"},"sortText":"000047","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"method(${1:Symbol})${0}"}},{"label":"methods","kind":2,"detail":"Kernel#methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(regular: T::Boolean).returns(T::Array[Symbol])}\ndef methods(regular=…); end\n```"},"sortText":"000048","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"methods${0}"}},{"label":"object_id","kind":2,"detail":"Kernel#object_id","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef object_id; end\n```\n\n---\n\nReturns an integer identifier for `obj`.\n\nThe same number will be returned on all calls to `object_id` for a given\nobject, and no two active objects will share an id.\n\nNote: that some objects of builtin classes are reused for optimization. This\nis the case for immediate values and frozen string literals.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_id\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`object_id`.\n\nImmediate values are not passed by reference but are passed by value: `nil`,\n`true`, `false`, Fixnums, Symbols, and some Floats.\n\n```ruby\nObject.new.object_id  == Object.new.object_id  # => false\n(21 * 2).object_id    == (21 * 2).object_id    # => true\n\"hello\".object_id     == \"hello\".object_id     # => false\n\"hi\".freeze.object_id == \"hi\".freeze.object_id # => true\n```"},"sortText":"000049","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"object_id${0}"}},{"label":"open","kind":2,"detail":"Kernel#open","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    path: String,\n    mode: T.any(Integer, String),\n    perm: T.nilable(Integer),\n    opt: T.nilable(T::Hash[Symbol, T.untyped])\n  )\n  .returns(T.nilable(IO))\nend\ndef open(path, mode=…, perm=…, opt=…); end\n```\n\n---\n\nCreates an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object\nconnected to the given stream, file, or subprocess.\n\nIf `path` does not start with a pipe character (`|`), treat it as the name\nof a file to open using the specified mode (defaulting to \"r\").\n\nThe `mode` is either a string or an integer. If it is an integer, it must be\nbitwise-or of open(2) flags, such as File::RDWR or File::EXCL. If it is a\nstring, it is either \"fmode\", \"fmode:ext\\_enc\", or\n\"fmode:ext\\_enc:int\\_enc\".\n\nSee the documentation of\n[`IO.new`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-new) for\nfull documentation of the `mode` string directives.\n\nIf a file is being created, its initial permissions may be set using the\n`perm` parameter. See\n[`File.new`](https://docs.ruby-lang.org/en/2.7.0/File.html#method-c-new) and\nthe open(2) and chmod(2) man pages for a description of permissions.\n\nIf a block is specified, it will be invoked with the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object as a parameter,\nand the [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) will be\nautomatically closed when the block terminates. The call returns the value\nof the block.\n\nIf `path` starts with a pipe character (`\"|\"`), a subprocess is created,\nconnected to the caller by a pair of pipes. The returned\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object may be used to\nwrite to the standard input and read from the standard output of this\nsubprocess.\n\nIf the command following the pipe is a single minus sign (`\"|-\"`), Ruby\nforks, and this subprocess is connected to the parent. If the command is not\n`\"-\"`, the subprocess runs the command. Note that the command may be\nprocessed by shell if it contains shell metacharacters.\n\nWhen the subprocess is Ruby (opened via `\"|-\"`), the `open` call returns\n`nil`. If a block is associated with the open call, that block will run\ntwice --- once in the parent and once in the child.\n\nThe block parameter will be an\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object in the parent and\n`nil` in the child. The parent's `IO` object will be connected to the\nchild's $stdin and $stdout. The subprocess will be terminated at the end of\nthe block.\n\n### Examples\n\nReading from \"testfile\":\n\n```ruby\nopen(\"testfile\") do |f|\n  print f.gets\nend\n```\n\nProduces:\n\n```ruby\nThis is line one\n```\n\nOpen a subprocess and read its output:\n\n```ruby\ncmd = open(\"|date\")\nprint cmd.gets\ncmd.close\n```\n\nProduces:\n\n```\nWed Apr  9 08:56:31 CDT 2003\n```\n\nOpen a subprocess running the same Ruby program:\n\n```ruby\nf = open(\"|-\", \"w+\")\nif f.nil?\n  puts \"in Child\"\n  exit\nelse\n  puts \"Got: #{f.gets}\"\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```\n\nOpen a subprocess using a block to receive the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object:\n\n```ruby\nopen \"|-\" do |f|\n  if f then\n    # parent process\n    puts \"Got: #{f.gets}\"\n  else\n    # child process\n    puts \"in Child\"\n  end\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```"},"sortText":"000050","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"open(${1:String})${0}"}},{"label":"open","kind":2,"detail":"Kernel#open (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    path: String,\n    mode: T.any(Integer, String),\n    perm: T.nilable(Integer),\n    opt: T.nilable(T::Hash[Symbol, T.untyped]),\n    blk: T.proc.params(arg0: IO).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef open (overload.1)(path, mode=…, perm=…, opt=…, &blk); end\n```\n\n---\n\nCreates an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object\nconnected to the given stream, file, or subprocess.\n\nIf `path` does not start with a pipe character (`|`), treat it as the name\nof a file to open using the specified mode (defaulting to \"r\").\n\nThe `mode` is either a string or an integer. If it is an integer, it must be\nbitwise-or of open(2) flags, such as File::RDWR or File::EXCL. If it is a\nstring, it is either \"fmode\", \"fmode:ext\\_enc\", or\n\"fmode:ext\\_enc:int\\_enc\".\n\nSee the documentation of\n[`IO.new`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-new) for\nfull documentation of the `mode` string directives.\n\nIf a file is being created, its initial permissions may be set using the\n`perm` parameter. See\n[`File.new`](https://docs.ruby-lang.org/en/2.7.0/File.html#method-c-new) and\nthe open(2) and chmod(2) man pages for a description of permissions.\n\nIf a block is specified, it will be invoked with the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object as a parameter,\nand the [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) will be\nautomatically closed when the block terminates. The call returns the value\nof the block.\n\nIf `path` starts with a pipe character (`\"|\"`), a subprocess is created,\nconnected to the caller by a pair of pipes. The returned\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object may be used to\nwrite to the standard input and read from the standard output of this\nsubprocess.\n\nIf the command following the pipe is a single minus sign (`\"|-\"`), Ruby\nforks, and this subprocess is connected to the parent. If the command is not\n`\"-\"`, the subprocess runs the command. Note that the command may be\nprocessed by shell if it contains shell metacharacters.\n\nWhen the subprocess is Ruby (opened via `\"|-\"`), the `open` call returns\n`nil`. If a block is associated with the open call, that block will run\ntwice --- once in the parent and once in the child.\n\nThe block parameter will be an\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object in the parent and\n`nil` in the child. The parent's `IO` object will be connected to the\nchild's $stdin and $stdout. The subprocess will be terminated at the end of\nthe block.\n\n### Examples\n\nReading from \"testfile\":\n\n```ruby\nopen(\"testfile\") do |f|\n  print f.gets\nend\n```\n\nProduces:\n\n```ruby\nThis is line one\n```\n\nOpen a subprocess and read its output:\n\n```ruby\ncmd = open(\"|date\")\nprint cmd.gets\ncmd.close\n```\n\nProduces:\n\n```\nWed Apr  9 08:56:31 CDT 2003\n```\n\nOpen a subprocess running the same Ruby program:\n\n```ruby\nf = open(\"|-\", \"w+\")\nif f.nil?\n  puts \"in Child\"\n  exit\nelse\n  puts \"Got: #{f.gets}\"\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```\n\nOpen a subprocess using a block to receive the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object:\n\n```ruby\nopen \"|-\" do |f|\n  if f then\n    # parent process\n    puts \"Got: #{f.gets}\"\n  else\n    # child process\n    puts \"in Child\"\n  end\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```"},"sortText":"000051","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"open(${1:String}) do |${2:IO}|\n  ${3}\nend${0}"}},{"label":"private_methods","kind":2,"detail":"Kernel#private_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef private_methods(all=…); end\n```"},"sortText":"000052","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"private_methods${0}"}},{"label":"protected_methods","kind":2,"detail":"Kernel#protected_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef protected_methods(all=…); end\n```"},"sortText":"000053","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"protected_methods${0}"}},{"label":"public_method","kind":2,"detail":"Kernel#public_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef public_method(arg0); end\n```"},"sortText":"000054","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"public_method(${1:Symbol})${0}"}},{"label":"public_methods","kind":2,"detail":"Kernel#public_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef public_methods(all=…); end\n```"},"sortText":"000055","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"public_methods${0}"}},{"label":"public_send","kind":2,"detail":"Kernel#public_send","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef public_send(arg0, *args, &blk); end\n```"},"sortText":"000056","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"public_send(${1:T.any(Symbol, String)})${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef raise; end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000057","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"raise${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Class[T.anything], Exception, String)\n  )\n  .returns(T.noreturn)\nend\ndef raise (overload.1)(arg0=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000058","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"raise${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Class[T.anything], Exception),\n    arg1: T.untyped,\n    arg2: T.nilable(T::Array[String])\n  )\n  .returns(T.noreturn)\nend\ndef raise (overload.2)(arg0=…, arg1=…, arg2=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000059","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"raise${0}"}},{"label":"readline","kind":2,"detail":"Kernel#readline","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(String)}\ndef readline(arg0=…, arg1=…); end\n```\n\n---\n\nEquivalent to Kernel::gets, except `readline` raises `EOFError` at end of\nfile."},"sortText":"000060","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"readline${0}"}},{"label":"readlines","kind":2,"detail":"Kernel#readlines","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(T::Array[String])}\ndef readlines(arg0=…, arg1=…); end\n```\n\n---\n\nReturns an array containing the lines returned by calling `Kernel.gets(sep)`\nuntil the end of file."},"sortText":"000061","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"readlines${0}"}},{"label":"remove_instance_variable","kind":2,"detail":"Kernel#remove_instance_variable","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(T.untyped)}\ndef remove_instance_variable(arg0); end\n```"},"sortText":"000062","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"remove_instance_variable(${1:Symbol})${0}"}},{"label":"require","kind":2,"detail":"Kernel#require","documentation":{"kind":"markdown","value":"```ruby\nsig {params(path: String).returns(T::Boolean)}\ndef require(path); end\n```\n\n---\n\nLoads the given `name`, returning `true` if successful and `false` if the\nfeature is already loaded.\n\nIf the filename does not resolve to an absolute path, it will be searched\nfor in the directories listed in `$LOAD_PATH` (`$:`).\n\nIf the filename has the extension \".rb\", it is loaded as a source file; if\nthe extension is \".so\", \".o\", or \".dll\", or the default shared library\nextension on the current platform, Ruby loads the shared library as a Ruby\nextension. Otherwise, Ruby tries adding \".rb\", \".so\", and so on to the name\nuntil found. If the file named cannot be found, a\n[`LoadError`](https://docs.ruby-lang.org/en/2.6.0/LoadError.html) will be\nraised.\n\nFor Ruby extensions the filename given may use any shared library extension.\nFor example, on Linux the socket extension is \"socket.so\" and `require\n'socket.dll'` will load the socket extension.\n\nThe absolute path of the loaded file is added to `$LOADED_FEATURES` (`$\"`).\nA file will not be loaded again if its path already appears in `$\"`. For\nexample, `require 'a'; require './a'` will not load `a.rb` again.\n\n```ruby\nrequire \"my-library.rb\"\nrequire \"db-driver\"\n```\n\nAny constants or globals within the loaded source file will be available in\nthe calling program's global namespace. However, local variables will not be\npropagated to the loading environment.\n\nWhen RubyGems is required,\n[`#require`](https://docs.ruby-lang.org/en/2.6.0/Kernel.html#method-i-require)\nis replaced with our own which is capable of loading gems on demand.\n\nWhen you call `require 'x'`, this is what happens:\n*   If the file can be loaded from the existing Ruby loadpath, it is.\n*   Otherwise, installed gems are searched for a file that matches. If it's\n    found in gem 'y', that gem is activated (added to the loadpath).\n\n\nThe normal `require` functionality of returning false if that file has\nalready been loaded is preserved.\n\nAlso aliased as:\n[`gem_original_require`](https://docs.ruby-lang.org/en/2.6.0/Kernel.html#method-i-gem_original_require)"},"sortText":"000063","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"require(${1:String})${0}"}},{"label":"require_relative","kind":2,"detail":"Kernel#require_relative","documentation":{"kind":"markdown","value":"```ruby\nsig {params(feature: T.any(String, Pathname)).returns(T::Boolean)}\ndef require_relative(feature); end\n```\n\n---\n\nRuby tries to load the library named *string* relative to the requiring\nfile's path. If the file's path cannot be determined a\n[`LoadError`](https://docs.ruby-lang.org/en/2.7.0/LoadError.html) is raised.\nIf a file is loaded `true` is returned and false otherwise."},"sortText":"000064","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"require_relative(${1:T.any(String, Pathname)})${0}"}},{"label":"respond_to?","kind":2,"detail":"Kernel#respond_to?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    include_all: T.untyped\n  )\n  .returns(T::Boolean)\nend\ndef respond_to?(arg0, include_all=…); end\n```"},"sortText":"000065","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"respond_to?(${1:T.any(String, Symbol)})${0}"}},{"label":"select","kind":2,"detail":"Kernel#select","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    read_array: T.nilable(T::Array[IO]),\n    write_array: T.nilable(T::Array[IO]),\n    error_array: T.nilable(T::Array[IO]),\n    timeout: T.nilable(T.any(Integer, Float))\n  )\n  .returns(T.nilable(T::Array[T::Array[IO]]))\nend\ndef select(read_array, write_array=…, error_array=…, timeout=…); end\n```\n\n---\n\nCalls select(2) system call. It monitors given arrays of\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects, waits until one\nor more of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects are\nready for reading, are ready for writing, and have pending exceptions\nrespectively, and returns an array that contains arrays of those\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects. It will return\n`nil` if optional *timeout* value is given and no\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object is ready in\n*timeout* seconds.\n\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\npeeks the buffer of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html)\nobjects for testing readability. If the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) buffer is not empty,\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nimmediately notifies readability. This \"peek\" only happens for\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects. It does not\nhappen for IO-like objects such as\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\n\nThe best way to use\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis invoking it after nonblocking methods such as read\\_nonblock,\nwrite\\_nonblock, etc. The methods raise an exception which is extended by\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nor\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html).\nThe modules notify how the caller should wait with\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\nIf\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nis raised, the caller should wait for reading. If\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html)\nis raised, the caller should wait for writing.\n\nSo, blocking read (readpartial) can be emulated using read\\_nonblock and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nas follows:\n\n```ruby\nbegin\n  result = io_like.read_nonblock(maxlen)\nrescue IO::WaitReadable\n  IO.select([io_like])\n  retry\nrescue IO::WaitWritable\n  IO.select(nil, [io_like])\n  retry\nend\n```\n\nEspecially, the combination of nonblocking methods and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis preferred for [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) like\nobjects such as\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\nIt has to\\_io method to return underlying\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object.\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ncalls to\\_io to obtain the file descriptor to wait.\n\nThis means that readability notified by\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ndoesn't mean readability from\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\nobject.\n\nThe most likely situation is that\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\nbuffers some data.\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ndoesn't see the buffer. So\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ncan block when\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\ndoesn't block.\n\nHowever, several more complicated situations exist.\n\nSSL is a protocol which is sequence of records. The record consists of\nmultiple bytes. So, the remote side of SSL sends a partial record,\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nnotifies readability but\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\ncannot decrypt a byte and\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\nwill block.\n\nAlso, the remote side can request SSL renegotiation which forces the local\nSSL engine to write some data. This means\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\nmay invoke write system call and it can block. In such a situation,\n[`OpenSSL::SSL::SSLSocket#read_nonblock`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-read_nonblock)\nraises\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html)\ninstead of blocking. So, the caller should wait for ready for writability as\nabove example.\n\nThe combination of nonblocking methods and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis also useful for streams such as tty, pipe socket socket when multiple\nprocesses read from a stream.\n\nFinally, Linux kernel developers don't guarantee that readability of\nselect(2) means readability of following read(2) even for a single process.\nSee select(2) manual on GNU/Linux system.\n\nInvoking\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nbefore\n[`IO#readpartial`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-readpartial)\nworks well as usual. However it is not the best way to use\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\n\nThe writability notified by select(2) doesn't show how many bytes are\nwritable.\n[`IO#write`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-write)\nmethod blocks until given whole string is written. So, `IO#write(two or more\nbytes)` can block after writability is notified by\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\n[`IO#write_nonblock`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-write_nonblock)\nis required to avoid the blocking.\n\nBlocking write (write) can be emulated using write\\_nonblock and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nas follows:\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nshould also be rescued for SSL renegotiation in\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\n\n```ruby\nwhile 0 < string.bytesize\n  begin\n    written = io_like.write_nonblock(string)\n  rescue IO::WaitReadable\n    IO.select([io_like])\n    retry\n  rescue IO::WaitWritable\n    IO.select(nil, [io_like])\n    retry\n  end\n  string = string.byteslice(written..-1)\nend\n```\n\n### Parameters\nread\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait until ready for read\nwrite\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait until ready for write\nerror\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait for exceptions\ntimeout\n:   a numeric value in second\n\n\n### Example\n\n```ruby\nrp, wp = IO.pipe\nmesg = \"ping \"\n100.times {\n  # IO.select follows IO#read.  Not the best way to use IO.select.\n  rs, ws, = IO.select([rp], [wp])\n  if r = rs[0]\n    ret = r.read(5)\n    print ret\n    case ret\n    when /ping/\n      mesg = \"pong\\n\"\n    when /pong/\n      mesg = \"ping \"\n    end\n  end\n  if w = ws[0]\n    w.write(mesg)\n  end\n}\n```\n\n*produces:*\n\n```ruby\nping pong\nping pong\nping pong\n(snipped)\nping\n```"},"sortText":"000066","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"select(${1:T.nilable(T::Array[IO])})${0}"}},{"label":"send","kind":2,"detail":"Kernel#send","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(String, Symbol), arg1: T.anything).returns(T.untyped)}\ndef send(arg0, *arg1); end\n```"},"sortText":"000067","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"send(${1:T.any(String, Symbol)})${0}"}},{"label":"send","kind":2,"detail":"Kernel#send (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    arg1: T.anything,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef send (overload.1)(arg0, *arg1, &blk); end\n```"},"sortText":"000068","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"send(${1:T.any(String, Symbol)})${0}"}},{"label":"set_trace_func","kind":2,"detail":"Kernel#set_trace_func","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.nilable(T.proc.params(arg0: String, arg1: String, arg2: Integer, arg3: T.nilable(Symbol), arg4: T.nilable(Binding), arg5: Object).returns(T.untyped))\n  )\n  .void\nend\ndef set_trace_func(arg0); end\n```\n\n---\n\nEstablishes _proc_ as the handler for tracing, or disables\ntracing if the parameter is +nil+.\n\n*Note:* this method is obsolete, please use TracePoint instead.\n\n_proc_ takes up to six parameters:\n\n*   an event name\n*   a filename\n*   a line number\n*   an object id\n*   a binding\n*   the name of a class\n\n_proc_ is invoked whenever an event occurs.\n\nEvents are:\n\n+c-call+:: call a C-language routine\n+c-return+:: return from a C-language routine\n+call+:: call a Ruby method\n+class+:: start a class or module definition\n+end+:: finish a class or module definition\n+line+:: execute code on a new line\n+raise+:: raise an exception\n+return+:: return from a Ruby method\n\nTracing is disabled within the context of _proc_.\n\n    class Test\n    def test\n      a = 1\n      b = 2\n    end\n    end\n\n    set_trace_func proc { |event, file, line, id, binding, classname|\n       printf \"%8s %s:%-2d %10s %8s\\n\", event, file, line, id, classname\n    }\n    t = Test.new\n    t.test\n\n      line prog.rb:11               false\n    c-call prog.rb:11        new    Class\n    c-call prog.rb:11 initialize   Object\n  c-return prog.rb:11 initialize   Object\n  c-return prog.rb:11        new    Class\n      line prog.rb:12               false\n      call prog.rb:2        test     Test\n      line prog.rb:3        test     Test\n      line prog.rb:4        test     Test\n    return prog.rb:4        test     Test"},"sortText":"000069","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"set_trace_func(${1:T.nilable(T.proc.params(arg0: String, arg1: String, arg2: Integer, arg3: T.nilable(Symbol), arg4: T.nilable(Binding), arg5: Object).returns(T.untyped))})${0}"}},{"label":"set_trace_func","kind":2,"detail":"Kernel#set_trace_func (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: NilClass).returns(NilClass)}\ndef set_trace_func (overload.1)(arg0); end\n```\n\n---\n\nEstablishes _proc_ as the handler for tracing, or disables\ntracing if the parameter is +nil+.\n\n*Note:* this method is obsolete, please use TracePoint instead.\n\n_proc_ takes up to six parameters:\n\n*   an event name\n*   a filename\n*   a line number\n*   an object id\n*   a binding\n*   the name of a class\n\n_proc_ is invoked whenever an event occurs.\n\nEvents are:\n\n+c-call+:: call a C-language routine\n+c-return+:: return from a C-language routine\n+call+:: call a Ruby method\n+class+:: start a class or module definition\n+end+:: finish a class or module definition\n+line+:: execute code on a new line\n+raise+:: raise an exception\n+return+:: return from a Ruby method\n\nTracing is disabled within the context of _proc_.\n\n    class Test\n    def test\n      a = 1\n      b = 2\n    end\n    end\n\n    set_trace_func proc { |event, file, line, id, binding, classname|\n       printf \"%8s %s:%-2d %10s %8s\\n\", event, file, line, id, classname\n    }\n    t = Test.new\n    t.test\n\n      line prog.rb:11               false\n    c-call prog.rb:11        new    Class\n    c-call prog.rb:11 initialize   Object\n  c-return prog.rb:11 initialize   Object\n  c-return prog.rb:11        new    Class\n      line prog.rb:12               false\n      call prog.rb:2        test     Test\n      line prog.rb:3        test     Test\n      line prog.rb:4        test     Test\n    return prog.rb:4        test     Test"},"sortText":"000070","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"set_trace_func(${1:NilClass})${0}"}},{"label":"singleton_method","kind":2,"detail":"Kernel#singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef singleton_method(arg0); end\n```"},"sortText":"000071","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"singleton_method(${1:Symbol})${0}"}},{"label":"singleton_methods","kind":2,"detail":"Kernel#singleton_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef singleton_methods(all=…); end\n```"},"sortText":"000072","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"singleton_methods${0}"}},{"label":"sleep","kind":2,"detail":"Kernel#sleep","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef sleep; end\n```\n\n---\n\nSuspends the current thread for *duration* seconds (which may be any number,\nincluding a `Float` with fractional seconds). Returns the actual number of\nseconds slept (rounded), which may be less than that asked for if another\nthread calls\n[`Thread#run`](https://docs.ruby-lang.org/en/2.7.0/Thread.html#method-i-run).\nCalled without an argument, sleep() will sleep forever.\n\n```ruby\nTime.new    #=> 2008-03-08 19:56:19 +0900\nsleep 1.2   #=> 1\nTime.new    #=> 2008-03-08 19:56:20 +0900\nsleep 1.9   #=> 2\nTime.new    #=> 2008-03-08 19:56:22 +0900\n```"},"sortText":"000073","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"sleep${0}"}},{"label":"sleep","kind":2,"detail":"Kernel#sleep (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(duration: Numeric).returns(Integer)}\ndef sleep (overload.1)(duration); end\n```\n\n---\n\nSuspends the current thread for *duration* seconds (which may be any number,\nincluding a `Float` with fractional seconds). Returns the actual number of\nseconds slept (rounded), which may be less than that asked for if another\nthread calls\n[`Thread#run`](https://docs.ruby-lang.org/en/2.7.0/Thread.html#method-i-run).\nCalled without an argument, sleep() will sleep forever.\n\n```ruby\nTime.new    #=> 2008-03-08 19:56:19 +0900\nsleep 1.2   #=> 1\nTime.new    #=> 2008-03-08 19:56:20 +0900\nsleep 1.9   #=> 2\nTime.new    #=> 2008-03-08 19:56:22 +0900\n```"},"sortText":"000074","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"sleep(${1:Numeric})${0}"}},{"label":"system","kind":2,"detail":"Kernel#system","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    env: T.any(String, [String, String], T::Hash[String, T.nilable(String)]),\n    argv0: T.any(String, [String, String]),\n    args: String,\n    options: T.untyped\n  )\n  .returns(T.nilable(T::Boolean))\nend\ndef system(env, argv0=…, *args, **options); end\n```\n\n---\n\nExecutes *command...* in a subshell. *command...* is one of following forms.\n\n`commandline`\n:   command line string which is passed to the standard shell\n`cmdname, arg1, ...`\n:   command name and one or more arguments (no shell)\n`[cmdname, argv0], arg1, ...`\n:   command name, `argv[0]` and zero or more arguments (no shell)\n\n\nsystem returns `true` if the command gives zero exit status, `false` for non\nzero exit status. Returns `nil` if command execution fails. An error status\nis available in `$?`.\n\nIf the `exception: true` argument is passed, the method raises an exception\ninstead of returning `false` or `nil`.\n\nThe arguments are processed in the same way as for\n[`Kernel#spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn).\n\nThe hash arguments, env and options, are same as\n[`exec`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-exec) and\n[`spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn).\nSee\n[`Kernel#spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn)\nfor details.\n\n```ruby\nsystem(\"echo *\")\nsystem(\"echo\", \"*\")\n```\n\n*produces:*\n\n```\nconfig.h main.rb\n*\n```\n\nError handling:\n\n```ruby\nsystem(\"cat nonexistent.txt\")\n# => false\nsystem(\"catt nonexistent.txt\")\n# => nil\n\nsystem(\"cat nonexistent.txt\", exception: true)\n# RuntimeError (Command failed with exit 1: cat)\nsystem(\"catt nonexistent.txt\", exception: true)\n# Errno::ENOENT (No such file or directory - catt)\n```\n\nSee\n[`Kernel#exec`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-exec)\nfor the standard shell."},"sortText":"000075","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"system(${1:T.any(String, [String, String], T::Hash[String, T.nilable(String)])})${0}"}},{"label":"tainted?","kind":2,"detail":"Kernel#tainted?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef tainted?; end\n```"},"sortText":"000076","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"tainted?${0}"}},{"label":"test","kind":2,"detail":"Kernel#test","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    cmd: String,\n    file1: String,\n    file2: String\n  )\n  .returns(T.any(TrueClass, FalseClass, Time))\nend\ndef test(cmd, file1, file2=…); end\n```\n\n---\n\nUses the character `cmd` to perform various tests on `file1` (first table\nbelow) or on `file1` and `file2` (second table).\n\n[`File`](https://docs.ruby-lang.org/en/2.7.0/File.html) tests on a single\nfile:\n\n```\nCmd    Returns   Meaning\n\"A\"  | Time    | Last access time for file1\n\"b\"  | boolean | True if file1 is a block device\n\"c\"  | boolean | True if file1 is a character device\n\"C\"  | Time    | Last change time for file1\n\"d\"  | boolean | True if file1 exists and is a directory\n\"e\"  | boolean | True if file1 exists\n\"f\"  | boolean | True if file1 exists and is a regular file\n\"g\"  | boolean | True if file1 has the \\CF{setgid} bit\n     |         | set (false under NT)\n\"G\"  | boolean | True if file1 exists and has a group\n     |         | ownership equal to the caller's group\n\"k\"  | boolean | True if file1 exists and has the sticky bit set\n\"l\"  | boolean | True if file1 exists and is a symbolic link\n\"M\"  | Time    | Last modification time for file1\n\"o\"  | boolean | True if file1 exists and is owned by\n     |         | the caller's effective uid\n\"O\"  | boolean | True if file1 exists and is owned by\n     |         | the caller's real uid\n\"p\"  | boolean | True if file1 exists and is a fifo\n\"r\"  | boolean | True if file1 is readable by the effective\n     |         | uid/gid of the caller\n\"R\"  | boolean | True if file is readable by the real\n     |         | uid/gid of the caller\n\"s\"  | int/nil | If file1 has nonzero size, return the size,\n     |         | otherwise return nil\n\"S\"  | boolean | True if file1 exists and is a socket\n\"u\"  | boolean | True if file1 has the setuid bit set\n\"w\"  | boolean | True if file1 exists and is writable by\n     |         | the effective uid/gid\n\"W\"  | boolean | True if file1 exists and is writable by\n     |         | the real uid/gid\n\"x\"  | boolean | True if file1 exists and is executable by\n     |         | the effective uid/gid\n\"X\"  | boolean | True if file1 exists and is executable by\n     |         | the real uid/gid\n\"z\"  | boolean | True if file1 exists and has a zero length\n```\n\nTests that take two files:\n\n```\n\"-\"  | boolean | True if file1 and file2 are identical\n\"=\"  | boolean | True if the modification times of file1\n     |         | and file2 are equal\n\"<\"  | boolean | True if the modification time of file1\n     |         | is prior to that of file2\n\">\"  | boolean | True if the modification time of file1\n     |         | is after that of file2\n```"},"sortText":"000077","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"test(${1:String}, ${2:String})${0}"}},{"label":"then","kind":2,"detail":"Kernel#then","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:X))\n  )\n  .returns(T.type_parameter(:X))\nend\ndef then(&blk); end\n```\n\n---\n\nYields self to the block and returns the result of the block.\n\n```ruby\n3.next.then {|x| x**x }.to_s             #=> \"256\"\n```\n\nGood usage for `then` is value piping in method chains:\n\n```ruby\nrequire 'open-uri'\nrequire 'json'\n\nconstruct_url(arguments).\n  then {|url| URI(url).read }.\n  then {|response| JSON.parse(response) }\n```\n\nWhen called without block, the method returns `Enumerator`, which can be\nused, for example, for conditional circuit-breaking:\n\n```ruby\n# meets condition, no-op\n1.then.detect(&:odd?)            # => 1\n# does not meet condition, drop value\n2.then.detect(&:odd?)            # => nil\n```"},"sortText":"000078","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"then do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"to_enum","kind":2,"detail":"Kernel#to_enum","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef to_enum(method=…, *args); end\n```"},"sortText":"000079","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"to_enum${0}"}},{"label":"to_enum","kind":2,"detail":"Kernel#to_enum (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef to_enum (overload.1)(method=…, *args, &blk); end\n```"},"sortText":"000080","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"to_enum${0}"}},{"label":"undef","kind":2,"detail":"Kernel#undef","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg: BasicObject).void}\ndef undef(*arg); end\n```"},"sortText":"000081","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"undef${0}"}},{"label":"untrusted?","kind":2,"detail":"Kernel#untrusted?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef untrusted?; end\n```"},"sortText":"000082","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"untrusted?${0}"}},{"label":"yield_self","kind":2,"detail":"Kernel#yield_self","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:X))\n  )\n  .returns(T.type_parameter(:X))\nend\ndef yield_self(&blk); end\n```\n\n---\n\nYields self to the block and returns the result of the block.\n\n```ruby\n\"my string\".yield_self {|s| s.upcase }   #=> \"MY STRING\"\n```\n\nGood usage for `then` is value piping in method chains:\n\n```ruby\nrequire 'open-uri'\nrequire 'json'\n\nconstruct_url(arguments).\n  then {|url| URI(url).read }.\n  then {|response| JSON.parse(response) }\n```"},"sortText":"000083","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"yield_self do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"equal?","kind":2,"detail":"BasicObject#equal?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(other: BasicObject).returns(T::Boolean)}\ndef equal?(other); end\n```\n\n---\n\nEquality --- At the\n[`Object`](https://docs.ruby-lang.org/en/2.7.0/Object.html) level, #==\nreturns `true` only if `obj` and `other` are the same object. Typically,\nthis method is overridden in descendant classes to provide class-specific\nmeaning.\n\nUnlike #==, the\n[`equal?`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html#method-i-equal-3F)\nmethod should never be overridden by subclasses as it is used to determine\nobject identity (that is, `a.equal?(b)` if and only if `a` is the same\nobject as `b`):\n\n```ruby\nobj = \"a\"\nother = obj.dup\n\nobj == other      #=> true\nobj.equal? other  #=> false\nobj.equal? obj    #=> true\n```\n\nThe eql? method returns `true` if `obj` and `other` refer to the same hash\nkey. This is used by [`Hash`](https://docs.ruby-lang.org/en/2.7.0/Hash.html)\nto test members for equality. For any pair of objects where eql? returns\n`true`, the hash value of both objects must be equal. So any subclass that\noverrides eql? should also override hash appropriately.\n\nFor objects of class\n[`Object`](https://docs.ruby-lang.org/en/2.7.0/Object.html), eql?  is\nsynonymous with #==. Subclasses normally continue this tradition by aliasing\neql? to their overridden #== method, but there are exceptions.\n[`Numeric`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html) types, for\nexample, perform type conversion across #==, but not across eql?, so:\n\n```ruby\n1 == 1.0     #=> true\n1.eql? 1.0   #=> false\n```"},"sortText":"000084","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"equal?(${1:BasicObject})${0}"}},{"label":"__send__","kind":2,"detail":"BasicObject#__send__","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol, arg1: BasicObject).returns(T.untyped)}\ndef __send__(arg0, *arg1); end\n```\n\n---\n\nInvokes the method identified by *symbol*, passing it any arguments\nspecified. You can use `__send__` if the name `send` clashes with an\nexisting method in *obj*. When the method is identified by a string, the\nstring is converted to a symbol.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_send\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`send`.\n\n```ruby\nclass Klass\n  def hello(*args)\n    \"Hello \" + args.join(' ')\n  end\nend\nk = Klass.new\nk.send :hello, \"gentle\", \"readers\"   #=> \"Hello gentle readers\"\n```"},"sortText":"000085","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"__send__(${1:Symbol})${0}"}},{"label":"instance_eval","kind":2,"detail":"BasicObject#instance_eval","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, filename: String, lineno: Integer).returns(T.untyped)}\ndef instance_eval(arg0=…, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver (*obj*). In order to set the context, the\nvariable `self` is set to *obj* while the code is executing, giving the code\naccess to *obj*'s instance variables and private methods.\n\nWhen `instance_eval` is given a block, *obj* is also passed in as the\nblock's only argument.\n\nWhen `instance_eval` is given a `String`, the optional second and third\nparameters supply a filename and starting line number that are used when\nreporting compilation errors.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\n  private\n  def the_secret\n    \"Ssssh! The secret is #{@secret}.\"\n  end\nend\nk = KlassWithSecret.new\nk.instance_eval { @secret }          #=> 99\nk.instance_eval { the_secret }       #=> \"Ssssh! The secret is 99.\"\nk.instance_eval {|obj| obj == self } #=> true\n```"},"sortText":"000086","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"instance_eval${0}"}},{"label":"instance_eval","kind":2,"detail":"BasicObject#instance_eval (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_eval (overload.1)(&blk); end\n```\n\n---\n\nEvaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver (*obj*). In order to set the context, the\nvariable `self` is set to *obj* while the code is executing, giving the code\naccess to *obj*'s instance variables and private methods.\n\nWhen `instance_eval` is given a block, *obj* is also passed in as the\nblock's only argument.\n\nWhen `instance_eval` is given a `String`, the optional second and third\nparameters supply a filename and starting line number that are used when\nreporting compilation errors.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\n  private\n  def the_secret\n    \"Ssssh! The secret is #{@secret}.\"\n  end\nend\nk = KlassWithSecret.new\nk.instance_eval { @secret }          #=> 99\nk.instance_eval { the_secret }       #=> \"Ssssh! The secret is 99.\"\nk.instance_eval {|obj| obj == self } #=> true\n```"},"sortText":"000087","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"instance_eval do\n  ${1}\nend${0}"}},{"label":"instance_exec","kind":2,"detail":"BasicObject#instance_exec","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    args: T.type_parameter(:V),\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_exec(*args, &blk); end\n```\n\n---\n\nExecutes the given block within the context of the receiver (*obj*). In\norder to set the context, the variable `self` is set to *obj* while the code\nis executing, giving the code access to *obj*'s instance variables.\nArguments are passed as block parameters.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\nend\nk = KlassWithSecret.new\nk.instance_exec(5) {|x| @secret+x }   #=> 104\n```"},"sortText":"000088","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"instance_exec do |${1:T.untyped}|\n  ${2}\nend${0}"}}]}}

[2023-08-10 22:56:41.671] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":33},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  def example\n  end\nend\n"}]}}

[2023-08-10 22:56:41.724] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":12,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":4,"character":5},"end":{"line":4,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"message":"Method `e` does not exist on `A`","code":7003,"codeDescription":{"href":"https://srb.help/7003"},"severity":1,"relatedInformation":[]}]}}}

[2023-08-10 22:56:41.764] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:41.764] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:41.764] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:41.764] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:41.768] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 22
[2023-08-10 22:56:41.769] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":13}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}},"message":"Insert `extend T::Sig`"}]}]}}

[2023-08-10 22:56:41.770] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:41.770] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:41.778] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":12,"requestMethod":"textDocument/codeAction","result":[{"title":"Apply all Sorbet fixes for file","kind":"source.fixAll.sorbet","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}},"newText":"sig { returns(NilClass) }\n  "},{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}},"newText":"  extend T::Sig\n"}]}]}}]}

[2023-08-10 22:56:42.222] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":13,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":3,"character":5},"end":{"line":3,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":13}},"message":"The method `example` does not have a `sig` (fix available)","code":7017,"codeDescription":{"href":"https://srb.help/7017"},"severity":1,"relatedInformation":[{"message":"Insert `sig { returns(NilClass) }`","location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}}}},{"message":"Insert `extend T::Sig`","location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}}}]}]}}}

[2023-08-10 22:56:42.223] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:42.223] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:42.234] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":13,"requestMethod":"textDocument/codeAction","result":[{"title":"Add `sig { returns(NilClass) }`","kind":"quickfix","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}},"newText":"sig { returns(NilClass) }\n  "},{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}},"newText":"  extend T::Sig\n"}]}]}},{"title":"Apply all Sorbet fixes for file","kind":"source.fixAll.sorbet","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}},"newText":"sig { returns(NilClass) }\n  "},{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}},"newText":"  extend T::Sig\n"}]}]}},{"title":"Apply all Sorbet fixes for file","kind":"quickfix","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}},"newText":"sig { returns(NilClass) }\n  "},{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}},"newText":"  extend T::Sig\n"}]}]}},{"title":"Convert to singleton class method (best effort)","kind":"refactor.rewrite","data":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":3,"character":5},"end":{"line":3,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":13}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}},"message":"Insert `extend T::Sig`"}]}]}}}]}

[2023-08-10 22:56:42.673] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":34},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  def example\n    \n  end\nend\n"}]}}

[2023-08-10 22:56:42.769] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:42.769] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:42.769] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:42.769] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:42.773] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 23
[2023-08-10 22:56:42.773] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":13}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}},"message":"Insert `extend T::Sig`"}]}]}}

[2023-08-10 22:56:47.044] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":35},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  def example\n    p\n  end\nend\n"}]}}

[2023-08-10 22:56:47.045] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":14,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":4,"character":5},"context":{"triggerKind":1}}}

[2023-08-10 22:56:47.137] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:47.137] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:47.137] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:47.137] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:47.141] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 24
[2023-08-10 22:56:47.141] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":13}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}},"message":"Insert `extend T::Sig`"}]}]}}

[2023-08-10 22:56:47.163] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":14,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[{"label":"example","kind":2,"detail":"A#example","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.untyped)}\ndef example; end\n```"},"sortText":"000000","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"example${0}"}},{"label":"p","kind":2,"detail":"Kernel#p","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BasicObject).returns(NilClass)}\ndef p(*arg0); end\n```\n\n---\n\nFor each object, directly writes *obj*.`inspect` followed by a newline to\nthe program's standard output.\n\n```ruby\nS = Struct.new(:name, :state)\ns = S['dave', 'TX']\np s\n```\n\n*produces:*\n\n```ruby\n#<S name=\"dave\", state=\"TX\">\n```"},"sortText":"000001","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"p${0}"}},{"label":"pp","kind":2,"detail":"Kernel#pp","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    obj: T.untyped,\n    out: T.untyped,\n    width: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef pp(obj, out=…, width=…); end\n```\n\n---\n\nprints arguments in pretty form.\n\npp returns argument(s).\n\nAlso aliased as:\n[`pp`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-pp)"},"sortText":"000002","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"pp(${1})${0}"}},{"label":"print","kind":2,"detail":"Kernel#print","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: Kernel).returns(NilClass)}\ndef print(*args); end\n```\n\n---\n\nPrints each object in turn to `$stdout`. If the output field separator\n(`$,`) is not `nil`, its contents will appear between each field. If the\noutput record separator (`$\\`) is not `nil`, it will be appended to the\noutput. If no arguments are given, prints `$_`. Objects that aren't strings\nwill be converted by calling their `to_s` method.\n\n```ruby\nprint \"cat\", [1,2,3], 99, \"\\n\"\n$, = \", \"\n$\\ = \"\\n\"\nprint \"cat\", [1,2,3], 99\n```\n\n*produces:*\n\n```\ncat12399\ncat, 1, 2, 3, 99\n```"},"sortText":"000003","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"print${0}"}},{"label":"printf","kind":2,"detail":"Kernel#printf","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: IO, arg1: String, arg2: BasicObject).returns(NilClass)}\ndef printf(arg0=…, arg1=…, *arg2); end\n```\n\n---\n\nEquivalent to:\n\n```\nio.write(sprintf(string, obj, ...))\n```\n\nor\n\n```\n$stdout.write(sprintf(string, obj, ...))\n```"},"sortText":"000004","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"printf${0}"}},{"label":"private_methods","kind":2,"detail":"Kernel#private_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef private_methods(all=…); end\n```"},"sortText":"000005","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"private_methods${0}"}},{"label":"proc","kind":2,"detail":"Kernel#proc","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.untyped).returns(Proc)}\ndef proc(&blk); end\n```\n\n---\n\nEquivalent to\n[`Proc.new`](https://docs.ruby-lang.org/en/2.7.0/Proc.html#method-c-new)."},"sortText":"000006","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"proc${0}"}},{"label":"protected_methods","kind":2,"detail":"Kernel#protected_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef protected_methods(all=…); end\n```"},"sortText":"000007","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"protected_methods${0}"}},{"label":"public_method","kind":2,"detail":"Kernel#public_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef public_method(arg0); end\n```"},"sortText":"000008","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"public_method(${1:Symbol})${0}"}},{"label":"public_methods","kind":2,"detail":"Kernel#public_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef public_methods(all=…); end\n```"},"sortText":"000009","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"public_methods${0}"}},{"label":"public_send","kind":2,"detail":"Kernel#public_send","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef public_send(arg0, *args, &blk); end\n```"},"sortText":"000010","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"public_send(${1:T.any(Symbol, String)})${0}"}},{"label":"putc","kind":2,"detail":"Kernel#putc","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Integer)}\ndef putc(arg0); end\n```\n\n---\n\nEquivalent to:\n\n```ruby\n$stdout.putc(int)\n```\n\nRefer to the documentation for\n[`IO#putc`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-putc) for\nimportant information regarding multi-byte characters."},"sortText":"000011","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"putc(${1:Integer})${0}"}},{"label":"puts","kind":2,"detail":"Kernel#puts","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BasicObject).returns(NilClass)}\ndef puts(*arg0); end\n```\n\n---\n\nEquivalent to\n\n```\n$stdout.puts(obj, ...)\n```"},"sortText":"000012","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"puts${0}"}},{"label":"Complex","kind":2,"detail":"Kernel#Complex","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: T.any(Numeric, String),\n    y: T.any(Numeric, String),\n    exception: T::Boolean\n  )\n  .returns(Complex)\nend\ndef Complex(x, y=…, exception: …); end\n```\n\n---\n\nReturns x+i\\*y;\n\n```ruby\nComplex(1, 2)    #=> (1+2i)\nComplex('1+2i')  #=> (1+2i)\nComplex(nil)     #=> TypeError\nComplex(1, nil)  #=> TypeError\n\nComplex(1, nil, exception: false)  #=> nil\nComplex('1+2', exception: false)   #=> nil\n```\n\nSyntax of string form:\n\n```\nstring form = extra spaces , complex , extra spaces ;\ncomplex = real part | [ sign ] , imaginary part\n        | real part , sign , imaginary part\n        | rational , \"@\" , rational ;\nreal part = rational ;\nimaginary part = imaginary unit | unsigned rational , imaginary unit ;\nrational = [ sign ] , unsigned rational ;\nunsigned rational = numerator | numerator , \"/\" , denominator ;\nnumerator = integer part | fractional part | integer part , fractional part ;\ndenominator = digits ;\ninteger part = digits ;\nfractional part = \".\" , digits , [ ( \"e\" | \"E\" ) , [ sign ] , digits ] ;\nimaginary unit = \"i\" | \"I\" | \"j\" | \"J\" ;\nsign = \"-\" | \"+\" ;\ndigits = digit , { digit | \"_\" , digit };\ndigit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\nextra spaces = ? \\s* ? ;\n```\n\nSee\n[`String#to_c`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_c)."},"sortText":"000013","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"Complex(${1:T.any(Numeric, String)})${0}"}},{"label":"display","kind":2,"detail":"Kernel#display","documentation":{"kind":"markdown","value":"```ruby\nsig {params(port: IO).returns(NilClass)}\ndef display(port); end\n```"},"sortText":"000014","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"display(${1:IO})${0}"}},{"label":"dup","kind":2,"detail":"Kernel#dup","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(A)}\ndef dup; end\n```"},"sortText":"000015","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"dup${0}"}},{"label":"initialize_copy","kind":2,"detail":"Kernel#initialize_copy","documentation":{"kind":"markdown","value":"```ruby\nsig {params(object: A).returns(A)}\ndef initialize_copy(object); end\n```"},"sortText":"000016","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"initialize_copy(${1:A})${0}"}},{"label":"inspect","kind":2,"detail":"Kernel#inspect","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(String)}\ndef inspect; end\n```"},"sortText":"000017","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"inspect${0}"}},{"label":"loop","kind":2,"detail":"Kernel#loop","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.proc.returns(T.untyped)).returns(T.noreturn)}\ndef loop(&blk); end\n```\n\n---\n\nRepeatedly executes the block.\n\nIf no block is given, an enumerator is returned instead.\n\n```ruby\nloop do\n  print \"Input: \"\n  line = gets\n  break if !line or line =~ /^qQ/\n  # ...\nend\n```\n\n[`StopIteration`](https://docs.ruby-lang.org/en/2.7.0/StopIteration.html)\nraised in the block breaks the loop. In this case, loop returns the \"result\"\nvalue stored in the exception.\n\n```ruby\nenum = Enumerator.new { |y|\n  y << \"one\"\n  y << \"two\"\n  :ok\n}\n\nresult = loop {\n  puts enum.next\n} #=> :ok\n```"},"sortText":"000018","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"loop do\n  ${1}\nend${0}"}},{"label":"loop","kind":2,"detail":"Kernel#loop (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Enumerator[T.untyped])}\ndef loop (overload.1); end\n```\n\n---\n\nRepeatedly executes the block.\n\nIf no block is given, an enumerator is returned instead.\n\n```ruby\nloop do\n  print \"Input: \"\n  line = gets\n  break if !line or line =~ /^qQ/\n  # ...\nend\n```\n\n[`StopIteration`](https://docs.ruby-lang.org/en/2.7.0/StopIteration.html)\nraised in the block breaks the loop. In this case, loop returns the \"result\"\nvalue stored in the exception.\n\n```ruby\nenum = Enumerator.new { |y|\n  y << \"one\"\n  y << \"two\"\n  :ok\n}\n\nresult = loop {\n  puts enum.next\n} #=> :ok\n```"},"sortText":"000019","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"loop${0}"}},{"label":"open","kind":2,"detail":"Kernel#open","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    path: String,\n    mode: T.any(Integer, String),\n    perm: T.nilable(Integer),\n    opt: T.nilable(T::Hash[Symbol, T.untyped])\n  )\n  .returns(T.nilable(IO))\nend\ndef open(path, mode=…, perm=…, opt=…); end\n```\n\n---\n\nCreates an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object\nconnected to the given stream, file, or subprocess.\n\nIf `path` does not start with a pipe character (`|`), treat it as the name\nof a file to open using the specified mode (defaulting to \"r\").\n\nThe `mode` is either a string or an integer. If it is an integer, it must be\nbitwise-or of open(2) flags, such as File::RDWR or File::EXCL. If it is a\nstring, it is either \"fmode\", \"fmode:ext\\_enc\", or\n\"fmode:ext\\_enc:int\\_enc\".\n\nSee the documentation of\n[`IO.new`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-new) for\nfull documentation of the `mode` string directives.\n\nIf a file is being created, its initial permissions may be set using the\n`perm` parameter. See\n[`File.new`](https://docs.ruby-lang.org/en/2.7.0/File.html#method-c-new) and\nthe open(2) and chmod(2) man pages for a description of permissions.\n\nIf a block is specified, it will be invoked with the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object as a parameter,\nand the [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) will be\nautomatically closed when the block terminates. The call returns the value\nof the block.\n\nIf `path` starts with a pipe character (`\"|\"`), a subprocess is created,\nconnected to the caller by a pair of pipes. The returned\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object may be used to\nwrite to the standard input and read from the standard output of this\nsubprocess.\n\nIf the command following the pipe is a single minus sign (`\"|-\"`), Ruby\nforks, and this subprocess is connected to the parent. If the command is not\n`\"-\"`, the subprocess runs the command. Note that the command may be\nprocessed by shell if it contains shell metacharacters.\n\nWhen the subprocess is Ruby (opened via `\"|-\"`), the `open` call returns\n`nil`. If a block is associated with the open call, that block will run\ntwice --- once in the parent and once in the child.\n\nThe block parameter will be an\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object in the parent and\n`nil` in the child. The parent's `IO` object will be connected to the\nchild's $stdin and $stdout. The subprocess will be terminated at the end of\nthe block.\n\n### Examples\n\nReading from \"testfile\":\n\n```ruby\nopen(\"testfile\") do |f|\n  print f.gets\nend\n```\n\nProduces:\n\n```ruby\nThis is line one\n```\n\nOpen a subprocess and read its output:\n\n```ruby\ncmd = open(\"|date\")\nprint cmd.gets\ncmd.close\n```\n\nProduces:\n\n```\nWed Apr  9 08:56:31 CDT 2003\n```\n\nOpen a subprocess running the same Ruby program:\n\n```ruby\nf = open(\"|-\", \"w+\")\nif f.nil?\n  puts \"in Child\"\n  exit\nelse\n  puts \"Got: #{f.gets}\"\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```\n\nOpen a subprocess using a block to receive the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object:\n\n```ruby\nopen \"|-\" do |f|\n  if f then\n    # parent process\n    puts \"Got: #{f.gets}\"\n  else\n    # child process\n    puts \"in Child\"\n  end\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```"},"sortText":"000020","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"open(${1:String})${0}"}},{"label":"open","kind":2,"detail":"Kernel#open (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    path: String,\n    mode: T.any(Integer, String),\n    perm: T.nilable(Integer),\n    opt: T.nilable(T::Hash[Symbol, T.untyped]),\n    blk: T.proc.params(arg0: IO).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef open (overload.1)(path, mode=…, perm=…, opt=…, &blk); end\n```\n\n---\n\nCreates an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object\nconnected to the given stream, file, or subprocess.\n\nIf `path` does not start with a pipe character (`|`), treat it as the name\nof a file to open using the specified mode (defaulting to \"r\").\n\nThe `mode` is either a string or an integer. If it is an integer, it must be\nbitwise-or of open(2) flags, such as File::RDWR or File::EXCL. If it is a\nstring, it is either \"fmode\", \"fmode:ext\\_enc\", or\n\"fmode:ext\\_enc:int\\_enc\".\n\nSee the documentation of\n[`IO.new`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-new) for\nfull documentation of the `mode` string directives.\n\nIf a file is being created, its initial permissions may be set using the\n`perm` parameter. See\n[`File.new`](https://docs.ruby-lang.org/en/2.7.0/File.html#method-c-new) and\nthe open(2) and chmod(2) man pages for a description of permissions.\n\nIf a block is specified, it will be invoked with the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object as a parameter,\nand the [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) will be\nautomatically closed when the block terminates. The call returns the value\nof the block.\n\nIf `path` starts with a pipe character (`\"|\"`), a subprocess is created,\nconnected to the caller by a pair of pipes. The returned\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object may be used to\nwrite to the standard input and read from the standard output of this\nsubprocess.\n\nIf the command following the pipe is a single minus sign (`\"|-\"`), Ruby\nforks, and this subprocess is connected to the parent. If the command is not\n`\"-\"`, the subprocess runs the command. Note that the command may be\nprocessed by shell if it contains shell metacharacters.\n\nWhen the subprocess is Ruby (opened via `\"|-\"`), the `open` call returns\n`nil`. If a block is associated with the open call, that block will run\ntwice --- once in the parent and once in the child.\n\nThe block parameter will be an\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object in the parent and\n`nil` in the child. The parent's `IO` object will be connected to the\nchild's $stdin and $stdout. The subprocess will be terminated at the end of\nthe block.\n\n### Examples\n\nReading from \"testfile\":\n\n```ruby\nopen(\"testfile\") do |f|\n  print f.gets\nend\n```\n\nProduces:\n\n```ruby\nThis is line one\n```\n\nOpen a subprocess and read its output:\n\n```ruby\ncmd = open(\"|date\")\nprint cmd.gets\ncmd.close\n```\n\nProduces:\n\n```\nWed Apr  9 08:56:31 CDT 2003\n```\n\nOpen a subprocess running the same Ruby program:\n\n```ruby\nf = open(\"|-\", \"w+\")\nif f.nil?\n  puts \"in Child\"\n  exit\nelse\n  puts \"Got: #{f.gets}\"\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```\n\nOpen a subprocess using a block to receive the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object:\n\n```ruby\nopen \"|-\" do |f|\n  if f then\n    # parent process\n    puts \"Got: #{f.gets}\"\n  else\n    # child process\n    puts \"in Child\"\n  end\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```"},"sortText":"000021","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"open(${1:String}) do |${2:IO}|\n  ${3}\nend${0}"}},{"label":"respond_to?","kind":2,"detail":"Kernel#respond_to?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    include_all: T.untyped\n  )\n  .returns(T::Boolean)\nend\ndef respond_to?(arg0, include_all=…); end\n```"},"sortText":"000022","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"respond_to?(${1:T.any(String, Symbol)})${0}"}},{"label":"sleep","kind":2,"detail":"Kernel#sleep","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef sleep; end\n```\n\n---\n\nSuspends the current thread for *duration* seconds (which may be any number,\nincluding a `Float` with fractional seconds). Returns the actual number of\nseconds slept (rounded), which may be less than that asked for if another\nthread calls\n[`Thread#run`](https://docs.ruby-lang.org/en/2.7.0/Thread.html#method-i-run).\nCalled without an argument, sleep() will sleep forever.\n\n```ruby\nTime.new    #=> 2008-03-08 19:56:19 +0900\nsleep 1.2   #=> 1\nTime.new    #=> 2008-03-08 19:56:20 +0900\nsleep 1.9   #=> 2\nTime.new    #=> 2008-03-08 19:56:22 +0900\n```"},"sortText":"000023","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"sleep${0}"}},{"label":"sleep","kind":2,"detail":"Kernel#sleep (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(duration: Numeric).returns(Integer)}\ndef sleep (overload.1)(duration); end\n```\n\n---\n\nSuspends the current thread for *duration* seconds (which may be any number,\nincluding a `Float` with fractional seconds). Returns the actual number of\nseconds slept (rounded), which may be less than that asked for if another\nthread calls\n[`Thread#run`](https://docs.ruby-lang.org/en/2.7.0/Thread.html#method-i-run).\nCalled without an argument, sleep() will sleep forever.\n\n```ruby\nTime.new    #=> 2008-03-08 19:56:19 +0900\nsleep 1.2   #=> 1\nTime.new    #=> 2008-03-08 19:56:20 +0900\nsleep 1.9   #=> 2\nTime.new    #=> 2008-03-08 19:56:22 +0900\n```"},"sortText":"000024","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"sleep(${1:Numeric})${0}"}},{"label":"sprintf","kind":2,"detail":"Kernel#sprintf","documentation":{"kind":"markdown","value":"```ruby\nsig {params(format: String, args: BasicObject).returns(String)}\ndef sprintf(format, *args); end\n```\n\n---\n\nReturns the string resulting from applying *format\\_string* to any\nadditional arguments. Within the format string, any characters other than\nformat sequences are copied to the result.\n\nThe syntax of a format sequence is as follows.\n\n```\n%[flags][width][.precision]type\n```\n\nA format sequence consists of a percent sign, followed by optional flags,\nwidth, and precision indicators, then terminated with a field type\ncharacter. The field type controls how the corresponding `sprintf` argument\nis to be interpreted, while the flags modify that interpretation.\n\nThe field type characters are:\n\n```\nField |  Integer Format\n------+--------------------------------------------------------------\n  b   | Convert argument as a binary number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..1'.\n  B   | Equivalent to `b', but uses an uppercase 0B for prefix\n      | in the alternative format by #.\n  d   | Convert argument as a decimal number.\n  i   | Identical to `d'.\n  o   | Convert argument as an octal number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..7'.\n  u   | Identical to `d'.\n  x   | Convert argument as a hexadecimal number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..f' (representing an infinite string of\n      | leading 'ff's).\n  X   | Equivalent to `x', but uses uppercase letters.\n\nField |  Float Format\n------+--------------------------------------------------------------\n  e   | Convert floating point argument into exponential notation\n      | with one digit before the decimal point as [-]d.dddddde[+-]dd.\n      | The precision specifies the number of digits after the decimal\n      | point (defaulting to six).\n  E   | Equivalent to `e', but uses an uppercase E to indicate\n      | the exponent.\n  f   | Convert floating point argument as [-]ddd.dddddd,\n      | where the precision specifies the number of digits after\n      | the decimal point.\n  g   | Convert a floating point number using exponential form\n      | if the exponent is less than -4 or greater than or\n      | equal to the precision, or in dd.dddd form otherwise.\n      | The precision specifies the number of significant digits.\n  G   | Equivalent to `g', but use an uppercase `E' in exponent form.\n  a   | Convert floating point argument as [-]0xh.hhhhp[+-]dd,\n      | which is consisted from optional sign, \"0x\", fraction part\n      | as hexadecimal, \"p\", and exponential part as decimal.\n  A   | Equivalent to `a', but use uppercase `X' and `P'.\n\nField |  Other Format\n------+--------------------------------------------------------------\n  c   | Argument is the numeric code for a single character or\n      | a single character string itself.\n  p   | The valuing of argument.inspect.\n  s   | Argument is a string to be substituted.  If the format\n      | sequence contains a precision, at most that many characters\n      | will be copied.\n  %   | A percent sign itself will be displayed.  No argument taken.\n```\n\nThe flags modifies the behavior of the formats. The flag characters are:\n\n```\nFlag     | Applies to    | Meaning\n---------+---------------+-----------------------------------------\nspace    | bBdiouxX      | Leave a space at the start of\n         | aAeEfgG       | non-negative numbers.\n         | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n         |               | a minus sign with absolute value for\n         |               | negative values.\n---------+---------------+-----------------------------------------\n(digit)$ | all           | Specifies the absolute argument number\n         |               | for this field.  Absolute and relative\n         |               | argument numbers cannot be mixed in a\n         |               | sprintf string.\n---------+---------------+-----------------------------------------\n #       | bBoxX         | Use an alternative format.\n         | aAeEfgG       | For the conversions `o', increase the precision\n         |               | until the first digit will be `0' if\n         |               | it is not formatted as complements.\n         |               | For the conversions `x', `X', `b' and `B'\n         |               | on non-zero, prefix the result with ``0x'',\n         |               | ``0X'', ``0b'' and ``0B'', respectively.\n         |               | For `a', `A', `e', `E', `f', `g', and 'G',\n         |               | force a decimal point to be added,\n         |               | even if no digits follow.\n         |               | For `g' and 'G', do not remove trailing zeros.\n---------+---------------+-----------------------------------------\n+        | bBdiouxX      | Add a leading plus sign to non-negative\n         | aAeEfgG       | numbers.\n         | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n         |               | a minus sign with absolute value for\n         |               | negative values.\n---------+---------------+-----------------------------------------\n-        | all           | Left-justify the result of this conversion.\n---------+---------------+-----------------------------------------\n0 (zero) | bBdiouxX      | Pad with zeros, not spaces.\n         | aAeEfgG       | For `o', `x', `X', `b' and `B', radix-1\n         | (numeric fmt) | is used for negative numbers formatted as\n         |               | complements.\n---------+---------------+-----------------------------------------\n*        | all           | Use the next argument as the field width.\n         |               | If negative, left-justify the result. If the\n         |               | asterisk is followed by a number and a dollar\n         |               | sign, use the indicated argument as the width.\n```\n\nExamples of flags:\n\n```ruby\n# `+' and space flag specifies the sign of non-negative numbers.\nsprintf(\"%d\", 123)  #=> \"123\"\nsprintf(\"%+d\", 123) #=> \"+123\"\nsprintf(\"% d\", 123) #=> \" 123\"\n\n# `#' flag for `o' increases number of digits to show `0'.\n# `+' and space flag changes format of negative numbers.\nsprintf(\"%o\", 123)   #=> \"173\"\nsprintf(\"%#o\", 123)  #=> \"0173\"\nsprintf(\"%+o\", -123) #=> \"-173\"\nsprintf(\"%o\", -123)  #=> \"..7605\"\nsprintf(\"%#o\", -123) #=> \"..7605\"\n\n# `#' flag for `x' add a prefix `0x' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf(\"%x\", 123)   #=> \"7b\"\nsprintf(\"%#x\", 123)  #=> \"0x7b\"\nsprintf(\"%+x\", -123) #=> \"-7b\"\nsprintf(\"%x\", -123)  #=> \"..f85\"\nsprintf(\"%#x\", -123) #=> \"0x..f85\"\nsprintf(\"%#x\", 0)    #=> \"0\"\n\n# `#' for `X' uses the prefix `0X'.\nsprintf(\"%X\", 123)  #=> \"7B\"\nsprintf(\"%#X\", 123) #=> \"0X7B\"\n\n# `#' flag for `b' add a prefix `0b' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf(\"%b\", 123)   #=> \"1111011\"\nsprintf(\"%#b\", 123)  #=> \"0b1111011\"\nsprintf(\"%+b\", -123) #=> \"-1111011\"\nsprintf(\"%b\", -123)  #=> \"..10000101\"\nsprintf(\"%#b\", -123) #=> \"0b..10000101\"\nsprintf(\"%#b\", 0)    #=> \"0\"\n\n# `#' for `B' uses the prefix `0B'.\nsprintf(\"%B\", 123)  #=> \"1111011\"\nsprintf(\"%#B\", 123) #=> \"0B1111011\"\n\n# `#' for `e' forces to show the decimal point.\nsprintf(\"%.0e\", 1)  #=> \"1e+00\"\nsprintf(\"%#.0e\", 1) #=> \"1.e+00\"\n\n# `#' for `f' forces to show the decimal point.\nsprintf(\"%.0f\", 1234)  #=> \"1234\"\nsprintf(\"%#.0f\", 1234) #=> \"1234.\"\n\n# `#' for `g' forces to show the decimal point.\n# It also disables stripping lowest zeros.\nsprintf(\"%g\", 123.4)   #=> \"123.4\"\nsprintf(\"%#g\", 123.4)  #=> \"123.400\"\nsprintf(\"%g\", 123456)  #=> \"123456\"\nsprintf(\"%#g\", 123456) #=> \"123456.\"\n```\n\nThe field width is an optional integer, followed optionally by a period and\na precision. The width specifies the minimum number of characters that will\nbe written to the result for this field.\n\nExamples of width:\n\n```ruby\n# padding is done by spaces,       width=20\n# 0 or radix-1.             <------------------>\nsprintf(\"%20d\", 123)   #=> \"                 123\"\nsprintf(\"%+20d\", 123)  #=> \"                +123\"\nsprintf(\"%020d\", 123)  #=> \"00000000000000000123\"\nsprintf(\"%+020d\", 123) #=> \"+0000000000000000123\"\nsprintf(\"% 020d\", 123) #=> \" 0000000000000000123\"\nsprintf(\"%-20d\", 123)  #=> \"123                 \"\nsprintf(\"%-+20d\", 123) #=> \"+123                \"\nsprintf(\"%- 20d\", 123) #=> \" 123                \"\nsprintf(\"%020x\", -123) #=> \"..ffffffffffffffff85\"\n```\n\nFor numeric fields, the precision controls the number of decimal places\ndisplayed. For string fields, the precision determines the maximum number of\ncharacters to be copied from the string. (Thus, the format sequence\n`%10.10s` will always contribute exactly ten characters to the result.)\n\nExamples of precisions:\n\n```ruby\n# precision for `d', 'o', 'x' and 'b' is\n# minimum number of digits               <------>\nsprintf(\"%20.8d\", 123)  #=> \"            00000123\"\nsprintf(\"%20.8o\", 123)  #=> \"            00000173\"\nsprintf(\"%20.8x\", 123)  #=> \"            0000007b\"\nsprintf(\"%20.8b\", 123)  #=> \"            01111011\"\nsprintf(\"%20.8d\", -123) #=> \"           -00000123\"\nsprintf(\"%20.8o\", -123) #=> \"            ..777605\"\nsprintf(\"%20.8x\", -123) #=> \"            ..ffff85\"\nsprintf(\"%20.8b\", -11)  #=> \"            ..110101\"\n\n# \"0x\" and \"0b\" for `#x' and `#b' is not counted for\n# precision but \"0\" for `#o' is counted.  <------>\nsprintf(\"%#20.8d\", 123)  #=> \"            00000123\"\nsprintf(\"%#20.8o\", 123)  #=> \"            00000173\"\nsprintf(\"%#20.8x\", 123)  #=> \"          0x0000007b\"\nsprintf(\"%#20.8b\", 123)  #=> \"          0b01111011\"\nsprintf(\"%#20.8d\", -123) #=> \"           -00000123\"\nsprintf(\"%#20.8o\", -123) #=> \"            ..777605\"\nsprintf(\"%#20.8x\", -123) #=> \"          0x..ffff85\"\nsprintf(\"%#20.8b\", -11)  #=> \"          0b..110101\"\n\n# precision for `e' is number of\n# digits after the decimal point           <------>\nsprintf(\"%20.8e\", 1234.56789) #=> \"      1.23456789e+03\"\n\n# precision for `f' is number of\n# digits after the decimal point               <------>\nsprintf(\"%20.8f\", 1234.56789) #=> \"       1234.56789000\"\n\n# precision for `g' is number of\n# significant digits                          <------->\nsprintf(\"%20.8g\", 1234.56789) #=> \"           1234.5679\"\n\n#                                         <------->\nsprintf(\"%20.8g\", 123456789)  #=> \"       1.2345679e+08\"\n\n# precision for `s' is\n# maximum number of characters                    <------>\nsprintf(\"%20.8s\", \"string test\") #=> \"            string t\"\n```\n\nExamples:\n\n```ruby\nsprintf(\"%d %04x\", 123, 123)               #=> \"123 007b\"\nsprintf(\"%08b '%4s'\", 123, 123)            #=> \"01111011 ' 123'\"\nsprintf(\"%1$*2$s %2$d %1$s\", \"hello\", 8)   #=> \"   hello 8 hello\"\nsprintf(\"%1$*2$s %2$d\", \"hello\", -8)       #=> \"hello    -8\"\nsprintf(\"%+g:% g:%-g\", 1.23, 1.23, 1.23)   #=> \"+1.23: 1.23:1.23\"\nsprintf(\"%u\", -123)                        #=> \"-123\"\n```\n\nFor more complex formatting, Ruby supports a reference by name. %<name>s\nstyle uses format style, but %{name} style doesn't.\n\nExamples:\n\n```ruby\nsprintf(\"%<foo>d : %<bar>f\", { :foo => 1, :bar => 2 })\n  #=> 1 : 2.000000\nsprintf(\"%{foo}f\", { :foo => 1 })\n  # => \"1f\"\n```\n\n\nAlso aliased as:\n[`format`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-format)"},"sortText":"000025","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"sprintf(${1:String})${0}"}},{"label":"tap","kind":2,"detail":"Kernel#tap","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.proc.params(arg0: T.untyped).void).returns(A)}\ndef tap(&blk); end\n```\n\n---\n\nYields self to the block, and then returns self. The primary purpose of this\nmethod is to \"tap into\" a method chain, in order to perform operations on\nintermediate results within the chain.\n\n```ruby\n(1..10)                  .tap {|x| puts \"original: #{x}\" }\n  .to_a                  .tap {|x| puts \"array:    #{x}\" }\n  .select {|x| x.even? } .tap {|x| puts \"evens:    #{x}\" }\n  .map {|x| x*x }        .tap {|x| puts \"squares:  #{x}\" }\n```"},"sortText":"000026","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"tap do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"trap","kind":2,"detail":"Kernel#trap","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    signal: T.any(Integer, String, Symbol),\n    command: BasicObject\n  )\n  .returns(T.any(String, Proc))\nend\ndef trap(signal, command=…); end\n```\n\n---\n\nSpecifies the handling of signals. The first parameter is a signal name (a\nstring such as \"SIGALRM\", \"SIGUSR1\", and so on) or a signal number. The\ncharacters \"SIG\" may be omitted from the signal name. The command or block\nspecifies code to be run when the signal is raised. If the command is the\nstring \"IGNORE\" or \"SIG\\_IGN\", the signal will be ignored. If the command is\n\"DEFAULT\" or \"SIG\\_DFL\", the Ruby's default handler will be invoked. If the\ncommand is \"EXIT\", the script will be terminated by the signal. If the\ncommand is \"SYSTEM\\_DEFAULT\", the operating system's default handler will be\ninvoked. Otherwise, the given command or block will be run. The special\nsignal name \"EXIT\" or signal number zero will be invoked just prior to\nprogram termination. trap returns the previous handler for the given signal.\n\n```ruby\nSignal.trap(0, proc { puts \"Terminating: #{$$}\" })\nSignal.trap(\"CLD\")  { puts \"Child died\" }\nfork && Process.wait\n```\n\nproduces:\n\n```\nTerminating: 27461\nChild died\nTerminating: 27460\n```"},"sortText":"000027","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"trap(${1:T.any(Integer, String, Symbol)})${0}"}},{"label":"trap","kind":2,"detail":"Kernel#trap (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    signal: T.any(Integer, String, Symbol),\n    blk: T.proc.params(arg0: Integer).returns(BasicObject)\n  )\n  .returns(T.any(String, Proc))\nend\ndef trap (overload.1)(signal, &blk); end\n```\n\n---\n\nSpecifies the handling of signals. The first parameter is a signal name (a\nstring such as \"SIGALRM\", \"SIGUSR1\", and so on) or a signal number. The\ncharacters \"SIG\" may be omitted from the signal name. The command or block\nspecifies code to be run when the signal is raised. If the command is the\nstring \"IGNORE\" or \"SIG\\_IGN\", the signal will be ignored. If the command is\n\"DEFAULT\" or \"SIG\\_DFL\", the Ruby's default handler will be invoked. If the\ncommand is \"EXIT\", the script will be terminated by the signal. If the\ncommand is \"SYSTEM\\_DEFAULT\", the operating system's default handler will be\ninvoked. Otherwise, the given command or block will be run. The special\nsignal name \"EXIT\" or signal number zero will be invoked just prior to\nprogram termination. trap returns the previous handler for the given signal.\n\n```ruby\nSignal.trap(0, proc { puts \"Terminating: #{$$}\" })\nSignal.trap(\"CLD\")  { puts \"Child died\" }\nfork && Process.wait\n```\n\nproduces:\n\n```\nTerminating: 27461\nChild died\nTerminating: 27460\n```"},"sortText":"000028","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":5}},"newText":"trap(${1:T.any(Integer, String, Symbol)}) do |${2:Integer}|\n  ${3}\nend${0}"}}]}}

[2023-08-10 22:56:47.413] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":38},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  def example\n    puts\n  end\nend\n"}]}}

[2023-08-10 22:56:47.509] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:47.509] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:47.509] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:47.509] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:47.513] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 25
[2023-08-10 22:56:47.514] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":13}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}},"message":"Insert `extend T::Sig`"}]}]}}

[2023-08-10 22:56:47.624] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":39},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  def example\n    puts()\n  end\nend\n"}]}}

[2023-08-10 22:56:47.651] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":40},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  def example\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:56:47.652] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":15,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":4,"character":10},"context":{"triggerKind":1}}}

[2023-08-10 22:56:47.720] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:47.720] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:47.721] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:47.721] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:47.725] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 26
[2023-08-10 22:56:47.726] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":13}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}},"message":"Insert `extend T::Sig`"}]}]}}

[2023-08-10 22:56:47.816] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:47.816] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:47.817] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:47.817] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:47.819] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 27
[2023-08-10 22:56:47.820] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":4,"character":9},"end":{"line":4,"character":10}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `x` does not exist on `A`","relatedInformation":[]},{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":13}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}},"message":"Insert `extend T::Sig`"}]}]}}

[2023-08-10 22:56:47.833] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":15,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[{"label":"example","kind":2,"detail":"A#example","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.untyped)}\ndef example; end\n```"},"sortText":"000000","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":9},"end":{"line":4,"character":10}},"newText":"example${0}"}},{"label":"Complex","kind":2,"detail":"Kernel#Complex","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: T.any(Numeric, String),\n    y: T.any(Numeric, String),\n    exception: T::Boolean\n  )\n  .returns(Complex)\nend\ndef Complex(x, y=…, exception: …); end\n```\n\n---\n\nReturns x+i\\*y;\n\n```ruby\nComplex(1, 2)    #=> (1+2i)\nComplex('1+2i')  #=> (1+2i)\nComplex(nil)     #=> TypeError\nComplex(1, nil)  #=> TypeError\n\nComplex(1, nil, exception: false)  #=> nil\nComplex('1+2', exception: false)   #=> nil\n```\n\nSyntax of string form:\n\n```\nstring form = extra spaces , complex , extra spaces ;\ncomplex = real part | [ sign ] , imaginary part\n        | real part , sign , imaginary part\n        | rational , \"@\" , rational ;\nreal part = rational ;\nimaginary part = imaginary unit | unsigned rational , imaginary unit ;\nrational = [ sign ] , unsigned rational ;\nunsigned rational = numerator | numerator , \"/\" , denominator ;\nnumerator = integer part | fractional part | integer part , fractional part ;\ndenominator = digits ;\ninteger part = digits ;\nfractional part = \".\" , digits , [ ( \"e\" | \"E\" ) , [ sign ] , digits ] ;\nimaginary unit = \"i\" | \"I\" | \"j\" | \"J\" ;\nsign = \"-\" | \"+\" ;\ndigits = digit , { digit | \"_\" , digit };\ndigit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\nextra spaces = ? \\s* ? ;\n```\n\nSee\n[`String#to_c`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_c)."},"sortText":"000001","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":9},"end":{"line":4,"character":10}},"newText":"Complex(${1:T.any(Numeric, String)})${0}"}},{"label":"at_exit","kind":2,"detail":"Kernel#at_exit","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.proc.returns(BasicObject)).returns(Proc)}\ndef at_exit(&blk); end\n```\n\n---\n\nConverts *block* to a `Proc` object (and therefore binds it at the point of\ncall) and registers it for execution when the program exits. If multiple\nhandlers are registered, they are executed in reverse order of registration.\n\n```ruby\ndef do_at_exit(str1)\n  at_exit { print str1 }\nend\nat_exit { puts \"cruel world\" }\ndo_at_exit(\"goodbye \")\nexit\n```\n\n*produces:*\n\n```ruby\ngoodbye cruel world\n```"},"sortText":"000002","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":9},"end":{"line":4,"character":10}},"newText":"at_exit do\n  ${1}\nend${0}"}},{"label":"exec","kind":2,"detail":"Kernel#exec","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: String).returns(T.noreturn)}\ndef exec(*args); end\n```\n\n---\n\nReplaces the current process by running the given external *command*, which\ncan take one of the following forms:\n\n`exec(commandline)`\n:   command line string which is passed to the standard shell\n`exec(cmdname, arg1, ...)`\n:   command name and one or more arguments (no shell)\n`exec([cmdname, argv0], arg1, ...)`\n:   command name, [argv](0) and zero or more arguments (no shell)\n\n\nIn the first form, the string is taken as a command line that is subject to\nshell expansion before being executed.\n\nThe standard shell always means `\"/bin/sh\"` on Unix-like systems, otherwise,\n`ENV[\"RUBYSHELL\"]` or `ENV[\"COMSPEC\"]` on Windows and similar. The command\nis passed as an argument to the `\"-c\"` switch to the shell, except in the\ncase of `COMSPEC`.\n\nIf the string from the first form (`exec(\"command\")`) follows these simple\nrules:\n\n*   no meta characters\n*   not starting with shell reserved word or special built-in\n*   Ruby invokes the command directly without shell\n\n\nYou can force shell invocation by adding \";\" to the string (because \";\" is a\nmeta character).\n\nNote that this behavior is observable by pid obtained (return value of\nspawn() and\n[`IO#pid`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-pid) for\n[`IO.popen`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-popen)) is\nthe pid of the invoked command, not shell.\n\nIn the second form (`exec(\"command1\", \"arg1\", ...)`), the first is taken as\na command name and the rest are passed as parameters to command with no\nshell expansion.\n\nIn the third form (`exec([\"command\", \"argv0\"], \"arg1\", ...)`), starting a\ntwo-element array at the beginning of the command, the first element is the\ncommand to be executed, and the second argument is used as the `argv[0]`\nvalue, which may show up in process listings.\n\nIn order to execute the command, one of the `exec(2)` system calls are used,\nso the running command may inherit some of the environment of the original\nprogram (including open file descriptors).\n\nThis behavior is modified by the given `env` and `options` parameters. See\n::spawn for details.\n\nIf the command fails to execute (typically Errno::ENOENT when it was not\nfound) a\n[`SystemCallError`](https://docs.ruby-lang.org/en/2.7.0/SystemCallError.html)\nexception is raised.\n\nThis method modifies process attributes according to given `options` before\n`exec(2)` system call. See ::spawn for more details about the given\n`options`.\n\nThe modified attributes may be retained when `exec(2)` system call fails.\n\nFor example, hard resource limits are not restorable.\n\nConsider to create a child process using ::spawn or\n[`Kernel#system`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-system)\nif this is not acceptable.\n\n```ruby\nexec \"echo *\"       # echoes list of files in current directory\n# never get here\n\nexec \"echo\", \"*\"    # echoes an asterisk\n# never get here\n```"},"sortText":"000003","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":9},"end":{"line":4,"character":10}},"newText":"exec${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef exit; end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000004","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":9},"end":{"line":4,"character":10}},"newText":"exit${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit (overload.1)(status=…); end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000005","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":9},"end":{"line":4,"character":10}},"newText":"exit${0}"}},{"label":"exit!","kind":2,"detail":"Kernel#exit!","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit!(status=…); end\n```\n\n---\n\nExits the process immediately. No exit handlers are run. *status* is\nreturned to the underlying system as the exit status.\n\n```ruby\nProcess.exit!(true)\n```"},"sortText":"000006","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":9},"end":{"line":4,"character":10}},"newText":"exit!${0}"}},{"label":"extend","kind":2,"detail":"Kernel#extend","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(A)}\ndef extend(*arg0); end\n```"},"sortText":"000007","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":9},"end":{"line":4,"character":10}},"newText":"extend${0}"}},{"label":"instance_exec","kind":2,"detail":"BasicObject#instance_exec","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    args: T.type_parameter(:V),\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_exec(*args, &blk); end\n```\n\n---\n\nExecutes the given block within the context of the receiver (*obj*). In\norder to set the context, the variable `self` is set to *obj* while the code\nis executing, giving the code access to *obj*'s instance variables.\nArguments are passed as block parameters.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\nend\nk = KlassWithSecret.new\nk.instance_exec(5) {|x| @secret+x }   #=> 104\n```"},"sortText":"000008","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":9},"end":{"line":4,"character":10}},"newText":"instance_exec do |${1:T.untyped}|\n  ${2}\nend${0}"}}]}}

[2023-08-10 22:56:48.380] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":16,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"context":{"diagnostics":[]}}}

[2023-08-10 22:56:48.381] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:48.381] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:48.389] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":16,"requestMethod":"textDocument/codeAction","result":[{"title":"Apply all Sorbet fixes for file","kind":"source.fixAll.sorbet","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}},"newText":"sig { returns(NilClass) }\n  "},{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}},"newText":"  extend T::Sig\n"}]}]}}]}

[2023-08-10 22:56:48.676] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":42},"contentChanges":[{"text":"# typed: strict\n\nclass A\n    e\n  def example\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:56:48.676] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":17,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":3,"character":5},"context":{"triggerKind":1}}}

[2023-08-10 22:56:48.772] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:48.772] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:48.772] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:48.772] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:48.778] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 28
[2023-08-10 22:56:48.779] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":5,"character":9},"end":{"line":5,"character":10}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `x` does not exist on `A`","relatedInformation":[]},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":13}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}},"message":"Insert `extend T::Sig`"}]},{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `e` does not exist on `T.class_of(A)`","relatedInformation":[]}]}}

[2023-08-10 22:56:48.856] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":17,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[{"label":"else","kind":14,"detail":"(sorbet) Ruby keyword: else","documentation":"The unhandled condition in case, if and unless expressions.","sortText":"000000","insertTextFormat":1,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"else"}},{"label":"elsif","kind":15,"detail":"(sorbet) Snippet: elsif","documentation":{"kind":"markdown","value":"```ruby\nelsif ${1:expr}$0\n```\n\n---\n\nAn alternate condition for an if expression."},"sortText":"000001","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"elsif ${1:expr}$0"}},{"label":"end","kind":14,"detail":"(sorbet) Ruby keyword: end","documentation":"The end of a syntax block. Used by classes, modules, methods, exception handling and control expressions.","sortText":"000002","insertTextFormat":1,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"end"}},{"label":"ensure","kind":14,"detail":"(sorbet) Ruby keyword: ensure","documentation":"Starts a section of code that is always run when an exception is raised.","sortText":"000003","insertTextFormat":1,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"ensure"}},{"label":"enum","kind":15,"detail":"(sorbet) Snippet: enum","documentation":{"kind":"markdown","value":"```ruby\nclass ${1:EnumName} < T::Enum\n  enums do\n    $0\n  end\nend\n```\n\n---\n\nCreates an enum class"},"sortText":"000004","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"class ${1:EnumName} < T::Enum\n  enums do\n    $0\n  end\nend"}},{"label":"allocate","kind":2,"detail":"Class#allocate","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.untyped)}\ndef allocate; end\n```\n\n---\n\nAllocates space for a new object of *class*'s class and does not call\ninitialize on the new instance. The returned object must be an instance of\n*class*.\n\n```ruby\nklass = Class.new do\n  def initialize(*args)\n    @initialized = true\n  end\n\n  def initialized?\n    @initialized || false\n  end\nend\n\nklass.allocate.initialized? #=> false\n```"},"sortText":"000005","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"allocate${0}"}},{"label":"attached_object","kind":2,"detail":"Class#attached_object","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(BasicObject)}\ndef attached_object; end\n```\n\n---\n\nReturns the object for which the receiver is the singleton class.\n\nRaises a `TypeError` if the class is not a singleton class.\n\n```ruby\nclass Foo; end\n\nFoo.singleton_class.attached_object        #=> Foo\nFoo.attached_object                        #=> TypeError: `Foo' is not a singleton class\nFoo.new.singleton_class.attached_object    #=> #<Foo:0x000000010491a370>\nTrueClass.attached_object                  #=> TypeError: `TrueClass' is not a singleton class\nNilClass.attached_object                   #=> TypeError: `NilClass' is not a singleton class\n```"},"sortText":"000006","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"attached_object${0}"}},{"label":"inherited","kind":2,"detail":"Class#inherited","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T::Class[T.anything]).returns(T.untyped)}\ndef inherited(arg0); end\n```\n\n---\n\nCallback invoked whenever a subclass of the current class is created.\n\nExample:\n\n```ruby\nclass Foo\n  def self.inherited(subclass)\n    puts \"New subclass: #{subclass}\"\n  end\nend\n\nclass Bar < Foo\nend\n\nclass Baz < Bar\nend\n```\n\n*produces:*\n\n```ruby\nNew subclass: Bar\nNew subclass: Baz\n```"},"sortText":"000007","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"inherited(${1:T::Class[T.anything]})${0}"}},{"label":"initialize","kind":2,"detail":"Class#initialize","documentation":{"kind":"markdown","value":"```ruby\nsig {void}\nprivate def initialize; end\n```"},"sortText":"000008","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"initialize${0}"}},{"label":"initialize","kind":2,"detail":"Class#initialize (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(superclass: T::Class[T.anything]).void}\nprivate def initialize (overload.1)(superclass=…); end\n```"},"sortText":"000009","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"initialize${0}"}},{"label":"initialize","kind":2,"detail":"Class#initialize (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T::Class[T.anything]).returns(BasicObject)\n  )\n  .void\nend\nprivate def initialize (overload.2)(&blk); end\n```"},"sortText":"000010","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"initialize do |${1:T::Class[T.anything]}|\n  ${2}\nend${0}"}},{"label":"initialize","kind":2,"detail":"Class#initialize (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    superclass: T::Class[T.anything],\n    blk: T.proc.params(arg0: T::Class[T.anything]).returns(BasicObject)\n  )\n  .void\nend\nprivate def initialize (overload.3)(superclass=…, &blk); end\n```"},"sortText":"000011","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"initialize do |${1:T::Class[T.anything]}|\n  ${2}\nend${0}"}},{"label":"instance_methods","kind":2,"detail":"Class#instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T::Boolean).returns(T::Array[Symbol])}\ndef instance_methods(arg0=…); end\n```"},"sortText":"000012","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"instance_methods${0}"}},{"label":"name","kind":2,"detail":"Class#name","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(String))}\ndef name; end\n```"},"sortText":"000013","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"name${0}"}},{"label":"new","kind":2,"detail":"Class#new","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: T.untyped, blk: T.untyped).returns(T.attached_class (of A))}\ndef new(*args, &blk); end\n```\n\n---\n\nCalls\n[`allocate`](https://docs.ruby-lang.org/en/2.7.0/Class.html#method-i-allocate)\nto create a new object of *class*'s class, then invokes that object's\ninitialize method, passing it *args*. This is the method that ends up\ngetting called whenever an object is constructed using `.new`."},"sortText":"000014","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"new${0}"}},{"label":"subclasses","kind":2,"detail":"Class#subclasses","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[T::Class[T.anything]])}\ndef subclasses; end\n```\n\n---\n\nReturns an array of classes where the receiver is the direct superclass of\nthe class, excluding singleton classes. The order of the returned array is\nnot defined.\n\n```ruby\nclass A; end\nclass B < A; end\nclass C < B; end\nclass D < A; end\n\nA.subclasses        #=> [D, B]\nB.subclasses        #=> [C]\nC.subclasses        #=> []\n```"},"sortText":"000015","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"subclasses${0}"}},{"label":"superclass","kind":2,"detail":"Class#superclass","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(T::Class[T.anything]))}\ndef superclass; end\n```\n\n---\n\nReturns the superclass of *class*, or `nil`.\n\n```ruby\nFile.superclass          #=> IO\nIO.superclass            #=> Object\nObject.superclass        #=> BasicObject\nclass Foo; end\nclass Bar < Foo; end\nBar.superclass           #=> Foo\n```\n\nReturns nil when the given class does not have a parent class:\n\n```ruby\nBasicObject.superclass   #=> nil\n```"},"sortText":"000016","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"superclass${0}"}},{"label":"eql?","kind":2,"detail":"Module#eql?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(other: BasicObject).returns(T::Boolean)}\ndef eql?(other); end\n```"},"sortText":"000017","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"eql?(${1:BasicObject})${0}"}},{"label":"equal?","kind":2,"detail":"Module#equal?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(other: BasicObject).returns(T::Boolean)}\ndef equal?(other); end\n```"},"sortText":"000018","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"equal?(${1:BasicObject})${0}"}},{"label":"extend_object","kind":2,"detail":"Module#extend_object","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BasicObject).returns(T.untyped)}\ndef extend_object(arg0); end\n```\n\n---\n\nExtends the specified object by adding this module's constants and methods\n(which are added as singleton methods). This is the callback method used by\n[`Object#extend`](https://docs.ruby-lang.org/en/2.7.0/Object.html#method-i-extend).\n\n```ruby\nmodule Picky\n  def Picky.extend_object(o)\n    if String === o\n      puts \"Can't add Picky to a String\"\n    else\n      puts \"Picky added to #{o.class}\"\n      super\n    end\n  end\nend\n(s = Array.new).extend Picky  # Call Object.extend\n(s = \"quick brown fox\").extend Picky\n```\n\n*produces:*\n\n```\nPicky added to Array\nCan't add Picky to a String\n```"},"sortText":"000019","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"extend_object(${1:BasicObject})${0}"}},{"label":"extended","kind":2,"detail":"Module#extended","documentation":{"kind":"markdown","value":"```ruby\nsig {params(othermod: Module).returns(T.untyped)}\ndef extended(othermod); end\n```\n\n---\n\nThe equivalent of `included`, but for extended modules.\n\n```ruby\nmodule A\n  def self.extended(mod)\n    puts \"#{self} extended in #{mod}\"\n  end\nend\nmodule Enumerable\n  extend A\nend\n # => prints \"A extended in Enumerable\"\n```"},"sortText":"000020","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"extended(${1:Module})${0}"}},{"label":"alias_method","kind":2,"detail":"Module#alias_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(new_name: Symbol, old_name: Symbol).returns(Symbol)}\ndef alias_method(new_name, old_name); end\n```\n\n---\n\nMakes *new\\_name* a new copy of the method *old\\_name*. This can be used to\nretain access to methods that are overridden.\n\n```ruby\nmodule Mod\n  alias_method :orig_exit, :exit #=> :orig_exit\n  def exit(code=0)\n    puts \"Exiting with code #{code}\"\n    orig_exit(code)\n  end\nend\ninclude Mod\nexit(99)\n```\n\n*produces:*\n\n```ruby\nExiting with code 99\n```"},"sortText":"000021","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"alias_method(${1:Symbol}, ${2:Symbol})${0}"}},{"label":"ancestors","kind":2,"detail":"Module#ancestors","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Module])}\ndef ancestors; end\n```\n\n---\n\nReturns a list of modules included/prepended in *mod* (including *mod*\nitself).\n\n```ruby\nmodule Mod\n  include Math\n  include Comparable\n  prepend Enumerable\nend\n\nMod.ancestors        #=> [Enumerable, Mod, Comparable, Math]\nMath.ancestors       #=> [Math]\nEnumerable.ancestors #=> [Enumerable]\n```"},"sortText":"000022","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"ancestors${0}"}},{"label":"append_features","kind":2,"detail":"Module#append_features","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef append_features(arg0); end\n```\n\n---\n\nWhen this module is included in another, Ruby calls\n[`append_features`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-append_features)\nin this module, passing it the receiving module in *mod*. Ruby's default\nimplementation is to add the constants, methods, and module variables of\nthis module to *mod* if this module has not already been added to *mod* or\none of its ancestors. See also\n[`Module#include`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-include)."},"sortText":"000023","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"append_features(${1:Module})${0}"}},{"label":"attr_accessor","kind":2,"detail":"Module#attr_accessor","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(NilClass)}\ndef attr_accessor(*arg0); end\n```\n\n---\n\nDefines a named attribute for this module, where the name is\n*symbol.*`id2name`, creating an instance variable (`@name`) and a\ncorresponding access method to read it. Also creates a method called `name=`\nto set the attribute.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. Returns an array of defined method names as symbols.\n\n```ruby\nmodule Mod\n  attr_accessor(:one, :two) #=> [:one, :one=, :two, :two=]\nend\nMod.instance_methods.sort   #=> [:one, :one=, :two, :two=]\n```"},"sortText":"000024","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"attr_accessor${0}"}},{"label":"attr_reader","kind":2,"detail":"Module#attr_reader","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(NilClass)}\ndef attr_reader(*arg0); end\n```\n\n---\n\nCreates instance variables and corresponding methods that return the value\nof each instance variable. Equivalent to calling \"`attr`*:name*\" on each\nname in turn. [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html)\narguments are converted to symbols. Returns an array of defined method names\nas symbols."},"sortText":"000025","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"attr_reader${0}"}},{"label":"attr_writer","kind":2,"detail":"Module#attr_writer","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(NilClass)}\ndef attr_writer(*arg0); end\n```\n\n---\n\nCreates an accessor method to allow assignment to the attribute\n*symbol*`.id2name`.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. Returns an array of defined method names as symbols."},"sortText":"000026","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"attr_writer${0}"}},{"label":"class_eval","kind":2,"detail":"Module#class_eval","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, filename: String, lineno: Integer).returns(T.untyped)}\ndef class_eval(arg0, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates the string or block in the context of *mod*, except that when a\nblock is given, constant/class variable lookup is not affected. This can be\nused to add methods to a class. `module_eval` returns the result of\nevaluating its argument. The optional *filename* and *lineno* parameters set\nthe text for error messages.\n\n```ruby\nclass Thing\nend\na = %q{def hello() \"Hello there!\" end}\nThing.module_eval(a)\nputs Thing.new.hello()\nThing.module_eval(\"invalid code\", \"dummy\", 123)\n```\n\n*produces:*\n\n```\nHello there!\ndummy:123:in `module_eval': undefined local variable\n    or method `code' for Thing:Class\n```\n\n\nAlias for:\n[`module_eval`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-module_eval)"},"sortText":"000027","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"class_eval(${1:String})${0}"}},{"label":"class_eval","kind":2,"detail":"Module#class_eval (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef class_eval (overload.1)(&blk); end\n```\n\n---\n\nEvaluates the string or block in the context of *mod*, except that when a\nblock is given, constant/class variable lookup is not affected. This can be\nused to add methods to a class. `module_eval` returns the result of\nevaluating its argument. The optional *filename* and *lineno* parameters set\nthe text for error messages.\n\n```ruby\nclass Thing\nend\na = %q{def hello() \"Hello there!\" end}\nThing.module_eval(a)\nputs Thing.new.hello()\nThing.module_eval(\"invalid code\", \"dummy\", 123)\n```\n\n*produces:*\n\n```\nHello there!\ndummy:123:in `module_eval': undefined local variable\n    or method `code' for Thing:Class\n```\n\n\nAlias for:\n[`module_eval`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-module_eval)"},"sortText":"000028","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"class_eval do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"class_exec","kind":2,"detail":"Module#class_exec","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: BasicObject, blk: T.untyped).returns(T.untyped)}\ndef class_exec(*args, &blk); end\n```\n\n---\n\nEvaluates the given block in the context of the class/module. The method\ndefined in the block will belong to the receiver. Any arguments passed to\nthe method will be passed to the block. This can be used if the block needs\nto access instance variables.\n\n```ruby\nclass Thing\nend\nThing.class_exec{\n  def hello() \"Hello there!\" end\n}\nputs Thing.new.hello()\n```\n\n*produces:*\n\n```ruby\nHello there!\n```\n\n\nAlias for:\n[`module_exec`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-module_exec)"},"sortText":"000029","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"class_exec${0}"}},{"label":"class_variable_defined?","kind":2,"detail":"Module#class_variable_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef class_variable_defined?(arg0); end\n```\n\n---\n\nReturns `true` if the given class variable is defined in *obj*.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nclass Fred\n  @@foo = 99\nend\nFred.class_variable_defined?(:@@foo)    #=> true\nFred.class_variable_defined?(:@@bar)    #=> false\n```"},"sortText":"000030","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"class_variable_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"class_variable_get","kind":2,"detail":"Module#class_variable_get","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.untyped)}\ndef class_variable_get(arg0); end\n```\n\n---\n\nReturns the value of the given class variable (or throws a\n[`NameError`](https://docs.ruby-lang.org/en/2.7.0/NameError.html)\nexception). The `@@` part of the variable name should be included for\nregular class variables.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nclass Fred\n  @@foo = 99\nend\nFred.class_variable_get(:@@foo)     #=> 99\n```"},"sortText":"000031","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"class_variable_get(${1:T.any(Symbol, String)})${0}"}},{"label":"class_variable_set","kind":2,"detail":"Module#class_variable_set","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String), arg1: BasicObject).returns(T.untyped)}\ndef class_variable_set(arg0, arg1); end\n```\n\n---\n\nSets the class variable named by *symbol* to the given object. If the class\nvariable name is passed as a string, that string is converted to a symbol.\n\n```ruby\nclass Fred\n  @@foo = 99\n  def foo\n    @@foo\n  end\nend\nFred.class_variable_set(:@@foo, 101)     #=> 101\nFred.new.foo                             #=> 101\n```"},"sortText":"000032","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"class_variable_set(${1:T.any(Symbol, String)}, ${2:BasicObject})${0}"}},{"label":"class_variables","kind":2,"detail":"Module#class_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {params(inherit: T::Boolean).returns(T::Array[Symbol])}\ndef class_variables(inherit=…); end\n```\n\n---\n\nReturns an array of the names of class variables in *mod*. This includes the\nnames of class variables in any included modules, unless the *inherit*\nparameter is set to `false`.\n\n```ruby\nclass One\n  @@var1 = 1\nend\nclass Two < One\n  @@var2 = 2\nend\nOne.class_variables          #=> [:@@var1]\nTwo.class_variables          #=> [:@@var2, :@@var1]\nTwo.class_variables(false)   #=> [:@@var2]\n```"},"sortText":"000033","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"class_variables${0}"}},{"label":"const_added","kind":2,"detail":"Module#const_added","documentation":{"kind":"markdown","value":"```ruby\nsig {params(const_name: Symbol).returns(T.untyped)}\ndef const_added(const_name); end\n```\n\n---\n\nInvoked as a callback whenever a constant is assigned on the receiver\n\n```ruby\nmodule Chatty\n  def self.const_added(const_name)\n    super\n    puts \"Added #{const_name.inspect}\"\n  end\n  FOO = 1\nend\n```\n\n*produces:*\n\n```\nAdded :FOO\n```"},"sortText":"000034","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"const_added(${1:Symbol})${0}"}},{"label":"const_defined?","kind":2,"detail":"Module#const_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    inherit: T::Boolean\n  )\n  .returns(T::Boolean)\nend\ndef const_defined?(arg0, inherit=…); end\n```\n\n---\n\nSays whether *mod* or its ancestors have a constant with the given name:\n\n```ruby\nFloat.const_defined?(:EPSILON)      #=> true, found in Float itself\nFloat.const_defined?(\"String\")      #=> true, found in Object (ancestor)\nBasicObject.const_defined?(:Hash)   #=> false\n```\n\nIf *mod* is a `Module`, additionally `Object` and its ancestors are checked:\n\n```ruby\nMath.const_defined?(:String)   #=> true, found in Object\n```\n\nIn each of the checked classes or modules, if the constant is not present\nbut there is an autoload for it, `true` is returned directly without\nautoloading:\n\n```ruby\nmodule Admin\n  autoload :User, 'admin/user'\nend\nAdmin.const_defined?(:User)   #=> true\n```\n\nIf the constant is not found the callback `const_missing` is **not** called\nand the method returns `false`.\n\nIf `inherit` is false, the lookup only checks the constants in the receiver:\n\n```ruby\nIO.const_defined?(:SYNC)          #=> true, found in File::Constants (ancestor)\nIO.const_defined?(:SYNC, false)   #=> false, not found in IO itself\n```\n\nIn this case, the same logic for autoloading applies.\n\nIf the argument is not a valid constant name a `NameError` is raised with\nthe message \"wrong constant name *name*\":\n\n```ruby\nHash.const_defined? 'foobar'   #=> NameError: wrong constant name foobar\n```"},"sortText":"000035","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"const_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"const_get","kind":2,"detail":"Module#const_get","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    inherit: T::Boolean\n  )\n  .returns(T.untyped)\nend\ndef const_get(arg0, inherit=…); end\n```\n\n---\n\nChecks for a constant with the given name in *mod*. If `inherit` is set, the\nlookup will also search the ancestors (and `Object` if *mod* is a `Module`).\n\nThe value of the constant is returned if a definition is found, otherwise a\n`NameError` is raised.\n\n```ruby\nMath.const_get(:PI)   #=> 3.14159265358979\n```\n\nThis method will recursively look up constant names if a namespaced class\nname is provided. For example:\n\n```ruby\nmodule Foo; class Bar; end end\nObject.const_get 'Foo::Bar'\n```\n\nThe `inherit` flag is respected on each lookup. For example:\n\n```ruby\nmodule Foo\n  class Bar\n    VAL = 10\n  end\n\n  class Baz < Bar; end\nend\n\nObject.const_get 'Foo::Baz::VAL'         # => 10\nObject.const_get 'Foo::Baz::VAL', false  # => NameError\n```\n\nIf the argument is not a valid constant name a `NameError` will be raised\nwith a warning \"wrong constant name\".\n\n```ruby\nObject.const_get 'foobar' #=> NameError: wrong constant name foobar\n```"},"sortText":"000036","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"const_get(${1:T.any(Symbol, String)})${0}"}},{"label":"const_set","kind":2,"detail":"Module#const_set","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String), arg1: BasicObject).returns(T.untyped)}\ndef const_set(arg0, arg1); end\n```\n\n---\n\nSets the named constant to the given object, returning that object. Creates\na new constant if no constant with the given name previously existed.\n\n```ruby\nMath.const_set(\"HIGH_SCHOOL_PI\", 22.0/7.0)   #=> 3.14285714285714\nMath::HIGH_SCHOOL_PI - Math::PI              #=> 0.00126448926734968\n```\n\nIf `sym` or `str` is not a valid constant name a `NameError` will be raised\nwith a warning \"wrong constant name\".\n\n```ruby\nObject.const_set('foobar', 42) #=> NameError: wrong constant name foobar\n```"},"sortText":"000037","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"const_set(${1:T.any(Symbol, String)}, ${2:BasicObject})${0}"}},{"label":"const_source_location","kind":2,"detail":"Module#const_source_location","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    sym: T.any(Symbol, String),\n    inherit: T::Boolean\n  )\n  .returns(T.nilable([String, Integer]))\nend\ndef const_source_location(sym, inherit=…); end\n```\n\n---\n\nReturns the Ruby source filename and line number containing the definition\nof the constant specified. If the named constant is not found, `nil` is\nreturned. If the constant is found, but its source location can not be\nextracted (constant is defined in C code), empty array is returned.\n\n*inherit* specifies whether to lookup in `mod.ancestors` (`true` by\ndefault).\n\n```ruby\n# test.rb:\nclass A         # line 1\n  C1 = 1\n  C2 = 2\nend\n\nmodule M        # line 6\n  C3 = 3\nend\n\nclass B < A     # line 10\n  include M\n  C4 = 4\nend\n\nclass A # continuation of A definition\n  C2 = 8 # constant redefinition; warned yet allowed\nend\n\np B.const_source_location('C4')           # => [\"test.rb\", 12]\np B.const_source_location('C3')           # => [\"test.rb\", 7]\np B.const_source_location('C1')           # => [\"test.rb\", 2]\n\np B.const_source_location('C3', false)    # => nil  -- don't lookup in ancestors\n\np A.const_source_location('C2')           # => [\"test.rb\", 16] -- actual (last) definition place\n\np Object.const_source_location('B')       # => [\"test.rb\", 10] -- top-level constant could be looked through Object\np Object.const_source_location('A')       # => [\"test.rb\", 1] -- class reopening is NOT considered new definition\n\np B.const_source_location('A')            # => [\"test.rb\", 1]  -- because Object is in ancestors\np M.const_source_location('A')            # => [\"test.rb\", 1]  -- Object is not ancestor, but additionally checked for modules\n\np Object.const_source_location('A::C1')   # => [\"test.rb\", 2]  -- nesting is supported\np Object.const_source_location('String')  # => []  -- constant is defined in C code\n```"},"sortText":"000038","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"const_source_location(${1:T.any(Symbol, String)})${0}"}},{"label":"define_method","kind":2,"detail":"Module#define_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    arg1: T.any(Proc, Method, UnboundMethod)\n  )\n  .returns(Symbol)\nend\ndef define_method(arg0, arg1=…); end\n```\n\n---\n\nDefines an instance method in the receiver. The *method* parameter can be a\n`Proc`, a `Method` or an `UnboundMethod` object. If a block is specified, it\nis used as the method body. If a block or the *method* parameter has\nparameters, they're used as method parameters. This block is evaluated using\n[`instance_eval`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html#method-i-instance_eval).\n\n```ruby\nclass A\n  def fred\n    puts \"In Fred\"\n  end\n  def create_method(name, &block)\n    self.class.define_method(name, &block)\n  end\n  define_method(:wilma) { puts \"Charge it!\" }\n  define_method(:flint) {|name| puts \"I'm #{name}!\"}\nend\nclass B < A\n  define_method(:barney, instance_method(:fred))\nend\na = B.new\na.barney\na.wilma\na.flint('Dino')\na.create_method(:betty) { p self }\na.betty\n```\n\n*produces:*\n\n```\nIn Fred\nCharge it!\nI'm Dino!\n#<B:0x401b39e8>\n```"},"sortText":"000039","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"define_method(${1:T.any(Symbol, String)})${0}"}},{"label":"define_method","kind":2,"detail":"Module#define_method (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String), blk: T.untyped).returns(Symbol)}\ndef define_method (overload.1)(arg0, &blk); end\n```\n\n---\n\nDefines an instance method in the receiver. The *method* parameter can be a\n`Proc`, a `Method` or an `UnboundMethod` object. If a block is specified, it\nis used as the method body. If a block or the *method* parameter has\nparameters, they're used as method parameters. This block is evaluated using\n[`instance_eval`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html#method-i-instance_eval).\n\n```ruby\nclass A\n  def fred\n    puts \"In Fred\"\n  end\n  def create_method(name, &block)\n    self.class.define_method(name, &block)\n  end\n  define_method(:wilma) { puts \"Charge it!\" }\n  define_method(:flint) {|name| puts \"I'm #{name}!\"}\nend\nclass B < A\n  define_method(:barney, instance_method(:fred))\nend\na = B.new\na.barney\na.wilma\na.flint('Dino')\na.create_method(:betty) { p self }\na.betty\n```\n\n*produces:*\n\n```\nIn Fred\nCharge it!\nI'm Dino!\n#<B:0x401b39e8>\n```"},"sortText":"000040","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"define_method(${1:T.any(Symbol, String)})${0}"}},{"label":"deprecate_constant","kind":2,"detail":"Module#deprecate_constant","documentation":{"kind":"markdown","value":"```ruby\nsig {params(_: T.untyped).returns(T.untyped)}\ndef deprecate_constant(*_); end\n```\n\n---\n\nMakes a list of existing constants deprecated. Attempt to refer to them will\nproduce a warning.\n\n```ruby\nmodule HTTP\n  NotFound = Exception.new\n  NOT_FOUND = NotFound # previous version of the library used this name\n\n  deprecate_constant :NOT_FOUND\nend\n\nHTTP::NOT_FOUND\n# warning: constant HTTP::NOT_FOUND is deprecated\n```"},"sortText":"000041","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"deprecate_constant${0}"}},{"label":"freeze","kind":2,"detail":"Module#freeze","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.class_of(A))}\ndef freeze; end\n```\n\n---\n\nPrevents further modifications to *mod*.\n\nThis method returns self."},"sortText":"000042","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"freeze${0}"}},{"label":"include","kind":2,"detail":"Module#include","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef include(*arg0); end\n```\n\n---\n\nInvokes\n[`Module.append_features`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-append_features)\non each parameter in reverse order."},"sortText":"000043","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"include${0}"}},{"label":"include?","kind":2,"detail":"Module#include?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T::Boolean)}\ndef include?(arg0); end\n```\n\n---\n\nReturns `true` if *module* is included or prepended in *mod* or one of\n*mod*'s ancestors.\n\n```ruby\nmodule A\nend\nclass B\n  include A\nend\nclass C < B\nend\nB.include?(A)   #=> true\nC.include?(A)   #=> true\nA.include?(A)   #=> false\n```"},"sortText":"000044","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"include?(${1:Module})${0}"}},{"label":"included","kind":2,"detail":"Module#included","documentation":{"kind":"markdown","value":"```ruby\nsig {params(othermod: Module).returns(T.untyped)}\ndef included(othermod); end\n```\n\n---\n\nCallback invoked whenever the receiver is included in another module or\nclass. This should be used in preference to `Module.append_features` if your\ncode wants to perform some action when a module is included in another.\n\n```ruby\nmodule A\n  def A.included(mod)\n    puts \"#{self} included in #{mod}\"\n  end\nend\nmodule Enumerable\n  include A\nend\n # => prints \"A included in Enumerable\"\n```"},"sortText":"000045","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"included(${1:Module})${0}"}},{"label":"included_modules","kind":2,"detail":"Module#included_modules","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Module])}\ndef included_modules; end\n```\n\n---\n\nReturns the list of modules included or prepended in *mod* or one of *mod*'s\nancestors.\n\n```ruby\nmodule Sub\nend\n\nmodule Mixin\n  prepend Sub\nend\n\nmodule Outer\n  include Mixin\nend\n\nMixin.included_modules   #=> [Sub]\nOuter.included_modules   #=> [Sub, Mixin]\n```"},"sortText":"000046","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"included_modules${0}"}},{"label":"inspect","kind":2,"detail":"Module#inspect","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(String)}\ndef inspect; end\n```\n\n---\n\nReturns a string representing this module or class. For basic classes and\nmodules, this is the name. For singletons, we show information on the thing\nwe're attached to as well.\n\nAlias for:\n[`to_s`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-to_s)"},"sortText":"000047","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"inspect${0}"}},{"label":"instance_method","kind":2,"detail":"Module#instance_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(UnboundMethod)}\ndef instance_method(arg0); end\n```\n\n---\n\nReturns an `UnboundMethod` representing the given instance method in *mod*.\n\n```ruby\nclass Interpreter\n  def do_a() print \"there, \"; end\n  def do_d() print \"Hello \";  end\n  def do_e() print \"!\\n\";     end\n  def do_v() print \"Dave\";    end\n  Dispatcher = {\n    \"a\" => instance_method(:do_a),\n    \"d\" => instance_method(:do_d),\n    \"e\" => instance_method(:do_e),\n    \"v\" => instance_method(:do_v)\n  }\n  def interpret(string)\n    string.each_char {|b| Dispatcher[b].bind(self).call }\n  end\nend\n\ninterpreter = Interpreter.new\ninterpreter.interpret('dave')\n```\n\n*produces:*\n\n```ruby\nHello there, Dave!\n```"},"sortText":"000048","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"instance_method(${1:T.any(Symbol, String)})${0}"}},{"label":"method_added","kind":2,"detail":"Module#method_added","documentation":{"kind":"markdown","value":"```ruby\nsig {params(meth: Symbol).returns(T.untyped)}\ndef method_added(meth); end\n```\n\n---\n\nInvoked as a callback whenever an instance method is added to the receiver.\n\n```ruby\nmodule Chatty\n  def self.method_added(method_name)\n    puts \"Adding #{method_name.inspect}\"\n  end\n  def self.some_class_method() end\n  def some_instance_method() end\nend\n```\n\n*produces:*\n\n```ruby\nAdding :some_instance_method\n```"},"sortText":"000049","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"method_added(${1:Symbol})${0}"}},{"label":"method_defined?","kind":2,"detail":"Module#method_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method_name: T.any(Symbol, String),\n    inherit: T::Boolean\n  )\n  .returns(T::Boolean)\nend\ndef method_defined?(method_name, inherit=…); end\n```\n\n---\n\nReturns `true` if the named method is defined by *mod*. If *inherit* is set,\nthe lookup will also search *mod*'s ancestors. Public and protected methods\nare matched. [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html)\narguments are converted to symbols.\n\n```ruby\nmodule A\n  def method1()  end\n  def protected_method1()  end\n  protected :protected_method1\nend\nclass B\n  def method2()  end\n  def private_method2()  end\n  private :private_method2\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1              #=> true\nC.method_defined? \"method1\"             #=> true\nC.method_defined? \"method2\"             #=> true\nC.method_defined? \"method2\", true       #=> true\nC.method_defined? \"method2\", false      #=> false\nC.method_defined? \"method3\"             #=> true\nC.method_defined? \"protected_method1\"   #=> true\nC.method_defined? \"method4\"             #=> false\nC.method_defined? \"private_method2\"     #=> false\n```"},"sortText":"000050","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"method_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"method_removed","kind":2,"detail":"Module#method_removed","documentation":{"kind":"markdown","value":"```ruby\nsig {params(method_name: Symbol).returns(T.untyped)}\ndef method_removed(method_name); end\n```\n\n---\n\nInvoked as a callback whenever an instance method is removed from the\nreceiver.\n\n```ruby\nmodule Chatty\n  def self.method_removed(method_name)\n    puts \"Removing #{method_name.inspect}\"\n  end\n  def self.some_class_method() end\n  def some_instance_method() end\n  class << self\n    remove_method :some_class_method\n  end\n  remove_method :some_instance_method\nend\n```\n\n*produces:*\n\n```ruby\nRemoving :some_instance_method\n```"},"sortText":"000051","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"method_removed(${1:Symbol})${0}"}},{"label":"module_eval","kind":2,"detail":"Module#module_eval","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, filename: String, lineno: Integer).returns(T.untyped)}\ndef module_eval(arg0, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates the string or block in the context of *mod*, except that when a\nblock is given, constant/class variable lookup is not affected. This can be\nused to add methods to a class. `module_eval` returns the result of\nevaluating its argument. The optional *filename* and *lineno* parameters set\nthe text for error messages.\n\n```ruby\nclass Thing\nend\na = %q{def hello() \"Hello there!\" end}\nThing.module_eval(a)\nputs Thing.new.hello()\nThing.module_eval(\"invalid code\", \"dummy\", 123)\n```\n\n*produces:*\n\n```\nHello there!\ndummy:123:in `module_eval': undefined local variable\n    or method `code' for Thing:Class\n```\n\n\nAlso aliased as:\n[`class_eval`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-class_eval)"},"sortText":"000052","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"module_eval(${1:String})${0}"}},{"label":"module_eval","kind":2,"detail":"Module#module_eval (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef module_eval (overload.1)(&blk); end\n```\n\n---\n\nEvaluates the string or block in the context of *mod*, except that when a\nblock is given, constant/class variable lookup is not affected. This can be\nused to add methods to a class. `module_eval` returns the result of\nevaluating its argument. The optional *filename* and *lineno* parameters set\nthe text for error messages.\n\n```ruby\nclass Thing\nend\na = %q{def hello() \"Hello there!\" end}\nThing.module_eval(a)\nputs Thing.new.hello()\nThing.module_eval(\"invalid code\", \"dummy\", 123)\n```\n\n*produces:*\n\n```\nHello there!\ndummy:123:in `module_eval': undefined local variable\n    or method `code' for Thing:Class\n```\n\n\nAlso aliased as:\n[`class_eval`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-class_eval)"},"sortText":"000053","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"module_eval do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"module_exec","kind":2,"detail":"Module#module_exec","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: BasicObject, blk: T.untyped).returns(T.untyped)}\ndef module_exec(*args, &blk); end\n```\n\n---\n\nEvaluates the given block in the context of the class/module. The method\ndefined in the block will belong to the receiver. Any arguments passed to\nthe method will be passed to the block. This can be used if the block needs\nto access instance variables.\n\n```ruby\nclass Thing\nend\nThing.class_exec{\n  def hello() \"Hello there!\" end\n}\nputs Thing.new.hello()\n```\n\n*produces:*\n\n```ruby\nHello there!\n```\n\n\nAlso aliased as:\n[`class_exec`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-class_exec)"},"sortText":"000054","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"module_exec${0}"}},{"label":"module_function","kind":2,"detail":"Module#module_function","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef module_function(*arg0); end\n```\n\n---\n\nCreates module functions for the named methods. These functions may be\ncalled with the module as a receiver, and also become available as instance\nmethods to classes that mix in the module.\n[`Module`](https://docs.ruby-lang.org/en/2.7.0/Module.html) functions are\ncopies of the original, and so may be changed independently. The\ninstance-method versions are made private. If used with no arguments,\nsubsequently defined methods become module functions.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. If a single argument is passed, it is returned. If no\nargument is passed, nil is returned. If multiple arguments are passed, the\narguments are returned as an array.\n\n```ruby\nmodule Mod\n  def one\n    \"This is one\"\n  end\n  module_function :one\nend\nclass Cls\n  include Mod\n  def call_one\n    one\n  end\nend\nMod.one     #=> \"This is one\"\nc = Cls.new\nc.call_one  #=> \"This is one\"\nmodule Mod\n  def one\n    \"This is the new one\"\n  end\nend\nMod.one     #=> \"This is one\"\nc.call_one  #=> \"This is the new one\"\n```"},"sortText":"000055","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"module_function${0}"}},{"label":"prepend","kind":2,"detail":"Module#prepend","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef prepend(*arg0); end\n```\n\n---\n\nInvokes\n[`Module.prepend_features`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-prepend_features)\non each parameter in reverse order."},"sortText":"000056","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"prepend${0}"}},{"label":"prepend_features","kind":2,"detail":"Module#prepend_features","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef prepend_features(arg0); end\n```\n\n---\n\nWhen this module is prepended in another, Ruby calls\n[`prepend_features`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-prepend_features)\nin this module, passing it the receiving module in *mod*. Ruby's default\nimplementation is to overlay the constants, methods, and module variables of\nthis module to *mod* if this module has not already been added to *mod* or\none of its ancestors. See also\n[`Module#prepend`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-prepend)."},"sortText":"000057","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"prepend_features(${1:Module})${0}"}},{"label":"prepended","kind":2,"detail":"Module#prepended","documentation":{"kind":"markdown","value":"```ruby\nsig {params(othermod: Module).returns(T.untyped)}\ndef prepended(othermod); end\n```\n\n---\n\nThe equivalent of `included`, but for prepended modules.\n\n```ruby\nmodule A\n  def self.prepended(mod)\n    puts \"#{self} prepended to #{mod}\"\n  end\nend\nmodule Enumerable\n  prepend A\nend\n # => prints \"A prepended to Enumerable\"\n```"},"sortText":"000058","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"prepended(${1:Module})${0}"}},{"label":"private","kind":2,"detail":"Module#private","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef private(*arg0); end\n```\n\n---\n\nWith no arguments, sets the default visibility for subsequently defined\nmethods to private. With arguments, sets the named methods to have private\nvisibility. [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html)\narguments are converted to symbols. An\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of Symbols and/or\nStrings is also accepted. If a single argument is passed, it is returned. If\nno argument is passed, nil is returned. If multiple arguments are passed,\nthe arguments are returned as an array.\n\n```ruby\nmodule Mod\n  def a()  end\n  def b()  end\n  private\n  def c()  end\n  private :a\nend\nMod.private_instance_methods   #=> [:a, :c]\n```\n\nNote that to show a private method on\n[`RDoc`](https://docs.ruby-lang.org/en/2.7.0/RDoc.html), use `:doc:`."},"sortText":"000059","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"private${0}"}},{"label":"private_class_method","kind":2,"detail":"Module#private_class_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Array[T.any(Symbol, String)], Symbol, String)\n  )\n  .returns(T.class_of(A))\nend\ndef private_class_method(*arg0); end\n```\n\n---\n\nMakes existing class methods private. Often used to hide the default\nconstructor `new`.\n\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. An\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of Symbols and/or\nStrings is also accepted.\n\n```ruby\nclass SimpleSingleton  # Not thread safe\n  private_class_method :new\n  def SimpleSingleton.create(*args, &block)\n    @me = new(*args, &block) if ! @me\n    @me\n  end\nend\n```"},"sortText":"000060","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"private_class_method${0}"}},{"label":"private_constant","kind":2,"detail":"Module#private_constant","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef private_constant(*arg0); end\n```\n\n---\n\nMakes a list of existing constants private."},"sortText":"000061","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"private_constant${0}"}},{"label":"private_instance_methods","kind":2,"detail":"Module#private_instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(include_super: T::Boolean).returns(T::Array[Symbol])}\ndef private_instance_methods(include_super=…); end\n```\n\n---\n\nReturns a list of the private instance methods defined in *mod*. If the\noptional parameter is `false`, the methods of any ancestors are not\nincluded.\n\n```ruby\nmodule Mod\n  def method1()  end\n  private :method1\n  def method2()  end\nend\nMod.instance_methods           #=> [:method2]\nMod.private_instance_methods   #=> [:method1]\n```"},"sortText":"000062","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"private_instance_methods${0}"}},{"label":"private_method_defined?","kind":2,"detail":"Module#private_method_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef private_method_defined?(arg0); end\n```\n\n---\n\nReturns `true` if the named private method is defined by *mod*. If *inherit*\nis set, the lookup will also search *mod*'s ancestors.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nmodule A\n  def method1()  end\nend\nclass B\n  private\n  def method2()  end\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1                   #=> true\nC.private_method_defined? \"method1\"          #=> false\nC.private_method_defined? \"method2\"          #=> true\nC.private_method_defined? \"method2\", true    #=> true\nC.private_method_defined? \"method2\", false   #=> false\nC.method_defined? \"method2\"                  #=> false\n```"},"sortText":"000063","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"private_method_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"protected","kind":2,"detail":"Module#protected","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef protected(*arg0); end\n```\n\n---\n\nWith no arguments, sets the default visibility for subsequently defined\nmethods to protected. With arguments, sets the named methods to have\nprotected visibility.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. An\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of Symbols and/or\nStrings is also accepted. If a single argument is passed, it is returned. If\nno argument is passed, nil is returned. If multiple arguments are passed,\nthe arguments are returned as an array.\n\nIf a method has protected visibility, it is callable only where `self` of\nthe context is the same as the method. (method definition or\ninstance\\_eval). This behavior is different from Java's protected method.\nUsually `private` should be used.\n\nNote that a protected method is slow because it can't use inline cache.\n\nTo show a private method on\n[`RDoc`](https://docs.ruby-lang.org/en/2.7.0/RDoc.html), use `:doc:` instead\nof this."},"sortText":"000064","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"protected${0}"}},{"label":"protected_instance_methods","kind":2,"detail":"Module#protected_instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(include_super: T::Boolean).returns(T::Array[Symbol])}\ndef protected_instance_methods(include_super=…); end\n```\n\n---\n\nReturns a list of the protected instance methods defined in *mod*. If the\noptional parameter is `false`, the methods of any ancestors are not\nincluded."},"sortText":"000065","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"protected_instance_methods${0}"}},{"label":"protected_method_defined?","kind":2,"detail":"Module#protected_method_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef protected_method_defined?(arg0); end\n```\n\n---\n\nReturns `true` if the named protected method is defined *mod*. If *inherit*\nis set, the lookup will also search *mod*'s ancestors.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nmodule A\n  def method1()  end\nend\nclass B\n  protected\n  def method2()  end\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1                    #=> true\nC.protected_method_defined? \"method1\"         #=> false\nC.protected_method_defined? \"method2\"         #=> true\nC.protected_method_defined? \"method2\", true   #=> true\nC.protected_method_defined? \"method2\", false  #=> false\nC.method_defined? \"method2\"                   #=> true\n```"},"sortText":"000066","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"protected_method_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"public_class_method","kind":2,"detail":"Module#public_class_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Array[T.any(Symbol, String)], Symbol, String)\n  )\n  .returns(T.class_of(A))\nend\ndef public_class_method(*arg0); end\n```\n\n---\n\nMakes a list of existing class methods public.\n\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. An\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of Symbols and/or\nStrings is also accepted."},"sortText":"000067","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"public_class_method${0}"}},{"label":"public_instance_method","kind":2,"detail":"Module#public_instance_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(UnboundMethod)}\ndef public_instance_method(arg0); end\n```\n\n---\n\nSimilar to *instance\\_method*, searches public method only."},"sortText":"000068","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"public_instance_method(${1:Symbol})${0}"}},{"label":"public_instance_methods","kind":2,"detail":"Module#public_instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(include_super: T::Boolean).returns(T::Array[Symbol])}\ndef public_instance_methods(include_super=…); end\n```\n\n---\n\nReturns a list of the public instance methods defined in *mod*. If the\noptional parameter is `false`, the methods of any ancestors are not\nincluded."},"sortText":"000069","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"public_instance_methods${0}"}},{"label":"public_method_defined?","kind":2,"detail":"Module#public_method_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef public_method_defined?(arg0); end\n```\n\n---\n\nReturns `true` if the named public method is defined by *mod*. If *inherit*\nis set, the lookup will also search *mod*'s ancestors.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nmodule A\n  def method1()  end\nend\nclass B\n  protected\n  def method2()  end\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1                 #=> true\nC.public_method_defined? \"method1\"         #=> true\nC.public_method_defined? \"method1\", true   #=> true\nC.public_method_defined? \"method1\", false  #=> true\nC.public_method_defined? \"method2\"         #=> false\nC.method_defined? \"method2\"                #=> true\n```"},"sortText":"000070","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"public_method_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"refine","kind":2,"detail":"Module#refine","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T::Class[T.anything],\n    blk: T.proc.params(arg0: T.untyped).returns(BasicObject)\n  )\n  .returns(T.class_of(A))\nend\ndef refine(arg0, &blk); end\n```\n\n---\n\nRefine *mod* in the receiver.\n\nReturns a module, where refined methods are defined."},"sortText":"000071","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"refine(${1:T::Class[T.anything]}) do |${2:T.untyped}|\n  ${3}\nend${0}"}},{"label":"refinements","kind":2,"detail":"Module#refinements","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Module])}\ndef refinements; end\n```\n\n---\n\np A.refinements\n```\n*produces:*\n\n```ruby\n[#<refinement:Integer@A>, #<refinement:String@B>]\n```"},"sortText":"000072","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"refinements${0}"}},{"label":"remove_class_variable","kind":2,"detail":"Module#remove_class_variable","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(T.untyped)}\ndef remove_class_variable(arg0); end\n```\n\n---\n\nRemoves the named class variable from the receiver, returning that\nvariable's value.\n\n```ruby\nclass Example\n  @@var = 99\n  puts remove_class_variable(:@@var)\n  p(defined? @@var)\nend\n```\n\n*produces:*\n\n```ruby\n99\nnil\n```"},"sortText":"000073","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"remove_class_variable(${1:Symbol})${0}"}},{"label":"remove_const","kind":2,"detail":"Module#remove_const","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(T.untyped)}\ndef remove_const(arg0); end\n```\n\n---\n\nRemoves the definition of the given constant, returning that constant's\nprevious value. If that constant referred to a module, this will not change\nthat module's name and can lead to confusion."},"sortText":"000074","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"remove_const(${1:Symbol})${0}"}},{"label":"remove_method","kind":2,"detail":"Module#remove_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef remove_method(arg0); end\n```\n\n---\n\nRemoves the method identified by *symbol* from the current class. For an\nexample, see\n[`Module#undef_method`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-undef_method).\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols."},"sortText":"000075","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"remove_method(${1:T.any(Symbol, String)})${0}"}},{"label":"ruby2_keywords","kind":2,"detail":"Module#ruby2_keywords","documentation":{"kind":"markdown","value":"```ruby\nsig {params(method_name: Symbol).returns(T.class_of(A))}\ndef ruby2_keywords(*method_name); end\n```\n\n---\n\nFor the given method names, marks the method as passing keywords through a\nnormal argument splat. This should only be called on methods that accept an\nargument splat (`*args`) but not explicit keywords or a keyword splat. It\nmarks the method such that if the method is called with keyword arguments,\nthe final hash argument is marked with a special flag such that if it is the\nfinal element of a normal argument splat to another method call, and that\nmethod call does not include explicit keywords or a keyword splat, the final\nelement is interpreted as keywords. In other words, keywords will be passed\nthrough the method to other methods.\n\nThis should only be used for methods that delegate keywords to another\nmethod, and only for backwards compatibility with Ruby versions before 3.0.\nSee\nhttps://www.ruby-lang.org/en/news/2019/12/12/separation-of-positional-and-keyword-arguments-in-ruby-3-0/\nfor details on why `ruby2_keywords` exists and when and how to use it.\n\nThis method will probably be removed at some point, as it exists only for\nbackwards compatibility. As it does not exist in Ruby versions before 2.7,\ncheck that the module responds to this method before calling it:\n\n```ruby\nmodule Mod\n  def foo(meth, *args, &block)\n    send(:\"do_#{meth}\", *args, &block)\n  end\n  ruby2_keywords(:foo) if respond_to?(:ruby2_keywords, true)\nend\n```\n\nHowever, be aware that if the `ruby2_keywords` method is removed, the\nbehavior of the `foo` method using the above approach will change so that\nthe method does not pass through keywords."},"sortText":"000076","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"ruby2_keywords${0}"}},{"label":"singleton_class?","kind":2,"detail":"Module#singleton_class?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef singleton_class?; end\n```\n\n---\n\nReturns `true` if *mod* is a singleton class or `false` if it is an ordinary\nclass or module.\n\n```ruby\nclass C\nend\nC.singleton_class?                  #=> false\nC.singleton_class.singleton_class?  #=> true\n```"},"sortText":"000077","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"singleton_class?${0}"}},{"label":"undef_method","kind":2,"detail":"Module#undef_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef undef_method(arg0); end\n```\n\n---\n\nPrevents the current class from responding to calls to the named method.\nContrast this with `remove_method`, which deletes the method from the\nparticular class; Ruby will still search superclasses and mixed-in modules\nfor a possible receiver.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nclass Parent\n  def hello\n    puts \"In parent\"\n  end\nend\nclass Child < Parent\n  def hello\n    puts \"In child\"\n  end\nend\n\nc = Child.new\nc.hello\n\nclass Child\n  remove_method :hello  # remove from child, still in parent\nend\nc.hello\n\nclass Child\n  undef_method :hello   # prevent any calls to 'hello'\nend\nc.hello\n```\n\n*produces:*\n\n```\nIn child\nIn parent\nprog.rb:23: undefined method `hello' for #<Child:0x401b3bb4> (NoMethodError)\n```"},"sortText":"000078","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"undef_method(${1:T.any(Symbol, String)})${0}"}},{"label":"singleton_class","kind":2,"detail":"Object#singleton_class","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.untyped)}\ndef singleton_class; end\n```"},"sortText":"000079","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"singleton_class${0}"}},{"label":"enum_for","kind":2,"detail":"Kernel#enum_for","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef enum_for(method=…, *args); end\n```"},"sortText":"000080","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"enum_for${0}"}},{"label":"enum_for","kind":2,"detail":"Kernel#enum_for (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef enum_for (overload.1)(method=…, *args, &blk); end\n```"},"sortText":"000081","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"enum_for${0}"}},{"label":"eval","kind":2,"detail":"Kernel#eval","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: String,\n    arg1: T.nilable(Binding),\n    filename: String,\n    lineno: Integer\n  )\n  .returns(T.untyped)\nend\ndef eval(arg0, arg1=…, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates the Ruby expression(s) in *string*. If *binding* is given, which\nmust be a [`Binding`](https://docs.ruby-lang.org/en/2.7.0/Binding.html)\nobject, the evaluation is performed in its context. If the optional\n*filename* and *lineno* parameters are present, they will be used when\nreporting syntax errors.\n\n```ruby\ndef get_binding(str)\n  return binding\nend\nstr = \"hello\"\neval \"str + ' Fred'\"                      #=> \"hello Fred\"\neval \"str + ' Fred'\", get_binding(\"bye\")  #=> \"bye Fred\"\n```"},"sortText":"000082","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"eval(${1:String})${0}"}},{"label":"exec","kind":2,"detail":"Kernel#exec","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: String).returns(T.noreturn)}\ndef exec(*args); end\n```\n\n---\n\nReplaces the current process by running the given external *command*, which\ncan take one of the following forms:\n\n`exec(commandline)`\n:   command line string which is passed to the standard shell\n`exec(cmdname, arg1, ...)`\n:   command name and one or more arguments (no shell)\n`exec([cmdname, argv0], arg1, ...)`\n:   command name, [argv](0) and zero or more arguments (no shell)\n\n\nIn the first form, the string is taken as a command line that is subject to\nshell expansion before being executed.\n\nThe standard shell always means `\"/bin/sh\"` on Unix-like systems, otherwise,\n`ENV[\"RUBYSHELL\"]` or `ENV[\"COMSPEC\"]` on Windows and similar. The command\nis passed as an argument to the `\"-c\"` switch to the shell, except in the\ncase of `COMSPEC`.\n\nIf the string from the first form (`exec(\"command\")`) follows these simple\nrules:\n\n*   no meta characters\n*   not starting with shell reserved word or special built-in\n*   Ruby invokes the command directly without shell\n\n\nYou can force shell invocation by adding \";\" to the string (because \";\" is a\nmeta character).\n\nNote that this behavior is observable by pid obtained (return value of\nspawn() and\n[`IO#pid`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-pid) for\n[`IO.popen`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-popen)) is\nthe pid of the invoked command, not shell.\n\nIn the second form (`exec(\"command1\", \"arg1\", ...)`), the first is taken as\na command name and the rest are passed as parameters to command with no\nshell expansion.\n\nIn the third form (`exec([\"command\", \"argv0\"], \"arg1\", ...)`), starting a\ntwo-element array at the beginning of the command, the first element is the\ncommand to be executed, and the second argument is used as the `argv[0]`\nvalue, which may show up in process listings.\n\nIn order to execute the command, one of the `exec(2)` system calls are used,\nso the running command may inherit some of the environment of the original\nprogram (including open file descriptors).\n\nThis behavior is modified by the given `env` and `options` parameters. See\n::spawn for details.\n\nIf the command fails to execute (typically Errno::ENOENT when it was not\nfound) a\n[`SystemCallError`](https://docs.ruby-lang.org/en/2.7.0/SystemCallError.html)\nexception is raised.\n\nThis method modifies process attributes according to given `options` before\n`exec(2)` system call. See ::spawn for more details about the given\n`options`.\n\nThe modified attributes may be retained when `exec(2)` system call fails.\n\nFor example, hard resource limits are not restorable.\n\nConsider to create a child process using ::spawn or\n[`Kernel#system`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-system)\nif this is not acceptable.\n\n```ruby\nexec \"echo *\"       # echoes list of files in current directory\n# never get here\n\nexec \"echo\", \"*\"    # echoes an asterisk\n# never get here\n```"},"sortText":"000083","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"exec${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef exit; end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000084","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"exit${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit (overload.1)(status=…); end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000085","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"exit${0}"}},{"label":"exit!","kind":2,"detail":"Kernel#exit!","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit!(status=…); end\n```\n\n---\n\nExits the process immediately. No exit handlers are run. *status* is\nreturned to the underlying system as the exit status.\n\n```ruby\nProcess.exit!(true)\n```"},"sortText":"000086","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"exit!${0}"}},{"label":"extend","kind":2,"detail":"Kernel#extend","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef extend(*arg0); end\n```"},"sortText":"000087","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"extend${0}"}},{"label":"BigDecimal","kind":2,"detail":"Kernel#BigDecimal","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    initial: T.any(Integer, Float, Rational, BigDecimal, String),\n    digits: Integer,\n    exception: T::Boolean\n  )\n  .returns(BigDecimal)\nend\ndef BigDecimal(initial, digits=…, exception: …); end\n```\n\n---\n\n```\nReturns the \\BigDecimal converted from +value+\nwith a precision of +ndigits+ decimal digits.\n\nWhen +ndigits+ is less than the number of significant digits\nin the value, the result is rounded to that number of digits,\naccording to the current rounding mode; see BigDecimal.mode.\n```\n\nReturns `value` converted to a\n[`BigDecimal`](https://docs.ruby-lang.org/en/2.7.0/BigDecimal.html),\ndepending on the type of `value`:\n\n*   [`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html),\n    [`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html),\n    [`Rational`](https://docs.ruby-lang.org/en/2.7.0/Rational.html),\n    [`Complex`](https://docs.ruby-lang.org/en/2.7.0/Complex.html), or\n    BigDecimal: converted directly:\n\n```ruby\n# Integer, Complex, or BigDecimal value does not require ndigits; ignored if given.\nBigDecimal(2)                     # => 0.2e1\nBigDecimal(Complex(2, 0))         # => 0.2e1\nBigDecimal(BigDecimal(2))         # => 0.2e1\n# Float or Rational value requires ndigits.\nBigDecimal(2.0, 0)                # => 0.2e1\nBigDecimal(Rational(2, 1), 0)     # => 0.2e1\n```\n\n*   String: converted by parsing if it contains an integer or floating-point\n    literal; leading and trailing whitespace is ignored:\n\n```ruby\n# String does not require ndigits; ignored if given.\nBigDecimal('2')     # => 0.2e1\nBigDecimal('2.0')   # => 0.2e1\nBigDecimal('0.2e1') # => 0.2e1\nBigDecimal(' 2.0 ') # => 0.2e1\n```\n\n*   Other type that responds to method `:to_str`: first converted to a\n    string, then converted to a\n    [`BigDecimal`](https://docs.ruby-lang.org/en/2.7.0/BigDecimal.html), as\n    above.\n\n*   Other type:\n\n    *   Raises an exception if keyword argument `exception` is `true`.\n    *   Returns `nil` if keyword argument `exception` is `true`.\n\n\n\nRaises an exception if `value` evaluates to a\n[`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html) and `digits` is\nlarger than Float::DIG + 1."},"sortText":"000088","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"BigDecimal(${1:T.any(Integer, Float, Rational, BigDecimal, String)})${0}"}},{"label":"Complex","kind":2,"detail":"Kernel#Complex","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: T.any(Numeric, String),\n    y: T.any(Numeric, String),\n    exception: T::Boolean\n  )\n  .returns(Complex)\nend\ndef Complex(x, y=…, exception: …); end\n```\n\n---\n\nReturns x+i\\*y;\n\n```ruby\nComplex(1, 2)    #=> (1+2i)\nComplex('1+2i')  #=> (1+2i)\nComplex(nil)     #=> TypeError\nComplex(1, nil)  #=> TypeError\n\nComplex(1, nil, exception: false)  #=> nil\nComplex('1+2', exception: false)   #=> nil\n```\n\nSyntax of string form:\n\n```\nstring form = extra spaces , complex , extra spaces ;\ncomplex = real part | [ sign ] , imaginary part\n        | real part , sign , imaginary part\n        | rational , \"@\" , rational ;\nreal part = rational ;\nimaginary part = imaginary unit | unsigned rational , imaginary unit ;\nrational = [ sign ] , unsigned rational ;\nunsigned rational = numerator | numerator , \"/\" , denominator ;\nnumerator = integer part | fractional part | integer part , fractional part ;\ndenominator = digits ;\ninteger part = digits ;\nfractional part = \".\" , digits , [ ( \"e\" | \"E\" ) , [ sign ] , digits ] ;\nimaginary unit = \"i\" | \"I\" | \"j\" | \"J\" ;\nsign = \"-\" | \"+\" ;\ndigits = digit , { digit | \"_\" , digit };\ndigit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\nextra spaces = ? \\s* ? ;\n```\n\nSee\n[`String#to_c`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_c)."},"sortText":"000089","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"Complex(${1:T.any(Numeric, String)})${0}"}},{"label":"Integer","kind":2,"detail":"Kernel#Integer","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg: T.any(Numeric, String),\n    base: Integer,\n    exception: T::Boolean\n  )\n  .returns(Integer)\nend\ndef Integer(arg, base=…, exception: …); end\n```\n\n---\n\nConverts *arg* to an\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html).\n[`Numeric`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html) types are\nconverted directly (with floating point numbers being truncated). *base* (0,\nor between 2 and 36) is a base for integer string representation. If *arg*\nis a [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html), when\n*base* is omitted or equals zero, radix indicators (`0`, `0b`, and `0x`) are\nhonored. In any case, strings should consist only of one or more digits,\nexcept for that a sign, one underscore between two digits, and\nleading/trailing spaces are optional. This behavior is different from that\nof\n[`String#to_i`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_i).\nNon string values will be converted by first trying `to_int`, then `to_i`.\n\nPassing `nil` raises a\n[`TypeError`](https://docs.ruby-lang.org/en/2.7.0/TypeError.html), while\npassing a [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) that\ndoes not conform with numeric representation raises an\n[`ArgumentError`](https://docs.ruby-lang.org/en/2.7.0/ArgumentError.html).\nThis behavior can be altered by passing `exception: false`, in this case a\nnot convertible value will return `nil`.\n\n```ruby\nInteger(123.999)    #=> 123\nInteger(\"0x1a\")     #=> 26\nInteger(Time.new)   #=> 1204973019\nInteger(\"0930\", 10) #=> 930\nInteger(\"111\", 2)   #=> 7\nInteger(\" +1_0 \")   #=> 10\nInteger(nil)        #=> TypeError: can't convert nil into Integer\nInteger(\"x\")        #=> ArgumentError: invalid value for Integer(): \"x\"\n\nInteger(\"x\", exception: false)        #=> nil\n```"},"sortText":"000090","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"Integer(${1:T.any(Numeric, String)})${0}"}},{"label":"Pathname","kind":2,"detail":"Kernel#Pathname","documentation":{"kind":"markdown","value":"```ruby\nsig {params(path: T.any(String, Pathname)).returns(Pathname)}\ndef Pathname(path); end\n```\n\n---\n\nCreates a new\n[`Pathname`](https://docs.ruby-lang.org/en/2.7.0/Pathname.html) object from\nthe given string, `path`, and returns pathname object.\n\nIn order to use this constructor, you must first require the\n[`Pathname`](https://docs.ruby-lang.org/en/2.7.0/Pathname.html) standard\nlibrary extension.\n\n```ruby\nrequire 'pathname'\nPathname(\"/home/zzak\")\n#=> #<Pathname:/home/zzak>\n```\n\nSee also\n[`Pathname::new`](https://docs.ruby-lang.org/en/2.7.0/Pathname.html#method-c-new)\nfor more information."},"sortText":"000091","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"Pathname(${1:T.any(String, Pathname)})${0}"}},{"label":"__callee__","kind":2,"detail":"Kernel#__callee__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(Symbol))}\ndef __callee__; end\n```\n\n---\n\nReturns the called name of the current method as a\n[`Symbol`](https://docs.ruby-lang.org/en/2.7.0/Symbol.html). If called\noutside of a method, it returns `nil`."},"sortText":"000092","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"__callee__${0}"}},{"label":"__method__","kind":2,"detail":"Kernel#__method__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(Symbol))}\ndef __method__; end\n```\n\n---\n\nReturns the name at the definition of the current method as a\n[`Symbol`](https://docs.ruby-lang.org/en/2.7.0/Symbol.html). If called\noutside of a method, it returns `nil`."},"sortText":"000093","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"__method__${0}"}},{"label":"at_exit","kind":2,"detail":"Kernel#at_exit","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.proc.returns(BasicObject)).returns(Proc)}\ndef at_exit(&blk); end\n```\n\n---\n\nConverts *block* to a `Proc` object (and therefore binds it at the point of\ncall) and registers it for execution when the program exits. If multiple\nhandlers are registered, they are executed in reverse order of registration.\n\n```ruby\ndef do_at_exit(str1)\n  at_exit { print str1 }\nend\nat_exit { puts \"cruel world\" }\ndo_at_exit(\"goodbye \")\nexit\n```\n\n*produces:*\n\n```ruby\ngoodbye cruel world\n```"},"sortText":"000094","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"at_exit do\n  ${1}\nend${0}"}},{"label":"block_given?","kind":2,"detail":"Kernel#block_given?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef block_given?; end\n```\n\n---\n\nReturns `true` if `yield` would execute a block in the current context. The\n`iterator?` form is mildly deprecated.\n\n```ruby\ndef try\n  if block_given?\n    yield\n  else\n    \"no block\"\n  end\nend\ntry                  #=> \"no block\"\ntry { \"hello\" }      #=> \"hello\"\ntry do \"hello\" end   #=> \"hello\"\n```"},"sortText":"000095","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"block_given?${0}"}},{"label":"caller","kind":2,"detail":"Kernel#caller","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: Integer,\n    length: Integer\n  )\n  .returns(T.nilable(T::Array[String]))\nend\ndef caller(start_or_range=…, length=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing strings in the\nform `file:line` or `file:line: in `method'`.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.\n\n```ruby\ndef a(skip)\n  caller(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\nc(0)   #=> [\"prog:2:in `a'\", \"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:10:in `<main>'\"]\nc(1)   #=> [\"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:11:in `<main>'\"]\nc(2)   #=> [\"prog:8:in `c'\", \"prog:12:in `<main>'\"]\nc(3)   #=> [\"prog:13:in `<main>'\"]\nc(4)   #=> []\nc(5)   #=> nil\n```"},"sortText":"000096","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"caller${0}"}},{"label":"caller","kind":2,"detail":"Kernel#caller (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: T::Range[Integer]\n  )\n  .returns(T.nilable(T::Array[String]))\nend\ndef caller (overload.1)(start_or_range=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing strings in the\nform `file:line` or `file:line: in `method'`.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.\n\n```ruby\ndef a(skip)\n  caller(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\nc(0)   #=> [\"prog:2:in `a'\", \"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:10:in `<main>'\"]\nc(1)   #=> [\"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:11:in `<main>'\"]\nc(2)   #=> [\"prog:8:in `c'\", \"prog:12:in `<main>'\"]\nc(3)   #=> [\"prog:13:in `<main>'\"]\nc(4)   #=> []\nc(5)   #=> nil\n```"},"sortText":"000097","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"caller${0}"}},{"label":"caller","kind":2,"detail":"Kernel#caller (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[String])}\ndef caller (overload.2); end\n```\n\n---\n\nReturns the current execution stack---an array containing strings in the\nform `file:line` or `file:line: in `method'`.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.\n\n```ruby\ndef a(skip)\n  caller(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\nc(0)   #=> [\"prog:2:in `a'\", \"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:10:in `<main>'\"]\nc(1)   #=> [\"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:11:in `<main>'\"]\nc(2)   #=> [\"prog:8:in `c'\", \"prog:12:in `<main>'\"]\nc(3)   #=> [\"prog:13:in `<main>'\"]\nc(4)   #=> []\nc(5)   #=> nil\n```"},"sortText":"000098","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"caller${0}"}},{"label":"caller_locations","kind":2,"detail":"Kernel#caller_locations","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: Integer,\n    length: Integer\n  )\n  .returns(T.nilable(T::Array[Thread::Backtrace::Location]))\nend\ndef caller_locations(start_or_range=…, length=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing backtrace location\nobjects.\n\nSee\n[`Thread::Backtrace::Location`](https://docs.ruby-lang.org/en/2.7.0/Thread/Backtrace/Location.html)\nfor more information.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range."},"sortText":"000099","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"caller_locations${0}"}},{"label":"caller_locations","kind":2,"detail":"Kernel#caller_locations (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: T::Range[Integer]\n  )\n  .returns(T.nilable(T::Array[Thread::Backtrace::Location]))\nend\ndef caller_locations (overload.1)(start_or_range=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing backtrace location\nobjects.\n\nSee\n[`Thread::Backtrace::Location`](https://docs.ruby-lang.org/en/2.7.0/Thread/Backtrace/Location.html)\nfor more information.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range."},"sortText":"000100","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"caller_locations${0}"}},{"label":"clone","kind":2,"detail":"Kernel#clone","documentation":{"kind":"markdown","value":"```ruby\nsig {params(freeze: T.nilable(T::Boolean)).returns(T.class_of(A))}\ndef clone(freeze: …); end\n```\n\n---\n\nProduces a shallow copy of *obj*---the instance variables of *obj* are\ncopied, but not the objects they reference.\n[`clone`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-clone)\ncopies the frozen value state of *obj*, unless the `:freeze` keyword\nargument is given with a false or true value. See also the discussion under\n[`Object#dup`](https://docs.ruby-lang.org/en/2.7.0/Object.html#method-i-dup).\n\n```ruby\nclass Klass\n   attr_accessor :str\nend\ns1 = Klass.new      #=> #<Klass:0x401b3a38>\ns1.str = \"Hello\"    #=> \"Hello\"\ns2 = s1.clone       #=> #<Klass:0x401b3998 @str=\"Hello\">\ns2.str[1,4] = \"i\"   #=> \"i\"\ns1.inspect          #=> \"#<Klass:0x401b3a38 @str=\\\"Hi\\\">\"\ns2.inspect          #=> \"#<Klass:0x401b3998 @str=\\\"Hi\\\">\"\n```\n\nThis method may have class-specific behavior. If so, that behavior will be\ndocumented under the #`initialize_copy` method of the class."},"sortText":"000101","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"clone${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    symbol: T.any(Symbol, String),\n    method: T.any(Proc, Method, UnboundMethod)\n  )\n  .returns(Symbol)\nend\ndef define_singleton_method(symbol, method=…); end\n```"},"sortText":"000102","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"define_singleton_method(${1:T.any(Symbol, String)})${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(symbol: T.any(Symbol, String), blk: T.untyped).returns(Symbol)}\ndef define_singleton_method (overload.1)(symbol, &blk); end\n```"},"sortText":"000103","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"define_singleton_method(${1:T.any(Symbol, String)})${0}"}},{"label":"frozen?","kind":2,"detail":"Kernel#frozen?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef frozen?; end\n```\n\n---\n\nReturns the freeze status of *obj*.\n\n```ruby\na = [ \"a\", \"b\", \"c\" ]\na.freeze    #=> [\"a\", \"b\", \"c\"]\na.frozen?   #=> true\n```"},"sortText":"000104","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"frozen?${0}"}},{"label":"gem","kind":2,"detail":"Kernel#gem","documentation":{"kind":"markdown","value":"```ruby\nsig {params(dep: T.untyped, reqs: T.untyped).returns(T.untyped)}\ndef gem(dep, *reqs); end\n```\n\n---\n\nUse\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nto activate a specific version of `gem_name`.\n\n`requirements` is a list of version requirements that the specified gem must\nmatch, most commonly \"= example.version.number\". See\n[`Gem::Requirement`](https://docs.ruby-lang.org/en/2.7.0/Gem/Requirement.html)\nfor how to specify a version requirement.\n\nIf you will be activating the latest version of a gem, there is no need to\ncall\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem),\n[`Kernel#require`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-require)\nwill do the right thing for you.\n\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nreturns true if the gem was activated, otherwise false. If the gem could not\nbe found, didn't match the version requirements, or a different version was\nalready activated, an exception will be raised.\n\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nshould be called **before** any require statements (otherwise RubyGems may\nload a conflicting library version).\n\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nonly loads prerelease versions when prerelease `requirements` are given:\n\n```ruby\ngem 'rake', '>= 1.1.a', '< 2'\n```\n\nIn older RubyGems versions, the environment variable GEM\\_SKIP could be used\nto skip activation of specified gems, for example to test out changes that\nhaven't been installed yet. Now RubyGems defers to -I and the RUBYLIB\nenvironment variable to skip activation of a gem.\n\nExample:\n\n```\nGEM_SKIP=libA:libB ruby -I../libA -I../libB ./mycode.rb\n```"},"sortText":"000105","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"gem(${1})${0}"}},{"label":"gets","kind":2,"detail":"Kernel#gets","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(String)}\ndef gets(arg0=…, arg1=…); end\n```\n\n---\n\nReturns (and assigns to `$_`) the next line from the list of files in `ARGV`\n(or `$*`), or from standard input if no files are present on the command\nline. Returns `nil` at end of file. The optional argument specifies the\nrecord separator. The separator is included with the contents of each\nrecord. A separator of `nil` reads the entire contents, and a zero-length\nseparator reads the input one paragraph at a time, where paragraphs are\ndivided by two consecutive newlines. If the first argument is an integer, or\noptional second argument is given, the returning string would not be longer\nthan the given value in bytes. If multiple filenames are present in `ARGV`,\n`gets(nil)` will read the contents one file at a time.\n\n```ruby\nARGV << \"testfile\"\nprint while gets\n```\n\n*produces:*\n\n```ruby\nThis is line one\nThis is line two\nThis is line three\nAnd so on...\n```\n\nThe style of programming using `$_` as an implicit parameter is gradually\nlosing favor in the Ruby community."},"sortText":"000106","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"gets${0}"}},{"label":"global_variables","kind":2,"detail":"Kernel#global_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef global_variables; end\n```\n\n---\n\nReturns an array of the names of global variables. This includes special\nregexp global variables such as `$~` and `$+`, but does not include the\nnumbered regexp global variables (`$1`, `$2`, etc.).\n\n```ruby\nglobal_variables.grep /std/   #=> [:$stdin, :$stdout, :$stderr]\n```"},"sortText":"000107","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"global_variables${0}"}},{"label":"initialize_copy","kind":2,"detail":"Kernel#initialize_copy","documentation":{"kind":"markdown","value":"```ruby\nsig {params(object: T.class_of(A)).returns(T.class_of(A))}\ndef initialize_copy(object); end\n```"},"sortText":"000108","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"initialize_copy(${1:T.class_of(A)})${0}"}},{"label":"instance_of?","kind":2,"detail":"Kernel#instance_of?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T::Class[T.anything]).returns(T::Boolean)}\ndef instance_of?(arg0); end\n```"},"sortText":"000109","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"instance_of?(${1:T::Class[T.anything]})${0}"}},{"label":"instance_variable_defined?","kind":2,"detail":"Kernel#instance_variable_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef instance_variable_defined?(arg0); end\n```"},"sortText":"000110","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"instance_variable_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"instance_variable_get","kind":2,"detail":"Kernel#instance_variable_get","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.untyped)}\ndef instance_variable_get(arg0); end\n```"},"sortText":"000111","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"instance_variable_get(${1:T.any(Symbol, String)})${0}"}},{"label":"instance_variable_set","kind":2,"detail":"Kernel#instance_variable_set","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String), arg1: BasicObject).returns(T.untyped)}\ndef instance_variable_set(arg0, arg1); end\n```"},"sortText":"000112","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"instance_variable_set(${1:T.any(Symbol, String)}, ${2:BasicObject})${0}"}},{"label":"instance_variables","kind":2,"detail":"Kernel#instance_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef instance_variables; end\n```"},"sortText":"000113","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"instance_variables${0}"}},{"label":"iterator?","kind":2,"detail":"Kernel#iterator?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef iterator?; end\n```\n\n---\n\nDeprecated. Use block\\_given? instead."},"sortText":"000114","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"iterator?${0}"}},{"label":"itself","kind":2,"detail":"Kernel#itself","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.class_of(A))}\ndef itself; end\n```\n\n---\n\nReturns the receiver `obj`.\n\n```ruby\nobj = Object.new; obj.itself.object_id == o.object_id # => true\n```"},"sortText":"000115","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"itself${0}"}},{"label":"local_variables","kind":2,"detail":"Kernel#local_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef local_variables; end\n```\n\n---\n\nReturns the names of the current local variables.\n\n```ruby\nfred = 1\nfor i in 1..10\n   # ...\nend\nlocal_variables   #=> [:fred, :i]\n```"},"sortText":"000116","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"local_variables${0}"}},{"label":"method","kind":2,"detail":"Kernel#method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef method(arg0); end\n```"},"sortText":"000117","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"method(${1:Symbol})${0}"}},{"label":"methods","kind":2,"detail":"Kernel#methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(regular: T::Boolean).returns(T::Array[Symbol])}\ndef methods(regular=…); end\n```"},"sortText":"000118","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"methods${0}"}},{"label":"object_id","kind":2,"detail":"Kernel#object_id","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef object_id; end\n```\n\n---\n\nReturns an integer identifier for `obj`.\n\nThe same number will be returned on all calls to `object_id` for a given\nobject, and no two active objects will share an id.\n\nNote: that some objects of builtin classes are reused for optimization. This\nis the case for immediate values and frozen string literals.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_id\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`object_id`.\n\nImmediate values are not passed by reference but are passed by value: `nil`,\n`true`, `false`, Fixnums, Symbols, and some Floats.\n\n```ruby\nObject.new.object_id  == Object.new.object_id  # => false\n(21 * 2).object_id    == (21 * 2).object_id    # => true\n\"hello\".object_id     == \"hello\".object_id     # => false\n\"hi\".freeze.object_id == \"hi\".freeze.object_id # => true\n```"},"sortText":"000119","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"object_id${0}"}},{"label":"open","kind":2,"detail":"Kernel#open","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    path: String,\n    mode: T.any(Integer, String),\n    perm: T.nilable(Integer),\n    opt: T.nilable(T::Hash[Symbol, T.untyped])\n  )\n  .returns(T.nilable(IO))\nend\ndef open(path, mode=…, perm=…, opt=…); end\n```\n\n---\n\nCreates an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object\nconnected to the given stream, file, or subprocess.\n\nIf `path` does not start with a pipe character (`|`), treat it as the name\nof a file to open using the specified mode (defaulting to \"r\").\n\nThe `mode` is either a string or an integer. If it is an integer, it must be\nbitwise-or of open(2) flags, such as File::RDWR or File::EXCL. If it is a\nstring, it is either \"fmode\", \"fmode:ext\\_enc\", or\n\"fmode:ext\\_enc:int\\_enc\".\n\nSee the documentation of\n[`IO.new`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-new) for\nfull documentation of the `mode` string directives.\n\nIf a file is being created, its initial permissions may be set using the\n`perm` parameter. See\n[`File.new`](https://docs.ruby-lang.org/en/2.7.0/File.html#method-c-new) and\nthe open(2) and chmod(2) man pages for a description of permissions.\n\nIf a block is specified, it will be invoked with the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object as a parameter,\nand the [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) will be\nautomatically closed when the block terminates. The call returns the value\nof the block.\n\nIf `path` starts with a pipe character (`\"|\"`), a subprocess is created,\nconnected to the caller by a pair of pipes. The returned\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object may be used to\nwrite to the standard input and read from the standard output of this\nsubprocess.\n\nIf the command following the pipe is a single minus sign (`\"|-\"`), Ruby\nforks, and this subprocess is connected to the parent. If the command is not\n`\"-\"`, the subprocess runs the command. Note that the command may be\nprocessed by shell if it contains shell metacharacters.\n\nWhen the subprocess is Ruby (opened via `\"|-\"`), the `open` call returns\n`nil`. If a block is associated with the open call, that block will run\ntwice --- once in the parent and once in the child.\n\nThe block parameter will be an\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object in the parent and\n`nil` in the child. The parent's `IO` object will be connected to the\nchild's $stdin and $stdout. The subprocess will be terminated at the end of\nthe block.\n\n### Examples\n\nReading from \"testfile\":\n\n```ruby\nopen(\"testfile\") do |f|\n  print f.gets\nend\n```\n\nProduces:\n\n```ruby\nThis is line one\n```\n\nOpen a subprocess and read its output:\n\n```ruby\ncmd = open(\"|date\")\nprint cmd.gets\ncmd.close\n```\n\nProduces:\n\n```\nWed Apr  9 08:56:31 CDT 2003\n```\n\nOpen a subprocess running the same Ruby program:\n\n```ruby\nf = open(\"|-\", \"w+\")\nif f.nil?\n  puts \"in Child\"\n  exit\nelse\n  puts \"Got: #{f.gets}\"\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```\n\nOpen a subprocess using a block to receive the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object:\n\n```ruby\nopen \"|-\" do |f|\n  if f then\n    # parent process\n    puts \"Got: #{f.gets}\"\n  else\n    # child process\n    puts \"in Child\"\n  end\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```"},"sortText":"000120","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"open(${1:String})${0}"}},{"label":"open","kind":2,"detail":"Kernel#open (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    path: String,\n    mode: T.any(Integer, String),\n    perm: T.nilable(Integer),\n    opt: T.nilable(T::Hash[Symbol, T.untyped]),\n    blk: T.proc.params(arg0: IO).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef open (overload.1)(path, mode=…, perm=…, opt=…, &blk); end\n```\n\n---\n\nCreates an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object\nconnected to the given stream, file, or subprocess.\n\nIf `path` does not start with a pipe character (`|`), treat it as the name\nof a file to open using the specified mode (defaulting to \"r\").\n\nThe `mode` is either a string or an integer. If it is an integer, it must be\nbitwise-or of open(2) flags, such as File::RDWR or File::EXCL. If it is a\nstring, it is either \"fmode\", \"fmode:ext\\_enc\", or\n\"fmode:ext\\_enc:int\\_enc\".\n\nSee the documentation of\n[`IO.new`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-new) for\nfull documentation of the `mode` string directives.\n\nIf a file is being created, its initial permissions may be set using the\n`perm` parameter. See\n[`File.new`](https://docs.ruby-lang.org/en/2.7.0/File.html#method-c-new) and\nthe open(2) and chmod(2) man pages for a description of permissions.\n\nIf a block is specified, it will be invoked with the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object as a parameter,\nand the [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) will be\nautomatically closed when the block terminates. The call returns the value\nof the block.\n\nIf `path` starts with a pipe character (`\"|\"`), a subprocess is created,\nconnected to the caller by a pair of pipes. The returned\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object may be used to\nwrite to the standard input and read from the standard output of this\nsubprocess.\n\nIf the command following the pipe is a single minus sign (`\"|-\"`), Ruby\nforks, and this subprocess is connected to the parent. If the command is not\n`\"-\"`, the subprocess runs the command. Note that the command may be\nprocessed by shell if it contains shell metacharacters.\n\nWhen the subprocess is Ruby (opened via `\"|-\"`), the `open` call returns\n`nil`. If a block is associated with the open call, that block will run\ntwice --- once in the parent and once in the child.\n\nThe block parameter will be an\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object in the parent and\n`nil` in the child. The parent's `IO` object will be connected to the\nchild's $stdin and $stdout. The subprocess will be terminated at the end of\nthe block.\n\n### Examples\n\nReading from \"testfile\":\n\n```ruby\nopen(\"testfile\") do |f|\n  print f.gets\nend\n```\n\nProduces:\n\n```ruby\nThis is line one\n```\n\nOpen a subprocess and read its output:\n\n```ruby\ncmd = open(\"|date\")\nprint cmd.gets\ncmd.close\n```\n\nProduces:\n\n```\nWed Apr  9 08:56:31 CDT 2003\n```\n\nOpen a subprocess running the same Ruby program:\n\n```ruby\nf = open(\"|-\", \"w+\")\nif f.nil?\n  puts \"in Child\"\n  exit\nelse\n  puts \"Got: #{f.gets}\"\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```\n\nOpen a subprocess using a block to receive the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object:\n\n```ruby\nopen \"|-\" do |f|\n  if f then\n    # parent process\n    puts \"Got: #{f.gets}\"\n  else\n    # child process\n    puts \"in Child\"\n  end\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```"},"sortText":"000121","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"open(${1:String}) do |${2:IO}|\n  ${3}\nend${0}"}},{"label":"private_methods","kind":2,"detail":"Kernel#private_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef private_methods(all=…); end\n```"},"sortText":"000122","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"private_methods${0}"}},{"label":"protected_methods","kind":2,"detail":"Kernel#protected_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef protected_methods(all=…); end\n```"},"sortText":"000123","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"protected_methods${0}"}},{"label":"public_method","kind":2,"detail":"Kernel#public_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef public_method(arg0); end\n```"},"sortText":"000124","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"public_method(${1:Symbol})${0}"}},{"label":"public_methods","kind":2,"detail":"Kernel#public_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef public_methods(all=…); end\n```"},"sortText":"000125","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"public_methods${0}"}},{"label":"public_send","kind":2,"detail":"Kernel#public_send","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef public_send(arg0, *args, &blk); end\n```"},"sortText":"000126","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"public_send(${1:T.any(Symbol, String)})${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef raise; end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000127","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"raise${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Class[T.anything], Exception, String)\n  )\n  .returns(T.noreturn)\nend\ndef raise (overload.1)(arg0=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000128","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"raise${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Class[T.anything], Exception),\n    arg1: T.untyped,\n    arg2: T.nilable(T::Array[String])\n  )\n  .returns(T.noreturn)\nend\ndef raise (overload.2)(arg0=…, arg1=…, arg2=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000129","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"raise${0}"}},{"label":"readline","kind":2,"detail":"Kernel#readline","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(String)}\ndef readline(arg0=…, arg1=…); end\n```\n\n---\n\nEquivalent to Kernel::gets, except `readline` raises `EOFError` at end of\nfile."},"sortText":"000130","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"readline${0}"}},{"label":"readlines","kind":2,"detail":"Kernel#readlines","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(T::Array[String])}\ndef readlines(arg0=…, arg1=…); end\n```\n\n---\n\nReturns an array containing the lines returned by calling `Kernel.gets(sep)`\nuntil the end of file."},"sortText":"000131","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"readlines${0}"}},{"label":"remove_instance_variable","kind":2,"detail":"Kernel#remove_instance_variable","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(T.untyped)}\ndef remove_instance_variable(arg0); end\n```"},"sortText":"000132","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"remove_instance_variable(${1:Symbol})${0}"}},{"label":"require","kind":2,"detail":"Kernel#require","documentation":{"kind":"markdown","value":"```ruby\nsig {params(path: String).returns(T::Boolean)}\ndef require(path); end\n```\n\n---\n\nLoads the given `name`, returning `true` if successful and `false` if the\nfeature is already loaded.\n\nIf the filename does not resolve to an absolute path, it will be searched\nfor in the directories listed in `$LOAD_PATH` (`$:`).\n\nIf the filename has the extension \".rb\", it is loaded as a source file; if\nthe extension is \".so\", \".o\", or \".dll\", or the default shared library\nextension on the current platform, Ruby loads the shared library as a Ruby\nextension. Otherwise, Ruby tries adding \".rb\", \".so\", and so on to the name\nuntil found. If the file named cannot be found, a\n[`LoadError`](https://docs.ruby-lang.org/en/2.6.0/LoadError.html) will be\nraised.\n\nFor Ruby extensions the filename given may use any shared library extension.\nFor example, on Linux the socket extension is \"socket.so\" and `require\n'socket.dll'` will load the socket extension.\n\nThe absolute path of the loaded file is added to `$LOADED_FEATURES` (`$\"`).\nA file will not be loaded again if its path already appears in `$\"`. For\nexample, `require 'a'; require './a'` will not load `a.rb` again.\n\n```ruby\nrequire \"my-library.rb\"\nrequire \"db-driver\"\n```\n\nAny constants or globals within the loaded source file will be available in\nthe calling program's global namespace. However, local variables will not be\npropagated to the loading environment.\n\nWhen RubyGems is required,\n[`#require`](https://docs.ruby-lang.org/en/2.6.0/Kernel.html#method-i-require)\nis replaced with our own which is capable of loading gems on demand.\n\nWhen you call `require 'x'`, this is what happens:\n*   If the file can be loaded from the existing Ruby loadpath, it is.\n*   Otherwise, installed gems are searched for a file that matches. If it's\n    found in gem 'y', that gem is activated (added to the loadpath).\n\n\nThe normal `require` functionality of returning false if that file has\nalready been loaded is preserved.\n\nAlso aliased as:\n[`gem_original_require`](https://docs.ruby-lang.org/en/2.6.0/Kernel.html#method-i-gem_original_require)"},"sortText":"000133","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"require(${1:String})${0}"}},{"label":"require_relative","kind":2,"detail":"Kernel#require_relative","documentation":{"kind":"markdown","value":"```ruby\nsig {params(feature: T.any(String, Pathname)).returns(T::Boolean)}\ndef require_relative(feature); end\n```\n\n---\n\nRuby tries to load the library named *string* relative to the requiring\nfile's path. If the file's path cannot be determined a\n[`LoadError`](https://docs.ruby-lang.org/en/2.7.0/LoadError.html) is raised.\nIf a file is loaded `true` is returned and false otherwise."},"sortText":"000134","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"require_relative(${1:T.any(String, Pathname)})${0}"}},{"label":"respond_to?","kind":2,"detail":"Kernel#respond_to?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    include_all: T.untyped\n  )\n  .returns(T::Boolean)\nend\ndef respond_to?(arg0, include_all=…); end\n```"},"sortText":"000135","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"respond_to?(${1:T.any(String, Symbol)})${0}"}},{"label":"select","kind":2,"detail":"Kernel#select","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    read_array: T.nilable(T::Array[IO]),\n    write_array: T.nilable(T::Array[IO]),\n    error_array: T.nilable(T::Array[IO]),\n    timeout: T.nilable(T.any(Integer, Float))\n  )\n  .returns(T.nilable(T::Array[T::Array[IO]]))\nend\ndef select(read_array, write_array=…, error_array=…, timeout=…); end\n```\n\n---\n\nCalls select(2) system call. It monitors given arrays of\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects, waits until one\nor more of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects are\nready for reading, are ready for writing, and have pending exceptions\nrespectively, and returns an array that contains arrays of those\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects. It will return\n`nil` if optional *timeout* value is given and no\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object is ready in\n*timeout* seconds.\n\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\npeeks the buffer of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html)\nobjects for testing readability. If the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) buffer is not empty,\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nimmediately notifies readability. This \"peek\" only happens for\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects. It does not\nhappen for IO-like objects such as\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\n\nThe best way to use\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis invoking it after nonblocking methods such as read\\_nonblock,\nwrite\\_nonblock, etc. The methods raise an exception which is extended by\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nor\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html).\nThe modules notify how the caller should wait with\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\nIf\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nis raised, the caller should wait for reading. If\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html)\nis raised, the caller should wait for writing.\n\nSo, blocking read (readpartial) can be emulated using read\\_nonblock and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nas follows:\n\n```ruby\nbegin\n  result = io_like.read_nonblock(maxlen)\nrescue IO::WaitReadable\n  IO.select([io_like])\n  retry\nrescue IO::WaitWritable\n  IO.select(nil, [io_like])\n  retry\nend\n```\n\nEspecially, the combination of nonblocking methods and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis preferred for [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) like\nobjects such as\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\nIt has to\\_io method to return underlying\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object.\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ncalls to\\_io to obtain the file descriptor to wait.\n\nThis means that readability notified by\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ndoesn't mean readability from\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\nobject.\n\nThe most likely situation is that\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\nbuffers some data.\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ndoesn't see the buffer. So\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ncan block when\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\ndoesn't block.\n\nHowever, several more complicated situations exist.\n\nSSL is a protocol which is sequence of records. The record consists of\nmultiple bytes. So, the remote side of SSL sends a partial record,\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nnotifies readability but\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\ncannot decrypt a byte and\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\nwill block.\n\nAlso, the remote side can request SSL renegotiation which forces the local\nSSL engine to write some data. This means\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\nmay invoke write system call and it can block. In such a situation,\n[`OpenSSL::SSL::SSLSocket#read_nonblock`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-read_nonblock)\nraises\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html)\ninstead of blocking. So, the caller should wait for ready for writability as\nabove example.\n\nThe combination of nonblocking methods and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis also useful for streams such as tty, pipe socket socket when multiple\nprocesses read from a stream.\n\nFinally, Linux kernel developers don't guarantee that readability of\nselect(2) means readability of following read(2) even for a single process.\nSee select(2) manual on GNU/Linux system.\n\nInvoking\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nbefore\n[`IO#readpartial`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-readpartial)\nworks well as usual. However it is not the best way to use\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\n\nThe writability notified by select(2) doesn't show how many bytes are\nwritable.\n[`IO#write`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-write)\nmethod blocks until given whole string is written. So, `IO#write(two or more\nbytes)` can block after writability is notified by\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\n[`IO#write_nonblock`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-write_nonblock)\nis required to avoid the blocking.\n\nBlocking write (write) can be emulated using write\\_nonblock and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nas follows:\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nshould also be rescued for SSL renegotiation in\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\n\n```ruby\nwhile 0 < string.bytesize\n  begin\n    written = io_like.write_nonblock(string)\n  rescue IO::WaitReadable\n    IO.select([io_like])\n    retry\n  rescue IO::WaitWritable\n    IO.select(nil, [io_like])\n    retry\n  end\n  string = string.byteslice(written..-1)\nend\n```\n\n### Parameters\nread\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait until ready for read\nwrite\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait until ready for write\nerror\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait for exceptions\ntimeout\n:   a numeric value in second\n\n\n### Example\n\n```ruby\nrp, wp = IO.pipe\nmesg = \"ping \"\n100.times {\n  # IO.select follows IO#read.  Not the best way to use IO.select.\n  rs, ws, = IO.select([rp], [wp])\n  if r = rs[0]\n    ret = r.read(5)\n    print ret\n    case ret\n    when /ping/\n      mesg = \"pong\\n\"\n    when /pong/\n      mesg = \"ping \"\n    end\n  end\n  if w = ws[0]\n    w.write(mesg)\n  end\n}\n```\n\n*produces:*\n\n```ruby\nping pong\nping pong\nping pong\n(snipped)\nping\n```"},"sortText":"000136","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"select(${1:T.nilable(T::Array[IO])})${0}"}},{"label":"send","kind":2,"detail":"Kernel#send","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(String, Symbol), arg1: T.anything).returns(T.untyped)}\ndef send(arg0, *arg1); end\n```"},"sortText":"000137","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"send(${1:T.any(String, Symbol)})${0}"}},{"label":"send","kind":2,"detail":"Kernel#send (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    arg1: T.anything,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef send (overload.1)(arg0, *arg1, &blk); end\n```"},"sortText":"000138","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"send(${1:T.any(String, Symbol)})${0}"}},{"label":"set_trace_func","kind":2,"detail":"Kernel#set_trace_func","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.nilable(T.proc.params(arg0: String, arg1: String, arg2: Integer, arg3: T.nilable(Symbol), arg4: T.nilable(Binding), arg5: Object).returns(T.untyped))\n  )\n  .void\nend\ndef set_trace_func(arg0); end\n```\n\n---\n\nEstablishes _proc_ as the handler for tracing, or disables\ntracing if the parameter is +nil+.\n\n*Note:* this method is obsolete, please use TracePoint instead.\n\n_proc_ takes up to six parameters:\n\n*   an event name\n*   a filename\n*   a line number\n*   an object id\n*   a binding\n*   the name of a class\n\n_proc_ is invoked whenever an event occurs.\n\nEvents are:\n\n+c-call+:: call a C-language routine\n+c-return+:: return from a C-language routine\n+call+:: call a Ruby method\n+class+:: start a class or module definition\n+end+:: finish a class or module definition\n+line+:: execute code on a new line\n+raise+:: raise an exception\n+return+:: return from a Ruby method\n\nTracing is disabled within the context of _proc_.\n\n    class Test\n    def test\n      a = 1\n      b = 2\n    end\n    end\n\n    set_trace_func proc { |event, file, line, id, binding, classname|\n       printf \"%8s %s:%-2d %10s %8s\\n\", event, file, line, id, classname\n    }\n    t = Test.new\n    t.test\n\n      line prog.rb:11               false\n    c-call prog.rb:11        new    Class\n    c-call prog.rb:11 initialize   Object\n  c-return prog.rb:11 initialize   Object\n  c-return prog.rb:11        new    Class\n      line prog.rb:12               false\n      call prog.rb:2        test     Test\n      line prog.rb:3        test     Test\n      line prog.rb:4        test     Test\n    return prog.rb:4        test     Test"},"sortText":"000139","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"set_trace_func(${1:T.nilable(T.proc.params(arg0: String, arg1: String, arg2: Integer, arg3: T.nilable(Symbol), arg4: T.nilable(Binding), arg5: Object).returns(T.untyped))})${0}"}},{"label":"set_trace_func","kind":2,"detail":"Kernel#set_trace_func (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: NilClass).returns(NilClass)}\ndef set_trace_func (overload.1)(arg0); end\n```\n\n---\n\nEstablishes _proc_ as the handler for tracing, or disables\ntracing if the parameter is +nil+.\n\n*Note:* this method is obsolete, please use TracePoint instead.\n\n_proc_ takes up to six parameters:\n\n*   an event name\n*   a filename\n*   a line number\n*   an object id\n*   a binding\n*   the name of a class\n\n_proc_ is invoked whenever an event occurs.\n\nEvents are:\n\n+c-call+:: call a C-language routine\n+c-return+:: return from a C-language routine\n+call+:: call a Ruby method\n+class+:: start a class or module definition\n+end+:: finish a class or module definition\n+line+:: execute code on a new line\n+raise+:: raise an exception\n+return+:: return from a Ruby method\n\nTracing is disabled within the context of _proc_.\n\n    class Test\n    def test\n      a = 1\n      b = 2\n    end\n    end\n\n    set_trace_func proc { |event, file, line, id, binding, classname|\n       printf \"%8s %s:%-2d %10s %8s\\n\", event, file, line, id, classname\n    }\n    t = Test.new\n    t.test\n\n      line prog.rb:11               false\n    c-call prog.rb:11        new    Class\n    c-call prog.rb:11 initialize   Object\n  c-return prog.rb:11 initialize   Object\n  c-return prog.rb:11        new    Class\n      line prog.rb:12               false\n      call prog.rb:2        test     Test\n      line prog.rb:3        test     Test\n      line prog.rb:4        test     Test\n    return prog.rb:4        test     Test"},"sortText":"000140","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"set_trace_func(${1:NilClass})${0}"}},{"label":"singleton_method","kind":2,"detail":"Kernel#singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef singleton_method(arg0); end\n```"},"sortText":"000141","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"singleton_method(${1:Symbol})${0}"}},{"label":"singleton_methods","kind":2,"detail":"Kernel#singleton_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef singleton_methods(all=…); end\n```"},"sortText":"000142","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"singleton_methods${0}"}},{"label":"sleep","kind":2,"detail":"Kernel#sleep","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef sleep; end\n```\n\n---\n\nSuspends the current thread for *duration* seconds (which may be any number,\nincluding a `Float` with fractional seconds). Returns the actual number of\nseconds slept (rounded), which may be less than that asked for if another\nthread calls\n[`Thread#run`](https://docs.ruby-lang.org/en/2.7.0/Thread.html#method-i-run).\nCalled without an argument, sleep() will sleep forever.\n\n```ruby\nTime.new    #=> 2008-03-08 19:56:19 +0900\nsleep 1.2   #=> 1\nTime.new    #=> 2008-03-08 19:56:20 +0900\nsleep 1.9   #=> 2\nTime.new    #=> 2008-03-08 19:56:22 +0900\n```"},"sortText":"000143","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"sleep${0}"}},{"label":"sleep","kind":2,"detail":"Kernel#sleep (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(duration: Numeric).returns(Integer)}\ndef sleep (overload.1)(duration); end\n```\n\n---\n\nSuspends the current thread for *duration* seconds (which may be any number,\nincluding a `Float` with fractional seconds). Returns the actual number of\nseconds slept (rounded), which may be less than that asked for if another\nthread calls\n[`Thread#run`](https://docs.ruby-lang.org/en/2.7.0/Thread.html#method-i-run).\nCalled without an argument, sleep() will sleep forever.\n\n```ruby\nTime.new    #=> 2008-03-08 19:56:19 +0900\nsleep 1.2   #=> 1\nTime.new    #=> 2008-03-08 19:56:20 +0900\nsleep 1.9   #=> 2\nTime.new    #=> 2008-03-08 19:56:22 +0900\n```"},"sortText":"000144","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"sleep(${1:Numeric})${0}"}},{"label":"system","kind":2,"detail":"Kernel#system","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    env: T.any(String, [String, String], T::Hash[String, T.nilable(String)]),\n    argv0: T.any(String, [String, String]),\n    args: String,\n    options: T.untyped\n  )\n  .returns(T.nilable(T::Boolean))\nend\ndef system(env, argv0=…, *args, **options); end\n```\n\n---\n\nExecutes *command...* in a subshell. *command...* is one of following forms.\n\n`commandline`\n:   command line string which is passed to the standard shell\n`cmdname, arg1, ...`\n:   command name and one or more arguments (no shell)\n`[cmdname, argv0], arg1, ...`\n:   command name, `argv[0]` and zero or more arguments (no shell)\n\n\nsystem returns `true` if the command gives zero exit status, `false` for non\nzero exit status. Returns `nil` if command execution fails. An error status\nis available in `$?`.\n\nIf the `exception: true` argument is passed, the method raises an exception\ninstead of returning `false` or `nil`.\n\nThe arguments are processed in the same way as for\n[`Kernel#spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn).\n\nThe hash arguments, env and options, are same as\n[`exec`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-exec) and\n[`spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn).\nSee\n[`Kernel#spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn)\nfor details.\n\n```ruby\nsystem(\"echo *\")\nsystem(\"echo\", \"*\")\n```\n\n*produces:*\n\n```\nconfig.h main.rb\n*\n```\n\nError handling:\n\n```ruby\nsystem(\"cat nonexistent.txt\")\n# => false\nsystem(\"catt nonexistent.txt\")\n# => nil\n\nsystem(\"cat nonexistent.txt\", exception: true)\n# RuntimeError (Command failed with exit 1: cat)\nsystem(\"catt nonexistent.txt\", exception: true)\n# Errno::ENOENT (No such file or directory - catt)\n```\n\nSee\n[`Kernel#exec`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-exec)\nfor the standard shell."},"sortText":"000145","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"system(${1:T.any(String, [String, String], T::Hash[String, T.nilable(String)])})${0}"}},{"label":"tainted?","kind":2,"detail":"Kernel#tainted?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef tainted?; end\n```"},"sortText":"000146","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"tainted?${0}"}},{"label":"test","kind":2,"detail":"Kernel#test","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    cmd: String,\n    file1: String,\n    file2: String\n  )\n  .returns(T.any(TrueClass, FalseClass, Time))\nend\ndef test(cmd, file1, file2=…); end\n```\n\n---\n\nUses the character `cmd` to perform various tests on `file1` (first table\nbelow) or on `file1` and `file2` (second table).\n\n[`File`](https://docs.ruby-lang.org/en/2.7.0/File.html) tests on a single\nfile:\n\n```\nCmd    Returns   Meaning\n\"A\"  | Time    | Last access time for file1\n\"b\"  | boolean | True if file1 is a block device\n\"c\"  | boolean | True if file1 is a character device\n\"C\"  | Time    | Last change time for file1\n\"d\"  | boolean | True if file1 exists and is a directory\n\"e\"  | boolean | True if file1 exists\n\"f\"  | boolean | True if file1 exists and is a regular file\n\"g\"  | boolean | True if file1 has the \\CF{setgid} bit\n     |         | set (false under NT)\n\"G\"  | boolean | True if file1 exists and has a group\n     |         | ownership equal to the caller's group\n\"k\"  | boolean | True if file1 exists and has the sticky bit set\n\"l\"  | boolean | True if file1 exists and is a symbolic link\n\"M\"  | Time    | Last modification time for file1\n\"o\"  | boolean | True if file1 exists and is owned by\n     |         | the caller's effective uid\n\"O\"  | boolean | True if file1 exists and is owned by\n     |         | the caller's real uid\n\"p\"  | boolean | True if file1 exists and is a fifo\n\"r\"  | boolean | True if file1 is readable by the effective\n     |         | uid/gid of the caller\n\"R\"  | boolean | True if file is readable by the real\n     |         | uid/gid of the caller\n\"s\"  | int/nil | If file1 has nonzero size, return the size,\n     |         | otherwise return nil\n\"S\"  | boolean | True if file1 exists and is a socket\n\"u\"  | boolean | True if file1 has the setuid bit set\n\"w\"  | boolean | True if file1 exists and is writable by\n     |         | the effective uid/gid\n\"W\"  | boolean | True if file1 exists and is writable by\n     |         | the real uid/gid\n\"x\"  | boolean | True if file1 exists and is executable by\n     |         | the effective uid/gid\n\"X\"  | boolean | True if file1 exists and is executable by\n     |         | the real uid/gid\n\"z\"  | boolean | True if file1 exists and has a zero length\n```\n\nTests that take two files:\n\n```\n\"-\"  | boolean | True if file1 and file2 are identical\n\"=\"  | boolean | True if the modification times of file1\n     |         | and file2 are equal\n\"<\"  | boolean | True if the modification time of file1\n     |         | is prior to that of file2\n\">\"  | boolean | True if the modification time of file1\n     |         | is after that of file2\n```"},"sortText":"000147","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"test(${1:String}, ${2:String})${0}"}},{"label":"then","kind":2,"detail":"Kernel#then","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:X))\n  )\n  .returns(T.type_parameter(:X))\nend\ndef then(&blk); end\n```\n\n---\n\nYields self to the block and returns the result of the block.\n\n```ruby\n3.next.then {|x| x**x }.to_s             #=> \"256\"\n```\n\nGood usage for `then` is value piping in method chains:\n\n```ruby\nrequire 'open-uri'\nrequire 'json'\n\nconstruct_url(arguments).\n  then {|url| URI(url).read }.\n  then {|response| JSON.parse(response) }\n```\n\nWhen called without block, the method returns `Enumerator`, which can be\nused, for example, for conditional circuit-breaking:\n\n```ruby\n# meets condition, no-op\n1.then.detect(&:odd?)            # => 1\n# does not meet condition, drop value\n2.then.detect(&:odd?)            # => nil\n```"},"sortText":"000148","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"then do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"to_enum","kind":2,"detail":"Kernel#to_enum","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef to_enum(method=…, *args); end\n```"},"sortText":"000149","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"to_enum${0}"}},{"label":"to_enum","kind":2,"detail":"Kernel#to_enum (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef to_enum (overload.1)(method=…, *args, &blk); end\n```"},"sortText":"000150","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"to_enum${0}"}},{"label":"undef","kind":2,"detail":"Kernel#undef","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg: BasicObject).void}\ndef undef(*arg); end\n```"},"sortText":"000151","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"undef${0}"}},{"label":"untrusted?","kind":2,"detail":"Kernel#untrusted?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef untrusted?; end\n```"},"sortText":"000152","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"untrusted?${0}"}},{"label":"yield_self","kind":2,"detail":"Kernel#yield_self","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:X))\n  )\n  .returns(T.type_parameter(:X))\nend\ndef yield_self(&blk); end\n```\n\n---\n\nYields self to the block and returns the result of the block.\n\n```ruby\n\"my string\".yield_self {|s| s.upcase }   #=> \"MY STRING\"\n```\n\nGood usage for `then` is value piping in method chains:\n\n```ruby\nrequire 'open-uri'\nrequire 'json'\n\nconstruct_url(arguments).\n  then {|url| URI(url).read }.\n  then {|response| JSON.parse(response) }\n```"},"sortText":"000153","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"yield_self do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"__send__","kind":2,"detail":"BasicObject#__send__","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol, arg1: BasicObject).returns(T.untyped)}\ndef __send__(arg0, *arg1); end\n```\n\n---\n\nInvokes the method identified by *symbol*, passing it any arguments\nspecified. You can use `__send__` if the name `send` clashes with an\nexisting method in *obj*. When the method is identified by a string, the\nstring is converted to a symbol.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_send\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`send`.\n\n```ruby\nclass Klass\n  def hello(*args)\n    \"Hello \" + args.join(' ')\n  end\nend\nk = Klass.new\nk.send :hello, \"gentle\", \"readers\"   #=> \"Hello gentle readers\"\n```"},"sortText":"000154","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"__send__(${1:Symbol})${0}"}},{"label":"instance_eval","kind":2,"detail":"BasicObject#instance_eval","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, filename: String, lineno: Integer).returns(T.untyped)}\ndef instance_eval(arg0=…, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver (*obj*). In order to set the context, the\nvariable `self` is set to *obj* while the code is executing, giving the code\naccess to *obj*'s instance variables and private methods.\n\nWhen `instance_eval` is given a block, *obj* is also passed in as the\nblock's only argument.\n\nWhen `instance_eval` is given a `String`, the optional second and third\nparameters supply a filename and starting line number that are used when\nreporting compilation errors.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\n  private\n  def the_secret\n    \"Ssssh! The secret is #{@secret}.\"\n  end\nend\nk = KlassWithSecret.new\nk.instance_eval { @secret }          #=> 99\nk.instance_eval { the_secret }       #=> \"Ssssh! The secret is 99.\"\nk.instance_eval {|obj| obj == self } #=> true\n```"},"sortText":"000155","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"instance_eval${0}"}},{"label":"instance_eval","kind":2,"detail":"BasicObject#instance_eval (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_eval (overload.1)(&blk); end\n```\n\n---\n\nEvaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver (*obj*). In order to set the context, the\nvariable `self` is set to *obj* while the code is executing, giving the code\naccess to *obj*'s instance variables and private methods.\n\nWhen `instance_eval` is given a block, *obj* is also passed in as the\nblock's only argument.\n\nWhen `instance_eval` is given a `String`, the optional second and third\nparameters supply a filename and starting line number that are used when\nreporting compilation errors.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\n  private\n  def the_secret\n    \"Ssssh! The secret is #{@secret}.\"\n  end\nend\nk = KlassWithSecret.new\nk.instance_eval { @secret }          #=> 99\nk.instance_eval { the_secret }       #=> \"Ssssh! The secret is 99.\"\nk.instance_eval {|obj| obj == self } #=> true\n```"},"sortText":"000156","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"instance_eval do\n  ${1}\nend${0}"}},{"label":"instance_exec","kind":2,"detail":"BasicObject#instance_exec","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    args: T.type_parameter(:V),\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_exec(*args, &blk); end\n```\n\n---\n\nExecutes the given block within the context of the receiver (*obj*). In\norder to set the context, the variable `self` is set to *obj* while the code\nis executing, giving the code access to *obj*'s instance variables.\nArguments are passed as block parameters.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\nend\nk = KlassWithSecret.new\nk.instance_exec(5) {|x| @secret+x }   #=> 104\n```"},"sortText":"000157","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"newText":"instance_exec do |${1:T.untyped}|\n  ${2}\nend${0}"}}]}}

[2023-08-10 22:56:49.033] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":18,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":3,"character":5},"end":{"line":3,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":5}},"message":"Method `e` does not exist on `T.class_of(A)`","code":7003,"codeDescription":{"href":"https://srb.help/7003"},"severity":1,"relatedInformation":[]}]}}}

[2023-08-10 22:56:49.034] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:49.034] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:49.045] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":18,"requestMethod":"textDocument/codeAction","result":[{"title":"Apply all Sorbet fixes for file","kind":"source.fixAll.sorbet","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}},"newText":"sig { returns(NilClass) }\n  "},{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}},"newText":"    extend T::Sig\n"}]}]}}]}

[2023-08-10 22:56:49.423] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":44},"contentChanges":[{"text":"# typed: strict\n\nclass A\n\n  def example\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:56:49.519] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:49.519] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:49.519] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:49.519] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:49.524] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 29
[2023-08-10 22:56:49.524] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":5,"character":9},"end":{"line":5,"character":10}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `x` does not exist on `A`","relatedInformation":[]},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":13}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}},"message":"Insert `extend T::Sig`"}]}]}}

[2023-08-10 22:56:49.864] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":46},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  \n  def example\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:56:49.884] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":47},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  e\n  def example\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:56:49.884] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":19,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":3,"character":3},"context":{"triggerKind":1}}}

[2023-08-10 22:56:49.961] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:49.961] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:49.961] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:49.961] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:49.965] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 30
[2023-08-10 22:56:49.966] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":5,"character":9},"end":{"line":5,"character":10}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `x` does not exist on `A`","relatedInformation":[]},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":13}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}},"message":"Insert `extend T::Sig`"}]}]}}

[2023-08-10 22:56:50.058] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:50.058] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:50.058] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:50.058] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:50.064] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 31
[2023-08-10 22:56:50.065] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":5,"character":9},"end":{"line":5,"character":10}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `x` does not exist on `A`","relatedInformation":[]},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":13}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}},"message":"Insert `extend T::Sig`"}]},{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `e` does not exist on `T.class_of(A)`","relatedInformation":[]}]}}

[2023-08-10 22:56:50.140] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":19,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[{"label":"else","kind":14,"detail":"(sorbet) Ruby keyword: else","documentation":"The unhandled condition in case, if and unless expressions.","sortText":"000000","insertTextFormat":1,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"else"}},{"label":"elsif","kind":15,"detail":"(sorbet) Snippet: elsif","documentation":{"kind":"markdown","value":"```ruby\nelsif ${1:expr}$0\n```\n\n---\n\nAn alternate condition for an if expression."},"sortText":"000001","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"elsif ${1:expr}$0"}},{"label":"end","kind":14,"detail":"(sorbet) Ruby keyword: end","documentation":"The end of a syntax block. Used by classes, modules, methods, exception handling and control expressions.","sortText":"000002","insertTextFormat":1,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"end"}},{"label":"ensure","kind":14,"detail":"(sorbet) Ruby keyword: ensure","documentation":"Starts a section of code that is always run when an exception is raised.","sortText":"000003","insertTextFormat":1,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"ensure"}},{"label":"enum","kind":15,"detail":"(sorbet) Snippet: enum","documentation":{"kind":"markdown","value":"```ruby\nclass ${1:EnumName} < T::Enum\n  enums do\n    $0\n  end\nend\n```\n\n---\n\nCreates an enum class"},"sortText":"000004","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"class ${1:EnumName} < T::Enum\n  enums do\n    $0\n  end\nend"}},{"label":"allocate","kind":2,"detail":"Class#allocate","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.untyped)}\ndef allocate; end\n```\n\n---\n\nAllocates space for a new object of *class*'s class and does not call\ninitialize on the new instance. The returned object must be an instance of\n*class*.\n\n```ruby\nklass = Class.new do\n  def initialize(*args)\n    @initialized = true\n  end\n\n  def initialized?\n    @initialized || false\n  end\nend\n\nklass.allocate.initialized? #=> false\n```"},"sortText":"000005","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"allocate${0}"}},{"label":"attached_object","kind":2,"detail":"Class#attached_object","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(BasicObject)}\ndef attached_object; end\n```\n\n---\n\nReturns the object for which the receiver is the singleton class.\n\nRaises a `TypeError` if the class is not a singleton class.\n\n```ruby\nclass Foo; end\n\nFoo.singleton_class.attached_object        #=> Foo\nFoo.attached_object                        #=> TypeError: `Foo' is not a singleton class\nFoo.new.singleton_class.attached_object    #=> #<Foo:0x000000010491a370>\nTrueClass.attached_object                  #=> TypeError: `TrueClass' is not a singleton class\nNilClass.attached_object                   #=> TypeError: `NilClass' is not a singleton class\n```"},"sortText":"000006","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"attached_object${0}"}},{"label":"inherited","kind":2,"detail":"Class#inherited","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T::Class[T.anything]).returns(T.untyped)}\ndef inherited(arg0); end\n```\n\n---\n\nCallback invoked whenever a subclass of the current class is created.\n\nExample:\n\n```ruby\nclass Foo\n  def self.inherited(subclass)\n    puts \"New subclass: #{subclass}\"\n  end\nend\n\nclass Bar < Foo\nend\n\nclass Baz < Bar\nend\n```\n\n*produces:*\n\n```ruby\nNew subclass: Bar\nNew subclass: Baz\n```"},"sortText":"000007","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"inherited(${1:T::Class[T.anything]})${0}"}},{"label":"initialize","kind":2,"detail":"Class#initialize","documentation":{"kind":"markdown","value":"```ruby\nsig {void}\nprivate def initialize; end\n```"},"sortText":"000008","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"initialize${0}"}},{"label":"initialize","kind":2,"detail":"Class#initialize (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(superclass: T::Class[T.anything]).void}\nprivate def initialize (overload.1)(superclass=…); end\n```"},"sortText":"000009","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"initialize${0}"}},{"label":"initialize","kind":2,"detail":"Class#initialize (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T::Class[T.anything]).returns(BasicObject)\n  )\n  .void\nend\nprivate def initialize (overload.2)(&blk); end\n```"},"sortText":"000010","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"initialize do |${1:T::Class[T.anything]}|\n  ${2}\nend${0}"}},{"label":"initialize","kind":2,"detail":"Class#initialize (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    superclass: T::Class[T.anything],\n    blk: T.proc.params(arg0: T::Class[T.anything]).returns(BasicObject)\n  )\n  .void\nend\nprivate def initialize (overload.3)(superclass=…, &blk); end\n```"},"sortText":"000011","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"initialize do |${1:T::Class[T.anything]}|\n  ${2}\nend${0}"}},{"label":"instance_methods","kind":2,"detail":"Class#instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T::Boolean).returns(T::Array[Symbol])}\ndef instance_methods(arg0=…); end\n```"},"sortText":"000012","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"instance_methods${0}"}},{"label":"name","kind":2,"detail":"Class#name","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(String))}\ndef name; end\n```"},"sortText":"000013","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"name${0}"}},{"label":"new","kind":2,"detail":"Class#new","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: T.untyped, blk: T.untyped).returns(T.attached_class (of A))}\ndef new(*args, &blk); end\n```\n\n---\n\nCalls\n[`allocate`](https://docs.ruby-lang.org/en/2.7.0/Class.html#method-i-allocate)\nto create a new object of *class*'s class, then invokes that object's\ninitialize method, passing it *args*. This is the method that ends up\ngetting called whenever an object is constructed using `.new`."},"sortText":"000014","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"new${0}"}},{"label":"subclasses","kind":2,"detail":"Class#subclasses","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[T::Class[T.anything]])}\ndef subclasses; end\n```\n\n---\n\nReturns an array of classes where the receiver is the direct superclass of\nthe class, excluding singleton classes. The order of the returned array is\nnot defined.\n\n```ruby\nclass A; end\nclass B < A; end\nclass C < B; end\nclass D < A; end\n\nA.subclasses        #=> [D, B]\nB.subclasses        #=> [C]\nC.subclasses        #=> []\n```"},"sortText":"000015","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"subclasses${0}"}},{"label":"superclass","kind":2,"detail":"Class#superclass","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(T::Class[T.anything]))}\ndef superclass; end\n```\n\n---\n\nReturns the superclass of *class*, or `nil`.\n\n```ruby\nFile.superclass          #=> IO\nIO.superclass            #=> Object\nObject.superclass        #=> BasicObject\nclass Foo; end\nclass Bar < Foo; end\nBar.superclass           #=> Foo\n```\n\nReturns nil when the given class does not have a parent class:\n\n```ruby\nBasicObject.superclass   #=> nil\n```"},"sortText":"000016","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"superclass${0}"}},{"label":"eql?","kind":2,"detail":"Module#eql?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(other: BasicObject).returns(T::Boolean)}\ndef eql?(other); end\n```"},"sortText":"000017","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"eql?(${1:BasicObject})${0}"}},{"label":"equal?","kind":2,"detail":"Module#equal?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(other: BasicObject).returns(T::Boolean)}\ndef equal?(other); end\n```"},"sortText":"000018","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"equal?(${1:BasicObject})${0}"}},{"label":"extend_object","kind":2,"detail":"Module#extend_object","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BasicObject).returns(T.untyped)}\ndef extend_object(arg0); end\n```\n\n---\n\nExtends the specified object by adding this module's constants and methods\n(which are added as singleton methods). This is the callback method used by\n[`Object#extend`](https://docs.ruby-lang.org/en/2.7.0/Object.html#method-i-extend).\n\n```ruby\nmodule Picky\n  def Picky.extend_object(o)\n    if String === o\n      puts \"Can't add Picky to a String\"\n    else\n      puts \"Picky added to #{o.class}\"\n      super\n    end\n  end\nend\n(s = Array.new).extend Picky  # Call Object.extend\n(s = \"quick brown fox\").extend Picky\n```\n\n*produces:*\n\n```\nPicky added to Array\nCan't add Picky to a String\n```"},"sortText":"000019","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"extend_object(${1:BasicObject})${0}"}},{"label":"extended","kind":2,"detail":"Module#extended","documentation":{"kind":"markdown","value":"```ruby\nsig {params(othermod: Module).returns(T.untyped)}\ndef extended(othermod); end\n```\n\n---\n\nThe equivalent of `included`, but for extended modules.\n\n```ruby\nmodule A\n  def self.extended(mod)\n    puts \"#{self} extended in #{mod}\"\n  end\nend\nmodule Enumerable\n  extend A\nend\n # => prints \"A extended in Enumerable\"\n```"},"sortText":"000020","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"extended(${1:Module})${0}"}},{"label":"alias_method","kind":2,"detail":"Module#alias_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(new_name: Symbol, old_name: Symbol).returns(Symbol)}\ndef alias_method(new_name, old_name); end\n```\n\n---\n\nMakes *new\\_name* a new copy of the method *old\\_name*. This can be used to\nretain access to methods that are overridden.\n\n```ruby\nmodule Mod\n  alias_method :orig_exit, :exit #=> :orig_exit\n  def exit(code=0)\n    puts \"Exiting with code #{code}\"\n    orig_exit(code)\n  end\nend\ninclude Mod\nexit(99)\n```\n\n*produces:*\n\n```ruby\nExiting with code 99\n```"},"sortText":"000021","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"alias_method(${1:Symbol}, ${2:Symbol})${0}"}},{"label":"ancestors","kind":2,"detail":"Module#ancestors","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Module])}\ndef ancestors; end\n```\n\n---\n\nReturns a list of modules included/prepended in *mod* (including *mod*\nitself).\n\n```ruby\nmodule Mod\n  include Math\n  include Comparable\n  prepend Enumerable\nend\n\nMod.ancestors        #=> [Enumerable, Mod, Comparable, Math]\nMath.ancestors       #=> [Math]\nEnumerable.ancestors #=> [Enumerable]\n```"},"sortText":"000022","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"ancestors${0}"}},{"label":"append_features","kind":2,"detail":"Module#append_features","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef append_features(arg0); end\n```\n\n---\n\nWhen this module is included in another, Ruby calls\n[`append_features`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-append_features)\nin this module, passing it the receiving module in *mod*. Ruby's default\nimplementation is to add the constants, methods, and module variables of\nthis module to *mod* if this module has not already been added to *mod* or\none of its ancestors. See also\n[`Module#include`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-include)."},"sortText":"000023","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"append_features(${1:Module})${0}"}},{"label":"attr_accessor","kind":2,"detail":"Module#attr_accessor","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(NilClass)}\ndef attr_accessor(*arg0); end\n```\n\n---\n\nDefines a named attribute for this module, where the name is\n*symbol.*`id2name`, creating an instance variable (`@name`) and a\ncorresponding access method to read it. Also creates a method called `name=`\nto set the attribute.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. Returns an array of defined method names as symbols.\n\n```ruby\nmodule Mod\n  attr_accessor(:one, :two) #=> [:one, :one=, :two, :two=]\nend\nMod.instance_methods.sort   #=> [:one, :one=, :two, :two=]\n```"},"sortText":"000024","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"attr_accessor${0}"}},{"label":"attr_reader","kind":2,"detail":"Module#attr_reader","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(NilClass)}\ndef attr_reader(*arg0); end\n```\n\n---\n\nCreates instance variables and corresponding methods that return the value\nof each instance variable. Equivalent to calling \"`attr`*:name*\" on each\nname in turn. [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html)\narguments are converted to symbols. Returns an array of defined method names\nas symbols."},"sortText":"000025","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"attr_reader${0}"}},{"label":"attr_writer","kind":2,"detail":"Module#attr_writer","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(NilClass)}\ndef attr_writer(*arg0); end\n```\n\n---\n\nCreates an accessor method to allow assignment to the attribute\n*symbol*`.id2name`.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. Returns an array of defined method names as symbols."},"sortText":"000026","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"attr_writer${0}"}},{"label":"class_eval","kind":2,"detail":"Module#class_eval","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, filename: String, lineno: Integer).returns(T.untyped)}\ndef class_eval(arg0, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates the string or block in the context of *mod*, except that when a\nblock is given, constant/class variable lookup is not affected. This can be\nused to add methods to a class. `module_eval` returns the result of\nevaluating its argument. The optional *filename* and *lineno* parameters set\nthe text for error messages.\n\n```ruby\nclass Thing\nend\na = %q{def hello() \"Hello there!\" end}\nThing.module_eval(a)\nputs Thing.new.hello()\nThing.module_eval(\"invalid code\", \"dummy\", 123)\n```\n\n*produces:*\n\n```\nHello there!\ndummy:123:in `module_eval': undefined local variable\n    or method `code' for Thing:Class\n```\n\n\nAlias for:\n[`module_eval`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-module_eval)"},"sortText":"000027","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"class_eval(${1:String})${0}"}},{"label":"class_eval","kind":2,"detail":"Module#class_eval (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef class_eval (overload.1)(&blk); end\n```\n\n---\n\nEvaluates the string or block in the context of *mod*, except that when a\nblock is given, constant/class variable lookup is not affected. This can be\nused to add methods to a class. `module_eval` returns the result of\nevaluating its argument. The optional *filename* and *lineno* parameters set\nthe text for error messages.\n\n```ruby\nclass Thing\nend\na = %q{def hello() \"Hello there!\" end}\nThing.module_eval(a)\nputs Thing.new.hello()\nThing.module_eval(\"invalid code\", \"dummy\", 123)\n```\n\n*produces:*\n\n```\nHello there!\ndummy:123:in `module_eval': undefined local variable\n    or method `code' for Thing:Class\n```\n\n\nAlias for:\n[`module_eval`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-module_eval)"},"sortText":"000028","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"class_eval do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"class_exec","kind":2,"detail":"Module#class_exec","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: BasicObject, blk: T.untyped).returns(T.untyped)}\ndef class_exec(*args, &blk); end\n```\n\n---\n\nEvaluates the given block in the context of the class/module. The method\ndefined in the block will belong to the receiver. Any arguments passed to\nthe method will be passed to the block. This can be used if the block needs\nto access instance variables.\n\n```ruby\nclass Thing\nend\nThing.class_exec{\n  def hello() \"Hello there!\" end\n}\nputs Thing.new.hello()\n```\n\n*produces:*\n\n```ruby\nHello there!\n```\n\n\nAlias for:\n[`module_exec`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-module_exec)"},"sortText":"000029","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"class_exec${0}"}},{"label":"class_variable_defined?","kind":2,"detail":"Module#class_variable_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef class_variable_defined?(arg0); end\n```\n\n---\n\nReturns `true` if the given class variable is defined in *obj*.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nclass Fred\n  @@foo = 99\nend\nFred.class_variable_defined?(:@@foo)    #=> true\nFred.class_variable_defined?(:@@bar)    #=> false\n```"},"sortText":"000030","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"class_variable_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"class_variable_get","kind":2,"detail":"Module#class_variable_get","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.untyped)}\ndef class_variable_get(arg0); end\n```\n\n---\n\nReturns the value of the given class variable (or throws a\n[`NameError`](https://docs.ruby-lang.org/en/2.7.0/NameError.html)\nexception). The `@@` part of the variable name should be included for\nregular class variables.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nclass Fred\n  @@foo = 99\nend\nFred.class_variable_get(:@@foo)     #=> 99\n```"},"sortText":"000031","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"class_variable_get(${1:T.any(Symbol, String)})${0}"}},{"label":"class_variable_set","kind":2,"detail":"Module#class_variable_set","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String), arg1: BasicObject).returns(T.untyped)}\ndef class_variable_set(arg0, arg1); end\n```\n\n---\n\nSets the class variable named by *symbol* to the given object. If the class\nvariable name is passed as a string, that string is converted to a symbol.\n\n```ruby\nclass Fred\n  @@foo = 99\n  def foo\n    @@foo\n  end\nend\nFred.class_variable_set(:@@foo, 101)     #=> 101\nFred.new.foo                             #=> 101\n```"},"sortText":"000032","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"class_variable_set(${1:T.any(Symbol, String)}, ${2:BasicObject})${0}"}},{"label":"class_variables","kind":2,"detail":"Module#class_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {params(inherit: T::Boolean).returns(T::Array[Symbol])}\ndef class_variables(inherit=…); end\n```\n\n---\n\nReturns an array of the names of class variables in *mod*. This includes the\nnames of class variables in any included modules, unless the *inherit*\nparameter is set to `false`.\n\n```ruby\nclass One\n  @@var1 = 1\nend\nclass Two < One\n  @@var2 = 2\nend\nOne.class_variables          #=> [:@@var1]\nTwo.class_variables          #=> [:@@var2, :@@var1]\nTwo.class_variables(false)   #=> [:@@var2]\n```"},"sortText":"000033","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"class_variables${0}"}},{"label":"const_added","kind":2,"detail":"Module#const_added","documentation":{"kind":"markdown","value":"```ruby\nsig {params(const_name: Symbol).returns(T.untyped)}\ndef const_added(const_name); end\n```\n\n---\n\nInvoked as a callback whenever a constant is assigned on the receiver\n\n```ruby\nmodule Chatty\n  def self.const_added(const_name)\n    super\n    puts \"Added #{const_name.inspect}\"\n  end\n  FOO = 1\nend\n```\n\n*produces:*\n\n```\nAdded :FOO\n```"},"sortText":"000034","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"const_added(${1:Symbol})${0}"}},{"label":"const_defined?","kind":2,"detail":"Module#const_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    inherit: T::Boolean\n  )\n  .returns(T::Boolean)\nend\ndef const_defined?(arg0, inherit=…); end\n```\n\n---\n\nSays whether *mod* or its ancestors have a constant with the given name:\n\n```ruby\nFloat.const_defined?(:EPSILON)      #=> true, found in Float itself\nFloat.const_defined?(\"String\")      #=> true, found in Object (ancestor)\nBasicObject.const_defined?(:Hash)   #=> false\n```\n\nIf *mod* is a `Module`, additionally `Object` and its ancestors are checked:\n\n```ruby\nMath.const_defined?(:String)   #=> true, found in Object\n```\n\nIn each of the checked classes or modules, if the constant is not present\nbut there is an autoload for it, `true` is returned directly without\nautoloading:\n\n```ruby\nmodule Admin\n  autoload :User, 'admin/user'\nend\nAdmin.const_defined?(:User)   #=> true\n```\n\nIf the constant is not found the callback `const_missing` is **not** called\nand the method returns `false`.\n\nIf `inherit` is false, the lookup only checks the constants in the receiver:\n\n```ruby\nIO.const_defined?(:SYNC)          #=> true, found in File::Constants (ancestor)\nIO.const_defined?(:SYNC, false)   #=> false, not found in IO itself\n```\n\nIn this case, the same logic for autoloading applies.\n\nIf the argument is not a valid constant name a `NameError` is raised with\nthe message \"wrong constant name *name*\":\n\n```ruby\nHash.const_defined? 'foobar'   #=> NameError: wrong constant name foobar\n```"},"sortText":"000035","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"const_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"const_get","kind":2,"detail":"Module#const_get","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    inherit: T::Boolean\n  )\n  .returns(T.untyped)\nend\ndef const_get(arg0, inherit=…); end\n```\n\n---\n\nChecks for a constant with the given name in *mod*. If `inherit` is set, the\nlookup will also search the ancestors (and `Object` if *mod* is a `Module`).\n\nThe value of the constant is returned if a definition is found, otherwise a\n`NameError` is raised.\n\n```ruby\nMath.const_get(:PI)   #=> 3.14159265358979\n```\n\nThis method will recursively look up constant names if a namespaced class\nname is provided. For example:\n\n```ruby\nmodule Foo; class Bar; end end\nObject.const_get 'Foo::Bar'\n```\n\nThe `inherit` flag is respected on each lookup. For example:\n\n```ruby\nmodule Foo\n  class Bar\n    VAL = 10\n  end\n\n  class Baz < Bar; end\nend\n\nObject.const_get 'Foo::Baz::VAL'         # => 10\nObject.const_get 'Foo::Baz::VAL', false  # => NameError\n```\n\nIf the argument is not a valid constant name a `NameError` will be raised\nwith a warning \"wrong constant name\".\n\n```ruby\nObject.const_get 'foobar' #=> NameError: wrong constant name foobar\n```"},"sortText":"000036","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"const_get(${1:T.any(Symbol, String)})${0}"}},{"label":"const_set","kind":2,"detail":"Module#const_set","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String), arg1: BasicObject).returns(T.untyped)}\ndef const_set(arg0, arg1); end\n```\n\n---\n\nSets the named constant to the given object, returning that object. Creates\na new constant if no constant with the given name previously existed.\n\n```ruby\nMath.const_set(\"HIGH_SCHOOL_PI\", 22.0/7.0)   #=> 3.14285714285714\nMath::HIGH_SCHOOL_PI - Math::PI              #=> 0.00126448926734968\n```\n\nIf `sym` or `str` is not a valid constant name a `NameError` will be raised\nwith a warning \"wrong constant name\".\n\n```ruby\nObject.const_set('foobar', 42) #=> NameError: wrong constant name foobar\n```"},"sortText":"000037","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"const_set(${1:T.any(Symbol, String)}, ${2:BasicObject})${0}"}},{"label":"const_source_location","kind":2,"detail":"Module#const_source_location","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    sym: T.any(Symbol, String),\n    inherit: T::Boolean\n  )\n  .returns(T.nilable([String, Integer]))\nend\ndef const_source_location(sym, inherit=…); end\n```\n\n---\n\nReturns the Ruby source filename and line number containing the definition\nof the constant specified. If the named constant is not found, `nil` is\nreturned. If the constant is found, but its source location can not be\nextracted (constant is defined in C code), empty array is returned.\n\n*inherit* specifies whether to lookup in `mod.ancestors` (`true` by\ndefault).\n\n```ruby\n# test.rb:\nclass A         # line 1\n  C1 = 1\n  C2 = 2\nend\n\nmodule M        # line 6\n  C3 = 3\nend\n\nclass B < A     # line 10\n  include M\n  C4 = 4\nend\n\nclass A # continuation of A definition\n  C2 = 8 # constant redefinition; warned yet allowed\nend\n\np B.const_source_location('C4')           # => [\"test.rb\", 12]\np B.const_source_location('C3')           # => [\"test.rb\", 7]\np B.const_source_location('C1')           # => [\"test.rb\", 2]\n\np B.const_source_location('C3', false)    # => nil  -- don't lookup in ancestors\n\np A.const_source_location('C2')           # => [\"test.rb\", 16] -- actual (last) definition place\n\np Object.const_source_location('B')       # => [\"test.rb\", 10] -- top-level constant could be looked through Object\np Object.const_source_location('A')       # => [\"test.rb\", 1] -- class reopening is NOT considered new definition\n\np B.const_source_location('A')            # => [\"test.rb\", 1]  -- because Object is in ancestors\np M.const_source_location('A')            # => [\"test.rb\", 1]  -- Object is not ancestor, but additionally checked for modules\n\np Object.const_source_location('A::C1')   # => [\"test.rb\", 2]  -- nesting is supported\np Object.const_source_location('String')  # => []  -- constant is defined in C code\n```"},"sortText":"000038","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"const_source_location(${1:T.any(Symbol, String)})${0}"}},{"label":"define_method","kind":2,"detail":"Module#define_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    arg1: T.any(Proc, Method, UnboundMethod)\n  )\n  .returns(Symbol)\nend\ndef define_method(arg0, arg1=…); end\n```\n\n---\n\nDefines an instance method in the receiver. The *method* parameter can be a\n`Proc`, a `Method` or an `UnboundMethod` object. If a block is specified, it\nis used as the method body. If a block or the *method* parameter has\nparameters, they're used as method parameters. This block is evaluated using\n[`instance_eval`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html#method-i-instance_eval).\n\n```ruby\nclass A\n  def fred\n    puts \"In Fred\"\n  end\n  def create_method(name, &block)\n    self.class.define_method(name, &block)\n  end\n  define_method(:wilma) { puts \"Charge it!\" }\n  define_method(:flint) {|name| puts \"I'm #{name}!\"}\nend\nclass B < A\n  define_method(:barney, instance_method(:fred))\nend\na = B.new\na.barney\na.wilma\na.flint('Dino')\na.create_method(:betty) { p self }\na.betty\n```\n\n*produces:*\n\n```\nIn Fred\nCharge it!\nI'm Dino!\n#<B:0x401b39e8>\n```"},"sortText":"000039","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"define_method(${1:T.any(Symbol, String)})${0}"}},{"label":"define_method","kind":2,"detail":"Module#define_method (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String), blk: T.untyped).returns(Symbol)}\ndef define_method (overload.1)(arg0, &blk); end\n```\n\n---\n\nDefines an instance method in the receiver. The *method* parameter can be a\n`Proc`, a `Method` or an `UnboundMethod` object. If a block is specified, it\nis used as the method body. If a block or the *method* parameter has\nparameters, they're used as method parameters. This block is evaluated using\n[`instance_eval`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html#method-i-instance_eval).\n\n```ruby\nclass A\n  def fred\n    puts \"In Fred\"\n  end\n  def create_method(name, &block)\n    self.class.define_method(name, &block)\n  end\n  define_method(:wilma) { puts \"Charge it!\" }\n  define_method(:flint) {|name| puts \"I'm #{name}!\"}\nend\nclass B < A\n  define_method(:barney, instance_method(:fred))\nend\na = B.new\na.barney\na.wilma\na.flint('Dino')\na.create_method(:betty) { p self }\na.betty\n```\n\n*produces:*\n\n```\nIn Fred\nCharge it!\nI'm Dino!\n#<B:0x401b39e8>\n```"},"sortText":"000040","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"define_method(${1:T.any(Symbol, String)})${0}"}},{"label":"deprecate_constant","kind":2,"detail":"Module#deprecate_constant","documentation":{"kind":"markdown","value":"```ruby\nsig {params(_: T.untyped).returns(T.untyped)}\ndef deprecate_constant(*_); end\n```\n\n---\n\nMakes a list of existing constants deprecated. Attempt to refer to them will\nproduce a warning.\n\n```ruby\nmodule HTTP\n  NotFound = Exception.new\n  NOT_FOUND = NotFound # previous version of the library used this name\n\n  deprecate_constant :NOT_FOUND\nend\n\nHTTP::NOT_FOUND\n# warning: constant HTTP::NOT_FOUND is deprecated\n```"},"sortText":"000041","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"deprecate_constant${0}"}},{"label":"freeze","kind":2,"detail":"Module#freeze","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.class_of(A))}\ndef freeze; end\n```\n\n---\n\nPrevents further modifications to *mod*.\n\nThis method returns self."},"sortText":"000042","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"freeze${0}"}},{"label":"include","kind":2,"detail":"Module#include","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef include(*arg0); end\n```\n\n---\n\nInvokes\n[`Module.append_features`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-append_features)\non each parameter in reverse order."},"sortText":"000043","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"include${0}"}},{"label":"include?","kind":2,"detail":"Module#include?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T::Boolean)}\ndef include?(arg0); end\n```\n\n---\n\nReturns `true` if *module* is included or prepended in *mod* or one of\n*mod*'s ancestors.\n\n```ruby\nmodule A\nend\nclass B\n  include A\nend\nclass C < B\nend\nB.include?(A)   #=> true\nC.include?(A)   #=> true\nA.include?(A)   #=> false\n```"},"sortText":"000044","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"include?(${1:Module})${0}"}},{"label":"included","kind":2,"detail":"Module#included","documentation":{"kind":"markdown","value":"```ruby\nsig {params(othermod: Module).returns(T.untyped)}\ndef included(othermod); end\n```\n\n---\n\nCallback invoked whenever the receiver is included in another module or\nclass. This should be used in preference to `Module.append_features` if your\ncode wants to perform some action when a module is included in another.\n\n```ruby\nmodule A\n  def A.included(mod)\n    puts \"#{self} included in #{mod}\"\n  end\nend\nmodule Enumerable\n  include A\nend\n # => prints \"A included in Enumerable\"\n```"},"sortText":"000045","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"included(${1:Module})${0}"}},{"label":"included_modules","kind":2,"detail":"Module#included_modules","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Module])}\ndef included_modules; end\n```\n\n---\n\nReturns the list of modules included or prepended in *mod* or one of *mod*'s\nancestors.\n\n```ruby\nmodule Sub\nend\n\nmodule Mixin\n  prepend Sub\nend\n\nmodule Outer\n  include Mixin\nend\n\nMixin.included_modules   #=> [Sub]\nOuter.included_modules   #=> [Sub, Mixin]\n```"},"sortText":"000046","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"included_modules${0}"}},{"label":"inspect","kind":2,"detail":"Module#inspect","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(String)}\ndef inspect; end\n```\n\n---\n\nReturns a string representing this module or class. For basic classes and\nmodules, this is the name. For singletons, we show information on the thing\nwe're attached to as well.\n\nAlias for:\n[`to_s`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-to_s)"},"sortText":"000047","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"inspect${0}"}},{"label":"instance_method","kind":2,"detail":"Module#instance_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(UnboundMethod)}\ndef instance_method(arg0); end\n```\n\n---\n\nReturns an `UnboundMethod` representing the given instance method in *mod*.\n\n```ruby\nclass Interpreter\n  def do_a() print \"there, \"; end\n  def do_d() print \"Hello \";  end\n  def do_e() print \"!\\n\";     end\n  def do_v() print \"Dave\";    end\n  Dispatcher = {\n    \"a\" => instance_method(:do_a),\n    \"d\" => instance_method(:do_d),\n    \"e\" => instance_method(:do_e),\n    \"v\" => instance_method(:do_v)\n  }\n  def interpret(string)\n    string.each_char {|b| Dispatcher[b].bind(self).call }\n  end\nend\n\ninterpreter = Interpreter.new\ninterpreter.interpret('dave')\n```\n\n*produces:*\n\n```ruby\nHello there, Dave!\n```"},"sortText":"000048","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"instance_method(${1:T.any(Symbol, String)})${0}"}},{"label":"method_added","kind":2,"detail":"Module#method_added","documentation":{"kind":"markdown","value":"```ruby\nsig {params(meth: Symbol).returns(T.untyped)}\ndef method_added(meth); end\n```\n\n---\n\nInvoked as a callback whenever an instance method is added to the receiver.\n\n```ruby\nmodule Chatty\n  def self.method_added(method_name)\n    puts \"Adding #{method_name.inspect}\"\n  end\n  def self.some_class_method() end\n  def some_instance_method() end\nend\n```\n\n*produces:*\n\n```ruby\nAdding :some_instance_method\n```"},"sortText":"000049","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"method_added(${1:Symbol})${0}"}},{"label":"method_defined?","kind":2,"detail":"Module#method_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method_name: T.any(Symbol, String),\n    inherit: T::Boolean\n  )\n  .returns(T::Boolean)\nend\ndef method_defined?(method_name, inherit=…); end\n```\n\n---\n\nReturns `true` if the named method is defined by *mod*. If *inherit* is set,\nthe lookup will also search *mod*'s ancestors. Public and protected methods\nare matched. [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html)\narguments are converted to symbols.\n\n```ruby\nmodule A\n  def method1()  end\n  def protected_method1()  end\n  protected :protected_method1\nend\nclass B\n  def method2()  end\n  def private_method2()  end\n  private :private_method2\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1              #=> true\nC.method_defined? \"method1\"             #=> true\nC.method_defined? \"method2\"             #=> true\nC.method_defined? \"method2\", true       #=> true\nC.method_defined? \"method2\", false      #=> false\nC.method_defined? \"method3\"             #=> true\nC.method_defined? \"protected_method1\"   #=> true\nC.method_defined? \"method4\"             #=> false\nC.method_defined? \"private_method2\"     #=> false\n```"},"sortText":"000050","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"method_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"method_removed","kind":2,"detail":"Module#method_removed","documentation":{"kind":"markdown","value":"```ruby\nsig {params(method_name: Symbol).returns(T.untyped)}\ndef method_removed(method_name); end\n```\n\n---\n\nInvoked as a callback whenever an instance method is removed from the\nreceiver.\n\n```ruby\nmodule Chatty\n  def self.method_removed(method_name)\n    puts \"Removing #{method_name.inspect}\"\n  end\n  def self.some_class_method() end\n  def some_instance_method() end\n  class << self\n    remove_method :some_class_method\n  end\n  remove_method :some_instance_method\nend\n```\n\n*produces:*\n\n```ruby\nRemoving :some_instance_method\n```"},"sortText":"000051","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"method_removed(${1:Symbol})${0}"}},{"label":"module_eval","kind":2,"detail":"Module#module_eval","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, filename: String, lineno: Integer).returns(T.untyped)}\ndef module_eval(arg0, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates the string or block in the context of *mod*, except that when a\nblock is given, constant/class variable lookup is not affected. This can be\nused to add methods to a class. `module_eval` returns the result of\nevaluating its argument. The optional *filename* and *lineno* parameters set\nthe text for error messages.\n\n```ruby\nclass Thing\nend\na = %q{def hello() \"Hello there!\" end}\nThing.module_eval(a)\nputs Thing.new.hello()\nThing.module_eval(\"invalid code\", \"dummy\", 123)\n```\n\n*produces:*\n\n```\nHello there!\ndummy:123:in `module_eval': undefined local variable\n    or method `code' for Thing:Class\n```\n\n\nAlso aliased as:\n[`class_eval`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-class_eval)"},"sortText":"000052","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"module_eval(${1:String})${0}"}},{"label":"module_eval","kind":2,"detail":"Module#module_eval (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef module_eval (overload.1)(&blk); end\n```\n\n---\n\nEvaluates the string or block in the context of *mod*, except that when a\nblock is given, constant/class variable lookup is not affected. This can be\nused to add methods to a class. `module_eval` returns the result of\nevaluating its argument. The optional *filename* and *lineno* parameters set\nthe text for error messages.\n\n```ruby\nclass Thing\nend\na = %q{def hello() \"Hello there!\" end}\nThing.module_eval(a)\nputs Thing.new.hello()\nThing.module_eval(\"invalid code\", \"dummy\", 123)\n```\n\n*produces:*\n\n```\nHello there!\ndummy:123:in `module_eval': undefined local variable\n    or method `code' for Thing:Class\n```\n\n\nAlso aliased as:\n[`class_eval`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-class_eval)"},"sortText":"000053","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"module_eval do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"module_exec","kind":2,"detail":"Module#module_exec","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: BasicObject, blk: T.untyped).returns(T.untyped)}\ndef module_exec(*args, &blk); end\n```\n\n---\n\nEvaluates the given block in the context of the class/module. The method\ndefined in the block will belong to the receiver. Any arguments passed to\nthe method will be passed to the block. This can be used if the block needs\nto access instance variables.\n\n```ruby\nclass Thing\nend\nThing.class_exec{\n  def hello() \"Hello there!\" end\n}\nputs Thing.new.hello()\n```\n\n*produces:*\n\n```ruby\nHello there!\n```\n\n\nAlso aliased as:\n[`class_exec`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-class_exec)"},"sortText":"000054","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"module_exec${0}"}},{"label":"module_function","kind":2,"detail":"Module#module_function","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef module_function(*arg0); end\n```\n\n---\n\nCreates module functions for the named methods. These functions may be\ncalled with the module as a receiver, and also become available as instance\nmethods to classes that mix in the module.\n[`Module`](https://docs.ruby-lang.org/en/2.7.0/Module.html) functions are\ncopies of the original, and so may be changed independently. The\ninstance-method versions are made private. If used with no arguments,\nsubsequently defined methods become module functions.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. If a single argument is passed, it is returned. If no\nargument is passed, nil is returned. If multiple arguments are passed, the\narguments are returned as an array.\n\n```ruby\nmodule Mod\n  def one\n    \"This is one\"\n  end\n  module_function :one\nend\nclass Cls\n  include Mod\n  def call_one\n    one\n  end\nend\nMod.one     #=> \"This is one\"\nc = Cls.new\nc.call_one  #=> \"This is one\"\nmodule Mod\n  def one\n    \"This is the new one\"\n  end\nend\nMod.one     #=> \"This is one\"\nc.call_one  #=> \"This is the new one\"\n```"},"sortText":"000055","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"module_function${0}"}},{"label":"prepend","kind":2,"detail":"Module#prepend","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef prepend(*arg0); end\n```\n\n---\n\nInvokes\n[`Module.prepend_features`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-prepend_features)\non each parameter in reverse order."},"sortText":"000056","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"prepend${0}"}},{"label":"prepend_features","kind":2,"detail":"Module#prepend_features","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef prepend_features(arg0); end\n```\n\n---\n\nWhen this module is prepended in another, Ruby calls\n[`prepend_features`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-prepend_features)\nin this module, passing it the receiving module in *mod*. Ruby's default\nimplementation is to overlay the constants, methods, and module variables of\nthis module to *mod* if this module has not already been added to *mod* or\none of its ancestors. See also\n[`Module#prepend`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-prepend)."},"sortText":"000057","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"prepend_features(${1:Module})${0}"}},{"label":"prepended","kind":2,"detail":"Module#prepended","documentation":{"kind":"markdown","value":"```ruby\nsig {params(othermod: Module).returns(T.untyped)}\ndef prepended(othermod); end\n```\n\n---\n\nThe equivalent of `included`, but for prepended modules.\n\n```ruby\nmodule A\n  def self.prepended(mod)\n    puts \"#{self} prepended to #{mod}\"\n  end\nend\nmodule Enumerable\n  prepend A\nend\n # => prints \"A prepended to Enumerable\"\n```"},"sortText":"000058","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"prepended(${1:Module})${0}"}},{"label":"private","kind":2,"detail":"Module#private","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef private(*arg0); end\n```\n\n---\n\nWith no arguments, sets the default visibility for subsequently defined\nmethods to private. With arguments, sets the named methods to have private\nvisibility. [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html)\narguments are converted to symbols. An\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of Symbols and/or\nStrings is also accepted. If a single argument is passed, it is returned. If\nno argument is passed, nil is returned. If multiple arguments are passed,\nthe arguments are returned as an array.\n\n```ruby\nmodule Mod\n  def a()  end\n  def b()  end\n  private\n  def c()  end\n  private :a\nend\nMod.private_instance_methods   #=> [:a, :c]\n```\n\nNote that to show a private method on\n[`RDoc`](https://docs.ruby-lang.org/en/2.7.0/RDoc.html), use `:doc:`."},"sortText":"000059","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"private${0}"}},{"label":"private_class_method","kind":2,"detail":"Module#private_class_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Array[T.any(Symbol, String)], Symbol, String)\n  )\n  .returns(T.class_of(A))\nend\ndef private_class_method(*arg0); end\n```\n\n---\n\nMakes existing class methods private. Often used to hide the default\nconstructor `new`.\n\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. An\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of Symbols and/or\nStrings is also accepted.\n\n```ruby\nclass SimpleSingleton  # Not thread safe\n  private_class_method :new\n  def SimpleSingleton.create(*args, &block)\n    @me = new(*args, &block) if ! @me\n    @me\n  end\nend\n```"},"sortText":"000060","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"private_class_method${0}"}},{"label":"private_constant","kind":2,"detail":"Module#private_constant","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef private_constant(*arg0); end\n```\n\n---\n\nMakes a list of existing constants private."},"sortText":"000061","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"private_constant${0}"}},{"label":"private_instance_methods","kind":2,"detail":"Module#private_instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(include_super: T::Boolean).returns(T::Array[Symbol])}\ndef private_instance_methods(include_super=…); end\n```\n\n---\n\nReturns a list of the private instance methods defined in *mod*. If the\noptional parameter is `false`, the methods of any ancestors are not\nincluded.\n\n```ruby\nmodule Mod\n  def method1()  end\n  private :method1\n  def method2()  end\nend\nMod.instance_methods           #=> [:method2]\nMod.private_instance_methods   #=> [:method1]\n```"},"sortText":"000062","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"private_instance_methods${0}"}},{"label":"private_method_defined?","kind":2,"detail":"Module#private_method_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef private_method_defined?(arg0); end\n```\n\n---\n\nReturns `true` if the named private method is defined by *mod*. If *inherit*\nis set, the lookup will also search *mod*'s ancestors.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nmodule A\n  def method1()  end\nend\nclass B\n  private\n  def method2()  end\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1                   #=> true\nC.private_method_defined? \"method1\"          #=> false\nC.private_method_defined? \"method2\"          #=> true\nC.private_method_defined? \"method2\", true    #=> true\nC.private_method_defined? \"method2\", false   #=> false\nC.method_defined? \"method2\"                  #=> false\n```"},"sortText":"000063","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"private_method_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"protected","kind":2,"detail":"Module#protected","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef protected(*arg0); end\n```\n\n---\n\nWith no arguments, sets the default visibility for subsequently defined\nmethods to protected. With arguments, sets the named methods to have\nprotected visibility.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. An\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of Symbols and/or\nStrings is also accepted. If a single argument is passed, it is returned. If\nno argument is passed, nil is returned. If multiple arguments are passed,\nthe arguments are returned as an array.\n\nIf a method has protected visibility, it is callable only where `self` of\nthe context is the same as the method. (method definition or\ninstance\\_eval). This behavior is different from Java's protected method.\nUsually `private` should be used.\n\nNote that a protected method is slow because it can't use inline cache.\n\nTo show a private method on\n[`RDoc`](https://docs.ruby-lang.org/en/2.7.0/RDoc.html), use `:doc:` instead\nof this."},"sortText":"000064","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"protected${0}"}},{"label":"protected_instance_methods","kind":2,"detail":"Module#protected_instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(include_super: T::Boolean).returns(T::Array[Symbol])}\ndef protected_instance_methods(include_super=…); end\n```\n\n---\n\nReturns a list of the protected instance methods defined in *mod*. If the\noptional parameter is `false`, the methods of any ancestors are not\nincluded."},"sortText":"000065","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"protected_instance_methods${0}"}},{"label":"protected_method_defined?","kind":2,"detail":"Module#protected_method_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef protected_method_defined?(arg0); end\n```\n\n---\n\nReturns `true` if the named protected method is defined *mod*. If *inherit*\nis set, the lookup will also search *mod*'s ancestors.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nmodule A\n  def method1()  end\nend\nclass B\n  protected\n  def method2()  end\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1                    #=> true\nC.protected_method_defined? \"method1\"         #=> false\nC.protected_method_defined? \"method2\"         #=> true\nC.protected_method_defined? \"method2\", true   #=> true\nC.protected_method_defined? \"method2\", false  #=> false\nC.method_defined? \"method2\"                   #=> true\n```"},"sortText":"000066","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"protected_method_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"public_class_method","kind":2,"detail":"Module#public_class_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Array[T.any(Symbol, String)], Symbol, String)\n  )\n  .returns(T.class_of(A))\nend\ndef public_class_method(*arg0); end\n```\n\n---\n\nMakes a list of existing class methods public.\n\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. An\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of Symbols and/or\nStrings is also accepted."},"sortText":"000067","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"public_class_method${0}"}},{"label":"public_instance_method","kind":2,"detail":"Module#public_instance_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(UnboundMethod)}\ndef public_instance_method(arg0); end\n```\n\n---\n\nSimilar to *instance\\_method*, searches public method only."},"sortText":"000068","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"public_instance_method(${1:Symbol})${0}"}},{"label":"public_instance_methods","kind":2,"detail":"Module#public_instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(include_super: T::Boolean).returns(T::Array[Symbol])}\ndef public_instance_methods(include_super=…); end\n```\n\n---\n\nReturns a list of the public instance methods defined in *mod*. If the\noptional parameter is `false`, the methods of any ancestors are not\nincluded."},"sortText":"000069","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"public_instance_methods${0}"}},{"label":"public_method_defined?","kind":2,"detail":"Module#public_method_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef public_method_defined?(arg0); end\n```\n\n---\n\nReturns `true` if the named public method is defined by *mod*. If *inherit*\nis set, the lookup will also search *mod*'s ancestors.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nmodule A\n  def method1()  end\nend\nclass B\n  protected\n  def method2()  end\nend\nclass C < B\n  include A\n  def method3()  end\nend\n\nA.method_defined? :method1                 #=> true\nC.public_method_defined? \"method1\"         #=> true\nC.public_method_defined? \"method1\", true   #=> true\nC.public_method_defined? \"method1\", false  #=> true\nC.public_method_defined? \"method2\"         #=> false\nC.method_defined? \"method2\"                #=> true\n```"},"sortText":"000070","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"public_method_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"refine","kind":2,"detail":"Module#refine","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T::Class[T.anything],\n    blk: T.proc.params(arg0: T.untyped).returns(BasicObject)\n  )\n  .returns(T.class_of(A))\nend\ndef refine(arg0, &blk); end\n```\n\n---\n\nRefine *mod* in the receiver.\n\nReturns a module, where refined methods are defined."},"sortText":"000071","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"refine(${1:T::Class[T.anything]}) do |${2:T.untyped}|\n  ${3}\nend${0}"}},{"label":"refinements","kind":2,"detail":"Module#refinements","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Module])}\ndef refinements; end\n```\n\n---\n\np A.refinements\n```\n*produces:*\n\n```ruby\n[#<refinement:Integer@A>, #<refinement:String@B>]\n```"},"sortText":"000072","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"refinements${0}"}},{"label":"remove_class_variable","kind":2,"detail":"Module#remove_class_variable","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(T.untyped)}\ndef remove_class_variable(arg0); end\n```\n\n---\n\nRemoves the named class variable from the receiver, returning that\nvariable's value.\n\n```ruby\nclass Example\n  @@var = 99\n  puts remove_class_variable(:@@var)\n  p(defined? @@var)\nend\n```\n\n*produces:*\n\n```ruby\n99\nnil\n```"},"sortText":"000073","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"remove_class_variable(${1:Symbol})${0}"}},{"label":"remove_const","kind":2,"detail":"Module#remove_const","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(T.untyped)}\ndef remove_const(arg0); end\n```\n\n---\n\nRemoves the definition of the given constant, returning that constant's\nprevious value. If that constant referred to a module, this will not change\nthat module's name and can lead to confusion."},"sortText":"000074","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"remove_const(${1:Symbol})${0}"}},{"label":"remove_method","kind":2,"detail":"Module#remove_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef remove_method(arg0); end\n```\n\n---\n\nRemoves the method identified by *symbol* from the current class. For an\nexample, see\n[`Module#undef_method`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-undef_method).\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols."},"sortText":"000075","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"remove_method(${1:T.any(Symbol, String)})${0}"}},{"label":"ruby2_keywords","kind":2,"detail":"Module#ruby2_keywords","documentation":{"kind":"markdown","value":"```ruby\nsig {params(method_name: Symbol).returns(T.class_of(A))}\ndef ruby2_keywords(*method_name); end\n```\n\n---\n\nFor the given method names, marks the method as passing keywords through a\nnormal argument splat. This should only be called on methods that accept an\nargument splat (`*args`) but not explicit keywords or a keyword splat. It\nmarks the method such that if the method is called with keyword arguments,\nthe final hash argument is marked with a special flag such that if it is the\nfinal element of a normal argument splat to another method call, and that\nmethod call does not include explicit keywords or a keyword splat, the final\nelement is interpreted as keywords. In other words, keywords will be passed\nthrough the method to other methods.\n\nThis should only be used for methods that delegate keywords to another\nmethod, and only for backwards compatibility with Ruby versions before 3.0.\nSee\nhttps://www.ruby-lang.org/en/news/2019/12/12/separation-of-positional-and-keyword-arguments-in-ruby-3-0/\nfor details on why `ruby2_keywords` exists and when and how to use it.\n\nThis method will probably be removed at some point, as it exists only for\nbackwards compatibility. As it does not exist in Ruby versions before 2.7,\ncheck that the module responds to this method before calling it:\n\n```ruby\nmodule Mod\n  def foo(meth, *args, &block)\n    send(:\"do_#{meth}\", *args, &block)\n  end\n  ruby2_keywords(:foo) if respond_to?(:ruby2_keywords, true)\nend\n```\n\nHowever, be aware that if the `ruby2_keywords` method is removed, the\nbehavior of the `foo` method using the above approach will change so that\nthe method does not pass through keywords."},"sortText":"000076","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"ruby2_keywords${0}"}},{"label":"singleton_class?","kind":2,"detail":"Module#singleton_class?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef singleton_class?; end\n```\n\n---\n\nReturns `true` if *mod* is a singleton class or `false` if it is an ordinary\nclass or module.\n\n```ruby\nclass C\nend\nC.singleton_class?                  #=> false\nC.singleton_class.singleton_class?  #=> true\n```"},"sortText":"000077","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"singleton_class?${0}"}},{"label":"undef_method","kind":2,"detail":"Module#undef_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef undef_method(arg0); end\n```\n\n---\n\nPrevents the current class from responding to calls to the named method.\nContrast this with `remove_method`, which deletes the method from the\nparticular class; Ruby will still search superclasses and mixed-in modules\nfor a possible receiver.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nclass Parent\n  def hello\n    puts \"In parent\"\n  end\nend\nclass Child < Parent\n  def hello\n    puts \"In child\"\n  end\nend\n\nc = Child.new\nc.hello\n\nclass Child\n  remove_method :hello  # remove from child, still in parent\nend\nc.hello\n\nclass Child\n  undef_method :hello   # prevent any calls to 'hello'\nend\nc.hello\n```\n\n*produces:*\n\n```\nIn child\nIn parent\nprog.rb:23: undefined method `hello' for #<Child:0x401b3bb4> (NoMethodError)\n```"},"sortText":"000078","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"undef_method(${1:T.any(Symbol, String)})${0}"}},{"label":"singleton_class","kind":2,"detail":"Object#singleton_class","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.untyped)}\ndef singleton_class; end\n```"},"sortText":"000079","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"singleton_class${0}"}},{"label":"enum_for","kind":2,"detail":"Kernel#enum_for","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef enum_for(method=…, *args); end\n```"},"sortText":"000080","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"enum_for${0}"}},{"label":"enum_for","kind":2,"detail":"Kernel#enum_for (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef enum_for (overload.1)(method=…, *args, &blk); end\n```"},"sortText":"000081","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"enum_for${0}"}},{"label":"eval","kind":2,"detail":"Kernel#eval","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: String,\n    arg1: T.nilable(Binding),\n    filename: String,\n    lineno: Integer\n  )\n  .returns(T.untyped)\nend\ndef eval(arg0, arg1=…, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates the Ruby expression(s) in *string*. If *binding* is given, which\nmust be a [`Binding`](https://docs.ruby-lang.org/en/2.7.0/Binding.html)\nobject, the evaluation is performed in its context. If the optional\n*filename* and *lineno* parameters are present, they will be used when\nreporting syntax errors.\n\n```ruby\ndef get_binding(str)\n  return binding\nend\nstr = \"hello\"\neval \"str + ' Fred'\"                      #=> \"hello Fred\"\neval \"str + ' Fred'\", get_binding(\"bye\")  #=> \"bye Fred\"\n```"},"sortText":"000082","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"eval(${1:String})${0}"}},{"label":"exec","kind":2,"detail":"Kernel#exec","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: String).returns(T.noreturn)}\ndef exec(*args); end\n```\n\n---\n\nReplaces the current process by running the given external *command*, which\ncan take one of the following forms:\n\n`exec(commandline)`\n:   command line string which is passed to the standard shell\n`exec(cmdname, arg1, ...)`\n:   command name and one or more arguments (no shell)\n`exec([cmdname, argv0], arg1, ...)`\n:   command name, [argv](0) and zero or more arguments (no shell)\n\n\nIn the first form, the string is taken as a command line that is subject to\nshell expansion before being executed.\n\nThe standard shell always means `\"/bin/sh\"` on Unix-like systems, otherwise,\n`ENV[\"RUBYSHELL\"]` or `ENV[\"COMSPEC\"]` on Windows and similar. The command\nis passed as an argument to the `\"-c\"` switch to the shell, except in the\ncase of `COMSPEC`.\n\nIf the string from the first form (`exec(\"command\")`) follows these simple\nrules:\n\n*   no meta characters\n*   not starting with shell reserved word or special built-in\n*   Ruby invokes the command directly without shell\n\n\nYou can force shell invocation by adding \";\" to the string (because \";\" is a\nmeta character).\n\nNote that this behavior is observable by pid obtained (return value of\nspawn() and\n[`IO#pid`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-pid) for\n[`IO.popen`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-popen)) is\nthe pid of the invoked command, not shell.\n\nIn the second form (`exec(\"command1\", \"arg1\", ...)`), the first is taken as\na command name and the rest are passed as parameters to command with no\nshell expansion.\n\nIn the third form (`exec([\"command\", \"argv0\"], \"arg1\", ...)`), starting a\ntwo-element array at the beginning of the command, the first element is the\ncommand to be executed, and the second argument is used as the `argv[0]`\nvalue, which may show up in process listings.\n\nIn order to execute the command, one of the `exec(2)` system calls are used,\nso the running command may inherit some of the environment of the original\nprogram (including open file descriptors).\n\nThis behavior is modified by the given `env` and `options` parameters. See\n::spawn for details.\n\nIf the command fails to execute (typically Errno::ENOENT when it was not\nfound) a\n[`SystemCallError`](https://docs.ruby-lang.org/en/2.7.0/SystemCallError.html)\nexception is raised.\n\nThis method modifies process attributes according to given `options` before\n`exec(2)` system call. See ::spawn for more details about the given\n`options`.\n\nThe modified attributes may be retained when `exec(2)` system call fails.\n\nFor example, hard resource limits are not restorable.\n\nConsider to create a child process using ::spawn or\n[`Kernel#system`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-system)\nif this is not acceptable.\n\n```ruby\nexec \"echo *\"       # echoes list of files in current directory\n# never get here\n\nexec \"echo\", \"*\"    # echoes an asterisk\n# never get here\n```"},"sortText":"000083","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"exec${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef exit; end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000084","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"exit${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit (overload.1)(status=…); end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000085","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"exit${0}"}},{"label":"exit!","kind":2,"detail":"Kernel#exit!","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit!(status=…); end\n```\n\n---\n\nExits the process immediately. No exit handlers are run. *status* is\nreturned to the underlying system as the exit status.\n\n```ruby\nProcess.exit!(true)\n```"},"sortText":"000086","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"exit!${0}"}},{"label":"extend","kind":2,"detail":"Kernel#extend","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef extend(*arg0); end\n```"},"sortText":"000087","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"extend${0}"}},{"label":"BigDecimal","kind":2,"detail":"Kernel#BigDecimal","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    initial: T.any(Integer, Float, Rational, BigDecimal, String),\n    digits: Integer,\n    exception: T::Boolean\n  )\n  .returns(BigDecimal)\nend\ndef BigDecimal(initial, digits=…, exception: …); end\n```\n\n---\n\n```\nReturns the \\BigDecimal converted from +value+\nwith a precision of +ndigits+ decimal digits.\n\nWhen +ndigits+ is less than the number of significant digits\nin the value, the result is rounded to that number of digits,\naccording to the current rounding mode; see BigDecimal.mode.\n```\n\nReturns `value` converted to a\n[`BigDecimal`](https://docs.ruby-lang.org/en/2.7.0/BigDecimal.html),\ndepending on the type of `value`:\n\n*   [`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html),\n    [`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html),\n    [`Rational`](https://docs.ruby-lang.org/en/2.7.0/Rational.html),\n    [`Complex`](https://docs.ruby-lang.org/en/2.7.0/Complex.html), or\n    BigDecimal: converted directly:\n\n```ruby\n# Integer, Complex, or BigDecimal value does not require ndigits; ignored if given.\nBigDecimal(2)                     # => 0.2e1\nBigDecimal(Complex(2, 0))         # => 0.2e1\nBigDecimal(BigDecimal(2))         # => 0.2e1\n# Float or Rational value requires ndigits.\nBigDecimal(2.0, 0)                # => 0.2e1\nBigDecimal(Rational(2, 1), 0)     # => 0.2e1\n```\n\n*   String: converted by parsing if it contains an integer or floating-point\n    literal; leading and trailing whitespace is ignored:\n\n```ruby\n# String does not require ndigits; ignored if given.\nBigDecimal('2')     # => 0.2e1\nBigDecimal('2.0')   # => 0.2e1\nBigDecimal('0.2e1') # => 0.2e1\nBigDecimal(' 2.0 ') # => 0.2e1\n```\n\n*   Other type that responds to method `:to_str`: first converted to a\n    string, then converted to a\n    [`BigDecimal`](https://docs.ruby-lang.org/en/2.7.0/BigDecimal.html), as\n    above.\n\n*   Other type:\n\n    *   Raises an exception if keyword argument `exception` is `true`.\n    *   Returns `nil` if keyword argument `exception` is `true`.\n\n\n\nRaises an exception if `value` evaluates to a\n[`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html) and `digits` is\nlarger than Float::DIG + 1."},"sortText":"000088","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"BigDecimal(${1:T.any(Integer, Float, Rational, BigDecimal, String)})${0}"}},{"label":"Complex","kind":2,"detail":"Kernel#Complex","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: T.any(Numeric, String),\n    y: T.any(Numeric, String),\n    exception: T::Boolean\n  )\n  .returns(Complex)\nend\ndef Complex(x, y=…, exception: …); end\n```\n\n---\n\nReturns x+i\\*y;\n\n```ruby\nComplex(1, 2)    #=> (1+2i)\nComplex('1+2i')  #=> (1+2i)\nComplex(nil)     #=> TypeError\nComplex(1, nil)  #=> TypeError\n\nComplex(1, nil, exception: false)  #=> nil\nComplex('1+2', exception: false)   #=> nil\n```\n\nSyntax of string form:\n\n```\nstring form = extra spaces , complex , extra spaces ;\ncomplex = real part | [ sign ] , imaginary part\n        | real part , sign , imaginary part\n        | rational , \"@\" , rational ;\nreal part = rational ;\nimaginary part = imaginary unit | unsigned rational , imaginary unit ;\nrational = [ sign ] , unsigned rational ;\nunsigned rational = numerator | numerator , \"/\" , denominator ;\nnumerator = integer part | fractional part | integer part , fractional part ;\ndenominator = digits ;\ninteger part = digits ;\nfractional part = \".\" , digits , [ ( \"e\" | \"E\" ) , [ sign ] , digits ] ;\nimaginary unit = \"i\" | \"I\" | \"j\" | \"J\" ;\nsign = \"-\" | \"+\" ;\ndigits = digit , { digit | \"_\" , digit };\ndigit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\nextra spaces = ? \\s* ? ;\n```\n\nSee\n[`String#to_c`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_c)."},"sortText":"000089","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"Complex(${1:T.any(Numeric, String)})${0}"}},{"label":"Integer","kind":2,"detail":"Kernel#Integer","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg: T.any(Numeric, String),\n    base: Integer,\n    exception: T::Boolean\n  )\n  .returns(Integer)\nend\ndef Integer(arg, base=…, exception: …); end\n```\n\n---\n\nConverts *arg* to an\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html).\n[`Numeric`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html) types are\nconverted directly (with floating point numbers being truncated). *base* (0,\nor between 2 and 36) is a base for integer string representation. If *arg*\nis a [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html), when\n*base* is omitted or equals zero, radix indicators (`0`, `0b`, and `0x`) are\nhonored. In any case, strings should consist only of one or more digits,\nexcept for that a sign, one underscore between two digits, and\nleading/trailing spaces are optional. This behavior is different from that\nof\n[`String#to_i`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_i).\nNon string values will be converted by first trying `to_int`, then `to_i`.\n\nPassing `nil` raises a\n[`TypeError`](https://docs.ruby-lang.org/en/2.7.0/TypeError.html), while\npassing a [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) that\ndoes not conform with numeric representation raises an\n[`ArgumentError`](https://docs.ruby-lang.org/en/2.7.0/ArgumentError.html).\nThis behavior can be altered by passing `exception: false`, in this case a\nnot convertible value will return `nil`.\n\n```ruby\nInteger(123.999)    #=> 123\nInteger(\"0x1a\")     #=> 26\nInteger(Time.new)   #=> 1204973019\nInteger(\"0930\", 10) #=> 930\nInteger(\"111\", 2)   #=> 7\nInteger(\" +1_0 \")   #=> 10\nInteger(nil)        #=> TypeError: can't convert nil into Integer\nInteger(\"x\")        #=> ArgumentError: invalid value for Integer(): \"x\"\n\nInteger(\"x\", exception: false)        #=> nil\n```"},"sortText":"000090","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"Integer(${1:T.any(Numeric, String)})${0}"}},{"label":"Pathname","kind":2,"detail":"Kernel#Pathname","documentation":{"kind":"markdown","value":"```ruby\nsig {params(path: T.any(String, Pathname)).returns(Pathname)}\ndef Pathname(path); end\n```\n\n---\n\nCreates a new\n[`Pathname`](https://docs.ruby-lang.org/en/2.7.0/Pathname.html) object from\nthe given string, `path`, and returns pathname object.\n\nIn order to use this constructor, you must first require the\n[`Pathname`](https://docs.ruby-lang.org/en/2.7.0/Pathname.html) standard\nlibrary extension.\n\n```ruby\nrequire 'pathname'\nPathname(\"/home/zzak\")\n#=> #<Pathname:/home/zzak>\n```\n\nSee also\n[`Pathname::new`](https://docs.ruby-lang.org/en/2.7.0/Pathname.html#method-c-new)\nfor more information."},"sortText":"000091","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"Pathname(${1:T.any(String, Pathname)})${0}"}},{"label":"__callee__","kind":2,"detail":"Kernel#__callee__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(Symbol))}\ndef __callee__; end\n```\n\n---\n\nReturns the called name of the current method as a\n[`Symbol`](https://docs.ruby-lang.org/en/2.7.0/Symbol.html). If called\noutside of a method, it returns `nil`."},"sortText":"000092","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"__callee__${0}"}},{"label":"__method__","kind":2,"detail":"Kernel#__method__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(Symbol))}\ndef __method__; end\n```\n\n---\n\nReturns the name at the definition of the current method as a\n[`Symbol`](https://docs.ruby-lang.org/en/2.7.0/Symbol.html). If called\noutside of a method, it returns `nil`."},"sortText":"000093","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"__method__${0}"}},{"label":"at_exit","kind":2,"detail":"Kernel#at_exit","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.proc.returns(BasicObject)).returns(Proc)}\ndef at_exit(&blk); end\n```\n\n---\n\nConverts *block* to a `Proc` object (and therefore binds it at the point of\ncall) and registers it for execution when the program exits. If multiple\nhandlers are registered, they are executed in reverse order of registration.\n\n```ruby\ndef do_at_exit(str1)\n  at_exit { print str1 }\nend\nat_exit { puts \"cruel world\" }\ndo_at_exit(\"goodbye \")\nexit\n```\n\n*produces:*\n\n```ruby\ngoodbye cruel world\n```"},"sortText":"000094","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"at_exit do\n  ${1}\nend${0}"}},{"label":"block_given?","kind":2,"detail":"Kernel#block_given?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef block_given?; end\n```\n\n---\n\nReturns `true` if `yield` would execute a block in the current context. The\n`iterator?` form is mildly deprecated.\n\n```ruby\ndef try\n  if block_given?\n    yield\n  else\n    \"no block\"\n  end\nend\ntry                  #=> \"no block\"\ntry { \"hello\" }      #=> \"hello\"\ntry do \"hello\" end   #=> \"hello\"\n```"},"sortText":"000095","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"block_given?${0}"}},{"label":"caller","kind":2,"detail":"Kernel#caller","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: Integer,\n    length: Integer\n  )\n  .returns(T.nilable(T::Array[String]))\nend\ndef caller(start_or_range=…, length=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing strings in the\nform `file:line` or `file:line: in `method'`.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.\n\n```ruby\ndef a(skip)\n  caller(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\nc(0)   #=> [\"prog:2:in `a'\", \"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:10:in `<main>'\"]\nc(1)   #=> [\"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:11:in `<main>'\"]\nc(2)   #=> [\"prog:8:in `c'\", \"prog:12:in `<main>'\"]\nc(3)   #=> [\"prog:13:in `<main>'\"]\nc(4)   #=> []\nc(5)   #=> nil\n```"},"sortText":"000096","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"caller${0}"}},{"label":"caller","kind":2,"detail":"Kernel#caller (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: T::Range[Integer]\n  )\n  .returns(T.nilable(T::Array[String]))\nend\ndef caller (overload.1)(start_or_range=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing strings in the\nform `file:line` or `file:line: in `method'`.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.\n\n```ruby\ndef a(skip)\n  caller(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\nc(0)   #=> [\"prog:2:in `a'\", \"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:10:in `<main>'\"]\nc(1)   #=> [\"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:11:in `<main>'\"]\nc(2)   #=> [\"prog:8:in `c'\", \"prog:12:in `<main>'\"]\nc(3)   #=> [\"prog:13:in `<main>'\"]\nc(4)   #=> []\nc(5)   #=> nil\n```"},"sortText":"000097","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"caller${0}"}},{"label":"caller","kind":2,"detail":"Kernel#caller (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[String])}\ndef caller (overload.2); end\n```\n\n---\n\nReturns the current execution stack---an array containing strings in the\nform `file:line` or `file:line: in `method'`.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.\n\n```ruby\ndef a(skip)\n  caller(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\nc(0)   #=> [\"prog:2:in `a'\", \"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:10:in `<main>'\"]\nc(1)   #=> [\"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:11:in `<main>'\"]\nc(2)   #=> [\"prog:8:in `c'\", \"prog:12:in `<main>'\"]\nc(3)   #=> [\"prog:13:in `<main>'\"]\nc(4)   #=> []\nc(5)   #=> nil\n```"},"sortText":"000098","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"caller${0}"}},{"label":"caller_locations","kind":2,"detail":"Kernel#caller_locations","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: Integer,\n    length: Integer\n  )\n  .returns(T.nilable(T::Array[Thread::Backtrace::Location]))\nend\ndef caller_locations(start_or_range=…, length=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing backtrace location\nobjects.\n\nSee\n[`Thread::Backtrace::Location`](https://docs.ruby-lang.org/en/2.7.0/Thread/Backtrace/Location.html)\nfor more information.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range."},"sortText":"000099","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"caller_locations${0}"}},{"label":"caller_locations","kind":2,"detail":"Kernel#caller_locations (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: T::Range[Integer]\n  )\n  .returns(T.nilable(T::Array[Thread::Backtrace::Location]))\nend\ndef caller_locations (overload.1)(start_or_range=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing backtrace location\nobjects.\n\nSee\n[`Thread::Backtrace::Location`](https://docs.ruby-lang.org/en/2.7.0/Thread/Backtrace/Location.html)\nfor more information.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range."},"sortText":"000100","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"caller_locations${0}"}},{"label":"clone","kind":2,"detail":"Kernel#clone","documentation":{"kind":"markdown","value":"```ruby\nsig {params(freeze: T.nilable(T::Boolean)).returns(T.class_of(A))}\ndef clone(freeze: …); end\n```\n\n---\n\nProduces a shallow copy of *obj*---the instance variables of *obj* are\ncopied, but not the objects they reference.\n[`clone`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-clone)\ncopies the frozen value state of *obj*, unless the `:freeze` keyword\nargument is given with a false or true value. See also the discussion under\n[`Object#dup`](https://docs.ruby-lang.org/en/2.7.0/Object.html#method-i-dup).\n\n```ruby\nclass Klass\n   attr_accessor :str\nend\ns1 = Klass.new      #=> #<Klass:0x401b3a38>\ns1.str = \"Hello\"    #=> \"Hello\"\ns2 = s1.clone       #=> #<Klass:0x401b3998 @str=\"Hello\">\ns2.str[1,4] = \"i\"   #=> \"i\"\ns1.inspect          #=> \"#<Klass:0x401b3a38 @str=\\\"Hi\\\">\"\ns2.inspect          #=> \"#<Klass:0x401b3998 @str=\\\"Hi\\\">\"\n```\n\nThis method may have class-specific behavior. If so, that behavior will be\ndocumented under the #`initialize_copy` method of the class."},"sortText":"000101","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"clone${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    symbol: T.any(Symbol, String),\n    method: T.any(Proc, Method, UnboundMethod)\n  )\n  .returns(Symbol)\nend\ndef define_singleton_method(symbol, method=…); end\n```"},"sortText":"000102","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"define_singleton_method(${1:T.any(Symbol, String)})${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(symbol: T.any(Symbol, String), blk: T.untyped).returns(Symbol)}\ndef define_singleton_method (overload.1)(symbol, &blk); end\n```"},"sortText":"000103","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"define_singleton_method(${1:T.any(Symbol, String)})${0}"}},{"label":"frozen?","kind":2,"detail":"Kernel#frozen?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef frozen?; end\n```\n\n---\n\nReturns the freeze status of *obj*.\n\n```ruby\na = [ \"a\", \"b\", \"c\" ]\na.freeze    #=> [\"a\", \"b\", \"c\"]\na.frozen?   #=> true\n```"},"sortText":"000104","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"frozen?${0}"}},{"label":"gem","kind":2,"detail":"Kernel#gem","documentation":{"kind":"markdown","value":"```ruby\nsig {params(dep: T.untyped, reqs: T.untyped).returns(T.untyped)}\ndef gem(dep, *reqs); end\n```\n\n---\n\nUse\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nto activate a specific version of `gem_name`.\n\n`requirements` is a list of version requirements that the specified gem must\nmatch, most commonly \"= example.version.number\". See\n[`Gem::Requirement`](https://docs.ruby-lang.org/en/2.7.0/Gem/Requirement.html)\nfor how to specify a version requirement.\n\nIf you will be activating the latest version of a gem, there is no need to\ncall\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem),\n[`Kernel#require`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-require)\nwill do the right thing for you.\n\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nreturns true if the gem was activated, otherwise false. If the gem could not\nbe found, didn't match the version requirements, or a different version was\nalready activated, an exception will be raised.\n\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nshould be called **before** any require statements (otherwise RubyGems may\nload a conflicting library version).\n\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nonly loads prerelease versions when prerelease `requirements` are given:\n\n```ruby\ngem 'rake', '>= 1.1.a', '< 2'\n```\n\nIn older RubyGems versions, the environment variable GEM\\_SKIP could be used\nto skip activation of specified gems, for example to test out changes that\nhaven't been installed yet. Now RubyGems defers to -I and the RUBYLIB\nenvironment variable to skip activation of a gem.\n\nExample:\n\n```\nGEM_SKIP=libA:libB ruby -I../libA -I../libB ./mycode.rb\n```"},"sortText":"000105","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"gem(${1})${0}"}},{"label":"gets","kind":2,"detail":"Kernel#gets","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(String)}\ndef gets(arg0=…, arg1=…); end\n```\n\n---\n\nReturns (and assigns to `$_`) the next line from the list of files in `ARGV`\n(or `$*`), or from standard input if no files are present on the command\nline. Returns `nil` at end of file. The optional argument specifies the\nrecord separator. The separator is included with the contents of each\nrecord. A separator of `nil` reads the entire contents, and a zero-length\nseparator reads the input one paragraph at a time, where paragraphs are\ndivided by two consecutive newlines. If the first argument is an integer, or\noptional second argument is given, the returning string would not be longer\nthan the given value in bytes. If multiple filenames are present in `ARGV`,\n`gets(nil)` will read the contents one file at a time.\n\n```ruby\nARGV << \"testfile\"\nprint while gets\n```\n\n*produces:*\n\n```ruby\nThis is line one\nThis is line two\nThis is line three\nAnd so on...\n```\n\nThe style of programming using `$_` as an implicit parameter is gradually\nlosing favor in the Ruby community."},"sortText":"000106","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"gets${0}"}},{"label":"global_variables","kind":2,"detail":"Kernel#global_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef global_variables; end\n```\n\n---\n\nReturns an array of the names of global variables. This includes special\nregexp global variables such as `$~` and `$+`, but does not include the\nnumbered regexp global variables (`$1`, `$2`, etc.).\n\n```ruby\nglobal_variables.grep /std/   #=> [:$stdin, :$stdout, :$stderr]\n```"},"sortText":"000107","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"global_variables${0}"}},{"label":"initialize_copy","kind":2,"detail":"Kernel#initialize_copy","documentation":{"kind":"markdown","value":"```ruby\nsig {params(object: T.class_of(A)).returns(T.class_of(A))}\ndef initialize_copy(object); end\n```"},"sortText":"000108","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"initialize_copy(${1:T.class_of(A)})${0}"}},{"label":"instance_of?","kind":2,"detail":"Kernel#instance_of?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T::Class[T.anything]).returns(T::Boolean)}\ndef instance_of?(arg0); end\n```"},"sortText":"000109","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"instance_of?(${1:T::Class[T.anything]})${0}"}},{"label":"instance_variable_defined?","kind":2,"detail":"Kernel#instance_variable_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef instance_variable_defined?(arg0); end\n```"},"sortText":"000110","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"instance_variable_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"instance_variable_get","kind":2,"detail":"Kernel#instance_variable_get","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.untyped)}\ndef instance_variable_get(arg0); end\n```"},"sortText":"000111","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"instance_variable_get(${1:T.any(Symbol, String)})${0}"}},{"label":"instance_variable_set","kind":2,"detail":"Kernel#instance_variable_set","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String), arg1: BasicObject).returns(T.untyped)}\ndef instance_variable_set(arg0, arg1); end\n```"},"sortText":"000112","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"instance_variable_set(${1:T.any(Symbol, String)}, ${2:BasicObject})${0}"}},{"label":"instance_variables","kind":2,"detail":"Kernel#instance_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef instance_variables; end\n```"},"sortText":"000113","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"instance_variables${0}"}},{"label":"iterator?","kind":2,"detail":"Kernel#iterator?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef iterator?; end\n```\n\n---\n\nDeprecated. Use block\\_given? instead."},"sortText":"000114","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"iterator?${0}"}},{"label":"itself","kind":2,"detail":"Kernel#itself","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.class_of(A))}\ndef itself; end\n```\n\n---\n\nReturns the receiver `obj`.\n\n```ruby\nobj = Object.new; obj.itself.object_id == o.object_id # => true\n```"},"sortText":"000115","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"itself${0}"}},{"label":"local_variables","kind":2,"detail":"Kernel#local_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef local_variables; end\n```\n\n---\n\nReturns the names of the current local variables.\n\n```ruby\nfred = 1\nfor i in 1..10\n   # ...\nend\nlocal_variables   #=> [:fred, :i]\n```"},"sortText":"000116","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"local_variables${0}"}},{"label":"method","kind":2,"detail":"Kernel#method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef method(arg0); end\n```"},"sortText":"000117","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"method(${1:Symbol})${0}"}},{"label":"methods","kind":2,"detail":"Kernel#methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(regular: T::Boolean).returns(T::Array[Symbol])}\ndef methods(regular=…); end\n```"},"sortText":"000118","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"methods${0}"}},{"label":"object_id","kind":2,"detail":"Kernel#object_id","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef object_id; end\n```\n\n---\n\nReturns an integer identifier for `obj`.\n\nThe same number will be returned on all calls to `object_id` for a given\nobject, and no two active objects will share an id.\n\nNote: that some objects of builtin classes are reused for optimization. This\nis the case for immediate values and frozen string literals.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_id\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`object_id`.\n\nImmediate values are not passed by reference but are passed by value: `nil`,\n`true`, `false`, Fixnums, Symbols, and some Floats.\n\n```ruby\nObject.new.object_id  == Object.new.object_id  # => false\n(21 * 2).object_id    == (21 * 2).object_id    # => true\n\"hello\".object_id     == \"hello\".object_id     # => false\n\"hi\".freeze.object_id == \"hi\".freeze.object_id # => true\n```"},"sortText":"000119","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"object_id${0}"}},{"label":"open","kind":2,"detail":"Kernel#open","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    path: String,\n    mode: T.any(Integer, String),\n    perm: T.nilable(Integer),\n    opt: T.nilable(T::Hash[Symbol, T.untyped])\n  )\n  .returns(T.nilable(IO))\nend\ndef open(path, mode=…, perm=…, opt=…); end\n```\n\n---\n\nCreates an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object\nconnected to the given stream, file, or subprocess.\n\nIf `path` does not start with a pipe character (`|`), treat it as the name\nof a file to open using the specified mode (defaulting to \"r\").\n\nThe `mode` is either a string or an integer. If it is an integer, it must be\nbitwise-or of open(2) flags, such as File::RDWR or File::EXCL. If it is a\nstring, it is either \"fmode\", \"fmode:ext\\_enc\", or\n\"fmode:ext\\_enc:int\\_enc\".\n\nSee the documentation of\n[`IO.new`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-new) for\nfull documentation of the `mode` string directives.\n\nIf a file is being created, its initial permissions may be set using the\n`perm` parameter. See\n[`File.new`](https://docs.ruby-lang.org/en/2.7.0/File.html#method-c-new) and\nthe open(2) and chmod(2) man pages for a description of permissions.\n\nIf a block is specified, it will be invoked with the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object as a parameter,\nand the [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) will be\nautomatically closed when the block terminates. The call returns the value\nof the block.\n\nIf `path` starts with a pipe character (`\"|\"`), a subprocess is created,\nconnected to the caller by a pair of pipes. The returned\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object may be used to\nwrite to the standard input and read from the standard output of this\nsubprocess.\n\nIf the command following the pipe is a single minus sign (`\"|-\"`), Ruby\nforks, and this subprocess is connected to the parent. If the command is not\n`\"-\"`, the subprocess runs the command. Note that the command may be\nprocessed by shell if it contains shell metacharacters.\n\nWhen the subprocess is Ruby (opened via `\"|-\"`), the `open` call returns\n`nil`. If a block is associated with the open call, that block will run\ntwice --- once in the parent and once in the child.\n\nThe block parameter will be an\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object in the parent and\n`nil` in the child. The parent's `IO` object will be connected to the\nchild's $stdin and $stdout. The subprocess will be terminated at the end of\nthe block.\n\n### Examples\n\nReading from \"testfile\":\n\n```ruby\nopen(\"testfile\") do |f|\n  print f.gets\nend\n```\n\nProduces:\n\n```ruby\nThis is line one\n```\n\nOpen a subprocess and read its output:\n\n```ruby\ncmd = open(\"|date\")\nprint cmd.gets\ncmd.close\n```\n\nProduces:\n\n```\nWed Apr  9 08:56:31 CDT 2003\n```\n\nOpen a subprocess running the same Ruby program:\n\n```ruby\nf = open(\"|-\", \"w+\")\nif f.nil?\n  puts \"in Child\"\n  exit\nelse\n  puts \"Got: #{f.gets}\"\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```\n\nOpen a subprocess using a block to receive the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object:\n\n```ruby\nopen \"|-\" do |f|\n  if f then\n    # parent process\n    puts \"Got: #{f.gets}\"\n  else\n    # child process\n    puts \"in Child\"\n  end\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```"},"sortText":"000120","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"open(${1:String})${0}"}},{"label":"open","kind":2,"detail":"Kernel#open (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    path: String,\n    mode: T.any(Integer, String),\n    perm: T.nilable(Integer),\n    opt: T.nilable(T::Hash[Symbol, T.untyped]),\n    blk: T.proc.params(arg0: IO).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef open (overload.1)(path, mode=…, perm=…, opt=…, &blk); end\n```\n\n---\n\nCreates an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object\nconnected to the given stream, file, or subprocess.\n\nIf `path` does not start with a pipe character (`|`), treat it as the name\nof a file to open using the specified mode (defaulting to \"r\").\n\nThe `mode` is either a string or an integer. If it is an integer, it must be\nbitwise-or of open(2) flags, such as File::RDWR or File::EXCL. If it is a\nstring, it is either \"fmode\", \"fmode:ext\\_enc\", or\n\"fmode:ext\\_enc:int\\_enc\".\n\nSee the documentation of\n[`IO.new`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-new) for\nfull documentation of the `mode` string directives.\n\nIf a file is being created, its initial permissions may be set using the\n`perm` parameter. See\n[`File.new`](https://docs.ruby-lang.org/en/2.7.0/File.html#method-c-new) and\nthe open(2) and chmod(2) man pages for a description of permissions.\n\nIf a block is specified, it will be invoked with the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object as a parameter,\nand the [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) will be\nautomatically closed when the block terminates. The call returns the value\nof the block.\n\nIf `path` starts with a pipe character (`\"|\"`), a subprocess is created,\nconnected to the caller by a pair of pipes. The returned\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object may be used to\nwrite to the standard input and read from the standard output of this\nsubprocess.\n\nIf the command following the pipe is a single minus sign (`\"|-\"`), Ruby\nforks, and this subprocess is connected to the parent. If the command is not\n`\"-\"`, the subprocess runs the command. Note that the command may be\nprocessed by shell if it contains shell metacharacters.\n\nWhen the subprocess is Ruby (opened via `\"|-\"`), the `open` call returns\n`nil`. If a block is associated with the open call, that block will run\ntwice --- once in the parent and once in the child.\n\nThe block parameter will be an\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object in the parent and\n`nil` in the child. The parent's `IO` object will be connected to the\nchild's $stdin and $stdout. The subprocess will be terminated at the end of\nthe block.\n\n### Examples\n\nReading from \"testfile\":\n\n```ruby\nopen(\"testfile\") do |f|\n  print f.gets\nend\n```\n\nProduces:\n\n```ruby\nThis is line one\n```\n\nOpen a subprocess and read its output:\n\n```ruby\ncmd = open(\"|date\")\nprint cmd.gets\ncmd.close\n```\n\nProduces:\n\n```\nWed Apr  9 08:56:31 CDT 2003\n```\n\nOpen a subprocess running the same Ruby program:\n\n```ruby\nf = open(\"|-\", \"w+\")\nif f.nil?\n  puts \"in Child\"\n  exit\nelse\n  puts \"Got: #{f.gets}\"\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```\n\nOpen a subprocess using a block to receive the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object:\n\n```ruby\nopen \"|-\" do |f|\n  if f then\n    # parent process\n    puts \"Got: #{f.gets}\"\n  else\n    # child process\n    puts \"in Child\"\n  end\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```"},"sortText":"000121","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"open(${1:String}) do |${2:IO}|\n  ${3}\nend${0}"}},{"label":"private_methods","kind":2,"detail":"Kernel#private_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef private_methods(all=…); end\n```"},"sortText":"000122","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"private_methods${0}"}},{"label":"protected_methods","kind":2,"detail":"Kernel#protected_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef protected_methods(all=…); end\n```"},"sortText":"000123","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"protected_methods${0}"}},{"label":"public_method","kind":2,"detail":"Kernel#public_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef public_method(arg0); end\n```"},"sortText":"000124","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"public_method(${1:Symbol})${0}"}},{"label":"public_methods","kind":2,"detail":"Kernel#public_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef public_methods(all=…); end\n```"},"sortText":"000125","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"public_methods${0}"}},{"label":"public_send","kind":2,"detail":"Kernel#public_send","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef public_send(arg0, *args, &blk); end\n```"},"sortText":"000126","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"public_send(${1:T.any(Symbol, String)})${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef raise; end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000127","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"raise${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Class[T.anything], Exception, String)\n  )\n  .returns(T.noreturn)\nend\ndef raise (overload.1)(arg0=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000128","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"raise${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Class[T.anything], Exception),\n    arg1: T.untyped,\n    arg2: T.nilable(T::Array[String])\n  )\n  .returns(T.noreturn)\nend\ndef raise (overload.2)(arg0=…, arg1=…, arg2=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000129","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"raise${0}"}},{"label":"readline","kind":2,"detail":"Kernel#readline","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(String)}\ndef readline(arg0=…, arg1=…); end\n```\n\n---\n\nEquivalent to Kernel::gets, except `readline` raises `EOFError` at end of\nfile."},"sortText":"000130","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"readline${0}"}},{"label":"readlines","kind":2,"detail":"Kernel#readlines","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(T::Array[String])}\ndef readlines(arg0=…, arg1=…); end\n```\n\n---\n\nReturns an array containing the lines returned by calling `Kernel.gets(sep)`\nuntil the end of file."},"sortText":"000131","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"readlines${0}"}},{"label":"remove_instance_variable","kind":2,"detail":"Kernel#remove_instance_variable","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(T.untyped)}\ndef remove_instance_variable(arg0); end\n```"},"sortText":"000132","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"remove_instance_variable(${1:Symbol})${0}"}},{"label":"require","kind":2,"detail":"Kernel#require","documentation":{"kind":"markdown","value":"```ruby\nsig {params(path: String).returns(T::Boolean)}\ndef require(path); end\n```\n\n---\n\nLoads the given `name`, returning `true` if successful and `false` if the\nfeature is already loaded.\n\nIf the filename does not resolve to an absolute path, it will be searched\nfor in the directories listed in `$LOAD_PATH` (`$:`).\n\nIf the filename has the extension \".rb\", it is loaded as a source file; if\nthe extension is \".so\", \".o\", or \".dll\", or the default shared library\nextension on the current platform, Ruby loads the shared library as a Ruby\nextension. Otherwise, Ruby tries adding \".rb\", \".so\", and so on to the name\nuntil found. If the file named cannot be found, a\n[`LoadError`](https://docs.ruby-lang.org/en/2.6.0/LoadError.html) will be\nraised.\n\nFor Ruby extensions the filename given may use any shared library extension.\nFor example, on Linux the socket extension is \"socket.so\" and `require\n'socket.dll'` will load the socket extension.\n\nThe absolute path of the loaded file is added to `$LOADED_FEATURES` (`$\"`).\nA file will not be loaded again if its path already appears in `$\"`. For\nexample, `require 'a'; require './a'` will not load `a.rb` again.\n\n```ruby\nrequire \"my-library.rb\"\nrequire \"db-driver\"\n```\n\nAny constants or globals within the loaded source file will be available in\nthe calling program's global namespace. However, local variables will not be\npropagated to the loading environment.\n\nWhen RubyGems is required,\n[`#require`](https://docs.ruby-lang.org/en/2.6.0/Kernel.html#method-i-require)\nis replaced with our own which is capable of loading gems on demand.\n\nWhen you call `require 'x'`, this is what happens:\n*   If the file can be loaded from the existing Ruby loadpath, it is.\n*   Otherwise, installed gems are searched for a file that matches. If it's\n    found in gem 'y', that gem is activated (added to the loadpath).\n\n\nThe normal `require` functionality of returning false if that file has\nalready been loaded is preserved.\n\nAlso aliased as:\n[`gem_original_require`](https://docs.ruby-lang.org/en/2.6.0/Kernel.html#method-i-gem_original_require)"},"sortText":"000133","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"require(${1:String})${0}"}},{"label":"require_relative","kind":2,"detail":"Kernel#require_relative","documentation":{"kind":"markdown","value":"```ruby\nsig {params(feature: T.any(String, Pathname)).returns(T::Boolean)}\ndef require_relative(feature); end\n```\n\n---\n\nRuby tries to load the library named *string* relative to the requiring\nfile's path. If the file's path cannot be determined a\n[`LoadError`](https://docs.ruby-lang.org/en/2.7.0/LoadError.html) is raised.\nIf a file is loaded `true` is returned and false otherwise."},"sortText":"000134","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"require_relative(${1:T.any(String, Pathname)})${0}"}},{"label":"respond_to?","kind":2,"detail":"Kernel#respond_to?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    include_all: T.untyped\n  )\n  .returns(T::Boolean)\nend\ndef respond_to?(arg0, include_all=…); end\n```"},"sortText":"000135","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"respond_to?(${1:T.any(String, Symbol)})${0}"}},{"label":"select","kind":2,"detail":"Kernel#select","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    read_array: T.nilable(T::Array[IO]),\n    write_array: T.nilable(T::Array[IO]),\n    error_array: T.nilable(T::Array[IO]),\n    timeout: T.nilable(T.any(Integer, Float))\n  )\n  .returns(T.nilable(T::Array[T::Array[IO]]))\nend\ndef select(read_array, write_array=…, error_array=…, timeout=…); end\n```\n\n---\n\nCalls select(2) system call. It monitors given arrays of\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects, waits until one\nor more of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects are\nready for reading, are ready for writing, and have pending exceptions\nrespectively, and returns an array that contains arrays of those\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects. It will return\n`nil` if optional *timeout* value is given and no\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object is ready in\n*timeout* seconds.\n\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\npeeks the buffer of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html)\nobjects for testing readability. If the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) buffer is not empty,\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nimmediately notifies readability. This \"peek\" only happens for\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects. It does not\nhappen for IO-like objects such as\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\n\nThe best way to use\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis invoking it after nonblocking methods such as read\\_nonblock,\nwrite\\_nonblock, etc. The methods raise an exception which is extended by\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nor\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html).\nThe modules notify how the caller should wait with\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\nIf\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nis raised, the caller should wait for reading. If\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html)\nis raised, the caller should wait for writing.\n\nSo, blocking read (readpartial) can be emulated using read\\_nonblock and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nas follows:\n\n```ruby\nbegin\n  result = io_like.read_nonblock(maxlen)\nrescue IO::WaitReadable\n  IO.select([io_like])\n  retry\nrescue IO::WaitWritable\n  IO.select(nil, [io_like])\n  retry\nend\n```\n\nEspecially, the combination of nonblocking methods and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis preferred for [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) like\nobjects such as\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\nIt has to\\_io method to return underlying\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object.\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ncalls to\\_io to obtain the file descriptor to wait.\n\nThis means that readability notified by\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ndoesn't mean readability from\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\nobject.\n\nThe most likely situation is that\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\nbuffers some data.\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ndoesn't see the buffer. So\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ncan block when\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\ndoesn't block.\n\nHowever, several more complicated situations exist.\n\nSSL is a protocol which is sequence of records. The record consists of\nmultiple bytes. So, the remote side of SSL sends a partial record,\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nnotifies readability but\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\ncannot decrypt a byte and\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\nwill block.\n\nAlso, the remote side can request SSL renegotiation which forces the local\nSSL engine to write some data. This means\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\nmay invoke write system call and it can block. In such a situation,\n[`OpenSSL::SSL::SSLSocket#read_nonblock`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-read_nonblock)\nraises\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html)\ninstead of blocking. So, the caller should wait for ready for writability as\nabove example.\n\nThe combination of nonblocking methods and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis also useful for streams such as tty, pipe socket socket when multiple\nprocesses read from a stream.\n\nFinally, Linux kernel developers don't guarantee that readability of\nselect(2) means readability of following read(2) even for a single process.\nSee select(2) manual on GNU/Linux system.\n\nInvoking\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nbefore\n[`IO#readpartial`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-readpartial)\nworks well as usual. However it is not the best way to use\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\n\nThe writability notified by select(2) doesn't show how many bytes are\nwritable.\n[`IO#write`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-write)\nmethod blocks until given whole string is written. So, `IO#write(two or more\nbytes)` can block after writability is notified by\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\n[`IO#write_nonblock`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-write_nonblock)\nis required to avoid the blocking.\n\nBlocking write (write) can be emulated using write\\_nonblock and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nas follows:\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nshould also be rescued for SSL renegotiation in\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\n\n```ruby\nwhile 0 < string.bytesize\n  begin\n    written = io_like.write_nonblock(string)\n  rescue IO::WaitReadable\n    IO.select([io_like])\n    retry\n  rescue IO::WaitWritable\n    IO.select(nil, [io_like])\n    retry\n  end\n  string = string.byteslice(written..-1)\nend\n```\n\n### Parameters\nread\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait until ready for read\nwrite\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait until ready for write\nerror\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait for exceptions\ntimeout\n:   a numeric value in second\n\n\n### Example\n\n```ruby\nrp, wp = IO.pipe\nmesg = \"ping \"\n100.times {\n  # IO.select follows IO#read.  Not the best way to use IO.select.\n  rs, ws, = IO.select([rp], [wp])\n  if r = rs[0]\n    ret = r.read(5)\n    print ret\n    case ret\n    when /ping/\n      mesg = \"pong\\n\"\n    when /pong/\n      mesg = \"ping \"\n    end\n  end\n  if w = ws[0]\n    w.write(mesg)\n  end\n}\n```\n\n*produces:*\n\n```ruby\nping pong\nping pong\nping pong\n(snipped)\nping\n```"},"sortText":"000136","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"select(${1:T.nilable(T::Array[IO])})${0}"}},{"label":"send","kind":2,"detail":"Kernel#send","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(String, Symbol), arg1: T.anything).returns(T.untyped)}\ndef send(arg0, *arg1); end\n```"},"sortText":"000137","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"send(${1:T.any(String, Symbol)})${0}"}},{"label":"send","kind":2,"detail":"Kernel#send (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    arg1: T.anything,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef send (overload.1)(arg0, *arg1, &blk); end\n```"},"sortText":"000138","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"send(${1:T.any(String, Symbol)})${0}"}},{"label":"set_trace_func","kind":2,"detail":"Kernel#set_trace_func","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.nilable(T.proc.params(arg0: String, arg1: String, arg2: Integer, arg3: T.nilable(Symbol), arg4: T.nilable(Binding), arg5: Object).returns(T.untyped))\n  )\n  .void\nend\ndef set_trace_func(arg0); end\n```\n\n---\n\nEstablishes _proc_ as the handler for tracing, or disables\ntracing if the parameter is +nil+.\n\n*Note:* this method is obsolete, please use TracePoint instead.\n\n_proc_ takes up to six parameters:\n\n*   an event name\n*   a filename\n*   a line number\n*   an object id\n*   a binding\n*   the name of a class\n\n_proc_ is invoked whenever an event occurs.\n\nEvents are:\n\n+c-call+:: call a C-language routine\n+c-return+:: return from a C-language routine\n+call+:: call a Ruby method\n+class+:: start a class or module definition\n+end+:: finish a class or module definition\n+line+:: execute code on a new line\n+raise+:: raise an exception\n+return+:: return from a Ruby method\n\nTracing is disabled within the context of _proc_.\n\n    class Test\n    def test\n      a = 1\n      b = 2\n    end\n    end\n\n    set_trace_func proc { |event, file, line, id, binding, classname|\n       printf \"%8s %s:%-2d %10s %8s\\n\", event, file, line, id, classname\n    }\n    t = Test.new\n    t.test\n\n      line prog.rb:11               false\n    c-call prog.rb:11        new    Class\n    c-call prog.rb:11 initialize   Object\n  c-return prog.rb:11 initialize   Object\n  c-return prog.rb:11        new    Class\n      line prog.rb:12               false\n      call prog.rb:2        test     Test\n      line prog.rb:3        test     Test\n      line prog.rb:4        test     Test\n    return prog.rb:4        test     Test"},"sortText":"000139","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"set_trace_func(${1:T.nilable(T.proc.params(arg0: String, arg1: String, arg2: Integer, arg3: T.nilable(Symbol), arg4: T.nilable(Binding), arg5: Object).returns(T.untyped))})${0}"}},{"label":"set_trace_func","kind":2,"detail":"Kernel#set_trace_func (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: NilClass).returns(NilClass)}\ndef set_trace_func (overload.1)(arg0); end\n```\n\n---\n\nEstablishes _proc_ as the handler for tracing, or disables\ntracing if the parameter is +nil+.\n\n*Note:* this method is obsolete, please use TracePoint instead.\n\n_proc_ takes up to six parameters:\n\n*   an event name\n*   a filename\n*   a line number\n*   an object id\n*   a binding\n*   the name of a class\n\n_proc_ is invoked whenever an event occurs.\n\nEvents are:\n\n+c-call+:: call a C-language routine\n+c-return+:: return from a C-language routine\n+call+:: call a Ruby method\n+class+:: start a class or module definition\n+end+:: finish a class or module definition\n+line+:: execute code on a new line\n+raise+:: raise an exception\n+return+:: return from a Ruby method\n\nTracing is disabled within the context of _proc_.\n\n    class Test\n    def test\n      a = 1\n      b = 2\n    end\n    end\n\n    set_trace_func proc { |event, file, line, id, binding, classname|\n       printf \"%8s %s:%-2d %10s %8s\\n\", event, file, line, id, classname\n    }\n    t = Test.new\n    t.test\n\n      line prog.rb:11               false\n    c-call prog.rb:11        new    Class\n    c-call prog.rb:11 initialize   Object\n  c-return prog.rb:11 initialize   Object\n  c-return prog.rb:11        new    Class\n      line prog.rb:12               false\n      call prog.rb:2        test     Test\n      line prog.rb:3        test     Test\n      line prog.rb:4        test     Test\n    return prog.rb:4        test     Test"},"sortText":"000140","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"set_trace_func(${1:NilClass})${0}"}},{"label":"singleton_method","kind":2,"detail":"Kernel#singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef singleton_method(arg0); end\n```"},"sortText":"000141","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"singleton_method(${1:Symbol})${0}"}},{"label":"singleton_methods","kind":2,"detail":"Kernel#singleton_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef singleton_methods(all=…); end\n```"},"sortText":"000142","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"singleton_methods${0}"}},{"label":"sleep","kind":2,"detail":"Kernel#sleep","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef sleep; end\n```\n\n---\n\nSuspends the current thread for *duration* seconds (which may be any number,\nincluding a `Float` with fractional seconds). Returns the actual number of\nseconds slept (rounded), which may be less than that asked for if another\nthread calls\n[`Thread#run`](https://docs.ruby-lang.org/en/2.7.0/Thread.html#method-i-run).\nCalled without an argument, sleep() will sleep forever.\n\n```ruby\nTime.new    #=> 2008-03-08 19:56:19 +0900\nsleep 1.2   #=> 1\nTime.new    #=> 2008-03-08 19:56:20 +0900\nsleep 1.9   #=> 2\nTime.new    #=> 2008-03-08 19:56:22 +0900\n```"},"sortText":"000143","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"sleep${0}"}},{"label":"sleep","kind":2,"detail":"Kernel#sleep (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(duration: Numeric).returns(Integer)}\ndef sleep (overload.1)(duration); end\n```\n\n---\n\nSuspends the current thread for *duration* seconds (which may be any number,\nincluding a `Float` with fractional seconds). Returns the actual number of\nseconds slept (rounded), which may be less than that asked for if another\nthread calls\n[`Thread#run`](https://docs.ruby-lang.org/en/2.7.0/Thread.html#method-i-run).\nCalled without an argument, sleep() will sleep forever.\n\n```ruby\nTime.new    #=> 2008-03-08 19:56:19 +0900\nsleep 1.2   #=> 1\nTime.new    #=> 2008-03-08 19:56:20 +0900\nsleep 1.9   #=> 2\nTime.new    #=> 2008-03-08 19:56:22 +0900\n```"},"sortText":"000144","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"sleep(${1:Numeric})${0}"}},{"label":"system","kind":2,"detail":"Kernel#system","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    env: T.any(String, [String, String], T::Hash[String, T.nilable(String)]),\n    argv0: T.any(String, [String, String]),\n    args: String,\n    options: T.untyped\n  )\n  .returns(T.nilable(T::Boolean))\nend\ndef system(env, argv0=…, *args, **options); end\n```\n\n---\n\nExecutes *command...* in a subshell. *command...* is one of following forms.\n\n`commandline`\n:   command line string which is passed to the standard shell\n`cmdname, arg1, ...`\n:   command name and one or more arguments (no shell)\n`[cmdname, argv0], arg1, ...`\n:   command name, `argv[0]` and zero or more arguments (no shell)\n\n\nsystem returns `true` if the command gives zero exit status, `false` for non\nzero exit status. Returns `nil` if command execution fails. An error status\nis available in `$?`.\n\nIf the `exception: true` argument is passed, the method raises an exception\ninstead of returning `false` or `nil`.\n\nThe arguments are processed in the same way as for\n[`Kernel#spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn).\n\nThe hash arguments, env and options, are same as\n[`exec`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-exec) and\n[`spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn).\nSee\n[`Kernel#spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn)\nfor details.\n\n```ruby\nsystem(\"echo *\")\nsystem(\"echo\", \"*\")\n```\n\n*produces:*\n\n```\nconfig.h main.rb\n*\n```\n\nError handling:\n\n```ruby\nsystem(\"cat nonexistent.txt\")\n# => false\nsystem(\"catt nonexistent.txt\")\n# => nil\n\nsystem(\"cat nonexistent.txt\", exception: true)\n# RuntimeError (Command failed with exit 1: cat)\nsystem(\"catt nonexistent.txt\", exception: true)\n# Errno::ENOENT (No such file or directory - catt)\n```\n\nSee\n[`Kernel#exec`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-exec)\nfor the standard shell."},"sortText":"000145","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"system(${1:T.any(String, [String, String], T::Hash[String, T.nilable(String)])})${0}"}},{"label":"tainted?","kind":2,"detail":"Kernel#tainted?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef tainted?; end\n```"},"sortText":"000146","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"tainted?${0}"}},{"label":"test","kind":2,"detail":"Kernel#test","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    cmd: String,\n    file1: String,\n    file2: String\n  )\n  .returns(T.any(TrueClass, FalseClass, Time))\nend\ndef test(cmd, file1, file2=…); end\n```\n\n---\n\nUses the character `cmd` to perform various tests on `file1` (first table\nbelow) or on `file1` and `file2` (second table).\n\n[`File`](https://docs.ruby-lang.org/en/2.7.0/File.html) tests on a single\nfile:\n\n```\nCmd    Returns   Meaning\n\"A\"  | Time    | Last access time for file1\n\"b\"  | boolean | True if file1 is a block device\n\"c\"  | boolean | True if file1 is a character device\n\"C\"  | Time    | Last change time for file1\n\"d\"  | boolean | True if file1 exists and is a directory\n\"e\"  | boolean | True if file1 exists\n\"f\"  | boolean | True if file1 exists and is a regular file\n\"g\"  | boolean | True if file1 has the \\CF{setgid} bit\n     |         | set (false under NT)\n\"G\"  | boolean | True if file1 exists and has a group\n     |         | ownership equal to the caller's group\n\"k\"  | boolean | True if file1 exists and has the sticky bit set\n\"l\"  | boolean | True if file1 exists and is a symbolic link\n\"M\"  | Time    | Last modification time for file1\n\"o\"  | boolean | True if file1 exists and is owned by\n     |         | the caller's effective uid\n\"O\"  | boolean | True if file1 exists and is owned by\n     |         | the caller's real uid\n\"p\"  | boolean | True if file1 exists and is a fifo\n\"r\"  | boolean | True if file1 is readable by the effective\n     |         | uid/gid of the caller\n\"R\"  | boolean | True if file is readable by the real\n     |         | uid/gid of the caller\n\"s\"  | int/nil | If file1 has nonzero size, return the size,\n     |         | otherwise return nil\n\"S\"  | boolean | True if file1 exists and is a socket\n\"u\"  | boolean | True if file1 has the setuid bit set\n\"w\"  | boolean | True if file1 exists and is writable by\n     |         | the effective uid/gid\n\"W\"  | boolean | True if file1 exists and is writable by\n     |         | the real uid/gid\n\"x\"  | boolean | True if file1 exists and is executable by\n     |         | the effective uid/gid\n\"X\"  | boolean | True if file1 exists and is executable by\n     |         | the real uid/gid\n\"z\"  | boolean | True if file1 exists and has a zero length\n```\n\nTests that take two files:\n\n```\n\"-\"  | boolean | True if file1 and file2 are identical\n\"=\"  | boolean | True if the modification times of file1\n     |         | and file2 are equal\n\"<\"  | boolean | True if the modification time of file1\n     |         | is prior to that of file2\n\">\"  | boolean | True if the modification time of file1\n     |         | is after that of file2\n```"},"sortText":"000147","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"test(${1:String}, ${2:String})${0}"}},{"label":"then","kind":2,"detail":"Kernel#then","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:X))\n  )\n  .returns(T.type_parameter(:X))\nend\ndef then(&blk); end\n```\n\n---\n\nYields self to the block and returns the result of the block.\n\n```ruby\n3.next.then {|x| x**x }.to_s             #=> \"256\"\n```\n\nGood usage for `then` is value piping in method chains:\n\n```ruby\nrequire 'open-uri'\nrequire 'json'\n\nconstruct_url(arguments).\n  then {|url| URI(url).read }.\n  then {|response| JSON.parse(response) }\n```\n\nWhen called without block, the method returns `Enumerator`, which can be\nused, for example, for conditional circuit-breaking:\n\n```ruby\n# meets condition, no-op\n1.then.detect(&:odd?)            # => 1\n# does not meet condition, drop value\n2.then.detect(&:odd?)            # => nil\n```"},"sortText":"000148","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"then do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"to_enum","kind":2,"detail":"Kernel#to_enum","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef to_enum(method=…, *args); end\n```"},"sortText":"000149","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"to_enum${0}"}},{"label":"to_enum","kind":2,"detail":"Kernel#to_enum (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef to_enum (overload.1)(method=…, *args, &blk); end\n```"},"sortText":"000150","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"to_enum${0}"}},{"label":"undef","kind":2,"detail":"Kernel#undef","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg: BasicObject).void}\ndef undef(*arg); end\n```"},"sortText":"000151","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"undef${0}"}},{"label":"untrusted?","kind":2,"detail":"Kernel#untrusted?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef untrusted?; end\n```"},"sortText":"000152","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"untrusted?${0}"}},{"label":"yield_self","kind":2,"detail":"Kernel#yield_self","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:X))\n  )\n  .returns(T.type_parameter(:X))\nend\ndef yield_self(&blk); end\n```\n\n---\n\nYields self to the block and returns the result of the block.\n\n```ruby\n\"my string\".yield_self {|s| s.upcase }   #=> \"MY STRING\"\n```\n\nGood usage for `then` is value piping in method chains:\n\n```ruby\nrequire 'open-uri'\nrequire 'json'\n\nconstruct_url(arguments).\n  then {|url| URI(url).read }.\n  then {|response| JSON.parse(response) }\n```"},"sortText":"000153","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"yield_self do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"__send__","kind":2,"detail":"BasicObject#__send__","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol, arg1: BasicObject).returns(T.untyped)}\ndef __send__(arg0, *arg1); end\n```\n\n---\n\nInvokes the method identified by *symbol*, passing it any arguments\nspecified. You can use `__send__` if the name `send` clashes with an\nexisting method in *obj*. When the method is identified by a string, the\nstring is converted to a symbol.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_send\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`send`.\n\n```ruby\nclass Klass\n  def hello(*args)\n    \"Hello \" + args.join(' ')\n  end\nend\nk = Klass.new\nk.send :hello, \"gentle\", \"readers\"   #=> \"Hello gentle readers\"\n```"},"sortText":"000154","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"__send__(${1:Symbol})${0}"}},{"label":"instance_eval","kind":2,"detail":"BasicObject#instance_eval","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, filename: String, lineno: Integer).returns(T.untyped)}\ndef instance_eval(arg0=…, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver (*obj*). In order to set the context, the\nvariable `self` is set to *obj* while the code is executing, giving the code\naccess to *obj*'s instance variables and private methods.\n\nWhen `instance_eval` is given a block, *obj* is also passed in as the\nblock's only argument.\n\nWhen `instance_eval` is given a `String`, the optional second and third\nparameters supply a filename and starting line number that are used when\nreporting compilation errors.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\n  private\n  def the_secret\n    \"Ssssh! The secret is #{@secret}.\"\n  end\nend\nk = KlassWithSecret.new\nk.instance_eval { @secret }          #=> 99\nk.instance_eval { the_secret }       #=> \"Ssssh! The secret is 99.\"\nk.instance_eval {|obj| obj == self } #=> true\n```"},"sortText":"000155","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"instance_eval${0}"}},{"label":"instance_eval","kind":2,"detail":"BasicObject#instance_eval (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_eval (overload.1)(&blk); end\n```\n\n---\n\nEvaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver (*obj*). In order to set the context, the\nvariable `self` is set to *obj* while the code is executing, giving the code\naccess to *obj*'s instance variables and private methods.\n\nWhen `instance_eval` is given a block, *obj* is also passed in as the\nblock's only argument.\n\nWhen `instance_eval` is given a `String`, the optional second and third\nparameters supply a filename and starting line number that are used when\nreporting compilation errors.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\n  private\n  def the_secret\n    \"Ssssh! The secret is #{@secret}.\"\n  end\nend\nk = KlassWithSecret.new\nk.instance_eval { @secret }          #=> 99\nk.instance_eval { the_secret }       #=> \"Ssssh! The secret is 99.\"\nk.instance_eval {|obj| obj == self } #=> true\n```"},"sortText":"000156","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"instance_eval do\n  ${1}\nend${0}"}},{"label":"instance_exec","kind":2,"detail":"BasicObject#instance_exec","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    args: T.type_parameter(:V),\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_exec(*args, &blk); end\n```\n\n---\n\nExecutes the given block within the context of the receiver (*obj*). In\norder to set the context, the variable `self` is set to *obj* while the code\nis executing, giving the code access to *obj*'s instance variables.\nArguments are passed as block parameters.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\nend\nk = KlassWithSecret.new\nk.instance_exec(5) {|x| @secret+x }   #=> 104\n```"},"sortText":"000157","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":3}},"newText":"instance_exec do |${1:T.untyped}|\n  ${2}\nend${0}"}}]}}

[2023-08-10 22:56:50.548] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":54},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T\n  def example\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:56:50.548] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":20,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":3,"character":10},"context":{"triggerKind":1}}}

[2023-08-10 22:56:50.643] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:50.643] [consoleAndFile] [debug] Taking slow path because ./example.rb has changed localSymbolTableHashes
[2023-08-10 22:56:50.737] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":20}}

[2023-08-10 22:56:50.738] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":20,"requestMethod":"textDocument/completion","error":{"code":-32800,"message":"Request was canceled"}}

[2023-08-10 22:56:50.738] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":55},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T:\n  def example\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:56:50.738] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":21,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":3,"character":11},"context":{"triggerKind":2,"triggerCharacter":":"}}}

[2023-08-10 22:56:50.857] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":21}}

[2023-08-10 22:56:50.858] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":21,"requestMethod":"textDocument/completion","error":{"code":-32800,"message":"Request was canceled"}}

[2023-08-10 22:56:50.858] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":56},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::\n  def example\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:56:50.858] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":22,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":3,"character":12},"context":{"triggerKind":2,"triggerCharacter":":"}}}

[2023-08-10 22:56:50.863] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"sorbet/showOperation","params":{"operationName":"SlowPathBlocking","description":"Typechecking...","status":"start"}}

[2023-08-10 22:56:50.863] [consoleAndFile] [debug] Taking slow path
[2023-08-10 22:56:50.877] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:50.877] [consoleAndFile] [debug] Taking slow path because ./example.rb has changed localSymbolTableHashes
[2023-08-10 22:56:50.899] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"sorbet/showOperation","params":{"operationName":"SlowPathBlocking","description":"Typechecking...","status":"end"}}

[2023-08-10 22:56:50.899] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"sorbet/showOperation","params":{"operationName":"SlowPathNonBlocking","description":"Typechecking in background","status":"start"}}

[2023-08-10 22:56:50.902] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 32
[2023-08-10 22:56:50.902] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":5,"character":9},"end":{"line":5,"character":10}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `x` does not exist on `A`","relatedInformation":[]},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":13}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}},"message":"Insert `extend T::Sig`"}]}]}}

[2023-08-10 22:56:50.906] [consoleAndFile] [debug] [Typechecker] Typecheck run for epoch 32 successfully finished.
[2023-08-10 22:56:50.906] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"sorbet/showOperation","params":{"operationName":"SlowPathNonBlocking","description":"Typechecking in background","status":"end"}}

[2023-08-10 22:56:50.956] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:50.956] [consoleAndFile] [debug] Taking slow path because ./example.rb has changed localSymbolTableHashes
[2023-08-10 22:56:51.179] [consoleAndFile] [debug] [Processing] Preempting slow path for task textDocument/completion
[2023-08-10 22:56:51.179] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"sorbet/showOperation","params":{"operationName":"SlowPathBlocking","description":"Typechecking...","status":"start"}}

[2023-08-10 22:56:51.179] [consoleAndFile] [debug] Taking slow path
[2023-08-10 22:56:51.218] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"sorbet/showOperation","params":{"operationName":"SlowPathBlocking","description":"Typechecking...","status":"end"}}

[2023-08-10 22:56:51.218] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"sorbet/showOperation","params":{"operationName":"SlowPathNonBlocking","description":"Typechecking in background","status":"start"}}

[2023-08-10 22:56:51.218] [consoleAndFile] [debug] [Typechecker] Beginning preemption task.
[2023-08-10 22:56:51.220] [consoleAndFile] [debug] Looking for constant similar to 
[2023-08-10 22:56:51.225] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":22,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[{"label":"AbstractUtils","kind":9,"detail":"T::AbstractUtils","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::AbstractUtils)\n```"},"sortText":"000000","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"AbstractUtils${0}"}},{"label":"Array","kind":9,"detail":"T::Array","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::Array)\n```"},"sortText":"000001","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"Array${0}"}},{"label":"Boolean","kind":5,"detail":"T::Boolean","documentation":{"kind":"markdown","value":"```ruby\nT.type_alias {T::Boolean}\n```\n\n---\n\nType syntax for either a `true` or `false` value.\n\nNote that `T::Boolean` is merely a shorthand, defined inside Sorbet as\n\n```ruby\nT::Boolean = T.type_alias {T.any(TrueClass, FalseClass)}\n```\n\nFor more information, see https://sorbet.org/docs/class-types#booleans"},"sortText":"000002","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"Boolean${0}"}},{"label":"Class","kind":9,"detail":"T::Class","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::Class)\n```"},"sortText":"000003","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"Class${0}"}},{"label":"CompatibilityPatches","kind":9,"detail":"T::CompatibilityPatches","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::CompatibilityPatches)\n```"},"sortText":"000004","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"CompatibilityPatches${0}"}},{"label":"Configuration","kind":9,"detail":"T::Configuration","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::Configuration)\n```"},"sortText":"000005","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"Configuration${0}"}},{"label":"Enum","kind":7,"detail":"T::Enum","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::Enum)\n```"},"sortText":"000006","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"Enum${0}"}},{"label":"Enumerable","kind":9,"detail":"T::Enumerable","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::Enumerable)\n```"},"sortText":"000007","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"Enumerable${0}"}},{"label":"Enumerator","kind":9,"detail":"T::Enumerator","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::Enumerator)\n```"},"sortText":"000008","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"Enumerator${0}"}},{"label":"Generic","kind":9,"detail":"T::Generic","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::Generic)\n```"},"sortText":"000009","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"Generic${0}"}},{"label":"Hash","kind":9,"detail":"T::Hash","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::Hash)\n```"},"sortText":"000010","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"Hash${0}"}},{"label":"Helpers","kind":9,"detail":"T::Helpers","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::Helpers)\n```"},"sortText":"000011","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"Helpers${0}"}},{"label":"ImmutableStruct","kind":7,"detail":"T::ImmutableStruct","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::ImmutableStruct)\n```"},"sortText":"000012","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"ImmutableStruct${0}"}},{"label":"InexactStruct","kind":7,"detail":"T::InexactStruct","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::InexactStruct)\n```"},"sortText":"000013","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"InexactStruct${0}"}},{"label":"InterfaceWrapper","kind":7,"detail":"T::InterfaceWrapper","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::InterfaceWrapper)\n```"},"sortText":"000014","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"InterfaceWrapper${0}"}},{"label":"NonForcingConstants","kind":9,"detail":"T::NonForcingConstants","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::NonForcingConstants)\n```"},"sortText":"000015","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"NonForcingConstants${0}"}},{"label":"Private","kind":9,"detail":"T::Private","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::Private)\n```"},"sortText":"000016","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"Private${0}"}},{"label":"Proc","kind":9,"detail":"T::Proc","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::Proc)\n```"},"sortText":"000017","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"Proc${0}"}},{"label":"Props","kind":9,"detail":"T::Props","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::Props)\n```"},"sortText":"000018","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"Props${0}"}},{"label":"Range","kind":9,"detail":"T::Range","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::Range)\n```"},"sortText":"000019","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"Range${0}"}},{"label":"Set","kind":9,"detail":"T::Set","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::Set)\n```"},"sortText":"000020","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"Set${0}"}},{"label":"Sig","kind":9,"detail":"T::Sig","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::Sig)\n```"},"sortText":"000021","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"Sig${0}"}},{"label":"Struct","kind":7,"detail":"T::Struct","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::Struct)\n```"},"sortText":"000022","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"Struct${0}"}},{"label":"Types","kind":9,"detail":"T::Types","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::Types)\n```"},"sortText":"000023","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"Types${0}"}},{"label":"Utils","kind":9,"detail":"T::Utils","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(T::Utils)\n```"},"sortText":"000024","insertTextFormat":2,"textEdit":{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"newText":"Utils${0}"}}]}}

[2023-08-10 22:56:51.225] [consoleAndFile] [debug] [Typechecker] Preemption task complete.
[2023-08-10 22:56:51.225] [consoleAndFile] [debug] [Processing] Preemption for task textDocument/completion complete
[2023-08-10 22:56:51.229] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 34
[2023-08-10 22:56:51.230] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":5,"character":9},"end":{"line":5,"character":10}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `x` does not exist on `A`","relatedInformation":[]},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":13}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}}},"message":"Insert `extend T::Sig`"}]},{"range":{"start":{"line":3,"character":10},"end":{"line":3,"character":12}},"severity":1,"code":2001,"codeDescription":{"href":"https://srb.help/2001"},"message":"expected constant name following \"::\"","relatedInformation":[]}]}}

[2023-08-10 22:56:51.234] [consoleAndFile] [debug] [Typechecker] Typecheck run for epoch 34 successfully finished.
[2023-08-10 22:56:51.234] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"sorbet/showOperation","params":{"operationName":"SlowPathNonBlocking","description":"Typechecking in background","status":"end"}}

[2023-08-10 22:56:51.455] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":59},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  def example\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:56:51.507] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":23,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":15}},"context":{"diagnostics":[]}}}

[2023-08-10 22:56:51.556] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:51.556] [consoleAndFile] [debug] Taking slow path because ./example.rb has changed localSymbolTableHashes
[2023-08-10 22:56:51.776] [consoleAndFile] [debug] [Processing] Preempting slow path for task textDocument/codeAction
[2023-08-10 22:56:51.777] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"sorbet/showOperation","params":{"operationName":"SlowPathBlocking","description":"Typechecking...","status":"start"}}

[2023-08-10 22:56:51.777] [consoleAndFile] [debug] Taking slow path
[2023-08-10 22:56:51.814] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"sorbet/showOperation","params":{"operationName":"SlowPathBlocking","description":"Typechecking...","status":"end"}}

[2023-08-10 22:56:51.814] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"sorbet/showOperation","params":{"operationName":"SlowPathNonBlocking","description":"Typechecking in background","status":"start"}}

[2023-08-10 22:56:51.814] [consoleAndFile] [debug] [Typechecker] Beginning preemption task.
[2023-08-10 22:56:51.814] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:51.814] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:51.819] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":23,"requestMethod":"textDocument/codeAction","result":[{"title":"Apply all Sorbet fixes for file","kind":"source.fixAll.sorbet","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}},"newText":"sig { returns(NilClass) }\n  "}]}]}}]}

[2023-08-10 22:56:51.819] [consoleAndFile] [debug] [Typechecker] Preemption task complete.
[2023-08-10 22:56:51.820] [consoleAndFile] [debug] [Processing] Preemption for task textDocument/codeAction complete
[2023-08-10 22:56:51.823] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 35
[2023-08-10 22:56:51.823] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":5,"character":9},"end":{"line":5,"character":10}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `x` does not exist on `A`","relatedInformation":[]},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":13}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"}]}]}}

[2023-08-10 22:56:51.827] [consoleAndFile] [debug] [Typechecker] Typecheck run for epoch 35 successfully finished.
[2023-08-10 22:56:51.827] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"sorbet/showOperation","params":{"operationName":"SlowPathNonBlocking","description":"Typechecking in background","status":"end"}}

[2023-08-10 22:56:52.234] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":24,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":15}},"context":{"diagnostics":[]}}}

[2023-08-10 22:56:52.234] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:52.234] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:52.246] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":24,"requestMethod":"textDocument/codeAction","result":[{"title":"Apply all Sorbet fixes for file","kind":"source.fixAll.sorbet","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}},"newText":"sig { returns(NilClass) }\n  "}]}]}}]}

[2023-08-10 22:56:52.450] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":60},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  def example\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:56:52.546] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:52.546] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:52.546] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:52.546] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:52.550] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 36
[2023-08-10 22:56:52.551] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":5,"character":9},"end":{"line":5,"character":10}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `x` does not exist on `A`","relatedInformation":[]},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":13}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"}]}]}}

[2023-08-10 22:56:52.805] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":25,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":15}},"context":{"diagnostics":[]}}}

[2023-08-10 22:56:52.806] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:52.806] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:52.818] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":25,"requestMethod":"textDocument/codeAction","result":[{"title":"Apply all Sorbet fixes for file","kind":"source.fixAll.sorbet","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}},"newText":"sig { returns(NilClass) }\n  "}]}]}}]}

[2023-08-10 22:56:53.158] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":4,"character":13},"end":{"line":4,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":13}},"message":"The method `example` does not have a `sig` (fix available)","code":7017,"codeDescription":{"href":"https://srb.help/7017"},"severity":1,"relatedInformation":[{"message":"Insert `sig { returns(NilClass) }`","location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}}}}]}]}}}

[2023-08-10 22:56:53.159] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:53.159] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:53.171] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":26,"requestMethod":"textDocument/codeAction","result":[{"title":"Add `sig { returns(NilClass) }`","kind":"quickfix","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}},"newText":"sig { returns(NilClass) }\n  "}]}]}},{"title":"Apply all Sorbet fixes for file","kind":"source.fixAll.sorbet","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}},"newText":"sig { returns(NilClass) }\n  "}]}]}},{"title":"Apply all Sorbet fixes for file","kind":"quickfix","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}},"newText":"sig { returns(NilClass) }\n  "}]}]}},{"title":"Convert to singleton class method (best effort)","kind":"refactor.rewrite","data":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":4,"character":13},"end":{"line":4,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":13}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"}]}]}}}]}

[2023-08-10 22:56:53.481] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":61},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  def example()\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:56:53.531] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":27,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":14}},"context":{"diagnostics":[]}}}

[2023-08-10 22:56:53.576] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":27}}

[2023-08-10 22:56:53.577] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:53.577] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:53.577] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":27,"requestMethod":"textDocument/codeAction","error":{"code":-32800,"message":"Request was canceled"}}

[2023-08-10 22:56:53.577] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:53.577] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:53.581] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 37
[2023-08-10 22:56:53.582] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":5,"character":9},"end":{"line":5,"character":10}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `x` does not exist on `A`","relatedInformation":[]},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":15}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}}},"message":"Insert `sig { returns(NilClass) }`"}]}]}}

[2023-08-10 22:56:53.588] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":62},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  def example(x)\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:56:53.588] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":28,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":4,"character":15},"context":{"triggerKind":1}}}

[2023-08-10 22:56:53.682] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:53.682] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:53.683] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:53.683] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:53.708] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 38
[2023-08-10 22:56:53.708] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":16}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}}},"message":"Insert `sig { params(x: BasicObject).returns(NilClass) }`"}]}]}}

[2023-08-10 22:56:53.716] [consoleAndFile] [debug] Looking for constant similar to x
[2023-08-10 22:56:53.719] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":28,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[{"label":"x","kind":6,"sortText":"000000","insertTextFormat":1,"textEdit":{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"newText":"x"}},{"label":"example","kind":2,"detail":"A#example","documentation":{"kind":"markdown","value":"```ruby\nsig {params(x: T.untyped).returns(T.untyped)}\ndef example(x); end\n```"},"sortText":"000001","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"newText":"example(${1})${0}"}},{"label":"Complex","kind":2,"detail":"Kernel#Complex","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: T.any(Numeric, String),\n    y: T.any(Numeric, String),\n    exception: T::Boolean\n  )\n  .returns(Complex)\nend\ndef Complex(x, y=…, exception: …); end\n```\n\n---\n\nReturns x+i\\*y;\n\n```ruby\nComplex(1, 2)    #=> (1+2i)\nComplex('1+2i')  #=> (1+2i)\nComplex(nil)     #=> TypeError\nComplex(1, nil)  #=> TypeError\n\nComplex(1, nil, exception: false)  #=> nil\nComplex('1+2', exception: false)   #=> nil\n```\n\nSyntax of string form:\n\n```\nstring form = extra spaces , complex , extra spaces ;\ncomplex = real part | [ sign ] , imaginary part\n        | real part , sign , imaginary part\n        | rational , \"@\" , rational ;\nreal part = rational ;\nimaginary part = imaginary unit | unsigned rational , imaginary unit ;\nrational = [ sign ] , unsigned rational ;\nunsigned rational = numerator | numerator , \"/\" , denominator ;\nnumerator = integer part | fractional part | integer part , fractional part ;\ndenominator = digits ;\ninteger part = digits ;\nfractional part = \".\" , digits , [ ( \"e\" | \"E\" ) , [ sign ] , digits ] ;\nimaginary unit = \"i\" | \"I\" | \"j\" | \"J\" ;\nsign = \"-\" | \"+\" ;\ndigits = digit , { digit | \"_\" , digit };\ndigit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\nextra spaces = ? \\s* ? ;\n```\n\nSee\n[`String#to_c`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_c)."},"sortText":"000002","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"newText":"Complex(${1:T.any(Numeric, String)})${0}"}},{"label":"at_exit","kind":2,"detail":"Kernel#at_exit","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.proc.returns(BasicObject)).returns(Proc)}\ndef at_exit(&blk); end\n```\n\n---\n\nConverts *block* to a `Proc` object (and therefore binds it at the point of\ncall) and registers it for execution when the program exits. If multiple\nhandlers are registered, they are executed in reverse order of registration.\n\n```ruby\ndef do_at_exit(str1)\n  at_exit { print str1 }\nend\nat_exit { puts \"cruel world\" }\ndo_at_exit(\"goodbye \")\nexit\n```\n\n*produces:*\n\n```ruby\ngoodbye cruel world\n```"},"sortText":"000003","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"newText":"at_exit do\n  ${1}\nend${0}"}},{"label":"exec","kind":2,"detail":"Kernel#exec","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: String).returns(T.noreturn)}\ndef exec(*args); end\n```\n\n---\n\nReplaces the current process by running the given external *command*, which\ncan take one of the following forms:\n\n`exec(commandline)`\n:   command line string which is passed to the standard shell\n`exec(cmdname, arg1, ...)`\n:   command name and one or more arguments (no shell)\n`exec([cmdname, argv0], arg1, ...)`\n:   command name, [argv](0) and zero or more arguments (no shell)\n\n\nIn the first form, the string is taken as a command line that is subject to\nshell expansion before being executed.\n\nThe standard shell always means `\"/bin/sh\"` on Unix-like systems, otherwise,\n`ENV[\"RUBYSHELL\"]` or `ENV[\"COMSPEC\"]` on Windows and similar. The command\nis passed as an argument to the `\"-c\"` switch to the shell, except in the\ncase of `COMSPEC`.\n\nIf the string from the first form (`exec(\"command\")`) follows these simple\nrules:\n\n*   no meta characters\n*   not starting with shell reserved word or special built-in\n*   Ruby invokes the command directly without shell\n\n\nYou can force shell invocation by adding \";\" to the string (because \";\" is a\nmeta character).\n\nNote that this behavior is observable by pid obtained (return value of\nspawn() and\n[`IO#pid`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-pid) for\n[`IO.popen`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-popen)) is\nthe pid of the invoked command, not shell.\n\nIn the second form (`exec(\"command1\", \"arg1\", ...)`), the first is taken as\na command name and the rest are passed as parameters to command with no\nshell expansion.\n\nIn the third form (`exec([\"command\", \"argv0\"], \"arg1\", ...)`), starting a\ntwo-element array at the beginning of the command, the first element is the\ncommand to be executed, and the second argument is used as the `argv[0]`\nvalue, which may show up in process listings.\n\nIn order to execute the command, one of the `exec(2)` system calls are used,\nso the running command may inherit some of the environment of the original\nprogram (including open file descriptors).\n\nThis behavior is modified by the given `env` and `options` parameters. See\n::spawn for details.\n\nIf the command fails to execute (typically Errno::ENOENT when it was not\nfound) a\n[`SystemCallError`](https://docs.ruby-lang.org/en/2.7.0/SystemCallError.html)\nexception is raised.\n\nThis method modifies process attributes according to given `options` before\n`exec(2)` system call. See ::spawn for more details about the given\n`options`.\n\nThe modified attributes may be retained when `exec(2)` system call fails.\n\nFor example, hard resource limits are not restorable.\n\nConsider to create a child process using ::spawn or\n[`Kernel#system`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-system)\nif this is not acceptable.\n\n```ruby\nexec \"echo *\"       # echoes list of files in current directory\n# never get here\n\nexec \"echo\", \"*\"    # echoes an asterisk\n# never get here\n```"},"sortText":"000004","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"newText":"exec${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef exit; end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000005","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"newText":"exit${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit (overload.1)(status=…); end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000006","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"newText":"exit${0}"}},{"label":"exit!","kind":2,"detail":"Kernel#exit!","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit!(status=…); end\n```\n\n---\n\nExits the process immediately. No exit handlers are run. *status* is\nreturned to the underlying system as the exit status.\n\n```ruby\nProcess.exit!(true)\n```"},"sortText":"000007","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"newText":"exit!${0}"}},{"label":"extend","kind":2,"detail":"Kernel#extend","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(A)}\ndef extend(*arg0); end\n```"},"sortText":"000008","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"newText":"extend${0}"}},{"label":"instance_exec","kind":2,"detail":"BasicObject#instance_exec","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    args: T.type_parameter(:V),\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_exec(*args, &blk); end\n```\n\n---\n\nExecutes the given block within the context of the receiver (*obj*). In\norder to set the context, the variable `self` is set to *obj* while the code\nis executing, giving the code access to *obj*'s instance variables.\nArguments are passed as block parameters.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\nend\nk = KlassWithSecret.new\nk.instance_exec(5) {|x| @secret+x }   #=> 104\n```"},"sortText":"000009","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"newText":"instance_exec do |${1:T.untyped}|\n  ${2}\nend${0}"}}]}}

[2023-08-10 22:56:54.402] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":29,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":15}},"context":{"diagnostics":[]}}}

[2023-08-10 22:56:54.403] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:54.403] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:54.413] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":29,"requestMethod":"textDocument/codeAction","result":[{"title":"Apply all Sorbet fixes for file","kind":"source.fixAll.sorbet","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}},"newText":"sig { params(x: BasicObject).returns(NilClass) }\n  "}]}]}}]}

[2023-08-10 22:56:54.938] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"}}}

[2023-08-10 22:56:54.939] [consoleAndFile] [debug] Unsupported LSP method: textDocument/didSave
[2023-08-10 22:56:56.027] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"}}}

[2023-08-10 22:56:56.122] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:56.122] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:56.122] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:56.122] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:56.127] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 39
[2023-08-10 22:56:56.128] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":16}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}}},"message":"Insert `sig { params(x: BasicObject).returns(NilClass) }`"}]}]}}

[2023-08-10 22:56:56.903] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","languageId":"ruby","version":62,"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  def example(x)\n    puts(x)\n  end\nend\n"}}}

[2023-08-10 22:56:56.909] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":30,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}

[2023-08-10 22:56:57.006] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:57.006] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:57.006] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:57.006] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:57.011] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 40
[2023-08-10 22:56:57.011] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":16}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}}},"message":"Insert `sig { params(x: BasicObject).returns(NilClass) }`"}]}]}}

[2023-08-10 22:56:57.012] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:57.012] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:57.021] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":30,"requestMethod":"textDocument/codeAction","result":[{"title":"Apply all Sorbet fixes for file","kind":"source.fixAll.sorbet","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}},"newText":"sig { params(x: BasicObject).returns(NilClass) }\n  "}]}]}}]}

[2023-08-10 22:56:57.265] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":31,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":15}},"context":{"diagnostics":[]}}}

[2023-08-10 22:56:57.266] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:57.266] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:57.278] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":31,"requestMethod":"textDocument/codeAction","result":[{"title":"Apply all Sorbet fixes for file","kind":"source.fixAll.sorbet","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}},"newText":"sig { params(x: BasicObject).returns(NilClass) }\n  "}]}]}}]}

[2023-08-10 22:56:58.178] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":63},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  \n  def example(x)\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:56:58.273] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:58.273] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:58.273] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:58.273] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:58.278] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 41
[2023-08-10 22:56:58.278] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":16}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":5,"character":2},"end":{"line":5,"character":2}}},"message":"Insert `sig { params(x: BasicObject).returns(NilClass) }`"}]}]}}

[2023-08-10 22:56:59.752] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":65},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  def example(x)\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:56:59.803] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":32,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":15}},"context":{"diagnostics":[]}}}

[2023-08-10 22:56:59.847] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:56:59.847] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:56:59.848] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:59.848] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:59.852] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 42
[2023-08-10 22:56:59.853] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":16}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}}},"message":"Insert `sig { params(x: BasicObject).returns(NilClass) }`"}]}]}}

[2023-08-10 22:56:59.854] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:56:59.854] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:56:59.862] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":32,"requestMethod":"textDocument/codeAction","result":[{"title":"Apply all Sorbet fixes for file","kind":"source.fixAll.sorbet","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}},"newText":"sig { params(x: BasicObject).returns(NilClass) }\n  "}]}]}}]}

[2023-08-10 22:57:00.106] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":33,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":15}},"context":{"diagnostics":[]}}}

[2023-08-10 22:57:00.107] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:00.107] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:00.127] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":33,"requestMethod":"textDocument/codeAction","result":[{"title":"Apply all Sorbet fixes for file","kind":"source.fixAll.sorbet","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}},"newText":"sig { params(x: BasicObject).returns(NilClass) }\n  "}]}]}}]}

[2023-08-10 22:57:00.386] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":34,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":4,"character":15},"end":{"line":4,"character":15}},"context":{"diagnostics":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":16}},"message":"The method `example` does not have a `sig` (fix available)","code":7017,"codeDescription":{"href":"https://srb.help/7017"},"severity":1,"relatedInformation":[{"message":"Insert `sig { params(x: BasicObject).returns(NilClass) }`","location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}}}}]}]}}}

[2023-08-10 22:57:00.387] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:00.387] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:00.408] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":34,"requestMethod":"textDocument/codeAction","result":[{"title":"Add `sig { params(x: BasicObject).returns(NilClass) }`","kind":"quickfix","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}},"newText":"sig { params(x: BasicObject).returns(NilClass) }\n  "}]}]}},{"title":"Apply all Sorbet fixes for file","kind":"source.fixAll.sorbet","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}},"newText":"sig { params(x: BasicObject).returns(NilClass) }\n  "}]}]}},{"title":"Apply all Sorbet fixes for file","kind":"quickfix","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}},"newText":"sig { params(x: BasicObject).returns(NilClass) }\n  "}]}]}}]}

[2023-08-10 22:57:00.745] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":35,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":15}},"context":{"diagnostics":[]}}}

[2023-08-10 22:57:00.746] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:00.746] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:00.758] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":35,"requestMethod":"textDocument/codeAction","result":[{"title":"Apply all Sorbet fixes for file","kind":"source.fixAll.sorbet","edit":{"documentChanges":[{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":null},"edits":[{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":2}},"newText":"sig { params(x: BasicObject).returns(NilClass) }\n  "}]}]}}]}

[2023-08-10 22:57:01.027] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":67},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  s\n  def example(x)\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:01.027] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":36,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":4,"character":3},"context":{"triggerKind":1}}}

[2023-08-10 22:57:01.126] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:01.126] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:01.126] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:01.126] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:01.131] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 43
[2023-08-10 22:57:01.131] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":16}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":5,"character":2},"end":{"line":5,"character":2}}},"message":"Insert `sig { params(x: BasicObject).returns(NilClass) }`"}]},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `s` does not exist on `T.class_of(A)`","relatedInformation":[]}]}}

[2023-08-10 22:57:01.186] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":36,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[{"label":"self","kind":14,"detail":"(sorbet) Ruby keyword: self","documentation":"The object the current method is attached to.","sortText":"000000","insertTextFormat":1,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"self"}},{"label":"super","kind":14,"detail":"(sorbet) Ruby keyword: super","documentation":"Calls the current method in a superclass.","sortText":"000001","insertTextFormat":1,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"super"}},{"label":"struct","kind":15,"detail":"(sorbet) Snippet: struct","documentation":{"kind":"markdown","value":"```ruby\nclass ${1:StructName} < T::Struct\n  $0\nend\n```\n\n---\n\nCreates a new struct class"},"sortText":"000002","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"class ${1:StructName} < T::Struct\n  $0\nend"}},{"label":"sig","kind":2,"detail":"Suggested sig for example","documentation":{"kind":"markdown","value":"```ruby\nsig { params(x: BasicObject).returns(NilClass) }\n```\n\n---\n\nSorbet suggests this signature given the method below. Sorbet's suggested sigs are imperfect. It doesn't always guess the correct types (or any types at all), but they're usually a good starting point."},"sortText":"000003","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"sig { params(x: BasicObject).returns(NilClass) }${0}"}},{"label":"subclasses","kind":2,"detail":"Class#subclasses","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[T::Class[T.anything]])}\ndef subclasses; end\n```\n\n---\n\nReturns an array of classes where the receiver is the direct superclass of\nthe class, excluding singleton classes. The order of the returned array is\nnot defined.\n\n```ruby\nclass A; end\nclass B < A; end\nclass C < B; end\nclass D < A; end\n\nA.subclasses        #=> [D, B]\nB.subclasses        #=> [C]\nC.subclasses        #=> []\n```"},"sortText":"000004","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"subclasses${0}"}},{"label":"superclass","kind":2,"detail":"Class#superclass","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(T::Class[T.anything]))}\ndef superclass; end\n```\n\n---\n\nReturns the superclass of *class*, or `nil`.\n\n```ruby\nFile.superclass          #=> IO\nIO.superclass            #=> Object\nObject.superclass        #=> BasicObject\nclass Foo; end\nclass Bar < Foo; end\nBar.superclass           #=> Foo\n```\n\nReturns nil when the given class does not have a parent class:\n\n```ruby\nBasicObject.superclass   #=> nil\n```"},"sortText":"000005","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"superclass${0}"}},{"label":"instance_methods","kind":2,"detail":"Class#instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T::Boolean).returns(T::Array[Symbol])}\ndef instance_methods(arg0=…); end\n```"},"sortText":"000006","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"instance_methods${0}"}},{"label":"singleton_class?","kind":2,"detail":"Module#singleton_class?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef singleton_class?; end\n```\n\n---\n\nReturns `true` if *mod* is a singleton class or `false` if it is an ordinary\nclass or module.\n\n```ruby\nclass C\nend\nC.singleton_class?                  #=> false\nC.singleton_class.singleton_class?  #=> true\n```"},"sortText":"000007","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"singleton_class?${0}"}},{"label":"alias_method","kind":2,"detail":"Module#alias_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(new_name: Symbol, old_name: Symbol).returns(Symbol)}\ndef alias_method(new_name, old_name); end\n```\n\n---\n\nMakes *new\\_name* a new copy of the method *old\\_name*. This can be used to\nretain access to methods that are overridden.\n\n```ruby\nmodule Mod\n  alias_method :orig_exit, :exit #=> :orig_exit\n  def exit(code=0)\n    puts \"Exiting with code #{code}\"\n    orig_exit(code)\n  end\nend\ninclude Mod\nexit(99)\n```\n\n*produces:*\n\n```ruby\nExiting with code 99\n```"},"sortText":"000008","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"alias_method(${1:Symbol}, ${2:Symbol})${0}"}},{"label":"ancestors","kind":2,"detail":"Module#ancestors","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Module])}\ndef ancestors; end\n```\n\n---\n\nReturns a list of modules included/prepended in *mod* (including *mod*\nitself).\n\n```ruby\nmodule Mod\n  include Math\n  include Comparable\n  prepend Enumerable\nend\n\nMod.ancestors        #=> [Enumerable, Mod, Comparable, Math]\nMath.ancestors       #=> [Math]\nEnumerable.ancestors #=> [Enumerable]\n```"},"sortText":"000009","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"ancestors${0}"}},{"label":"append_features","kind":2,"detail":"Module#append_features","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef append_features(arg0); end\n```\n\n---\n\nWhen this module is included in another, Ruby calls\n[`append_features`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-append_features)\nin this module, passing it the receiving module in *mod*. Ruby's default\nimplementation is to add the constants, methods, and module variables of\nthis module to *mod* if this module has not already been added to *mod* or\none of its ancestors. See also\n[`Module#include`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-include)."},"sortText":"000010","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"append_features(${1:Module})${0}"}},{"label":"attr_accessor","kind":2,"detail":"Module#attr_accessor","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(NilClass)}\ndef attr_accessor(*arg0); end\n```\n\n---\n\nDefines a named attribute for this module, where the name is\n*symbol.*`id2name`, creating an instance variable (`@name`) and a\ncorresponding access method to read it. Also creates a method called `name=`\nto set the attribute.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. Returns an array of defined method names as symbols.\n\n```ruby\nmodule Mod\n  attr_accessor(:one, :two) #=> [:one, :one=, :two, :two=]\nend\nMod.instance_methods.sort   #=> [:one, :one=, :two, :two=]\n```"},"sortText":"000011","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"attr_accessor${0}"}},{"label":"class_eval","kind":2,"detail":"Module#class_eval","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, filename: String, lineno: Integer).returns(T.untyped)}\ndef class_eval(arg0, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates the string or block in the context of *mod*, except that when a\nblock is given, constant/class variable lookup is not affected. This can be\nused to add methods to a class. `module_eval` returns the result of\nevaluating its argument. The optional *filename* and *lineno* parameters set\nthe text for error messages.\n\n```ruby\nclass Thing\nend\na = %q{def hello() \"Hello there!\" end}\nThing.module_eval(a)\nputs Thing.new.hello()\nThing.module_eval(\"invalid code\", \"dummy\", 123)\n```\n\n*produces:*\n\n```\nHello there!\ndummy:123:in `module_eval': undefined local variable\n    or method `code' for Thing:Class\n```\n\n\nAlias for:\n[`module_eval`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-module_eval)"},"sortText":"000012","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"class_eval(${1:String})${0}"}},{"label":"class_eval","kind":2,"detail":"Module#class_eval (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef class_eval (overload.1)(&blk); end\n```\n\n---\n\nEvaluates the string or block in the context of *mod*, except that when a\nblock is given, constant/class variable lookup is not affected. This can be\nused to add methods to a class. `module_eval` returns the result of\nevaluating its argument. The optional *filename* and *lineno* parameters set\nthe text for error messages.\n\n```ruby\nclass Thing\nend\na = %q{def hello() \"Hello there!\" end}\nThing.module_eval(a)\nputs Thing.new.hello()\nThing.module_eval(\"invalid code\", \"dummy\", 123)\n```\n\n*produces:*\n\n```\nHello there!\ndummy:123:in `module_eval': undefined local variable\n    or method `code' for Thing:Class\n```\n\n\nAlias for:\n[`module_eval`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-module_eval)"},"sortText":"000013","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"class_eval do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"class_exec","kind":2,"detail":"Module#class_exec","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: BasicObject, blk: T.untyped).returns(T.untyped)}\ndef class_exec(*args, &blk); end\n```\n\n---\n\nEvaluates the given block in the context of the class/module. The method\ndefined in the block will belong to the receiver. Any arguments passed to\nthe method will be passed to the block. This can be used if the block needs\nto access instance variables.\n\n```ruby\nclass Thing\nend\nThing.class_exec{\n  def hello() \"Hello there!\" end\n}\nputs Thing.new.hello()\n```\n\n*produces:*\n\n```ruby\nHello there!\n```\n\n\nAlias for:\n[`module_exec`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-module_exec)"},"sortText":"000014","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"class_exec${0}"}},{"label":"class_variable_defined?","kind":2,"detail":"Module#class_variable_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef class_variable_defined?(arg0); end\n```\n\n---\n\nReturns `true` if the given class variable is defined in *obj*.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nclass Fred\n  @@foo = 99\nend\nFred.class_variable_defined?(:@@foo)    #=> true\nFred.class_variable_defined?(:@@bar)    #=> false\n```"},"sortText":"000015","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"class_variable_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"class_variable_get","kind":2,"detail":"Module#class_variable_get","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.untyped)}\ndef class_variable_get(arg0); end\n```\n\n---\n\nReturns the value of the given class variable (or throws a\n[`NameError`](https://docs.ruby-lang.org/en/2.7.0/NameError.html)\nexception). The `@@` part of the variable name should be included for\nregular class variables.\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols.\n\n```ruby\nclass Fred\n  @@foo = 99\nend\nFred.class_variable_get(:@@foo)     #=> 99\n```"},"sortText":"000016","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"class_variable_get(${1:T.any(Symbol, String)})${0}"}},{"label":"class_variable_set","kind":2,"detail":"Module#class_variable_set","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String), arg1: BasicObject).returns(T.untyped)}\ndef class_variable_set(arg0, arg1); end\n```\n\n---\n\nSets the class variable named by *symbol* to the given object. If the class\nvariable name is passed as a string, that string is converted to a symbol.\n\n```ruby\nclass Fred\n  @@foo = 99\n  def foo\n    @@foo\n  end\nend\nFred.class_variable_set(:@@foo, 101)     #=> 101\nFred.new.foo                             #=> 101\n```"},"sortText":"000017","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"class_variable_set(${1:T.any(Symbol, String)}, ${2:BasicObject})${0}"}},{"label":"class_variables","kind":2,"detail":"Module#class_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {params(inherit: T::Boolean).returns(T::Array[Symbol])}\ndef class_variables(inherit=…); end\n```\n\n---\n\nReturns an array of the names of class variables in *mod*. This includes the\nnames of class variables in any included modules, unless the *inherit*\nparameter is set to `false`.\n\n```ruby\nclass One\n  @@var1 = 1\nend\nclass Two < One\n  @@var2 = 2\nend\nOne.class_variables          #=> [:@@var1]\nTwo.class_variables          #=> [:@@var2, :@@var1]\nTwo.class_variables(false)   #=> [:@@var2]\n```"},"sortText":"000018","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"class_variables${0}"}},{"label":"const_added","kind":2,"detail":"Module#const_added","documentation":{"kind":"markdown","value":"```ruby\nsig {params(const_name: Symbol).returns(T.untyped)}\ndef const_added(const_name); end\n```\n\n---\n\nInvoked as a callback whenever a constant is assigned on the receiver\n\n```ruby\nmodule Chatty\n  def self.const_added(const_name)\n    super\n    puts \"Added #{const_name.inspect}\"\n  end\n  FOO = 1\nend\n```\n\n*produces:*\n\n```\nAdded :FOO\n```"},"sortText":"000019","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"const_added(${1:Symbol})${0}"}},{"label":"const_defined?","kind":2,"detail":"Module#const_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    inherit: T::Boolean\n  )\n  .returns(T::Boolean)\nend\ndef const_defined?(arg0, inherit=…); end\n```\n\n---\n\nSays whether *mod* or its ancestors have a constant with the given name:\n\n```ruby\nFloat.const_defined?(:EPSILON)      #=> true, found in Float itself\nFloat.const_defined?(\"String\")      #=> true, found in Object (ancestor)\nBasicObject.const_defined?(:Hash)   #=> false\n```\n\nIf *mod* is a `Module`, additionally `Object` and its ancestors are checked:\n\n```ruby\nMath.const_defined?(:String)   #=> true, found in Object\n```\n\nIn each of the checked classes or modules, if the constant is not present\nbut there is an autoload for it, `true` is returned directly without\nautoloading:\n\n```ruby\nmodule Admin\n  autoload :User, 'admin/user'\nend\nAdmin.const_defined?(:User)   #=> true\n```\n\nIf the constant is not found the callback `const_missing` is **not** called\nand the method returns `false`.\n\nIf `inherit` is false, the lookup only checks the constants in the receiver:\n\n```ruby\nIO.const_defined?(:SYNC)          #=> true, found in File::Constants (ancestor)\nIO.const_defined?(:SYNC, false)   #=> false, not found in IO itself\n```\n\nIn this case, the same logic for autoloading applies.\n\nIf the argument is not a valid constant name a `NameError` is raised with\nthe message \"wrong constant name *name*\":\n\n```ruby\nHash.const_defined? 'foobar'   #=> NameError: wrong constant name foobar\n```"},"sortText":"000020","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"const_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"const_get","kind":2,"detail":"Module#const_get","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    inherit: T::Boolean\n  )\n  .returns(T.untyped)\nend\ndef const_get(arg0, inherit=…); end\n```\n\n---\n\nChecks for a constant with the given name in *mod*. If `inherit` is set, the\nlookup will also search the ancestors (and `Object` if *mod* is a `Module`).\n\nThe value of the constant is returned if a definition is found, otherwise a\n`NameError` is raised.\n\n```ruby\nMath.const_get(:PI)   #=> 3.14159265358979\n```\n\nThis method will recursively look up constant names if a namespaced class\nname is provided. For example:\n\n```ruby\nmodule Foo; class Bar; end end\nObject.const_get 'Foo::Bar'\n```\n\nThe `inherit` flag is respected on each lookup. For example:\n\n```ruby\nmodule Foo\n  class Bar\n    VAL = 10\n  end\n\n  class Baz < Bar; end\nend\n\nObject.const_get 'Foo::Baz::VAL'         # => 10\nObject.const_get 'Foo::Baz::VAL', false  # => NameError\n```\n\nIf the argument is not a valid constant name a `NameError` will be raised\nwith a warning \"wrong constant name\".\n\n```ruby\nObject.const_get 'foobar' #=> NameError: wrong constant name foobar\n```"},"sortText":"000021","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"const_get(${1:T.any(Symbol, String)})${0}"}},{"label":"const_missing","kind":2,"detail":"Module#const_missing","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(T.untyped)}\ndef const_missing(arg0); end\n```\n\n---\n\nInvoked when a reference is made to an undefined constant in *mod*. It is\npassed a symbol for the undefined constant, and returns a value to be used\nfor that constant. The following code is an example of the same:\n\n```ruby\ndef Foo.const_missing(name)\n  name # return the constant name as Symbol\nend\n\nFoo::UNDEFINED_CONST    #=> :UNDEFINED_CONST: symbol returned\n```\n\nIn the next example when a reference is made to an undefined constant, it\nattempts to load a file whose name is the lowercase version of the constant\n(thus class `Fred` is assumed to be in file `fred.rb`). If found, it returns\nthe loaded class. It therefore implements an autoload feature similar to\n[`Kernel#autoload`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-autoload)\nand\n[`Module#autoload`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-autoload).\n\n```ruby\ndef Object.const_missing(name)\n  @looked_for ||= {}\n  str_name = name.to_s\n  raise \"Class not found: #{name}\" if @looked_for[str_name]\n  @looked_for[str_name] = 1\n  file = str_name.downcase\n  require file\n  klass = const_get(name)\n  return klass if klass\n  raise \"Class not found: #{name}\"\nend\n```"},"sortText":"000022","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"const_missing(${1:Symbol})${0}"}},{"label":"const_set","kind":2,"detail":"Module#const_set","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String), arg1: BasicObject).returns(T.untyped)}\ndef const_set(arg0, arg1); end\n```\n\n---\n\nSets the named constant to the given object, returning that object. Creates\na new constant if no constant with the given name previously existed.\n\n```ruby\nMath.const_set(\"HIGH_SCHOOL_PI\", 22.0/7.0)   #=> 3.14285714285714\nMath::HIGH_SCHOOL_PI - Math::PI              #=> 0.00126448926734968\n```\n\nIf `sym` or `str` is not a valid constant name a `NameError` will be raised\nwith a warning \"wrong constant name\".\n\n```ruby\nObject.const_set('foobar', 42) #=> NameError: wrong constant name foobar\n```"},"sortText":"000023","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"const_set(${1:T.any(Symbol, String)}, ${2:BasicObject})${0}"}},{"label":"const_source_location","kind":2,"detail":"Module#const_source_location","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    sym: T.any(Symbol, String),\n    inherit: T::Boolean\n  )\n  .returns(T.nilable([String, Integer]))\nend\ndef const_source_location(sym, inherit=…); end\n```\n\n---\n\nReturns the Ruby source filename and line number containing the definition\nof the constant specified. If the named constant is not found, `nil` is\nreturned. If the constant is found, but its source location can not be\nextracted (constant is defined in C code), empty array is returned.\n\n*inherit* specifies whether to lookup in `mod.ancestors` (`true` by\ndefault).\n\n```ruby\n# test.rb:\nclass A         # line 1\n  C1 = 1\n  C2 = 2\nend\n\nmodule M        # line 6\n  C3 = 3\nend\n\nclass B < A     # line 10\n  include M\n  C4 = 4\nend\n\nclass A # continuation of A definition\n  C2 = 8 # constant redefinition; warned yet allowed\nend\n\np B.const_source_location('C4')           # => [\"test.rb\", 12]\np B.const_source_location('C3')           # => [\"test.rb\", 7]\np B.const_source_location('C1')           # => [\"test.rb\", 2]\n\np B.const_source_location('C3', false)    # => nil  -- don't lookup in ancestors\n\np A.const_source_location('C2')           # => [\"test.rb\", 16] -- actual (last) definition place\n\np Object.const_source_location('B')       # => [\"test.rb\", 10] -- top-level constant could be looked through Object\np Object.const_source_location('A')       # => [\"test.rb\", 1] -- class reopening is NOT considered new definition\n\np B.const_source_location('A')            # => [\"test.rb\", 1]  -- because Object is in ancestors\np M.const_source_location('A')            # => [\"test.rb\", 1]  -- Object is not ancestor, but additionally checked for modules\n\np Object.const_source_location('A::C1')   # => [\"test.rb\", 2]  -- nesting is supported\np Object.const_source_location('String')  # => []  -- constant is defined in C code\n```"},"sortText":"000024","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"const_source_location(${1:T.any(Symbol, String)})${0}"}},{"label":"constants","kind":2,"detail":"Module#constants","documentation":{"kind":"markdown","value":"```ruby\nsig {params(inherit: T::Boolean).returns(T::Array[Symbol])}\ndef constants(inherit=…); end\n```\n\n---\n\nReturns an array of the names of the constants accessible in *mod*. This\nincludes the names of constants in any included modules (example at start of\nsection), unless the *inherit* parameter is set to `false`.\n\nThe implementation makes no guarantees about the order in which the\nconstants are yielded.\n\n```ruby\nIO.constants.include?(:SYNC)        #=> true\nIO.constants(false).include?(:SYNC) #=> false\n```\n\nAlso see\n[`Module#const_defined?`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-const_defined-3F)."},"sortText":"000025","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"constants${0}"}},{"label":"deprecate_constant","kind":2,"detail":"Module#deprecate_constant","documentation":{"kind":"markdown","value":"```ruby\nsig {params(_: T.untyped).returns(T.untyped)}\ndef deprecate_constant(*_); end\n```\n\n---\n\nMakes a list of existing constants deprecated. Attempt to refer to them will\nproduce a warning.\n\n```ruby\nmodule HTTP\n  NotFound = Exception.new\n  NOT_FOUND = NotFound # previous version of the library used this name\n\n  deprecate_constant :NOT_FOUND\nend\n\nHTTP::NOT_FOUND\n# warning: constant HTTP::NOT_FOUND is deprecated\n```"},"sortText":"000026","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"deprecate_constant${0}"}},{"label":"included_modules","kind":2,"detail":"Module#included_modules","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Module])}\ndef included_modules; end\n```\n\n---\n\nReturns the list of modules included or prepended in *mod* or one of *mod*'s\nancestors.\n\n```ruby\nmodule Sub\nend\n\nmodule Mixin\n  prepend Sub\nend\n\nmodule Outer\n  include Mixin\nend\n\nMixin.included_modules   #=> [Sub]\nOuter.included_modules   #=> [Sub, Mixin]\n```"},"sortText":"000027","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"included_modules${0}"}},{"label":"inspect","kind":2,"detail":"Module#inspect","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(String)}\ndef inspect; end\n```\n\n---\n\nReturns a string representing this module or class. For basic classes and\nmodules, this is the name. For singletons, we show information on the thing\nwe're attached to as well.\n\nAlias for:\n[`to_s`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-to_s)"},"sortText":"000028","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"inspect${0}"}},{"label":"instance_method","kind":2,"detail":"Module#instance_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(UnboundMethod)}\ndef instance_method(arg0); end\n```\n\n---\n\nReturns an `UnboundMethod` representing the given instance method in *mod*.\n\n```ruby\nclass Interpreter\n  def do_a() print \"there, \"; end\n  def do_d() print \"Hello \";  end\n  def do_e() print \"!\\n\";     end\n  def do_v() print \"Dave\";    end\n  Dispatcher = {\n    \"a\" => instance_method(:do_a),\n    \"d\" => instance_method(:do_d),\n    \"e\" => instance_method(:do_e),\n    \"v\" => instance_method(:do_v)\n  }\n  def interpret(string)\n    string.each_char {|b| Dispatcher[b].bind(self).call }\n  end\nend\n\ninterpreter = Interpreter.new\ninterpreter.interpret('dave')\n```\n\n*produces:*\n\n```ruby\nHello there, Dave!\n```"},"sortText":"000029","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"instance_method(${1:T.any(Symbol, String)})${0}"}},{"label":"prepend_features","kind":2,"detail":"Module#prepend_features","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef prepend_features(arg0); end\n```\n\n---\n\nWhen this module is prepended in another, Ruby calls\n[`prepend_features`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-prepend_features)\nin this module, passing it the receiving module in *mod*. Ruby's default\nimplementation is to overlay the constants, methods, and module variables of\nthis module to *mod* if this module has not already been added to *mod* or\none of its ancestors. See also\n[`Module#prepend`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-prepend)."},"sortText":"000030","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"prepend_features(${1:Module})${0}"}},{"label":"private_class_method","kind":2,"detail":"Module#private_class_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Array[T.any(Symbol, String)], Symbol, String)\n  )\n  .returns(T.class_of(A))\nend\ndef private_class_method(*arg0); end\n```\n\n---\n\nMakes existing class methods private. Often used to hide the default\nconstructor `new`.\n\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. An\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of Symbols and/or\nStrings is also accepted.\n\n```ruby\nclass SimpleSingleton  # Not thread safe\n  private_class_method :new\n  def SimpleSingleton.create(*args, &block)\n    @me = new(*args, &block) if ! @me\n    @me\n  end\nend\n```"},"sortText":"000031","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"private_class_method${0}"}},{"label":"private_constant","kind":2,"detail":"Module#private_constant","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.class_of(A))}\ndef private_constant(*arg0); end\n```\n\n---\n\nMakes a list of existing constants private."},"sortText":"000032","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"private_constant${0}"}},{"label":"private_instance_methods","kind":2,"detail":"Module#private_instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(include_super: T::Boolean).returns(T::Array[Symbol])}\ndef private_instance_methods(include_super=…); end\n```\n\n---\n\nReturns a list of the private instance methods defined in *mod*. If the\noptional parameter is `false`, the methods of any ancestors are not\nincluded.\n\n```ruby\nmodule Mod\n  def method1()  end\n  private :method1\n  def method2()  end\nend\nMod.instance_methods           #=> [:method2]\nMod.private_instance_methods   #=> [:method1]\n```"},"sortText":"000033","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"private_instance_methods${0}"}},{"label":"protected_instance_methods","kind":2,"detail":"Module#protected_instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(include_super: T::Boolean).returns(T::Array[Symbol])}\ndef protected_instance_methods(include_super=…); end\n```\n\n---\n\nReturns a list of the protected instance methods defined in *mod*. If the\noptional parameter is `false`, the methods of any ancestors are not\nincluded."},"sortText":"000034","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"protected_instance_methods${0}"}},{"label":"public_class_method","kind":2,"detail":"Module#public_class_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Array[T.any(Symbol, String)], Symbol, String)\n  )\n  .returns(T.class_of(A))\nend\ndef public_class_method(*arg0); end\n```\n\n---\n\nMakes a list of existing class methods public.\n\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) arguments are\nconverted to symbols. An\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of Symbols and/or\nStrings is also accepted."},"sortText":"000035","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"public_class_method${0}"}},{"label":"public_constant","kind":2,"detail":"Module#public_constant","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(T.class_of(A))}\ndef public_constant(*arg0); end\n```\n\n---\n\nMakes a list of existing constants public."},"sortText":"000036","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"public_constant${0}"}},{"label":"public_instance_method","kind":2,"detail":"Module#public_instance_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(UnboundMethod)}\ndef public_instance_method(arg0); end\n```\n\n---\n\nSimilar to *instance\\_method*, searches public method only."},"sortText":"000037","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"public_instance_method(${1:Symbol})${0}"}},{"label":"public_instance_methods","kind":2,"detail":"Module#public_instance_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(include_super: T::Boolean).returns(T::Array[Symbol])}\ndef public_instance_methods(include_super=…); end\n```\n\n---\n\nReturns a list of the public instance methods defined in *mod*. If the\noptional parameter is `false`, the methods of any ancestors are not\nincluded."},"sortText":"000038","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"public_instance_methods${0}"}},{"label":"refinements","kind":2,"detail":"Module#refinements","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Module])}\ndef refinements; end\n```\n\n---\n\np A.refinements\n```\n*produces:*\n\n```ruby\n[#<refinement:Integer@A>, #<refinement:String@B>]\n```"},"sortText":"000039","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"refinements${0}"}},{"label":"remove_class_variable","kind":2,"detail":"Module#remove_class_variable","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(T.untyped)}\ndef remove_class_variable(arg0); end\n```\n\n---\n\nRemoves the named class variable from the receiver, returning that\nvariable's value.\n\n```ruby\nclass Example\n  @@var = 99\n  puts remove_class_variable(:@@var)\n  p(defined? @@var)\nend\n```\n\n*produces:*\n\n```ruby\n99\nnil\n```"},"sortText":"000040","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"remove_class_variable(${1:Symbol})${0}"}},{"label":"remove_const","kind":2,"detail":"Module#remove_const","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(T.untyped)}\ndef remove_const(arg0); end\n```\n\n---\n\nRemoves the definition of the given constant, returning that constant's\nprevious value. If that constant referred to a module, this will not change\nthat module's name and can lead to confusion."},"sortText":"000041","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"remove_const(${1:Symbol})${0}"}},{"label":"ruby2_keywords","kind":2,"detail":"Module#ruby2_keywords","documentation":{"kind":"markdown","value":"```ruby\nsig {params(method_name: Symbol).returns(T.class_of(A))}\ndef ruby2_keywords(*method_name); end\n```\n\n---\n\nFor the given method names, marks the method as passing keywords through a\nnormal argument splat. This should only be called on methods that accept an\nargument splat (`*args`) but not explicit keywords or a keyword splat. It\nmarks the method such that if the method is called with keyword arguments,\nthe final hash argument is marked with a special flag such that if it is the\nfinal element of a normal argument splat to another method call, and that\nmethod call does not include explicit keywords or a keyword splat, the final\nelement is interpreted as keywords. In other words, keywords will be passed\nthrough the method to other methods.\n\nThis should only be used for methods that delegate keywords to another\nmethod, and only for backwards compatibility with Ruby versions before 3.0.\nSee\nhttps://www.ruby-lang.org/en/news/2019/12/12/separation-of-positional-and-keyword-arguments-in-ruby-3-0/\nfor details on why `ruby2_keywords` exists and when and how to use it.\n\nThis method will probably be removed at some point, as it exists only for\nbackwards compatibility. As it does not exist in Ruby versions before 2.7,\ncheck that the module responds to this method before calling it:\n\n```ruby\nmodule Mod\n  def foo(meth, *args, &block)\n    send(:\"do_#{meth}\", *args, &block)\n  end\n  ruby2_keywords(:foo) if respond_to?(:ruby2_keywords, true)\nend\n```\n\nHowever, be aware that if the `ruby2_keywords` method is removed, the\nbehavior of the `foo` method using the above approach will change so that\nthe method does not pass through keywords."},"sortText":"000042","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"ruby2_keywords${0}"}},{"label":"to_s","kind":2,"detail":"Module#to_s","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(String)}\ndef to_s; end\n```\n\n---\n\nReturns a string representing this module or class. For basic classes and\nmodules, this is the name. For singletons, we show information on the thing\nwe're attached to as well.\n\nAlso aliased as:\n[`inspect`](https://docs.ruby-lang.org/en/2.7.0/Module.html#method-i-inspect)"},"sortText":"000043","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"to_s${0}"}},{"label":"using","kind":2,"detail":"Module#using","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T.class_of(A))}\ndef using(arg0); end\n```\n\n---\n\nImport class refinements from *module* into the current class or module\ndefinition."},"sortText":"000044","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"using(${1:Module})${0}"}},{"label":"singleton_class","kind":2,"detail":"Object#singleton_class","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.untyped)}\ndef singleton_class; end\n```"},"sortText":"000045","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"singleton_class${0}"}},{"label":"class","kind":2,"detail":"Object#class","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.untyped)}\ndef class; end\n```"},"sortText":"000046","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"class${0}"}},{"label":"select","kind":2,"detail":"Kernel#select","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    read_array: T.nilable(T::Array[IO]),\n    write_array: T.nilable(T::Array[IO]),\n    error_array: T.nilable(T::Array[IO]),\n    timeout: T.nilable(T.any(Integer, Float))\n  )\n  .returns(T.nilable(T::Array[T::Array[IO]]))\nend\ndef select(read_array, write_array=…, error_array=…, timeout=…); end\n```\n\n---\n\nCalls select(2) system call. It monitors given arrays of\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects, waits until one\nor more of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects are\nready for reading, are ready for writing, and have pending exceptions\nrespectively, and returns an array that contains arrays of those\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects. It will return\n`nil` if optional *timeout* value is given and no\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object is ready in\n*timeout* seconds.\n\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\npeeks the buffer of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html)\nobjects for testing readability. If the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) buffer is not empty,\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nimmediately notifies readability. This \"peek\" only happens for\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects. It does not\nhappen for IO-like objects such as\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\n\nThe best way to use\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis invoking it after nonblocking methods such as read\\_nonblock,\nwrite\\_nonblock, etc. The methods raise an exception which is extended by\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nor\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html).\nThe modules notify how the caller should wait with\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\nIf\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nis raised, the caller should wait for reading. If\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html)\nis raised, the caller should wait for writing.\n\nSo, blocking read (readpartial) can be emulated using read\\_nonblock and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nas follows:\n\n```ruby\nbegin\n  result = io_like.read_nonblock(maxlen)\nrescue IO::WaitReadable\n  IO.select([io_like])\n  retry\nrescue IO::WaitWritable\n  IO.select(nil, [io_like])\n  retry\nend\n```\n\nEspecially, the combination of nonblocking methods and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis preferred for [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) like\nobjects such as\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\nIt has to\\_io method to return underlying\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object.\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ncalls to\\_io to obtain the file descriptor to wait.\n\nThis means that readability notified by\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ndoesn't mean readability from\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\nobject.\n\nThe most likely situation is that\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\nbuffers some data.\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ndoesn't see the buffer. So\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ncan block when\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\ndoesn't block.\n\nHowever, several more complicated situations exist.\n\nSSL is a protocol which is sequence of records. The record consists of\nmultiple bytes. So, the remote side of SSL sends a partial record,\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nnotifies readability but\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\ncannot decrypt a byte and\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\nwill block.\n\nAlso, the remote side can request SSL renegotiation which forces the local\nSSL engine to write some data. This means\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\nmay invoke write system call and it can block. In such a situation,\n[`OpenSSL::SSL::SSLSocket#read_nonblock`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-read_nonblock)\nraises\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html)\ninstead of blocking. So, the caller should wait for ready for writability as\nabove example.\n\nThe combination of nonblocking methods and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis also useful for streams such as tty, pipe socket socket when multiple\nprocesses read from a stream.\n\nFinally, Linux kernel developers don't guarantee that readability of\nselect(2) means readability of following read(2) even for a single process.\nSee select(2) manual on GNU/Linux system.\n\nInvoking\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nbefore\n[`IO#readpartial`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-readpartial)\nworks well as usual. However it is not the best way to use\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\n\nThe writability notified by select(2) doesn't show how many bytes are\nwritable.\n[`IO#write`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-write)\nmethod blocks until given whole string is written. So, `IO#write(two or more\nbytes)` can block after writability is notified by\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\n[`IO#write_nonblock`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-write_nonblock)\nis required to avoid the blocking.\n\nBlocking write (write) can be emulated using write\\_nonblock and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nas follows:\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nshould also be rescued for SSL renegotiation in\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\n\n```ruby\nwhile 0 < string.bytesize\n  begin\n    written = io_like.write_nonblock(string)\n  rescue IO::WaitReadable\n    IO.select([io_like])\n    retry\n  rescue IO::WaitWritable\n    IO.select(nil, [io_like])\n    retry\n  end\n  string = string.byteslice(written..-1)\nend\n```\n\n### Parameters\nread\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait until ready for read\nwrite\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait until ready for write\nerror\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait for exceptions\ntimeout\n:   a numeric value in second\n\n\n### Example\n\n```ruby\nrp, wp = IO.pipe\nmesg = \"ping \"\n100.times {\n  # IO.select follows IO#read.  Not the best way to use IO.select.\n  rs, ws, = IO.select([rp], [wp])\n  if r = rs[0]\n    ret = r.read(5)\n    print ret\n    case ret\n    when /ping/\n      mesg = \"pong\\n\"\n    when /pong/\n      mesg = \"ping \"\n    end\n  end\n  if w = ws[0]\n    w.write(mesg)\n  end\n}\n```\n\n*produces:*\n\n```ruby\nping pong\nping pong\nping pong\n(snipped)\nping\n```"},"sortText":"000047","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"select(${1:T.nilable(T::Array[IO])})${0}"}},{"label":"send","kind":2,"detail":"Kernel#send","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(String, Symbol), arg1: T.anything).returns(T.untyped)}\ndef send(arg0, *arg1); end\n```"},"sortText":"000048","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"send(${1:T.any(String, Symbol)})${0}"}},{"label":"send","kind":2,"detail":"Kernel#send (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    arg1: T.anything,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef send (overload.1)(arg0, *arg1, &blk); end\n```"},"sortText":"000049","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"send(${1:T.any(String, Symbol)})${0}"}},{"label":"set_trace_func","kind":2,"detail":"Kernel#set_trace_func","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.nilable(T.proc.params(arg0: String, arg1: String, arg2: Integer, arg3: T.nilable(Symbol), arg4: T.nilable(Binding), arg5: Object).returns(T.untyped))\n  )\n  .void\nend\ndef set_trace_func(arg0); end\n```\n\n---\n\nEstablishes _proc_ as the handler for tracing, or disables\ntracing if the parameter is +nil+.\n\n*Note:* this method is obsolete, please use TracePoint instead.\n\n_proc_ takes up to six parameters:\n\n*   an event name\n*   a filename\n*   a line number\n*   an object id\n*   a binding\n*   the name of a class\n\n_proc_ is invoked whenever an event occurs.\n\nEvents are:\n\n+c-call+:: call a C-language routine\n+c-return+:: return from a C-language routine\n+call+:: call a Ruby method\n+class+:: start a class or module definition\n+end+:: finish a class or module definition\n+line+:: execute code on a new line\n+raise+:: raise an exception\n+return+:: return from a Ruby method\n\nTracing is disabled within the context of _proc_.\n\n    class Test\n    def test\n      a = 1\n      b = 2\n    end\n    end\n\n    set_trace_func proc { |event, file, line, id, binding, classname|\n       printf \"%8s %s:%-2d %10s %8s\\n\", event, file, line, id, classname\n    }\n    t = Test.new\n    t.test\n\n      line prog.rb:11               false\n    c-call prog.rb:11        new    Class\n    c-call prog.rb:11 initialize   Object\n  c-return prog.rb:11 initialize   Object\n  c-return prog.rb:11        new    Class\n      line prog.rb:12               false\n      call prog.rb:2        test     Test\n      line prog.rb:3        test     Test\n      line prog.rb:4        test     Test\n    return prog.rb:4        test     Test"},"sortText":"000050","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"set_trace_func(${1:T.nilable(T.proc.params(arg0: String, arg1: String, arg2: Integer, arg3: T.nilable(Symbol), arg4: T.nilable(Binding), arg5: Object).returns(T.untyped))})${0}"}},{"label":"set_trace_func","kind":2,"detail":"Kernel#set_trace_func (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: NilClass).returns(NilClass)}\ndef set_trace_func (overload.1)(arg0); end\n```\n\n---\n\nEstablishes _proc_ as the handler for tracing, or disables\ntracing if the parameter is +nil+.\n\n*Note:* this method is obsolete, please use TracePoint instead.\n\n_proc_ takes up to six parameters:\n\n*   an event name\n*   a filename\n*   a line number\n*   an object id\n*   a binding\n*   the name of a class\n\n_proc_ is invoked whenever an event occurs.\n\nEvents are:\n\n+c-call+:: call a C-language routine\n+c-return+:: return from a C-language routine\n+call+:: call a Ruby method\n+class+:: start a class or module definition\n+end+:: finish a class or module definition\n+line+:: execute code on a new line\n+raise+:: raise an exception\n+return+:: return from a Ruby method\n\nTracing is disabled within the context of _proc_.\n\n    class Test\n    def test\n      a = 1\n      b = 2\n    end\n    end\n\n    set_trace_func proc { |event, file, line, id, binding, classname|\n       printf \"%8s %s:%-2d %10s %8s\\n\", event, file, line, id, classname\n    }\n    t = Test.new\n    t.test\n\n      line prog.rb:11               false\n    c-call prog.rb:11        new    Class\n    c-call prog.rb:11 initialize   Object\n  c-return prog.rb:11 initialize   Object\n  c-return prog.rb:11        new    Class\n      line prog.rb:12               false\n      call prog.rb:2        test     Test\n      line prog.rb:3        test     Test\n      line prog.rb:4        test     Test\n    return prog.rb:4        test     Test"},"sortText":"000051","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"set_trace_func(${1:NilClass})${0}"}},{"label":"singleton_method","kind":2,"detail":"Kernel#singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef singleton_method(arg0); end\n```"},"sortText":"000052","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"singleton_method(${1:Symbol})${0}"}},{"label":"singleton_methods","kind":2,"detail":"Kernel#singleton_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef singleton_methods(all=…); end\n```"},"sortText":"000053","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"singleton_methods${0}"}},{"label":"sleep","kind":2,"detail":"Kernel#sleep","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef sleep; end\n```\n\n---\n\nSuspends the current thread for *duration* seconds (which may be any number,\nincluding a `Float` with fractional seconds). Returns the actual number of\nseconds slept (rounded), which may be less than that asked for if another\nthread calls\n[`Thread#run`](https://docs.ruby-lang.org/en/2.7.0/Thread.html#method-i-run).\nCalled without an argument, sleep() will sleep forever.\n\n```ruby\nTime.new    #=> 2008-03-08 19:56:19 +0900\nsleep 1.2   #=> 1\nTime.new    #=> 2008-03-08 19:56:20 +0900\nsleep 1.9   #=> 2\nTime.new    #=> 2008-03-08 19:56:22 +0900\n```"},"sortText":"000054","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"sleep${0}"}},{"label":"sleep","kind":2,"detail":"Kernel#sleep (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(duration: Numeric).returns(Integer)}\ndef sleep (overload.1)(duration); end\n```\n\n---\n\nSuspends the current thread for *duration* seconds (which may be any number,\nincluding a `Float` with fractional seconds). Returns the actual number of\nseconds slept (rounded), which may be less than that asked for if another\nthread calls\n[`Thread#run`](https://docs.ruby-lang.org/en/2.7.0/Thread.html#method-i-run).\nCalled without an argument, sleep() will sleep forever.\n\n```ruby\nTime.new    #=> 2008-03-08 19:56:19 +0900\nsleep 1.2   #=> 1\nTime.new    #=> 2008-03-08 19:56:20 +0900\nsleep 1.9   #=> 2\nTime.new    #=> 2008-03-08 19:56:22 +0900\n```"},"sortText":"000055","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"sleep(${1:Numeric})${0}"}},{"label":"sprintf","kind":2,"detail":"Kernel#sprintf","documentation":{"kind":"markdown","value":"```ruby\nsig {params(format: String, args: BasicObject).returns(String)}\ndef sprintf(format, *args); end\n```\n\n---\n\nReturns the string resulting from applying *format\\_string* to any\nadditional arguments. Within the format string, any characters other than\nformat sequences are copied to the result.\n\nThe syntax of a format sequence is as follows.\n\n```\n%[flags][width][.precision]type\n```\n\nA format sequence consists of a percent sign, followed by optional flags,\nwidth, and precision indicators, then terminated with a field type\ncharacter. The field type controls how the corresponding `sprintf` argument\nis to be interpreted, while the flags modify that interpretation.\n\nThe field type characters are:\n\n```\nField |  Integer Format\n------+--------------------------------------------------------------\n  b   | Convert argument as a binary number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..1'.\n  B   | Equivalent to `b', but uses an uppercase 0B for prefix\n      | in the alternative format by #.\n  d   | Convert argument as a decimal number.\n  i   | Identical to `d'.\n  o   | Convert argument as an octal number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..7'.\n  u   | Identical to `d'.\n  x   | Convert argument as a hexadecimal number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..f' (representing an infinite string of\n      | leading 'ff's).\n  X   | Equivalent to `x', but uses uppercase letters.\n\nField |  Float Format\n------+--------------------------------------------------------------\n  e   | Convert floating point argument into exponential notation\n      | with one digit before the decimal point as [-]d.dddddde[+-]dd.\n      | The precision specifies the number of digits after the decimal\n      | point (defaulting to six).\n  E   | Equivalent to `e', but uses an uppercase E to indicate\n      | the exponent.\n  f   | Convert floating point argument as [-]ddd.dddddd,\n      | where the precision specifies the number of digits after\n      | the decimal point.\n  g   | Convert a floating point number using exponential form\n      | if the exponent is less than -4 or greater than or\n      | equal to the precision, or in dd.dddd form otherwise.\n      | The precision specifies the number of significant digits.\n  G   | Equivalent to `g', but use an uppercase `E' in exponent form.\n  a   | Convert floating point argument as [-]0xh.hhhhp[+-]dd,\n      | which is consisted from optional sign, \"0x\", fraction part\n      | as hexadecimal, \"p\", and exponential part as decimal.\n  A   | Equivalent to `a', but use uppercase `X' and `P'.\n\nField |  Other Format\n------+--------------------------------------------------------------\n  c   | Argument is the numeric code for a single character or\n      | a single character string itself.\n  p   | The valuing of argument.inspect.\n  s   | Argument is a string to be substituted.  If the format\n      | sequence contains a precision, at most that many characters\n      | will be copied.\n  %   | A percent sign itself will be displayed.  No argument taken.\n```\n\nThe flags modifies the behavior of the formats. The flag characters are:\n\n```\nFlag     | Applies to    | Meaning\n---------+---------------+-----------------------------------------\nspace    | bBdiouxX      | Leave a space at the start of\n         | aAeEfgG       | non-negative numbers.\n         | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n         |               | a minus sign with absolute value for\n         |               | negative values.\n---------+---------------+-----------------------------------------\n(digit)$ | all           | Specifies the absolute argument number\n         |               | for this field.  Absolute and relative\n         |               | argument numbers cannot be mixed in a\n         |               | sprintf string.\n---------+---------------+-----------------------------------------\n #       | bBoxX         | Use an alternative format.\n         | aAeEfgG       | For the conversions `o', increase the precision\n         |               | until the first digit will be `0' if\n         |               | it is not formatted as complements.\n         |               | For the conversions `x', `X', `b' and `B'\n         |               | on non-zero, prefix the result with ``0x'',\n         |               | ``0X'', ``0b'' and ``0B'', respectively.\n         |               | For `a', `A', `e', `E', `f', `g', and 'G',\n         |               | force a decimal point to be added,\n         |               | even if no digits follow.\n         |               | For `g' and 'G', do not remove trailing zeros.\n---------+---------------+-----------------------------------------\n+        | bBdiouxX      | Add a leading plus sign to non-negative\n         | aAeEfgG       | numbers.\n         | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n         |               | a minus sign with absolute value for\n         |               | negative values.\n---------+---------------+-----------------------------------------\n-        | all           | Left-justify the result of this conversion.\n---------+---------------+-----------------------------------------\n0 (zero) | bBdiouxX      | Pad with zeros, not spaces.\n         | aAeEfgG       | For `o', `x', `X', `b' and `B', radix-1\n         | (numeric fmt) | is used for negative numbers formatted as\n         |               | complements.\n---------+---------------+-----------------------------------------\n*        | all           | Use the next argument as the field width.\n         |               | If negative, left-justify the result. If the\n         |               | asterisk is followed by a number and a dollar\n         |               | sign, use the indicated argument as the width.\n```\n\nExamples of flags:\n\n```ruby\n# `+' and space flag specifies the sign of non-negative numbers.\nsprintf(\"%d\", 123)  #=> \"123\"\nsprintf(\"%+d\", 123) #=> \"+123\"\nsprintf(\"% d\", 123) #=> \" 123\"\n\n# `#' flag for `o' increases number of digits to show `0'.\n# `+' and space flag changes format of negative numbers.\nsprintf(\"%o\", 123)   #=> \"173\"\nsprintf(\"%#o\", 123)  #=> \"0173\"\nsprintf(\"%+o\", -123) #=> \"-173\"\nsprintf(\"%o\", -123)  #=> \"..7605\"\nsprintf(\"%#o\", -123) #=> \"..7605\"\n\n# `#' flag for `x' add a prefix `0x' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf(\"%x\", 123)   #=> \"7b\"\nsprintf(\"%#x\", 123)  #=> \"0x7b\"\nsprintf(\"%+x\", -123) #=> \"-7b\"\nsprintf(\"%x\", -123)  #=> \"..f85\"\nsprintf(\"%#x\", -123) #=> \"0x..f85\"\nsprintf(\"%#x\", 0)    #=> \"0\"\n\n# `#' for `X' uses the prefix `0X'.\nsprintf(\"%X\", 123)  #=> \"7B\"\nsprintf(\"%#X\", 123) #=> \"0X7B\"\n\n# `#' flag for `b' add a prefix `0b' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf(\"%b\", 123)   #=> \"1111011\"\nsprintf(\"%#b\", 123)  #=> \"0b1111011\"\nsprintf(\"%+b\", -123) #=> \"-1111011\"\nsprintf(\"%b\", -123)  #=> \"..10000101\"\nsprintf(\"%#b\", -123) #=> \"0b..10000101\"\nsprintf(\"%#b\", 0)    #=> \"0\"\n\n# `#' for `B' uses the prefix `0B'.\nsprintf(\"%B\", 123)  #=> \"1111011\"\nsprintf(\"%#B\", 123) #=> \"0B1111011\"\n\n# `#' for `e' forces to show the decimal point.\nsprintf(\"%.0e\", 1)  #=> \"1e+00\"\nsprintf(\"%#.0e\", 1) #=> \"1.e+00\"\n\n# `#' for `f' forces to show the decimal point.\nsprintf(\"%.0f\", 1234)  #=> \"1234\"\nsprintf(\"%#.0f\", 1234) #=> \"1234.\"\n\n# `#' for `g' forces to show the decimal point.\n# It also disables stripping lowest zeros.\nsprintf(\"%g\", 123.4)   #=> \"123.4\"\nsprintf(\"%#g\", 123.4)  #=> \"123.400\"\nsprintf(\"%g\", 123456)  #=> \"123456\"\nsprintf(\"%#g\", 123456) #=> \"123456.\"\n```\n\nThe field width is an optional integer, followed optionally by a period and\na precision. The width specifies the minimum number of characters that will\nbe written to the result for this field.\n\nExamples of width:\n\n```ruby\n# padding is done by spaces,       width=20\n# 0 or radix-1.             <------------------>\nsprintf(\"%20d\", 123)   #=> \"                 123\"\nsprintf(\"%+20d\", 123)  #=> \"                +123\"\nsprintf(\"%020d\", 123)  #=> \"00000000000000000123\"\nsprintf(\"%+020d\", 123) #=> \"+0000000000000000123\"\nsprintf(\"% 020d\", 123) #=> \" 0000000000000000123\"\nsprintf(\"%-20d\", 123)  #=> \"123                 \"\nsprintf(\"%-+20d\", 123) #=> \"+123                \"\nsprintf(\"%- 20d\", 123) #=> \" 123                \"\nsprintf(\"%020x\", -123) #=> \"..ffffffffffffffff85\"\n```\n\nFor numeric fields, the precision controls the number of decimal places\ndisplayed. For string fields, the precision determines the maximum number of\ncharacters to be copied from the string. (Thus, the format sequence\n`%10.10s` will always contribute exactly ten characters to the result.)\n\nExamples of precisions:\n\n```ruby\n# precision for `d', 'o', 'x' and 'b' is\n# minimum number of digits               <------>\nsprintf(\"%20.8d\", 123)  #=> \"            00000123\"\nsprintf(\"%20.8o\", 123)  #=> \"            00000173\"\nsprintf(\"%20.8x\", 123)  #=> \"            0000007b\"\nsprintf(\"%20.8b\", 123)  #=> \"            01111011\"\nsprintf(\"%20.8d\", -123) #=> \"           -00000123\"\nsprintf(\"%20.8o\", -123) #=> \"            ..777605\"\nsprintf(\"%20.8x\", -123) #=> \"            ..ffff85\"\nsprintf(\"%20.8b\", -11)  #=> \"            ..110101\"\n\n# \"0x\" and \"0b\" for `#x' and `#b' is not counted for\n# precision but \"0\" for `#o' is counted.  <------>\nsprintf(\"%#20.8d\", 123)  #=> \"            00000123\"\nsprintf(\"%#20.8o\", 123)  #=> \"            00000173\"\nsprintf(\"%#20.8x\", 123)  #=> \"          0x0000007b\"\nsprintf(\"%#20.8b\", 123)  #=> \"          0b01111011\"\nsprintf(\"%#20.8d\", -123) #=> \"           -00000123\"\nsprintf(\"%#20.8o\", -123) #=> \"            ..777605\"\nsprintf(\"%#20.8x\", -123) #=> \"          0x..ffff85\"\nsprintf(\"%#20.8b\", -11)  #=> \"          0b..110101\"\n\n# precision for `e' is number of\n# digits after the decimal point           <------>\nsprintf(\"%20.8e\", 1234.56789) #=> \"      1.23456789e+03\"\n\n# precision for `f' is number of\n# digits after the decimal point               <------>\nsprintf(\"%20.8f\", 1234.56789) #=> \"       1234.56789000\"\n\n# precision for `g' is number of\n# significant digits                          <------->\nsprintf(\"%20.8g\", 1234.56789) #=> \"           1234.5679\"\n\n#                                         <------->\nsprintf(\"%20.8g\", 123456789)  #=> \"       1.2345679e+08\"\n\n# precision for `s' is\n# maximum number of characters                    <------>\nsprintf(\"%20.8s\", \"string test\") #=> \"            string t\"\n```\n\nExamples:\n\n```ruby\nsprintf(\"%d %04x\", 123, 123)               #=> \"123 007b\"\nsprintf(\"%08b '%4s'\", 123, 123)            #=> \"01111011 ' 123'\"\nsprintf(\"%1$*2$s %2$d %1$s\", \"hello\", 8)   #=> \"   hello 8 hello\"\nsprintf(\"%1$*2$s %2$d\", \"hello\", -8)       #=> \"hello    -8\"\nsprintf(\"%+g:% g:%-g\", 1.23, 1.23, 1.23)   #=> \"+1.23: 1.23:1.23\"\nsprintf(\"%u\", -123)                        #=> \"-123\"\n```\n\nFor more complex formatting, Ruby supports a reference by name. %<name>s\nstyle uses format style, but %{name} style doesn't.\n\nExamples:\n\n```ruby\nsprintf(\"%<foo>d : %<bar>f\", { :foo => 1, :bar => 2 })\n  #=> 1 : 2.000000\nsprintf(\"%{foo}f\", { :foo => 1 })\n  # => \"1f\"\n```\n\n\nAlso aliased as:\n[`format`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-format)"},"sortText":"000056","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"sprintf(${1:String})${0}"}},{"label":"srand","kind":2,"detail":"Kernel#srand","documentation":{"kind":"markdown","value":"```ruby\nsig {params(number: Numeric).returns(Numeric)}\ndef srand(number=…); end\n```\n\n---\n\nSeeds the system pseudo-random number generator, with `number`. The previous\nseed value is returned.\n\nIf `number` is omitted, seeds the generator using a source of entropy\nprovided by the operating system, if available (/dev/urandom on Unix systems\nor the RSA cryptographic provider on Windows), which is then combined with\nthe time, the process id, and a sequence number.\n\nsrand may be used to ensure repeatable sequences of pseudo-random numbers\nbetween different runs of the program. By setting the seed to a known value,\nprograms can be made deterministic during testing.\n\n```ruby\nsrand 1234               # => 268519324636777531569100071560086917274\n[ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]\n[ rand(10), rand(1000) ] # => [4, 664]\nsrand 1234               # => 1234\n[ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]\n```"},"sortText":"000057","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"srand${0}"}},{"label":"syscall","kind":2,"detail":"Kernel#syscall","documentation":{"kind":"markdown","value":"```ruby\nsig {params(num: Integer, args: BasicObject).returns(T.untyped)}\ndef syscall(num, *args); end\n```\n\n---\n\nCalls the operating system function identified by *num* and returns the\nresult of the function or raises\n[`SystemCallError`](https://docs.ruby-lang.org/en/2.7.0/SystemCallError.html)\nif it failed.\n\nArguments for the function can follow *num*. They must be either `String`\nobjects or `Integer` objects. A `String` object is passed as a pointer to\nthe byte sequence. An `Integer` object is passed as an integer whose bit\nsize is the same as a pointer. Up to nine parameters may be passed.\n\nThe function identified by *num* is system dependent. On some Unix systems,\nthe numbers may be obtained from a header file called `syscall.h`.\n\n```ruby\nsyscall 4, 1, \"hello\\n\", 6   # '4' is write(2) on our box\n```\n\n*produces:*\n\n```ruby\nhello\n```\n\nCalling `syscall` on a platform which does not have any way to an arbitrary\nsystem function just fails with\n[`NotImplementedError`](https://docs.ruby-lang.org/en/2.7.0/NotImplementedError.html).\n\n**Note:** `syscall` is essentially unsafe and unportable. Feel free to shoot\nyour foot. The DL\n([`Fiddle`](https://docs.ruby-lang.org/en/2.7.0/Fiddle.html)) library is\npreferred for safer and a bit more portable programming."},"sortText":"000058","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"syscall(${1:Integer})${0}"}},{"label":"system","kind":2,"detail":"Kernel#system","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    env: T.any(String, [String, String], T::Hash[String, T.nilable(String)]),\n    argv0: T.any(String, [String, String]),\n    args: String,\n    options: T.untyped\n  )\n  .returns(T.nilable(T::Boolean))\nend\ndef system(env, argv0=…, *args, **options); end\n```\n\n---\n\nExecutes *command...* in a subshell. *command...* is one of following forms.\n\n`commandline`\n:   command line string which is passed to the standard shell\n`cmdname, arg1, ...`\n:   command name and one or more arguments (no shell)\n`[cmdname, argv0], arg1, ...`\n:   command name, `argv[0]` and zero or more arguments (no shell)\n\n\nsystem returns `true` if the command gives zero exit status, `false` for non\nzero exit status. Returns `nil` if command execution fails. An error status\nis available in `$?`.\n\nIf the `exception: true` argument is passed, the method raises an exception\ninstead of returning `false` or `nil`.\n\nThe arguments are processed in the same way as for\n[`Kernel#spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn).\n\nThe hash arguments, env and options, are same as\n[`exec`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-exec) and\n[`spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn).\nSee\n[`Kernel#spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn)\nfor details.\n\n```ruby\nsystem(\"echo *\")\nsystem(\"echo\", \"*\")\n```\n\n*produces:*\n\n```\nconfig.h main.rb\n*\n```\n\nError handling:\n\n```ruby\nsystem(\"cat nonexistent.txt\")\n# => false\nsystem(\"catt nonexistent.txt\")\n# => nil\n\nsystem(\"cat nonexistent.txt\", exception: true)\n# RuntimeError (Command failed with exit 1: cat)\nsystem(\"catt nonexistent.txt\", exception: true)\n# Errno::ENOENT (No such file or directory - catt)\n```\n\nSee\n[`Kernel#exec`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-exec)\nfor the standard shell."},"sortText":"000059","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"system(${1:T.any(String, [String, String], T::Hash[String, T.nilable(String)])})${0}"}},{"label":"Hash","kind":2,"detail":"Kernel#Hash","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: Object\n  )\n  .returns(T::Hash[T.type_parameter(:K), T.type_parameter(:V)])\nend\ndef Hash(x); end\n```\n\n---\n\nConverts *arg* to a [`Hash`](https://docs.ruby-lang.org/en/2.7.0/Hash.html)\nby calling *arg*`.to_hash`. Returns an empty\n[`Hash`](https://docs.ruby-lang.org/en/2.7.0/Hash.html) when *arg* is `nil`\nor `[]`.\n\n```ruby\nHash([])          #=> {}\nHash(nil)         #=> {}\nHash(key: :value) #=> {:key => :value}\nHash([1, 2, 3])   #=> TypeError\n```"},"sortText":"000060","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"Hash(${1:Object})${0}"}},{"label":"caller_locations","kind":2,"detail":"Kernel#caller_locations","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: Integer,\n    length: Integer\n  )\n  .returns(T.nilable(T::Array[Thread::Backtrace::Location]))\nend\ndef caller_locations(start_or_range=…, length=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing backtrace location\nobjects.\n\nSee\n[`Thread::Backtrace::Location`](https://docs.ruby-lang.org/en/2.7.0/Thread/Backtrace/Location.html)\nfor more information.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range."},"sortText":"000061","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"caller_locations${0}"}},{"label":"caller_locations","kind":2,"detail":"Kernel#caller_locations (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: T::Range[Integer]\n  )\n  .returns(T.nilable(T::Array[Thread::Backtrace::Location]))\nend\ndef caller_locations (overload.1)(start_or_range=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing backtrace location\nobjects.\n\nSee\n[`Thread::Backtrace::Location`](https://docs.ruby-lang.org/en/2.7.0/Thread/Backtrace/Location.html)\nfor more information.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range."},"sortText":"000062","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"caller_locations${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    symbol: T.any(Symbol, String),\n    method: T.any(Proc, Method, UnboundMethod)\n  )\n  .returns(Symbol)\nend\ndef define_singleton_method(symbol, method=…); end\n```"},"sortText":"000063","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"define_singleton_method(${1:T.any(Symbol, String)})${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(symbol: T.any(Symbol, String), blk: T.untyped).returns(Symbol)}\ndef define_singleton_method (overload.1)(symbol, &blk); end\n```"},"sortText":"000064","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"define_singleton_method(${1:T.any(Symbol, String)})${0}"}},{"label":"display","kind":2,"detail":"Kernel#display","documentation":{"kind":"markdown","value":"```ruby\nsig {params(port: IO).returns(NilClass)}\ndef display(port); end\n```"},"sortText":"000065","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"display(${1:IO})${0}"}},{"label":"gets","kind":2,"detail":"Kernel#gets","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(String)}\ndef gets(arg0=…, arg1=…); end\n```\n\n---\n\nReturns (and assigns to `$_`) the next line from the list of files in `ARGV`\n(or `$*`), or from standard input if no files are present on the command\nline. Returns `nil` at end of file. The optional argument specifies the\nrecord separator. The separator is included with the contents of each\nrecord. A separator of `nil` reads the entire contents, and a zero-length\nseparator reads the input one paragraph at a time, where paragraphs are\ndivided by two consecutive newlines. If the first argument is an integer, or\noptional second argument is given, the returning string would not be longer\nthan the given value in bytes. If multiple filenames are present in `ARGV`,\n`gets(nil)` will read the contents one file at a time.\n\n```ruby\nARGV << \"testfile\"\nprint while gets\n```\n\n*produces:*\n\n```ruby\nThis is line one\nThis is line two\nThis is line three\nAnd so on...\n```\n\nThe style of programming using `$_` as an implicit parameter is gradually\nlosing favor in the Ruby community."},"sortText":"000066","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"gets${0}"}},{"label":"global_variables","kind":2,"detail":"Kernel#global_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef global_variables; end\n```\n\n---\n\nReturns an array of the names of global variables. This includes special\nregexp global variables such as `$~` and `$+`, but does not include the\nnumbered regexp global variables (`$1`, `$2`, etc.).\n\n```ruby\nglobal_variables.grep /std/   #=> [:$stdin, :$stdout, :$stderr]\n```"},"sortText":"000067","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"global_variables${0}"}},{"label":"hash","kind":2,"detail":"Kernel#hash","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef hash; end\n```"},"sortText":"000068","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"hash${0}"}},{"label":"instance_of?","kind":2,"detail":"Kernel#instance_of?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T::Class[T.anything]).returns(T::Boolean)}\ndef instance_of?(arg0); end\n```"},"sortText":"000069","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"instance_of?(${1:T::Class[T.anything]})${0}"}},{"label":"instance_variable_defined?","kind":2,"detail":"Kernel#instance_variable_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef instance_variable_defined?(arg0); end\n```"},"sortText":"000070","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"instance_variable_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"instance_variable_get","kind":2,"detail":"Kernel#instance_variable_get","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.untyped)}\ndef instance_variable_get(arg0); end\n```"},"sortText":"000071","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"instance_variable_get(${1:T.any(Symbol, String)})${0}"}},{"label":"instance_variable_set","kind":2,"detail":"Kernel#instance_variable_set","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String), arg1: BasicObject).returns(T.untyped)}\ndef instance_variable_set(arg0, arg1); end\n```"},"sortText":"000072","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"instance_variable_set(${1:T.any(Symbol, String)}, ${2:BasicObject})${0}"}},{"label":"instance_variables","kind":2,"detail":"Kernel#instance_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef instance_variables; end\n```"},"sortText":"000073","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"instance_variables${0}"}},{"label":"is_a?","kind":2,"detail":"Kernel#is_a?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T::Boolean)}\ndef is_a?(arg0); end\n```"},"sortText":"000074","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"is_a?(${1:Module})${0}"}},{"label":"itself","kind":2,"detail":"Kernel#itself","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.class_of(A))}\ndef itself; end\n```\n\n---\n\nReturns the receiver `obj`.\n\n```ruby\nobj = Object.new; obj.itself.object_id == o.object_id # => true\n```"},"sortText":"000075","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"itself${0}"}},{"label":"local_variables","kind":2,"detail":"Kernel#local_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef local_variables; end\n```\n\n---\n\nReturns the names of the current local variables.\n\n```ruby\nfred = 1\nfor i in 1..10\n   # ...\nend\nlocal_variables   #=> [:fred, :i]\n```"},"sortText":"000076","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"local_variables${0}"}},{"label":"methods","kind":2,"detail":"Kernel#methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(regular: T::Boolean).returns(T::Array[Symbol])}\ndef methods(regular=…); end\n```"},"sortText":"000077","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"methods${0}"}},{"label":"private_methods","kind":2,"detail":"Kernel#private_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef private_methods(all=…); end\n```"},"sortText":"000078","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"private_methods${0}"}},{"label":"protected_methods","kind":2,"detail":"Kernel#protected_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef protected_methods(all=…); end\n```"},"sortText":"000079","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"protected_methods${0}"}},{"label":"public_methods","kind":2,"detail":"Kernel#public_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef public_methods(all=…); end\n```"},"sortText":"000080","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"public_methods${0}"}},{"label":"public_send","kind":2,"detail":"Kernel#public_send","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef public_send(arg0, *args, &blk); end\n```"},"sortText":"000081","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"public_send(${1:T.any(Symbol, String)})${0}"}},{"label":"puts","kind":2,"detail":"Kernel#puts","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BasicObject).returns(NilClass)}\ndef puts(*arg0); end\n```\n\n---\n\nEquivalent to\n\n```\n$stdout.puts(obj, ...)\n```"},"sortText":"000082","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"puts${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef raise; end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000083","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"raise${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Class[T.anything], Exception, String)\n  )\n  .returns(T.noreturn)\nend\ndef raise (overload.1)(arg0=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000084","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"raise${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Class[T.anything], Exception),\n    arg1: T.untyped,\n    arg2: T.nilable(T::Array[String])\n  )\n  .returns(T.noreturn)\nend\ndef raise (overload.2)(arg0=…, arg1=…, arg2=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000085","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"raise${0}"}},{"label":"readlines","kind":2,"detail":"Kernel#readlines","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(T::Array[String])}\ndef readlines(arg0=…, arg1=…); end\n```\n\n---\n\nReturns an array containing the lines returned by calling `Kernel.gets(sep)`\nuntil the end of file."},"sortText":"000086","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"readlines${0}"}},{"label":"remove_instance_variable","kind":2,"detail":"Kernel#remove_instance_variable","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(T.untyped)}\ndef remove_instance_variable(arg0); end\n```"},"sortText":"000087","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"remove_instance_variable(${1:Symbol})${0}"}},{"label":"respond_to?","kind":2,"detail":"Kernel#respond_to?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    include_all: T.untyped\n  )\n  .returns(T::Boolean)\nend\ndef respond_to?(arg0, include_all=…); end\n```"},"sortText":"000088","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"respond_to?(${1:T.any(String, Symbol)})${0}"}},{"label":"test","kind":2,"detail":"Kernel#test","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    cmd: String,\n    file1: String,\n    file2: String\n  )\n  .returns(T.any(TrueClass, FalseClass, Time))\nend\ndef test(cmd, file1, file2=…); end\n```\n\n---\n\nUses the character `cmd` to perform various tests on `file1` (first table\nbelow) or on `file1` and `file2` (second table).\n\n[`File`](https://docs.ruby-lang.org/en/2.7.0/File.html) tests on a single\nfile:\n\n```\nCmd    Returns   Meaning\n\"A\"  | Time    | Last access time for file1\n\"b\"  | boolean | True if file1 is a block device\n\"c\"  | boolean | True if file1 is a character device\n\"C\"  | Time    | Last change time for file1\n\"d\"  | boolean | True if file1 exists and is a directory\n\"e\"  | boolean | True if file1 exists\n\"f\"  | boolean | True if file1 exists and is a regular file\n\"g\"  | boolean | True if file1 has the \\CF{setgid} bit\n     |         | set (false under NT)\n\"G\"  | boolean | True if file1 exists and has a group\n     |         | ownership equal to the caller's group\n\"k\"  | boolean | True if file1 exists and has the sticky bit set\n\"l\"  | boolean | True if file1 exists and is a symbolic link\n\"M\"  | Time    | Last modification time for file1\n\"o\"  | boolean | True if file1 exists and is owned by\n     |         | the caller's effective uid\n\"O\"  | boolean | True if file1 exists and is owned by\n     |         | the caller's real uid\n\"p\"  | boolean | True if file1 exists and is a fifo\n\"r\"  | boolean | True if file1 is readable by the effective\n     |         | uid/gid of the caller\n\"R\"  | boolean | True if file is readable by the real\n     |         | uid/gid of the caller\n\"s\"  | int/nil | If file1 has nonzero size, return the size,\n     |         | otherwise return nil\n\"S\"  | boolean | True if file1 exists and is a socket\n\"u\"  | boolean | True if file1 has the setuid bit set\n\"w\"  | boolean | True if file1 exists and is writable by\n     |         | the effective uid/gid\n\"W\"  | boolean | True if file1 exists and is writable by\n     |         | the real uid/gid\n\"x\"  | boolean | True if file1 exists and is executable by\n     |         | the effective uid/gid\n\"X\"  | boolean | True if file1 exists and is executable by\n     |         | the real uid/gid\n\"z\"  | boolean | True if file1 exists and has a zero length\n```\n\nTests that take two files:\n\n```\n\"-\"  | boolean | True if file1 and file2 are identical\n\"=\"  | boolean | True if the modification times of file1\n     |         | and file2 are equal\n\"<\"  | boolean | True if the modification time of file1\n     |         | is prior to that of file2\n\">\"  | boolean | True if the modification time of file1\n     |         | is after that of file2\n```"},"sortText":"000089","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"test(${1:String}, ${2:String})${0}"}},{"label":"trust","kind":2,"detail":"Kernel#trust","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.class_of(A))}\ndef trust; end\n```"},"sortText":"000090","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"trust${0}"}},{"label":"untrust","kind":2,"detail":"Kernel#untrust","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.class_of(A))}\ndef untrust; end\n```"},"sortText":"000091","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"untrust${0}"}},{"label":"untrusted?","kind":2,"detail":"Kernel#untrusted?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef untrusted?; end\n```"},"sortText":"000092","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"untrusted?${0}"}},{"label":"yield_self","kind":2,"detail":"Kernel#yield_self","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:X))\n  )\n  .returns(T.type_parameter(:X))\nend\ndef yield_self(&blk); end\n```\n\n---\n\nYields self to the block and returns the result of the block.\n\n```ruby\n\"my string\".yield_self {|s| s.upcase }   #=> \"MY STRING\"\n```\n\nGood usage for `then` is value piping in method chains:\n\n```ruby\nrequire 'open-uri'\nrequire 'json'\n\nconstruct_url(arguments).\n  then {|url| URI(url).read }.\n  then {|response| JSON.parse(response) }\n```"},"sortText":"000093","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"yield_self do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"__send__","kind":2,"detail":"BasicObject#__send__","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol, arg1: BasicObject).returns(T.untyped)}\ndef __send__(arg0, *arg1); end\n```\n\n---\n\nInvokes the method identified by *symbol*, passing it any arguments\nspecified. You can use `__send__` if the name `send` clashes with an\nexisting method in *obj*. When the method is identified by a string, the\nstring is converted to a symbol.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_send\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`send`.\n\n```ruby\nclass Klass\n  def hello(*args)\n    \"Hello \" + args.join(' ')\n  end\nend\nk = Klass.new\nk.send :hello, \"gentle\", \"readers\"   #=> \"Hello gentle readers\"\n```"},"sortText":"000094","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"__send__(${1:Symbol})${0}"}},{"label":"instance_eval","kind":2,"detail":"BasicObject#instance_eval","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, filename: String, lineno: Integer).returns(T.untyped)}\ndef instance_eval(arg0=…, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver (*obj*). In order to set the context, the\nvariable `self` is set to *obj* while the code is executing, giving the code\naccess to *obj*'s instance variables and private methods.\n\nWhen `instance_eval` is given a block, *obj* is also passed in as the\nblock's only argument.\n\nWhen `instance_eval` is given a `String`, the optional second and third\nparameters supply a filename and starting line number that are used when\nreporting compilation errors.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\n  private\n  def the_secret\n    \"Ssssh! The secret is #{@secret}.\"\n  end\nend\nk = KlassWithSecret.new\nk.instance_eval { @secret }          #=> 99\nk.instance_eval { the_secret }       #=> \"Ssssh! The secret is 99.\"\nk.instance_eval {|obj| obj == self } #=> true\n```"},"sortText":"000095","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"instance_eval${0}"}},{"label":"instance_eval","kind":2,"detail":"BasicObject#instance_eval (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_eval (overload.1)(&blk); end\n```\n\n---\n\nEvaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver (*obj*). In order to set the context, the\nvariable `self` is set to *obj* while the code is executing, giving the code\naccess to *obj*'s instance variables and private methods.\n\nWhen `instance_eval` is given a block, *obj* is also passed in as the\nblock's only argument.\n\nWhen `instance_eval` is given a `String`, the optional second and third\nparameters supply a filename and starting line number that are used when\nreporting compilation errors.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\n  private\n  def the_secret\n    \"Ssssh! The secret is #{@secret}.\"\n  end\nend\nk = KlassWithSecret.new\nk.instance_eval { @secret }          #=> 99\nk.instance_eval { the_secret }       #=> \"Ssssh! The secret is 99.\"\nk.instance_eval {|obj| obj == self } #=> true\n```"},"sortText":"000096","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"instance_eval do\n  ${1}\nend${0}"}},{"label":"instance_exec","kind":2,"detail":"BasicObject#instance_exec","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    args: T.type_parameter(:V),\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_exec(*args, &blk); end\n```\n\n---\n\nExecutes the given block within the context of the receiver (*obj*). In\norder to set the context, the variable `self` is set to *obj* while the code\nis executing, giving the code access to *obj*'s instance variables.\nArguments are passed as block parameters.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\nend\nk = KlassWithSecret.new\nk.instance_exec(5) {|x| @secret+x }   #=> 104\n```"},"sortText":"000097","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":3}},"newText":"instance_exec do |${1:T.untyped}|\n  ${2}\nend${0}"}}]}}

[2023-08-10 22:57:01.480] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":70},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig \n  def example(x)\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:01.575] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:01.575] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:01.576] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:01.576] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:01.581] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 44
[2023-08-10 22:57:01.581] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":16}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":5,"character":2},"end":{"line":5,"character":2}}},"message":"Insert `sig { params(x: BasicObject).returns(NilClass) }`"}]},{"range":{"start":{"line":4,"character":5},"end":{"line":4,"character":5}},"severity":1,"code":7021,"codeDescription":{"href":"https://srb.help/7021"},"message":"`sig` requires a block parameter, but no block was passed","relatedInformation":[{"location":{"uri":"sorbet:https://github.com/sorbet/sorbet/tree/master/rbi/sorbet/t.rbi","range":{"start":{"line":6,"character":2},"end":{"line":6,"character":25}}},"message":"defined here"}]}]}}

[2023-08-10 22:57:03.803] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":72},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {p}\n  def example(x)\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:03.804] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":37,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":4,"character":8},"context":{"triggerKind":1}}}

[2023-08-10 22:57:03.902] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:03.902] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:03.902] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:03.902] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:03.908] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 45
[2023-08-10 22:57:03.908] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"severity":1,"code":5003,"codeDescription":{"href":"https://srb.help/5003"},"message":"Malformed `sig`: `p` is invalid in this context","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}}},"message":"Consult https://sorbet.org/docs/sigs for signature syntax"}]},{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":16}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":5,"character":2},"end":{"line":5,"character":2}}},"message":"Insert `sig { params(x: BasicObject).returns(NilClass) }`"}]},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":9}},"severity":1,"code":5003,"codeDescription":{"href":"https://srb.help/5003"},"message":"Malformed `sig`: No return type specified. Specify one with .returns()","relatedInformation":[]}]}}

[2023-08-10 22:57:03.930] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":37,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[{"label":"params","kind":2,"detail":"T::Private::Methods::DeclBuilder#params","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    unused_positional_params: T.untyped,\n    params: T.untyped\n  )\n  .returns(T::Private::Methods::DeclBuilder)\nend\ndef params(*unused_positional_params, **params); end\n```"},"sortText":"000000","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"params${0}"}},{"label":"implementation","kind":2,"detail":"T::Private::Methods::DeclBuilder#implementation","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Private::Methods::DeclBuilder)}\ndef implementation; end\n```"},"sortText":"000001","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"implementation${0}"}},{"label":"type_parameters","kind":2,"detail":"T::Private::Methods::DeclBuilder#type_parameters","documentation":{"kind":"markdown","value":"```ruby\nsig {params(params: T.untyped).returns(T::Private::Methods::DeclBuilder)}\ndef type_parameters(*params); end\n```"},"sortText":"000002","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"type_parameters${0}"}},{"label":"p","kind":2,"detail":"Kernel#p","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BasicObject).returns(NilClass)}\ndef p(*arg0); end\n```\n\n---\n\nFor each object, directly writes *obj*.`inspect` followed by a newline to\nthe program's standard output.\n\n```ruby\nS = Struct.new(:name, :state)\ns = S['dave', 'TX']\np s\n```\n\n*produces:*\n\n```ruby\n#<S name=\"dave\", state=\"TX\">\n```"},"sortText":"000003","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"p${0}"}},{"label":"pp","kind":2,"detail":"Kernel#pp","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    obj: T.untyped,\n    out: T.untyped,\n    width: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef pp(obj, out=…, width=…); end\n```\n\n---\n\nprints arguments in pretty form.\n\npp returns argument(s).\n\nAlso aliased as:\n[`pp`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-pp)"},"sortText":"000004","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"pp(${1})${0}"}},{"label":"print","kind":2,"detail":"Kernel#print","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: Kernel).returns(NilClass)}\ndef print(*args); end\n```\n\n---\n\nPrints each object in turn to `$stdout`. If the output field separator\n(`$,`) is not `nil`, its contents will appear between each field. If the\noutput record separator (`$\\`) is not `nil`, it will be appended to the\noutput. If no arguments are given, prints `$_`. Objects that aren't strings\nwill be converted by calling their `to_s` method.\n\n```ruby\nprint \"cat\", [1,2,3], 99, \"\\n\"\n$, = \", \"\n$\\ = \"\\n\"\nprint \"cat\", [1,2,3], 99\n```\n\n*produces:*\n\n```\ncat12399\ncat, 1, 2, 3, 99\n```"},"sortText":"000005","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"print${0}"}},{"label":"printf","kind":2,"detail":"Kernel#printf","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: IO, arg1: String, arg2: BasicObject).returns(NilClass)}\ndef printf(arg0=…, arg1=…, *arg2); end\n```\n\n---\n\nEquivalent to:\n\n```\nio.write(sprintf(string, obj, ...))\n```\n\nor\n\n```\n$stdout.write(sprintf(string, obj, ...))\n```"},"sortText":"000006","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"printf${0}"}},{"label":"private_methods","kind":2,"detail":"Kernel#private_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef private_methods(all=…); end\n```"},"sortText":"000007","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"private_methods${0}"}},{"label":"proc","kind":2,"detail":"Kernel#proc","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.untyped).returns(Proc)}\ndef proc(&blk); end\n```\n\n---\n\nEquivalent to\n[`Proc.new`](https://docs.ruby-lang.org/en/2.7.0/Proc.html#method-c-new)."},"sortText":"000008","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"proc${0}"}},{"label":"protected_methods","kind":2,"detail":"Kernel#protected_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef protected_methods(all=…); end\n```"},"sortText":"000009","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"protected_methods${0}"}},{"label":"public_method","kind":2,"detail":"Kernel#public_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef public_method(arg0); end\n```"},"sortText":"000010","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"public_method(${1:Symbol})${0}"}},{"label":"public_methods","kind":2,"detail":"Kernel#public_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef public_methods(all=…); end\n```"},"sortText":"000011","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"public_methods${0}"}},{"label":"public_send","kind":2,"detail":"Kernel#public_send","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef public_send(arg0, *args, &blk); end\n```"},"sortText":"000012","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"public_send(${1:T.any(Symbol, String)})${0}"}},{"label":"putc","kind":2,"detail":"Kernel#putc","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Integer)}\ndef putc(arg0); end\n```\n\n---\n\nEquivalent to:\n\n```ruby\n$stdout.putc(int)\n```\n\nRefer to the documentation for\n[`IO#putc`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-putc) for\nimportant information regarding multi-byte characters."},"sortText":"000013","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"putc(${1:Integer})${0}"}},{"label":"puts","kind":2,"detail":"Kernel#puts","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BasicObject).returns(NilClass)}\ndef puts(*arg0); end\n```\n\n---\n\nEquivalent to\n\n```\n$stdout.puts(obj, ...)\n```"},"sortText":"000014","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"puts${0}"}},{"label":"Complex","kind":2,"detail":"Kernel#Complex","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: T.any(Numeric, String),\n    y: T.any(Numeric, String),\n    exception: T::Boolean\n  )\n  .returns(Complex)\nend\ndef Complex(x, y=…, exception: …); end\n```\n\n---\n\nReturns x+i\\*y;\n\n```ruby\nComplex(1, 2)    #=> (1+2i)\nComplex('1+2i')  #=> (1+2i)\nComplex(nil)     #=> TypeError\nComplex(1, nil)  #=> TypeError\n\nComplex(1, nil, exception: false)  #=> nil\nComplex('1+2', exception: false)   #=> nil\n```\n\nSyntax of string form:\n\n```\nstring form = extra spaces , complex , extra spaces ;\ncomplex = real part | [ sign ] , imaginary part\n        | real part , sign , imaginary part\n        | rational , \"@\" , rational ;\nreal part = rational ;\nimaginary part = imaginary unit | unsigned rational , imaginary unit ;\nrational = [ sign ] , unsigned rational ;\nunsigned rational = numerator | numerator , \"/\" , denominator ;\nnumerator = integer part | fractional part | integer part , fractional part ;\ndenominator = digits ;\ninteger part = digits ;\nfractional part = \".\" , digits , [ ( \"e\" | \"E\" ) , [ sign ] , digits ] ;\nimaginary unit = \"i\" | \"I\" | \"j\" | \"J\" ;\nsign = \"-\" | \"+\" ;\ndigits = digit , { digit | \"_\" , digit };\ndigit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\nextra spaces = ? \\s* ? ;\n```\n\nSee\n[`String#to_c`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_c)."},"sortText":"000015","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"Complex(${1:T.any(Numeric, String)})${0}"}},{"label":"display","kind":2,"detail":"Kernel#display","documentation":{"kind":"markdown","value":"```ruby\nsig {params(port: IO).returns(NilClass)}\ndef display(port); end\n```"},"sortText":"000016","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"display(${1:IO})${0}"}},{"label":"dup","kind":2,"detail":"Kernel#dup","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Private::Methods::DeclBuilder)}\ndef dup; end\n```"},"sortText":"000017","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"dup${0}"}},{"label":"initialize_copy","kind":2,"detail":"Kernel#initialize_copy","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    object: T::Private::Methods::DeclBuilder\n  )\n  .returns(T::Private::Methods::DeclBuilder)\nend\ndef initialize_copy(object); end\n```"},"sortText":"000018","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"initialize_copy(${1:T::Private::Methods::DeclBuilder})${0}"}},{"label":"inspect","kind":2,"detail":"Kernel#inspect","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(String)}\ndef inspect; end\n```"},"sortText":"000019","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"inspect${0}"}},{"label":"loop","kind":2,"detail":"Kernel#loop","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.proc.returns(T.untyped)).returns(T.noreturn)}\ndef loop(&blk); end\n```\n\n---\n\nRepeatedly executes the block.\n\nIf no block is given, an enumerator is returned instead.\n\n```ruby\nloop do\n  print \"Input: \"\n  line = gets\n  break if !line or line =~ /^qQ/\n  # ...\nend\n```\n\n[`StopIteration`](https://docs.ruby-lang.org/en/2.7.0/StopIteration.html)\nraised in the block breaks the loop. In this case, loop returns the \"result\"\nvalue stored in the exception.\n\n```ruby\nenum = Enumerator.new { |y|\n  y << \"one\"\n  y << \"two\"\n  :ok\n}\n\nresult = loop {\n  puts enum.next\n} #=> :ok\n```"},"sortText":"000020","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"loop do\n  ${1}\nend${0}"}},{"label":"loop","kind":2,"detail":"Kernel#loop (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Enumerator[T.untyped])}\ndef loop (overload.1); end\n```\n\n---\n\nRepeatedly executes the block.\n\nIf no block is given, an enumerator is returned instead.\n\n```ruby\nloop do\n  print \"Input: \"\n  line = gets\n  break if !line or line =~ /^qQ/\n  # ...\nend\n```\n\n[`StopIteration`](https://docs.ruby-lang.org/en/2.7.0/StopIteration.html)\nraised in the block breaks the loop. In this case, loop returns the \"result\"\nvalue stored in the exception.\n\n```ruby\nenum = Enumerator.new { |y|\n  y << \"one\"\n  y << \"two\"\n  :ok\n}\n\nresult = loop {\n  puts enum.next\n} #=> :ok\n```"},"sortText":"000021","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"loop${0}"}},{"label":"open","kind":2,"detail":"Kernel#open","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    path: String,\n    mode: T.any(Integer, String),\n    perm: T.nilable(Integer),\n    opt: T.nilable(T::Hash[Symbol, T.untyped])\n  )\n  .returns(T.nilable(IO))\nend\ndef open(path, mode=…, perm=…, opt=…); end\n```\n\n---\n\nCreates an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object\nconnected to the given stream, file, or subprocess.\n\nIf `path` does not start with a pipe character (`|`), treat it as the name\nof a file to open using the specified mode (defaulting to \"r\").\n\nThe `mode` is either a string or an integer. If it is an integer, it must be\nbitwise-or of open(2) flags, such as File::RDWR or File::EXCL. If it is a\nstring, it is either \"fmode\", \"fmode:ext\\_enc\", or\n\"fmode:ext\\_enc:int\\_enc\".\n\nSee the documentation of\n[`IO.new`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-new) for\nfull documentation of the `mode` string directives.\n\nIf a file is being created, its initial permissions may be set using the\n`perm` parameter. See\n[`File.new`](https://docs.ruby-lang.org/en/2.7.0/File.html#method-c-new) and\nthe open(2) and chmod(2) man pages for a description of permissions.\n\nIf a block is specified, it will be invoked with the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object as a parameter,\nand the [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) will be\nautomatically closed when the block terminates. The call returns the value\nof the block.\n\nIf `path` starts with a pipe character (`\"|\"`), a subprocess is created,\nconnected to the caller by a pair of pipes. The returned\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object may be used to\nwrite to the standard input and read from the standard output of this\nsubprocess.\n\nIf the command following the pipe is a single minus sign (`\"|-\"`), Ruby\nforks, and this subprocess is connected to the parent. If the command is not\n`\"-\"`, the subprocess runs the command. Note that the command may be\nprocessed by shell if it contains shell metacharacters.\n\nWhen the subprocess is Ruby (opened via `\"|-\"`), the `open` call returns\n`nil`. If a block is associated with the open call, that block will run\ntwice --- once in the parent and once in the child.\n\nThe block parameter will be an\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object in the parent and\n`nil` in the child. The parent's `IO` object will be connected to the\nchild's $stdin and $stdout. The subprocess will be terminated at the end of\nthe block.\n\n### Examples\n\nReading from \"testfile\":\n\n```ruby\nopen(\"testfile\") do |f|\n  print f.gets\nend\n```\n\nProduces:\n\n```ruby\nThis is line one\n```\n\nOpen a subprocess and read its output:\n\n```ruby\ncmd = open(\"|date\")\nprint cmd.gets\ncmd.close\n```\n\nProduces:\n\n```\nWed Apr  9 08:56:31 CDT 2003\n```\n\nOpen a subprocess running the same Ruby program:\n\n```ruby\nf = open(\"|-\", \"w+\")\nif f.nil?\n  puts \"in Child\"\n  exit\nelse\n  puts \"Got: #{f.gets}\"\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```\n\nOpen a subprocess using a block to receive the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object:\n\n```ruby\nopen \"|-\" do |f|\n  if f then\n    # parent process\n    puts \"Got: #{f.gets}\"\n  else\n    # child process\n    puts \"in Child\"\n  end\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```"},"sortText":"000022","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"open(${1:String})${0}"}},{"label":"open","kind":2,"detail":"Kernel#open (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    path: String,\n    mode: T.any(Integer, String),\n    perm: T.nilable(Integer),\n    opt: T.nilable(T::Hash[Symbol, T.untyped]),\n    blk: T.proc.params(arg0: IO).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef open (overload.1)(path, mode=…, perm=…, opt=…, &blk); end\n```\n\n---\n\nCreates an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object\nconnected to the given stream, file, or subprocess.\n\nIf `path` does not start with a pipe character (`|`), treat it as the name\nof a file to open using the specified mode (defaulting to \"r\").\n\nThe `mode` is either a string or an integer. If it is an integer, it must be\nbitwise-or of open(2) flags, such as File::RDWR or File::EXCL. If it is a\nstring, it is either \"fmode\", \"fmode:ext\\_enc\", or\n\"fmode:ext\\_enc:int\\_enc\".\n\nSee the documentation of\n[`IO.new`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-new) for\nfull documentation of the `mode` string directives.\n\nIf a file is being created, its initial permissions may be set using the\n`perm` parameter. See\n[`File.new`](https://docs.ruby-lang.org/en/2.7.0/File.html#method-c-new) and\nthe open(2) and chmod(2) man pages for a description of permissions.\n\nIf a block is specified, it will be invoked with the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object as a parameter,\nand the [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) will be\nautomatically closed when the block terminates. The call returns the value\nof the block.\n\nIf `path` starts with a pipe character (`\"|\"`), a subprocess is created,\nconnected to the caller by a pair of pipes. The returned\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object may be used to\nwrite to the standard input and read from the standard output of this\nsubprocess.\n\nIf the command following the pipe is a single minus sign (`\"|-\"`), Ruby\nforks, and this subprocess is connected to the parent. If the command is not\n`\"-\"`, the subprocess runs the command. Note that the command may be\nprocessed by shell if it contains shell metacharacters.\n\nWhen the subprocess is Ruby (opened via `\"|-\"`), the `open` call returns\n`nil`. If a block is associated with the open call, that block will run\ntwice --- once in the parent and once in the child.\n\nThe block parameter will be an\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object in the parent and\n`nil` in the child. The parent's `IO` object will be connected to the\nchild's $stdin and $stdout. The subprocess will be terminated at the end of\nthe block.\n\n### Examples\n\nReading from \"testfile\":\n\n```ruby\nopen(\"testfile\") do |f|\n  print f.gets\nend\n```\n\nProduces:\n\n```ruby\nThis is line one\n```\n\nOpen a subprocess and read its output:\n\n```ruby\ncmd = open(\"|date\")\nprint cmd.gets\ncmd.close\n```\n\nProduces:\n\n```\nWed Apr  9 08:56:31 CDT 2003\n```\n\nOpen a subprocess running the same Ruby program:\n\n```ruby\nf = open(\"|-\", \"w+\")\nif f.nil?\n  puts \"in Child\"\n  exit\nelse\n  puts \"Got: #{f.gets}\"\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```\n\nOpen a subprocess using a block to receive the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object:\n\n```ruby\nopen \"|-\" do |f|\n  if f then\n    # parent process\n    puts \"Got: #{f.gets}\"\n  else\n    # child process\n    puts \"in Child\"\n  end\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```"},"sortText":"000023","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"open(${1:String}) do |${2:IO}|\n  ${3}\nend${0}"}},{"label":"respond_to?","kind":2,"detail":"Kernel#respond_to?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    include_all: T.untyped\n  )\n  .returns(T::Boolean)\nend\ndef respond_to?(arg0, include_all=…); end\n```"},"sortText":"000024","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"respond_to?(${1:T.any(String, Symbol)})${0}"}},{"label":"sleep","kind":2,"detail":"Kernel#sleep","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef sleep; end\n```\n\n---\n\nSuspends the current thread for *duration* seconds (which may be any number,\nincluding a `Float` with fractional seconds). Returns the actual number of\nseconds slept (rounded), which may be less than that asked for if another\nthread calls\n[`Thread#run`](https://docs.ruby-lang.org/en/2.7.0/Thread.html#method-i-run).\nCalled without an argument, sleep() will sleep forever.\n\n```ruby\nTime.new    #=> 2008-03-08 19:56:19 +0900\nsleep 1.2   #=> 1\nTime.new    #=> 2008-03-08 19:56:20 +0900\nsleep 1.9   #=> 2\nTime.new    #=> 2008-03-08 19:56:22 +0900\n```"},"sortText":"000025","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"sleep${0}"}},{"label":"sleep","kind":2,"detail":"Kernel#sleep (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(duration: Numeric).returns(Integer)}\ndef sleep (overload.1)(duration); end\n```\n\n---\n\nSuspends the current thread for *duration* seconds (which may be any number,\nincluding a `Float` with fractional seconds). Returns the actual number of\nseconds slept (rounded), which may be less than that asked for if another\nthread calls\n[`Thread#run`](https://docs.ruby-lang.org/en/2.7.0/Thread.html#method-i-run).\nCalled without an argument, sleep() will sleep forever.\n\n```ruby\nTime.new    #=> 2008-03-08 19:56:19 +0900\nsleep 1.2   #=> 1\nTime.new    #=> 2008-03-08 19:56:20 +0900\nsleep 1.9   #=> 2\nTime.new    #=> 2008-03-08 19:56:22 +0900\n```"},"sortText":"000026","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"sleep(${1:Numeric})${0}"}},{"label":"sprintf","kind":2,"detail":"Kernel#sprintf","documentation":{"kind":"markdown","value":"```ruby\nsig {params(format: String, args: BasicObject).returns(String)}\ndef sprintf(format, *args); end\n```\n\n---\n\nReturns the string resulting from applying *format\\_string* to any\nadditional arguments. Within the format string, any characters other than\nformat sequences are copied to the result.\n\nThe syntax of a format sequence is as follows.\n\n```\n%[flags][width][.precision]type\n```\n\nA format sequence consists of a percent sign, followed by optional flags,\nwidth, and precision indicators, then terminated with a field type\ncharacter. The field type controls how the corresponding `sprintf` argument\nis to be interpreted, while the flags modify that interpretation.\n\nThe field type characters are:\n\n```\nField |  Integer Format\n------+--------------------------------------------------------------\n  b   | Convert argument as a binary number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..1'.\n  B   | Equivalent to `b', but uses an uppercase 0B for prefix\n      | in the alternative format by #.\n  d   | Convert argument as a decimal number.\n  i   | Identical to `d'.\n  o   | Convert argument as an octal number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..7'.\n  u   | Identical to `d'.\n  x   | Convert argument as a hexadecimal number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..f' (representing an infinite string of\n      | leading 'ff's).\n  X   | Equivalent to `x', but uses uppercase letters.\n\nField |  Float Format\n------+--------------------------------------------------------------\n  e   | Convert floating point argument into exponential notation\n      | with one digit before the decimal point as [-]d.dddddde[+-]dd.\n      | The precision specifies the number of digits after the decimal\n      | point (defaulting to six).\n  E   | Equivalent to `e', but uses an uppercase E to indicate\n      | the exponent.\n  f   | Convert floating point argument as [-]ddd.dddddd,\n      | where the precision specifies the number of digits after\n      | the decimal point.\n  g   | Convert a floating point number using exponential form\n      | if the exponent is less than -4 or greater than or\n      | equal to the precision, or in dd.dddd form otherwise.\n      | The precision specifies the number of significant digits.\n  G   | Equivalent to `g', but use an uppercase `E' in exponent form.\n  a   | Convert floating point argument as [-]0xh.hhhhp[+-]dd,\n      | which is consisted from optional sign, \"0x\", fraction part\n      | as hexadecimal, \"p\", and exponential part as decimal.\n  A   | Equivalent to `a', but use uppercase `X' and `P'.\n\nField |  Other Format\n------+--------------------------------------------------------------\n  c   | Argument is the numeric code for a single character or\n      | a single character string itself.\n  p   | The valuing of argument.inspect.\n  s   | Argument is a string to be substituted.  If the format\n      | sequence contains a precision, at most that many characters\n      | will be copied.\n  %   | A percent sign itself will be displayed.  No argument taken.\n```\n\nThe flags modifies the behavior of the formats. The flag characters are:\n\n```\nFlag     | Applies to    | Meaning\n---------+---------------+-----------------------------------------\nspace    | bBdiouxX      | Leave a space at the start of\n         | aAeEfgG       | non-negative numbers.\n         | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n         |               | a minus sign with absolute value for\n         |               | negative values.\n---------+---------------+-----------------------------------------\n(digit)$ | all           | Specifies the absolute argument number\n         |               | for this field.  Absolute and relative\n         |               | argument numbers cannot be mixed in a\n         |               | sprintf string.\n---------+---------------+-----------------------------------------\n #       | bBoxX         | Use an alternative format.\n         | aAeEfgG       | For the conversions `o', increase the precision\n         |               | until the first digit will be `0' if\n         |               | it is not formatted as complements.\n         |               | For the conversions `x', `X', `b' and `B'\n         |               | on non-zero, prefix the result with ``0x'',\n         |               | ``0X'', ``0b'' and ``0B'', respectively.\n         |               | For `a', `A', `e', `E', `f', `g', and 'G',\n         |               | force a decimal point to be added,\n         |               | even if no digits follow.\n         |               | For `g' and 'G', do not remove trailing zeros.\n---------+---------------+-----------------------------------------\n+        | bBdiouxX      | Add a leading plus sign to non-negative\n         | aAeEfgG       | numbers.\n         | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n         |               | a minus sign with absolute value for\n         |               | negative values.\n---------+---------------+-----------------------------------------\n-        | all           | Left-justify the result of this conversion.\n---------+---------------+-----------------------------------------\n0 (zero) | bBdiouxX      | Pad with zeros, not spaces.\n         | aAeEfgG       | For `o', `x', `X', `b' and `B', radix-1\n         | (numeric fmt) | is used for negative numbers formatted as\n         |               | complements.\n---------+---------------+-----------------------------------------\n*        | all           | Use the next argument as the field width.\n         |               | If negative, left-justify the result. If the\n         |               | asterisk is followed by a number and a dollar\n         |               | sign, use the indicated argument as the width.\n```\n\nExamples of flags:\n\n```ruby\n# `+' and space flag specifies the sign of non-negative numbers.\nsprintf(\"%d\", 123)  #=> \"123\"\nsprintf(\"%+d\", 123) #=> \"+123\"\nsprintf(\"% d\", 123) #=> \" 123\"\n\n# `#' flag for `o' increases number of digits to show `0'.\n# `+' and space flag changes format of negative numbers.\nsprintf(\"%o\", 123)   #=> \"173\"\nsprintf(\"%#o\", 123)  #=> \"0173\"\nsprintf(\"%+o\", -123) #=> \"-173\"\nsprintf(\"%o\", -123)  #=> \"..7605\"\nsprintf(\"%#o\", -123) #=> \"..7605\"\n\n# `#' flag for `x' add a prefix `0x' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf(\"%x\", 123)   #=> \"7b\"\nsprintf(\"%#x\", 123)  #=> \"0x7b\"\nsprintf(\"%+x\", -123) #=> \"-7b\"\nsprintf(\"%x\", -123)  #=> \"..f85\"\nsprintf(\"%#x\", -123) #=> \"0x..f85\"\nsprintf(\"%#x\", 0)    #=> \"0\"\n\n# `#' for `X' uses the prefix `0X'.\nsprintf(\"%X\", 123)  #=> \"7B\"\nsprintf(\"%#X\", 123) #=> \"0X7B\"\n\n# `#' flag for `b' add a prefix `0b' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf(\"%b\", 123)   #=> \"1111011\"\nsprintf(\"%#b\", 123)  #=> \"0b1111011\"\nsprintf(\"%+b\", -123) #=> \"-1111011\"\nsprintf(\"%b\", -123)  #=> \"..10000101\"\nsprintf(\"%#b\", -123) #=> \"0b..10000101\"\nsprintf(\"%#b\", 0)    #=> \"0\"\n\n# `#' for `B' uses the prefix `0B'.\nsprintf(\"%B\", 123)  #=> \"1111011\"\nsprintf(\"%#B\", 123) #=> \"0B1111011\"\n\n# `#' for `e' forces to show the decimal point.\nsprintf(\"%.0e\", 1)  #=> \"1e+00\"\nsprintf(\"%#.0e\", 1) #=> \"1.e+00\"\n\n# `#' for `f' forces to show the decimal point.\nsprintf(\"%.0f\", 1234)  #=> \"1234\"\nsprintf(\"%#.0f\", 1234) #=> \"1234.\"\n\n# `#' for `g' forces to show the decimal point.\n# It also disables stripping lowest zeros.\nsprintf(\"%g\", 123.4)   #=> \"123.4\"\nsprintf(\"%#g\", 123.4)  #=> \"123.400\"\nsprintf(\"%g\", 123456)  #=> \"123456\"\nsprintf(\"%#g\", 123456) #=> \"123456.\"\n```\n\nThe field width is an optional integer, followed optionally by a period and\na precision. The width specifies the minimum number of characters that will\nbe written to the result for this field.\n\nExamples of width:\n\n```ruby\n# padding is done by spaces,       width=20\n# 0 or radix-1.             <------------------>\nsprintf(\"%20d\", 123)   #=> \"                 123\"\nsprintf(\"%+20d\", 123)  #=> \"                +123\"\nsprintf(\"%020d\", 123)  #=> \"00000000000000000123\"\nsprintf(\"%+020d\", 123) #=> \"+0000000000000000123\"\nsprintf(\"% 020d\", 123) #=> \" 0000000000000000123\"\nsprintf(\"%-20d\", 123)  #=> \"123                 \"\nsprintf(\"%-+20d\", 123) #=> \"+123                \"\nsprintf(\"%- 20d\", 123) #=> \" 123                \"\nsprintf(\"%020x\", -123) #=> \"..ffffffffffffffff85\"\n```\n\nFor numeric fields, the precision controls the number of decimal places\ndisplayed. For string fields, the precision determines the maximum number of\ncharacters to be copied from the string. (Thus, the format sequence\n`%10.10s` will always contribute exactly ten characters to the result.)\n\nExamples of precisions:\n\n```ruby\n# precision for `d', 'o', 'x' and 'b' is\n# minimum number of digits               <------>\nsprintf(\"%20.8d\", 123)  #=> \"            00000123\"\nsprintf(\"%20.8o\", 123)  #=> \"            00000173\"\nsprintf(\"%20.8x\", 123)  #=> \"            0000007b\"\nsprintf(\"%20.8b\", 123)  #=> \"            01111011\"\nsprintf(\"%20.8d\", -123) #=> \"           -00000123\"\nsprintf(\"%20.8o\", -123) #=> \"            ..777605\"\nsprintf(\"%20.8x\", -123) #=> \"            ..ffff85\"\nsprintf(\"%20.8b\", -11)  #=> \"            ..110101\"\n\n# \"0x\" and \"0b\" for `#x' and `#b' is not counted for\n# precision but \"0\" for `#o' is counted.  <------>\nsprintf(\"%#20.8d\", 123)  #=> \"            00000123\"\nsprintf(\"%#20.8o\", 123)  #=> \"            00000173\"\nsprintf(\"%#20.8x\", 123)  #=> \"          0x0000007b\"\nsprintf(\"%#20.8b\", 123)  #=> \"          0b01111011\"\nsprintf(\"%#20.8d\", -123) #=> \"           -00000123\"\nsprintf(\"%#20.8o\", -123) #=> \"            ..777605\"\nsprintf(\"%#20.8x\", -123) #=> \"          0x..ffff85\"\nsprintf(\"%#20.8b\", -11)  #=> \"          0b..110101\"\n\n# precision for `e' is number of\n# digits after the decimal point           <------>\nsprintf(\"%20.8e\", 1234.56789) #=> \"      1.23456789e+03\"\n\n# precision for `f' is number of\n# digits after the decimal point               <------>\nsprintf(\"%20.8f\", 1234.56789) #=> \"       1234.56789000\"\n\n# precision for `g' is number of\n# significant digits                          <------->\nsprintf(\"%20.8g\", 1234.56789) #=> \"           1234.5679\"\n\n#                                         <------->\nsprintf(\"%20.8g\", 123456789)  #=> \"       1.2345679e+08\"\n\n# precision for `s' is\n# maximum number of characters                    <------>\nsprintf(\"%20.8s\", \"string test\") #=> \"            string t\"\n```\n\nExamples:\n\n```ruby\nsprintf(\"%d %04x\", 123, 123)               #=> \"123 007b\"\nsprintf(\"%08b '%4s'\", 123, 123)            #=> \"01111011 ' 123'\"\nsprintf(\"%1$*2$s %2$d %1$s\", \"hello\", 8)   #=> \"   hello 8 hello\"\nsprintf(\"%1$*2$s %2$d\", \"hello\", -8)       #=> \"hello    -8\"\nsprintf(\"%+g:% g:%-g\", 1.23, 1.23, 1.23)   #=> \"+1.23: 1.23:1.23\"\nsprintf(\"%u\", -123)                        #=> \"-123\"\n```\n\nFor more complex formatting, Ruby supports a reference by name. %<name>s\nstyle uses format style, but %{name} style doesn't.\n\nExamples:\n\n```ruby\nsprintf(\"%<foo>d : %<bar>f\", { :foo => 1, :bar => 2 })\n  #=> 1 : 2.000000\nsprintf(\"%{foo}f\", { :foo => 1 })\n  # => \"1f\"\n```\n\n\nAlso aliased as:\n[`format`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-format)"},"sortText":"000027","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"sprintf(${1:String})${0}"}},{"label":"tap","kind":2,"detail":"Kernel#tap","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).void\n  )\n  .returns(T::Private::Methods::DeclBuilder)\nend\ndef tap(&blk); end\n```\n\n---\n\nYields self to the block, and then returns self. The primary purpose of this\nmethod is to \"tap into\" a method chain, in order to perform operations on\nintermediate results within the chain.\n\n```ruby\n(1..10)                  .tap {|x| puts \"original: #{x}\" }\n  .to_a                  .tap {|x| puts \"array:    #{x}\" }\n  .select {|x| x.even? } .tap {|x| puts \"evens:    #{x}\" }\n  .map {|x| x*x }        .tap {|x| puts \"squares:  #{x}\" }\n```"},"sortText":"000028","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"tap do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"trap","kind":2,"detail":"Kernel#trap","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    signal: T.any(Integer, String, Symbol),\n    command: BasicObject\n  )\n  .returns(T.any(String, Proc))\nend\ndef trap(signal, command=…); end\n```\n\n---\n\nSpecifies the handling of signals. The first parameter is a signal name (a\nstring such as \"SIGALRM\", \"SIGUSR1\", and so on) or a signal number. The\ncharacters \"SIG\" may be omitted from the signal name. The command or block\nspecifies code to be run when the signal is raised. If the command is the\nstring \"IGNORE\" or \"SIG\\_IGN\", the signal will be ignored. If the command is\n\"DEFAULT\" or \"SIG\\_DFL\", the Ruby's default handler will be invoked. If the\ncommand is \"EXIT\", the script will be terminated by the signal. If the\ncommand is \"SYSTEM\\_DEFAULT\", the operating system's default handler will be\ninvoked. Otherwise, the given command or block will be run. The special\nsignal name \"EXIT\" or signal number zero will be invoked just prior to\nprogram termination. trap returns the previous handler for the given signal.\n\n```ruby\nSignal.trap(0, proc { puts \"Terminating: #{$$}\" })\nSignal.trap(\"CLD\")  { puts \"Child died\" }\nfork && Process.wait\n```\n\nproduces:\n\n```\nTerminating: 27461\nChild died\nTerminating: 27460\n```"},"sortText":"000029","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"trap(${1:T.any(Integer, String, Symbol)})${0}"}},{"label":"trap","kind":2,"detail":"Kernel#trap (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    signal: T.any(Integer, String, Symbol),\n    blk: T.proc.params(arg0: Integer).returns(BasicObject)\n  )\n  .returns(T.any(String, Proc))\nend\ndef trap (overload.1)(signal, &blk); end\n```\n\n---\n\nSpecifies the handling of signals. The first parameter is a signal name (a\nstring such as \"SIGALRM\", \"SIGUSR1\", and so on) or a signal number. The\ncharacters \"SIG\" may be omitted from the signal name. The command or block\nspecifies code to be run when the signal is raised. If the command is the\nstring \"IGNORE\" or \"SIG\\_IGN\", the signal will be ignored. If the command is\n\"DEFAULT\" or \"SIG\\_DFL\", the Ruby's default handler will be invoked. If the\ncommand is \"EXIT\", the script will be terminated by the signal. If the\ncommand is \"SYSTEM\\_DEFAULT\", the operating system's default handler will be\ninvoked. Otherwise, the given command or block will be run. The special\nsignal name \"EXIT\" or signal number zero will be invoked just prior to\nprogram termination. trap returns the previous handler for the given signal.\n\n```ruby\nSignal.trap(0, proc { puts \"Terminating: #{$$}\" })\nSignal.trap(\"CLD\")  { puts \"Child died\" }\nfork && Process.wait\n```\n\nproduces:\n\n```\nTerminating: 27461\nChild died\nTerminating: 27460\n```"},"sortText":"000030","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"newText":"trap(${1:T.any(Integer, String, Symbol)}) do |${2:Integer}|\n  ${3}\nend${0}"}}]}}

[2023-08-10 22:57:04.448] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":77},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params}\n  def example(x)\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:04.544] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:04.544] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:04.545] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:04.545] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:04.551] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 46
[2023-08-10 22:57:04.552] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":13}},"severity":1,"code":5003,"codeDescription":{"href":"https://srb.help/5003"},"message":"`params` must be given arguments (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":7},"end":{"line":4,"character":13}}},"message":"Delete"}]},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":14}},"severity":1,"code":5003,"codeDescription":{"href":"https://srb.help/5003"},"message":"Malformed `sig`: No return type specified. Specify one with .returns()","relatedInformation":[]},{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":16}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":5,"character":2},"end":{"line":5,"character":2}}},"message":"Insert `sig { params(x: BasicObject).returns(NilClass) }`"}]},{"range":{"start":{"line":5,"character":14},"end":{"line":5,"character":15}},"severity":1,"code":5003,"codeDescription":{"href":"https://srb.help/5003"},"message":"Malformed `sig`. Type not specified for argument `x`","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":2},"end":{"line":4,"character":14}}},"message":"Signature"}]}]}}

[2023-08-10 22:57:04.612] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":79},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x)}\n  def example(x)\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:04.612] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":38,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":4,"character":15},"context":{"triggerKind":1}}}

[2023-08-10 22:57:04.706] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:04.706] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:04.706] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:04.706] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:04.712] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 47
[2023-08-10 22:57:04.714] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":16}},"severity":1,"code":5003,"codeDescription":{"href":"https://srb.help/5003"},"message":"`params` expects keyword arguments","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":7},"end":{"line":4,"character":16}}},"message":"\n    All parameters must be given names in `params` even if they are positional"}]},{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":16}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":5,"character":2},"end":{"line":5,"character":2}}},"message":"Insert `sig { params(x: BasicObject).returns(NilClass) }`"}]},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":17}},"severity":1,"code":5003,"codeDescription":{"href":"https://srb.help/5003"},"message":"Malformed `sig`: No return type specified. Specify one with .returns()","relatedInformation":[]},{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `x` does not exist on `T::Private::Methods::DeclBuilder`","relatedInformation":[{"location":{"uri":"sorbet:https://github.com/sorbet/sorbet/tree/master/rbi/sorbet/t.rbi","range":{"start":{"line":5,"character":39},"end":{"line":5,"character":42}}},"message":"Got `T::Private::Methods::DeclBuilder` originating from:"}]},{"range":{"start":{"line":5,"character":14},"end":{"line":5,"character":15}},"severity":1,"code":5003,"codeDescription":{"href":"https://srb.help/5003"},"message":"Malformed `sig`. Type not specified for argument `x`","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":2},"end":{"line":4,"character":17}}},"message":"Signature"}]}]}}

[2023-08-10 22:57:04.726] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":38,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[{"label":"Complex","kind":2,"detail":"Kernel#Complex","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: T.any(Numeric, String),\n    y: T.any(Numeric, String),\n    exception: T::Boolean\n  )\n  .returns(Complex)\nend\ndef Complex(x, y=…, exception: …); end\n```\n\n---\n\nReturns x+i\\*y;\n\n```ruby\nComplex(1, 2)    #=> (1+2i)\nComplex('1+2i')  #=> (1+2i)\nComplex(nil)     #=> TypeError\nComplex(1, nil)  #=> TypeError\n\nComplex(1, nil, exception: false)  #=> nil\nComplex('1+2', exception: false)   #=> nil\n```\n\nSyntax of string form:\n\n```\nstring form = extra spaces , complex , extra spaces ;\ncomplex = real part | [ sign ] , imaginary part\n        | real part , sign , imaginary part\n        | rational , \"@\" , rational ;\nreal part = rational ;\nimaginary part = imaginary unit | unsigned rational , imaginary unit ;\nrational = [ sign ] , unsigned rational ;\nunsigned rational = numerator | numerator , \"/\" , denominator ;\nnumerator = integer part | fractional part | integer part , fractional part ;\ndenominator = digits ;\ninteger part = digits ;\nfractional part = \".\" , digits , [ ( \"e\" | \"E\" ) , [ sign ] , digits ] ;\nimaginary unit = \"i\" | \"I\" | \"j\" | \"J\" ;\nsign = \"-\" | \"+\" ;\ndigits = digit , { digit | \"_\" , digit };\ndigit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\nextra spaces = ? \\s* ? ;\n```\n\nSee\n[`String#to_c`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_c)."},"sortText":"000000","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"newText":"Complex(${1:T.any(Numeric, String)})${0}"}},{"label":"at_exit","kind":2,"detail":"Kernel#at_exit","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.proc.returns(BasicObject)).returns(Proc)}\ndef at_exit(&blk); end\n```\n\n---\n\nConverts *block* to a `Proc` object (and therefore binds it at the point of\ncall) and registers it for execution when the program exits. If multiple\nhandlers are registered, they are executed in reverse order of registration.\n\n```ruby\ndef do_at_exit(str1)\n  at_exit { print str1 }\nend\nat_exit { puts \"cruel world\" }\ndo_at_exit(\"goodbye \")\nexit\n```\n\n*produces:*\n\n```ruby\ngoodbye cruel world\n```"},"sortText":"000001","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"newText":"at_exit do\n  ${1}\nend${0}"}},{"label":"exec","kind":2,"detail":"Kernel#exec","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: String).returns(T.noreturn)}\ndef exec(*args); end\n```\n\n---\n\nReplaces the current process by running the given external *command*, which\ncan take one of the following forms:\n\n`exec(commandline)`\n:   command line string which is passed to the standard shell\n`exec(cmdname, arg1, ...)`\n:   command name and one or more arguments (no shell)\n`exec([cmdname, argv0], arg1, ...)`\n:   command name, [argv](0) and zero or more arguments (no shell)\n\n\nIn the first form, the string is taken as a command line that is subject to\nshell expansion before being executed.\n\nThe standard shell always means `\"/bin/sh\"` on Unix-like systems, otherwise,\n`ENV[\"RUBYSHELL\"]` or `ENV[\"COMSPEC\"]` on Windows and similar. The command\nis passed as an argument to the `\"-c\"` switch to the shell, except in the\ncase of `COMSPEC`.\n\nIf the string from the first form (`exec(\"command\")`) follows these simple\nrules:\n\n*   no meta characters\n*   not starting with shell reserved word or special built-in\n*   Ruby invokes the command directly without shell\n\n\nYou can force shell invocation by adding \";\" to the string (because \";\" is a\nmeta character).\n\nNote that this behavior is observable by pid obtained (return value of\nspawn() and\n[`IO#pid`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-pid) for\n[`IO.popen`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-popen)) is\nthe pid of the invoked command, not shell.\n\nIn the second form (`exec(\"command1\", \"arg1\", ...)`), the first is taken as\na command name and the rest are passed as parameters to command with no\nshell expansion.\n\nIn the third form (`exec([\"command\", \"argv0\"], \"arg1\", ...)`), starting a\ntwo-element array at the beginning of the command, the first element is the\ncommand to be executed, and the second argument is used as the `argv[0]`\nvalue, which may show up in process listings.\n\nIn order to execute the command, one of the `exec(2)` system calls are used,\nso the running command may inherit some of the environment of the original\nprogram (including open file descriptors).\n\nThis behavior is modified by the given `env` and `options` parameters. See\n::spawn for details.\n\nIf the command fails to execute (typically Errno::ENOENT when it was not\nfound) a\n[`SystemCallError`](https://docs.ruby-lang.org/en/2.7.0/SystemCallError.html)\nexception is raised.\n\nThis method modifies process attributes according to given `options` before\n`exec(2)` system call. See ::spawn for more details about the given\n`options`.\n\nThe modified attributes may be retained when `exec(2)` system call fails.\n\nFor example, hard resource limits are not restorable.\n\nConsider to create a child process using ::spawn or\n[`Kernel#system`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-system)\nif this is not acceptable.\n\n```ruby\nexec \"echo *\"       # echoes list of files in current directory\n# never get here\n\nexec \"echo\", \"*\"    # echoes an asterisk\n# never get here\n```"},"sortText":"000002","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"newText":"exec${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef exit; end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000003","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"newText":"exit${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit (overload.1)(status=…); end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000004","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"newText":"exit${0}"}},{"label":"exit!","kind":2,"detail":"Kernel#exit!","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit!(status=…); end\n```\n\n---\n\nExits the process immediately. No exit handlers are run. *status* is\nreturned to the underlying system as the exit status.\n\n```ruby\nProcess.exit!(true)\n```"},"sortText":"000005","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"newText":"exit!${0}"}},{"label":"extend","kind":2,"detail":"Kernel#extend","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T::Private::Methods::DeclBuilder)}\ndef extend(*arg0); end\n```"},"sortText":"000006","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"newText":"extend${0}"}},{"label":"instance_exec","kind":2,"detail":"BasicObject#instance_exec","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    args: T.type_parameter(:V),\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_exec(*args, &blk); end\n```\n\n---\n\nExecutes the given block within the context of the receiver (*obj*). In\norder to set the context, the variable `self` is set to *obj* while the code\nis executing, giving the code access to *obj*'s instance variables.\nArguments are passed as block parameters.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\nend\nk = KlassWithSecret.new\nk.instance_exec(5) {|x| @secret+x }   #=> 104\n```"},"sortText":"000007","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"newText":"instance_exec do |${1:T.untyped}|\n  ${2}\nend${0}"}}]}}

[2023-08-10 22:57:04.769] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":80},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x:)}\n  def example(x)\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:04.770] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":39,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":4,"character":16},"context":{"triggerKind":2,"triggerCharacter":":"}}}

[2023-08-10 22:57:04.867] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:04.867] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:04.867] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:04.867] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:04.874] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 48
[2023-08-10 22:57:04.875] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":16}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":5,"character":2},"end":{"line":5,"character":2}}},"message":"Insert `sig { params(x: BasicObject).returns(NilClass) }`"}]},{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":16}},"severity":1,"code":5004,"codeDescription":{"href":"https://srb.help/5004"},"message":"Malformed type declaration. Unknown type syntax. Expected a ClassName or T.<func>","relatedInformation":[]},{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":16}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `x` does not exist on `T::Private::Methods::DeclBuilder`","relatedInformation":[{"location":{"uri":"sorbet:https://github.com/sorbet/sorbet/tree/master/rbi/sorbet/t.rbi","range":{"start":{"line":5,"character":39},"end":{"line":5,"character":42}}},"message":"Got `T::Private::Methods::DeclBuilder` originating from:"}]},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":18}},"severity":1,"code":5003,"codeDescription":{"href":"https://srb.help/5003"},"message":"Malformed `sig`: No return type specified. Specify one with .returns()","relatedInformation":[]}]}}

[2023-08-10 22:57:04.886] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":39,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[{"label":"Complex","kind":2,"detail":"Kernel#Complex","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: T.any(Numeric, String),\n    y: T.any(Numeric, String),\n    exception: T::Boolean\n  )\n  .returns(Complex)\nend\ndef Complex(x, y=…, exception: …); end\n```\n\n---\n\nReturns x+i\\*y;\n\n```ruby\nComplex(1, 2)    #=> (1+2i)\nComplex('1+2i')  #=> (1+2i)\nComplex(nil)     #=> TypeError\nComplex(1, nil)  #=> TypeError\n\nComplex(1, nil, exception: false)  #=> nil\nComplex('1+2', exception: false)   #=> nil\n```\n\nSyntax of string form:\n\n```\nstring form = extra spaces , complex , extra spaces ;\ncomplex = real part | [ sign ] , imaginary part\n        | real part , sign , imaginary part\n        | rational , \"@\" , rational ;\nreal part = rational ;\nimaginary part = imaginary unit | unsigned rational , imaginary unit ;\nrational = [ sign ] , unsigned rational ;\nunsigned rational = numerator | numerator , \"/\" , denominator ;\nnumerator = integer part | fractional part | integer part , fractional part ;\ndenominator = digits ;\ninteger part = digits ;\nfractional part = \".\" , digits , [ ( \"e\" | \"E\" ) , [ sign ] , digits ] ;\nimaginary unit = \"i\" | \"I\" | \"j\" | \"J\" ;\nsign = \"-\" | \"+\" ;\ndigits = digit , { digit | \"_\" , digit };\ndigit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\nextra spaces = ? \\s* ? ;\n```\n\nSee\n[`String#to_c`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_c)."},"sortText":"000000","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":15},"end":{"line":4,"character":16}},"newText":"Complex(${1:T.any(Numeric, String)})${0}"}},{"label":"at_exit","kind":2,"detail":"Kernel#at_exit","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.proc.returns(BasicObject)).returns(Proc)}\ndef at_exit(&blk); end\n```\n\n---\n\nConverts *block* to a `Proc` object (and therefore binds it at the point of\ncall) and registers it for execution when the program exits. If multiple\nhandlers are registered, they are executed in reverse order of registration.\n\n```ruby\ndef do_at_exit(str1)\n  at_exit { print str1 }\nend\nat_exit { puts \"cruel world\" }\ndo_at_exit(\"goodbye \")\nexit\n```\n\n*produces:*\n\n```ruby\ngoodbye cruel world\n```"},"sortText":"000001","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":15},"end":{"line":4,"character":16}},"newText":"at_exit do\n  ${1}\nend${0}"}},{"label":"exec","kind":2,"detail":"Kernel#exec","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: String).returns(T.noreturn)}\ndef exec(*args); end\n```\n\n---\n\nReplaces the current process by running the given external *command*, which\ncan take one of the following forms:\n\n`exec(commandline)`\n:   command line string which is passed to the standard shell\n`exec(cmdname, arg1, ...)`\n:   command name and one or more arguments (no shell)\n`exec([cmdname, argv0], arg1, ...)`\n:   command name, [argv](0) and zero or more arguments (no shell)\n\n\nIn the first form, the string is taken as a command line that is subject to\nshell expansion before being executed.\n\nThe standard shell always means `\"/bin/sh\"` on Unix-like systems, otherwise,\n`ENV[\"RUBYSHELL\"]` or `ENV[\"COMSPEC\"]` on Windows and similar. The command\nis passed as an argument to the `\"-c\"` switch to the shell, except in the\ncase of `COMSPEC`.\n\nIf the string from the first form (`exec(\"command\")`) follows these simple\nrules:\n\n*   no meta characters\n*   not starting with shell reserved word or special built-in\n*   Ruby invokes the command directly without shell\n\n\nYou can force shell invocation by adding \";\" to the string (because \";\" is a\nmeta character).\n\nNote that this behavior is observable by pid obtained (return value of\nspawn() and\n[`IO#pid`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-pid) for\n[`IO.popen`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-popen)) is\nthe pid of the invoked command, not shell.\n\nIn the second form (`exec(\"command1\", \"arg1\", ...)`), the first is taken as\na command name and the rest are passed as parameters to command with no\nshell expansion.\n\nIn the third form (`exec([\"command\", \"argv0\"], \"arg1\", ...)`), starting a\ntwo-element array at the beginning of the command, the first element is the\ncommand to be executed, and the second argument is used as the `argv[0]`\nvalue, which may show up in process listings.\n\nIn order to execute the command, one of the `exec(2)` system calls are used,\nso the running command may inherit some of the environment of the original\nprogram (including open file descriptors).\n\nThis behavior is modified by the given `env` and `options` parameters. See\n::spawn for details.\n\nIf the command fails to execute (typically Errno::ENOENT when it was not\nfound) a\n[`SystemCallError`](https://docs.ruby-lang.org/en/2.7.0/SystemCallError.html)\nexception is raised.\n\nThis method modifies process attributes according to given `options` before\n`exec(2)` system call. See ::spawn for more details about the given\n`options`.\n\nThe modified attributes may be retained when `exec(2)` system call fails.\n\nFor example, hard resource limits are not restorable.\n\nConsider to create a child process using ::spawn or\n[`Kernel#system`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-system)\nif this is not acceptable.\n\n```ruby\nexec \"echo *\"       # echoes list of files in current directory\n# never get here\n\nexec \"echo\", \"*\"    # echoes an asterisk\n# never get here\n```"},"sortText":"000002","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":15},"end":{"line":4,"character":16}},"newText":"exec${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef exit; end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000003","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":15},"end":{"line":4,"character":16}},"newText":"exit${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit (overload.1)(status=…); end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000004","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":15},"end":{"line":4,"character":16}},"newText":"exit${0}"}},{"label":"exit!","kind":2,"detail":"Kernel#exit!","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit!(status=…); end\n```\n\n---\n\nExits the process immediately. No exit handlers are run. *status* is\nreturned to the underlying system as the exit status.\n\n```ruby\nProcess.exit!(true)\n```"},"sortText":"000005","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":15},"end":{"line":4,"character":16}},"newText":"exit!${0}"}},{"label":"extend","kind":2,"detail":"Kernel#extend","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T::Private::Methods::DeclBuilder)}\ndef extend(*arg0); end\n```"},"sortText":"000006","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":15},"end":{"line":4,"character":16}},"newText":"extend${0}"}},{"label":"instance_exec","kind":2,"detail":"BasicObject#instance_exec","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    args: T.type_parameter(:V),\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_exec(*args, &blk); end\n```\n\n---\n\nExecutes the given block within the context of the receiver (*obj*). In\norder to set the context, the variable `self` is set to *obj* while the code\nis executing, giving the code access to *obj*'s instance variables.\nArguments are passed as block parameters.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\nend\nk = KlassWithSecret.new\nk.instance_exec(5) {|x| @secret+x }   #=> 104\n```"},"sortText":"000007","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":15},"end":{"line":4,"character":16}},"newText":"instance_exec do |${1:T.untyped}|\n  ${2}\nend${0}"}}]}}

[2023-08-10 22:57:05.132] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":82},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x: I)}\n  def example(x)\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:05.132] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":40,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":4,"character":18},"context":{"triggerKind":1}}}

[2023-08-10 22:57:05.231] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:05.231] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:05.231] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:05.231] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:05.261] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 49
[2023-08-10 22:57:05.262] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"severity":1,"code":5002,"codeDescription":{"href":"https://srb.help/5002"},"message":"Unable to resolve constant `I` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}}},"message":"Replace with `Complex::I`"},{"location":{"uri":"sorbet:https://github.com/sorbet/sorbet/tree/master/rbi/core/complex.rbi","range":{"start":{"line":43,"character":2},"end":{"line":43,"character":3}}},"message":"`Complex::I` defined here"}]},{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":16}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":5,"character":2},"end":{"line":5,"character":2}}},"message":"Insert `sig { params(x: BasicObject).returns(NilClass) }`"}]},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":20}},"severity":1,"code":5003,"codeDescription":{"href":"https://srb.help/5003"},"message":"Malformed `sig`: No return type specified. Specify one with .returns()","relatedInformation":[]}]}}

[2023-08-10 22:57:05.268] [consoleAndFile] [debug] Looking for constant similar to I
[2023-08-10 22:57:05.305] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":40,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[{"label":"CGI","kind":7,"detail":"CGI","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(CGI)\n```\n\n---\n\n## Overview\n\nThe Common Gateway Interface\n([`CGI`](https://docs.ruby-lang.org/en/2.7.0/CGI.html)) is a simple protocol\nfor passing an HTTP request from a web server to a standalone program, and\nreturning the output to the web browser. Basically, a\n[`CGI`](https://docs.ruby-lang.org/en/2.7.0/CGI.html) program is called with\nthe parameters of the request passed in either in the environment (GET) or via\n$stdin (POST), and everything it prints to $stdout is returned to the client.\n\nThis file holds the [`CGI`](https://docs.ruby-lang.org/en/2.7.0/CGI.html)\nclass. This class provides functionality for retrieving HTTP request\nparameters, managing cookies, and generating HTML output.\n\nThe file\n[`CGI::Session`](https://docs.ruby-lang.org/en/2.7.0/CGI/Session.html)\nprovides session management functionality; see that class for more details.\n\nSee http://www.w3.org/CGI/ for more information on the\n[`CGI`](https://docs.ruby-lang.org/en/2.7.0/CGI.html) protocol.\n\n## Introduction\n\n[`CGI`](https://docs.ruby-lang.org/en/2.7.0/CGI.html) is a large class,\nproviding several categories of methods, many of which are mixed in from other\nmodules. Some of the documentation is in this class, some in the modules\n[`CGI::QueryExtension`](https://docs.ruby-lang.org/en/2.7.0/CGI/QueryExtension.html)\nand\n[`CGI::HtmlExtension`](https://docs.ruby-lang.org/en/2.7.0/CGI/HtmlExtension.html).\nSee [`CGI::Cookie`](https://docs.ruby-lang.org/en/2.7.0/CGI/Cookie.html) for\nspecific information on handling cookies, and cgi/session.rb\n([`CGI::Session`](https://docs.ruby-lang.org/en/2.7.0/CGI/Session.html)) for\ninformation on sessions.\n\nFor queries, [`CGI`](https://docs.ruby-lang.org/en/2.7.0/CGI.html) provides\nmethods to get at environmental variables, parameters, cookies, and multipart\nrequest data. For responses,\n[`CGI`](https://docs.ruby-lang.org/en/2.7.0/CGI.html) provides methods for\nwriting output and generating HTML.\n\nRead on for more details. Examples are provided at the bottom.\n\n## Queries\n\nThe [`CGI`](https://docs.ruby-lang.org/en/2.7.0/CGI.html) class dynamically\nmixes in parameter and cookie-parsing functionality,  environmental variable\naccess, and support for parsing multipart requests (including uploaded files)\nfrom the\n[`CGI::QueryExtension`](https://docs.ruby-lang.org/en/2.7.0/CGI/QueryExtension.html)\nmodule.\n\n### Environmental Variables\n\nThe standard [`CGI`](https://docs.ruby-lang.org/en/2.7.0/CGI.html)\nenvironmental variables are available as read-only attributes of a\n[`CGI`](https://docs.ruby-lang.org/en/2.7.0/CGI.html) object. The following is\na list of these variables:\n\n```ruby\nAUTH_TYPE               HTTP_HOST          REMOTE_IDENT\nCONTENT_LENGTH          HTTP_NEGOTIATE     REMOTE_USER\nCONTENT_TYPE            HTTP_PRAGMA        REQUEST_METHOD\nGATEWAY_INTERFACE       HTTP_REFERER       SCRIPT_NAME\nHTTP_ACCEPT             HTTP_USER_AGENT    SERVER_NAME\nHTTP_ACCEPT_CHARSET     PATH_INFO          SERVER_PORT\nHTTP_ACCEPT_ENCODING    PATH_TRANSLATED    SERVER_PROTOCOL\nHTTP_ACCEPT_LANGUAGE    QUERY_STRING       SERVER_SOFTWARE\nHTTP_CACHE_CONTROL      REMOTE_ADDR\nHTTP_FROM               REMOTE_HOST\n```\n\nFor each of these variables, there is a corresponding attribute with the same\nname, except all lower case and without a preceding HTTP\\_. `content_length`\nand `server_port` are integers; the rest are strings.\n\n### Parameters\n\nThe method params() returns a hash of all parameters in the request as\nname/value-list pairs, where the value-list is an\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of one or more\nvalues. The [`CGI`](https://docs.ruby-lang.org/en/2.7.0/CGI.html) object\nitself also behaves as a hash of parameter names to values, but only returns a\nsingle value (as a\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html)) for each\nparameter name.\n\nFor instance, suppose the request contains the parameter \"favourite\\_colours\"\nwith the multiple values \"blue\" and \"green\". The following behavior would\noccur:\n\n```ruby\ncgi.params[\"favourite_colours\"]  # => [\"blue\", \"green\"]\ncgi[\"favourite_colours\"]         # => \"blue\"\n```\n\nIf a parameter does not exist, the former method will return an empty array,\nthe latter an empty string. The simplest way to test for existence of a\nparameter is by the has\\_key? method.\n\n### Cookies\n\nHTTP Cookies are automatically parsed from the request. They are available\nfrom the cookies() accessor, which returns a hash from cookie name to\n[`CGI::Cookie`](https://docs.ruby-lang.org/en/2.7.0/CGI/Cookie.html) object.\n\n### Multipart requests\n\nIf a request's method is POST and its content type is multipart/form-data,\nthen it may contain uploaded files. These are stored by the QueryExtension\nmodule in the parameters of the request. The parameter name is the name\nattribute of the file input field, as usual. However, the value is not a\nstring, but an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object,\neither an IOString for small files, or a\n[`Tempfile`](https://docs.ruby-lang.org/en/2.7.0/Tempfile.html) for larger\nones. This object also has the additional singleton methods:\n\nlocal\\_path()\n:   the path of the uploaded file on the local filesystem\noriginal\\_filename()\n:   the name of the file on the client computer\ncontent\\_type()\n:   the content type of the file\n\n\n## Responses\n\nThe [`CGI`](https://docs.ruby-lang.org/en/2.7.0/CGI.html) class provides\nmethods for sending header and content output to the HTTP client, and mixes in\nmethods for programmatic HTML generation from\n[`CGI::HtmlExtension`](https://docs.ruby-lang.org/en/2.7.0/CGI/HtmlExtension.html)\nand CGI::TagMaker modules. The precise version of HTML to use for HTML\ngeneration is specified at object creation time.\n\n### Writing output\n\nThe simplest way to send output to the HTTP client is using the\n[`out()`](https://docs.ruby-lang.org/en/2.7.0/CGI.html#method-i-out) method.\nThis takes the HTTP headers as a hash parameter, and the body content via a\nblock. The headers can be generated as a string using the\n[`http_header()`](https://docs.ruby-lang.org/en/2.7.0/CGI.html#method-i-http_header)\nmethod. The output stream can be written directly to using the\n[`print()`](https://docs.ruby-lang.org/en/2.7.0/CGI.html#method-i-print)\nmethod.\n\n### Generating HTML\n\nEach HTML element has a corresponding method for generating that element as a\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html). The name of this\nmethod is the same as that of the element, all lowercase. The attributes of\nthe element are passed in as a hash, and the body as a no-argument block that\nevaluates to a [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html).\nThe HTML generation module knows which elements are always empty, and silently\ndrops any passed-in body. It also knows which elements require matching\nclosing tags and which don't. However, it does not know what attributes are\nlegal for which elements.\n\nThere are also some additional HTML generation methods mixed in from the\n[`CGI::HtmlExtension`](https://docs.ruby-lang.org/en/2.7.0/CGI/HtmlExtension.html)\nmodule. These include individual methods for the different types of form\ninputs, and methods for elements that commonly take particular attributes\nwhere the attributes can be directly specified as arguments, rather than via a\nhash.\n\n### Utility HTML escape and other methods like a function.\n\nThere are some utility tool defined in cgi/util.rb . And when include, you can\nuse utility methods like a function.\n\n## Examples of use\n\n### Get form values\n\n```ruby\nrequire \"cgi\"\ncgi = CGI.new\nvalue = cgi['field_name']   # <== value string for 'field_name'\n  # if not 'field_name' included, then return \"\".\nfields = cgi.keys            # <== array of field names\n\n# returns true if form has 'field_name'\ncgi.has_key?('field_name')\ncgi.has_key?('field_name')\ncgi.include?('field_name')\n```\n\nCAUTION! [cgi]('field_name') returned an\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) with the old\ncgi.rb(included in Ruby 1.6)\n\n### Get form values as hash\n\n```ruby\nrequire \"cgi\"\ncgi = CGI.new\nparams = cgi.params\n```\n\ncgi.params is a hash.\n\n```ruby\ncgi.params['new_field_name'] = [\"value\"]  # add new param\ncgi.params['field_name'] = [\"new_value\"]  # change value\ncgi.params.delete('field_name')           # delete param\ncgi.params.clear                          # delete all params\n```\n\n### Save form values to file\n\n```ruby\nrequire \"pstore\"\ndb = PStore.new(\"query.db\")\ndb.transaction do\n  db[\"params\"] = cgi.params\nend\n```\n\n### Restore form values from file\n\n```ruby\nrequire \"pstore\"\ndb = PStore.new(\"query.db\")\ndb.transaction do\n  cgi.params = db[\"params\"]\nend\n```\n\n### Get multipart form values\n\n```ruby\nrequire \"cgi\"\ncgi = CGI.new\nvalue = cgi['field_name']   # <== value string for 'field_name'\nvalue.read                  # <== body of value\nvalue.local_path            # <== path to local file of value\nvalue.original_filename     # <== original filename of value\nvalue.content_type          # <== content_type of value\n```\n\nand value has [`StringIO`](https://docs.ruby-lang.org/en/2.7.0/StringIO.html)\nor [`Tempfile`](https://docs.ruby-lang.org/en/2.7.0/Tempfile.html) class\nmethods.\n\n### Get cookie values\n\n```ruby\nrequire \"cgi\"\ncgi = CGI.new\nvalues = cgi.cookies['name']  # <== array of 'name'\n  # if not 'name' included, then return [].\nnames = cgi.cookies.keys      # <== array of cookie names\n```\n\nand cgi.cookies is a hash.\n\n### Get cookie objects\n\n```ruby\nrequire \"cgi\"\ncgi = CGI.new\nfor name, cookie in cgi.cookies\n  cookie.expires = Time.now + 30\nend\ncgi.out(\"cookie\" => cgi.cookies) {\"string\"}\n\ncgi.cookies # { \"name1\" => cookie1, \"name2\" => cookie2, ... }\n\nrequire \"cgi\"\ncgi = CGI.new\ncgi.cookies['name'].expires = Time.now + 30\ncgi.out(\"cookie\" => cgi.cookies['name']) {\"string\"}\n```\n\n### Print http header and html string to $DEFAULT\\_OUTPUT ($>)\n\n```ruby\nrequire \"cgi\"\ncgi = CGI.new(\"html4\")  # add HTML generation methods\ncgi.out do\n  cgi.html do\n    cgi.head do\n      cgi.title { \"TITLE\" }\n    end +\n    cgi.body do\n      cgi.form(\"ACTION\" => \"uri\") do\n        cgi.p do\n          cgi.textarea(\"get_text\") +\n          cgi.br +\n          cgi.submit\n        end\n      end +\n      cgi.pre do\n        CGI.escapeHTML(\n          \"params: #{cgi.params.inspect}\\n\" +\n          \"cookies: #{cgi.cookies.inspect}\\n\" +\n          ENV.collect do |key, value|\n            \"#{key} --> #{value}\\n\"\n          end.join(\"\")\n        )\n      end\n    end\n  end\nend\n\n# add HTML generation methods\nCGI.new(\"html3\")    # html3.2\nCGI.new(\"html4\")    # html4.01 (Strict)\nCGI.new(\"html4Tr\")  # html4.01 Transitional\nCGI.new(\"html4Fr\")  # html4.01 Frameset\nCGI.new(\"html5\")    # html5\n```\n\n### Some utility methods\n\n```ruby\nrequire 'cgi/util'\nCGI.escapeHTML('Usage: foo \"bar\" <baz>')\n```\n\n### Some utility methods like a function\n\n```ruby\nrequire 'cgi/util'\ninclude CGI::Util\nescapeHTML('Usage: foo \"bar\" <baz>')\nh('Usage: foo \"bar\" <baz>') # alias\n```"},"sortText":"000000","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"CGI${0}"}},{"label":"CROSS_COMPILING","kind":5,"detail":"CROSS_COMPILING","documentation":{"kind":"markdown","value":"```ruby\nNilClass\n```"},"sortText":"000001","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"CROSS_COMPILING${0}"}},{"label":"IO","kind":7,"detail":"IO","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(IO)[IO]\n```\n\n---\n\nExpect library adds the [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html)\ninstance method\n[`expect`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-expect), which\ndoes similar act to tcl's expect extension.\n\nIn order to use this method, you must require expect:\n\n```ruby\nrequire 'expect'\n```\n\nPlease see\n[`expect`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-expect) for\nusage.\nThe [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) class is the basis for\nall input and output in Ruby. An I/O stream may be *duplexed* (that is,\nbidirectional), and so may use more than one native operating system stream.\n\nMany of the examples in this section use the\n[`File`](https://docs.ruby-lang.org/en/2.7.0/File.html) class, the only\nstandard subclass of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html). The\ntwo classes are closely associated. Like the\n[`File`](https://docs.ruby-lang.org/en/2.7.0/File.html) class, the\n[`Socket`](https://docs.ruby-lang.org/en/2.7.0/Socket.html) library subclasses\nfrom [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) (such as\n[`TCPSocket`](https://docs.ruby-lang.org/en/2.7.0/TCPSocket.html) or\n[`UDPSocket`](https://docs.ruby-lang.org/en/2.7.0/UDPSocket.html)).\n\nThe\n[`Kernel#open`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-open)\nmethod can create an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) (or\n[`File`](https://docs.ruby-lang.org/en/2.7.0/File.html)) object for these\ntypes of arguments:\n\n*   A plain string represents a filename suitable for the underlying operating\n    system.\n\n*   A string starting with `\"|\"` indicates a subprocess. The remainder of the\n    string following the `\"|\"` is invoked as a process with appropriate\n    input/output channels connected to it.\n\n*   A string equal to `\"|-\"` will create another Ruby instance as a\n    subprocess.\n\n\nThe [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) may be opened with\ndifferent file modes (read-only, write-only) and encodings for proper\nconversion. See\n[`IO.new`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-new) for these\noptions. See\n[`Kernel#open`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-open)\nfor details of the various command formats described above.\n\n[`IO.popen`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-popen), the\n[`Open3`](https://docs.ruby-lang.org/en/2.7.0/Open3.html) library, or\nProcess#spawn may also be used to communicate with subprocesses through an\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html).\n\nRuby will convert pathnames between different operating system conventions if\npossible. For instance, on a Windows system the filename\n`\"/gumby/ruby/test.rb\"` will be opened as `\"\\gumby\\ruby\\test.rb\"`. When\nspecifying a Windows-style filename in a Ruby string, remember to escape the\nbackslashes:\n\n```ruby\n\"C:\\\\gumby\\\\ruby\\\\test.rb\"\n```\n\nOur examples here will use the Unix-style forward slashes;\nFile::ALT\\_SEPARATOR can be used to get the platform-specific separator\ncharacter.\n\nThe global constant [`ARGF`](https://docs.ruby-lang.org/en/2.7.0/ARGF.html)\n(also accessible as `$<`) provides an IO-like stream which allows access to\nall files mentioned on the command line (or STDIN if no files are mentioned).\n[`ARGF#path`](https://docs.ruby-lang.org/en/2.7.0/ARGF.html#method-i-path) and\nits alias\n[`ARGF#filename`](https://docs.ruby-lang.org/en/2.7.0/ARGF.html#method-i-filename)\nare provided to access the name of the file currently being read.\n\n## io/console\n\nThe io/console extension provides methods for interacting with the console.\nThe console can be accessed from\n[`IO.console`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-console)\nor the standard input/output/error\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects.\n\nRequiring io/console adds the following methods:\n\n*   [`IO::console`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-console)\n*   [`IO#raw`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-raw)\n*   [`IO#raw!`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-raw-21)\n*   [`IO#cooked`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-cooked)\n*   [`IO#cooked!`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-cooked-21)\n*   [`IO#getch`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-getch)\n*   [`IO#echo=`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-echo-3D)\n*   [`IO#echo?`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-echo-3F)\n*   [`IO#noecho`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-noecho)\n*   [`IO#winsize`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-winsize)\n*   [`IO#winsize=`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-winsize-3D)\n*   [`IO#iflush`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-iflush)\n*   [`IO#ioflush`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-ioflush)\n*   [`IO#oflush`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-oflush)\n\n\nExample:\n\n```ruby\nrequire 'io/console'\nrows, columns = $stdout.winsize\nputs \"Your screen is #{columns} wide and #{rows} tall\"\n```\n\n## Example Files\n\nMany examples here use these filenames and their corresponding files:\n\n*   `t.txt`: A text-only file that is assumed to exist via:\n\n```ruby\ntext = <<~EOT\n  This is line one.\n  This is the second line.\n  This is the third line.\nEOT\nFile.write('t.txt', text)\n```\n\n*   `t.dat`: A data file that is assumed to exist via:\n\n```ruby\ndata = \"\\u9990\\u9991\\u9992\\u9993\\u9994\"\nf = File.open('t.dat', 'wb:UTF-16')\nf.write(data)\nf.close\n```\n\n*   `t.rus`: A Russian-language text file that is assumed to exist via:\n\n```ruby\nFile.write('t.rus', \"\\u{442 435 441 442}\")\n```\n\n*   `t.tmp`: A file that is assumed *not* to exist.\n\n\n## Modes\n\nA number of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) method calls\nmust or may specify a *mode* for the stream; the mode determines how stream is\nto be accessible, including:\n\n*   Whether the stream is to be read-only, write-only, or read-write.\n*   Whether the stream is positioned at its beginning or its end.\n*   Whether the stream treats data as text-only or binary.\n*   The external and internal encodings.\n\n\n### Mode Specified as an [`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html)\n\nWhen `mode` is an integer it must be one or more (combined by bitwise OR (`|`)\nof the modes defined in File::Constants:\n\n*   `File::RDONLY`: Open for reading only.\n*   `File::WRONLY`: Open for writing only.\n*   `File::RDWR`: Open for reading and writing.\n*   `File::APPEND`: Open for appending only.\n*   `File::CREAT`: Create file if it does not exist.\n*   `File::EXCL`: Raise an exception if `File::CREAT` is given and the file\n    exists.\n\n\nExamples:\n\n```ruby\nFile.new('t.txt', File::RDONLY)\nFile.new('t.tmp', File::RDWR | File::CREAT | File::EXCL)\n```\n\nNote: [`Method`](https://docs.ruby-lang.org/en/2.7.0/Method.html)\n[`IO#set_encoding`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-set_encoding)\ndoes not allow the mode to be specified as an integer.\n\n### Mode Specified As a [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html)\n\nWhen `mode` is a string it must begin with one of the following:\n\n*   `'r'`: Read-only stream, positioned at the beginning; the stream cannot be\n    changed to writable.\n*   `'w'`: Write-only stream, positioned at the beginning; the stream cannot\n    be changed to readable.\n*   `'a'`: Write-only stream, positioned at the end; every write appends to\n    the end; the stream cannot be changed to readable.\n*   `'r+'`: Read-write stream, positioned at the beginning.\n*   `'w+'`: Read-write stream, positioned at the end.\n*   `'a+'`: Read-write stream, positioned at the end.\n\n\nFor a writable file stream (that is, any except read-only), the file is\ntruncated to zero if it exists, and is created if it does not exist.\n\nExamples:\n\n```ruby\nFile.open('t.txt', 'r')\nFile.open('t.tmp', 'w')\n```\n\nEither of the following may be suffixed to any of the above:\n\n*   `'t'`: Text data; sets the default external encoding to `Encoding::UTF_8`;\n    on Windows, enables conversion between EOL and CRLF.\n*   `'b'`: Binary data; sets the default external encoding to\n    `Encoding::ASCII_8BIT`; on Windows, suppresses conversion between EOL and\n    CRLF.\n\n\nIf neither is given, the stream defaults to text data.\n\nExamples:\n\n```ruby\nFile.open('t.txt', 'rt')\nFile.open('t.dat', 'rb')\n```\n\nThe following may be suffixed to any writable mode above:\n\n*   `'x'`: Creates the file if it does not exist; raises an exception if the\n    file exists.\n\n\nExample:\n\n```ruby\nFile.open('t.tmp', 'wx')\n```\n\nFinally, the mode string may specify encodings -- either external encoding\nonly or both external and internal encodings -- by appending one or both\nencoding names, separated by colons:\n\n```ruby\nf = File.new('t.dat', 'rb')\nf.external_encoding # => #<Encoding:ASCII-8BIT>\nf.internal_encoding # => nil\nf = File.new('t.dat', 'rb:UTF-16')\nf.external_encoding # => #<Encoding:UTF-16 (dummy)>\nf.internal_encoding # => nil\nf = File.new('t.dat', 'rb:UTF-16:UTF-16')\nf.external_encoding # => #<Encoding:UTF-16 (dummy)>\nf.internal_encoding # => #<Encoding:UTF-16>\n```\n\nThe numerous encoding names are available in array\n[`Encoding.name_list`](https://docs.ruby-lang.org/en/2.7.0/Encoding.html#method-c-name_list):\n\n```ruby\nEncoding.name_list.size    # => 175\nEncoding.name_list.take(3) # => [\"ASCII-8BIT\", \"UTF-8\", \"US-ASCII\"]\n```\n\n## Encodings\n\nWhen the external encoding is set, strings read are tagged by that encoding\nwhen reading, and strings written are converted to that encoding when writing.\n\nWhen both external and internal encodings are set, strings read are converted\nfrom external to internal encoding, and strings written are converted from\ninternal to external encoding. For further details about transcoding input and\noutput, see [`Encoding`](https://docs.ruby-lang.org/en/2.7.0/Encoding.html).\n\nIf the external encoding is `'BOM|UTF-8'`, `'BOM|UTF-16LE'` or\n`'BOM|UTF16-BE'`, Ruby checks for a Unicode BOM in the input document to help\ndetermine the encoding. For UTF-16 encodings the file open mode must be\nbinary. If the BOM is found, it is stripped and the external encoding from the\nBOM is used.\n\nNote that the BOM-style encoding option is case insensitive, so 'bom|utf-8' is\nalso valid.)\n\n## Open Options\n\nA number of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) methods accept\nan optional parameter `opts`, which determines how a new stream is to be\nopened:\n\n*   `:mode`: Stream mode.\n*   `:flags`: [`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html)\n    file open flags; If `mode` is also given, the two are bitwise-ORed.\n*   `:external_encoding`: External encoding for the stream.\n*   `:internal_encoding`: Internal encoding for the stream. `'-'` is a synonym\n    for the default internal encoding. If the value is `nil` no conversion\n    occurs.\n*   `:encoding`: Specifies external and internal encodings as\n    `'extern:intern'`.\n*   `:textmode`: If a truthy value, specifies the mode as text-only, binary\n    otherwise.\n*   `:binmode`: If a truthy value, specifies the mode as binary, text-only\n    otherwise.\n*   `:autoclose`: If a truthy value, specifies that the `fd` will close when\n    the stream closes; otherwise it remains open.\n\n\nAlso available are the options offered in\n[`String#encode`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-encode),\nwhich may control conversion between external internal encoding.\n\n## Getline Options\n\nA number of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) methods accept\noptional keyword arguments that determine how a stream is to be treated:\n\n*   `:chomp`: If `true`, line separators are omitted; default is  `false`.\n\n\n## Position\n\nAn [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) stream has a\n*position*, which is the non-negative integer offset (in bytes) in the stream\nwhere the next read or write will occur.\n\nNote that a text stream may have multi-byte characters, so a text stream whose\nposition is `n` (*bytes*) may not have `n` *characters* preceding the current\nposition -- there may be fewer.\n\nA new stream is initially positioned:\n\n*   At the beginning (position `0`) if its mode is `'r'`, `'w'`, or `'r+'`.\n*   At the end (position `self.size`) if its mode is `'a'`, `'w+'`, or `'a+'`.\n\n\nMethods to query the position:\n\n*   [`IO#tell`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-tell) and\n    its alias\n    [`IO#pos`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-pos)\n    return the position for an open stream.\n*   [`IO#eof?`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-eof-3F)\n    and its alias\n    [`IO#eof`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-eof)\n    return whether the position is at the end of a readable stream.\n\n\nReading from a stream usually changes its position:\n\n```ruby\nf = File.open('t.txt')\nf.tell     # => 0\nf.readline # => \"This is line one.\\n\"\nf.tell     # => 19\nf.readline # => \"This is the second line.\\n\"\nf.tell     # => 45\nf.eof?     # => false\nf.readline # => \"Here's the third line.\\n\"\nf.eof?     # => true\n```\n\nWriting to a stream usually changes its position:\n\n```ruby\nf = File.open('t.tmp', 'w')\nf.tell         # => 0\nf.write('foo') # => 3\nf.tell         # => 3\nf.write('bar') # => 3\nf.tell         # => 6\n```\n\nIterating over a stream usually changes its position:\n\n```ruby\nf = File.open('t.txt')\nf.each do |line|\n  p \"position=#{f.pos} eof?=#{f.eof?} line=#{line}\"\nend\n```\n\nOutput:\n\n```ruby\n\"position=19 eof?=false line=This is line one.\\n\"\n\"position=45 eof?=false line=This is the second line.\\n\"\n\"position=70 eof?=true line=This is the third line.\\n\"\n```\n\nThe position may also be changed by certain other methods:\n\n*   [`IO#pos=`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-pos-3D)\n    and [`IO#seek`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-seek)\n    change the position to a specified offset.\n*   [`IO#rewind`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-rewind)\n    changes the position to the beginning.\n\n\n## Line Number\n\nA readable [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) stream has a\n*line* *number*, which is the non-negative integer line number in the stream\nwhere the next read will occur.\n\nA new stream is initially has line number `0`.\n\n[`Method`](https://docs.ruby-lang.org/en/2.7.0/Method.html)\n[`IO#lineno`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-lineno)\nreturns the line number.\n\nReading lines from a stream usually changes its line number:\n\n```ruby\nf = File.open('t.txt', 'r')\nf.lineno   # => 0\nf.readline # => \"This is line one.\\n\"\nf.lineno   # => 1\nf.readline # => \"This is the second line.\\n\"\nf.lineno   # => 2\nf.readline # => \"Here's the third line.\\n\"\nf.lineno   # => 3\nf.eof?     # => true\n```\n\nIterating over lines in a stream usually changes its line number:\n\n```ruby\nf = File.open('t.txt')\nf.each_line do |line|\n  p \"position=#{f.pos} eof?=#{f.eof?} line=#{line}\"\nend\n```\n\nOutput:\n\n```ruby\n\"position=19 eof?=false line=This is line one.\\n\"\n\"position=45 eof?=false line=This is the second line.\\n\"\n\"position=70 eof?=true line=This is the third line.\\n\"\n```\n\n## What's Here\n\nFirst, what's elsewhere.\n[`Class`](https://docs.ruby-lang.org/en/2.7.0/Class.html) IO:\n\n*   Inherits from [class\n    Object](Object.html#class-Object-label-What-27s+Here).\n*   Includes [module\n    Enumerable](Enumerable.html#module-Enumerable-label-What-27s+Here), which\n    provides dozens of additional methods.\n\n\nHere, class [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) provides\nmethods that are useful for:\n\n*   [Creating](#class-IO-label-Creating)\n*   [Reading](#class-IO-label-Reading)\n*   [Writing](#class-IO-label-Writing)\n*   [Positioning](#class-IO-label-Positioning)\n*   [Iterating](#class-IO-label-Iterating)\n*   [Settings](#class-IO-label-Settings)\n*   [Querying](#class-IO-label-Querying)\n*   [Buffering](#class-IO-label-Buffering)\n*   [Low-Level Access](#class-IO-label-Low-Level+Access)\n*   [Other](#class-IO-label-Other)\n\n\n### Creating\n\n    [`::new`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-new) (aliased as [`::for_fd`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-for_fd))\n:       Creates and returns a new\n        [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object for the\n        given integer file descriptor.\n\n    [`::open`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-open)\n:       Creates a new [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html)\n        object.\n\n    [`::pipe`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-pipe)\n:       Creates a connected pair of reader and writer\n        [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects.\n\n    [`::popen`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-popen)\n:       Creates an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object\n        to interact with a subprocess.\n\n    [`::select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\n:       Selects which given\n        [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) instances are\n        ready for reading,\n\n    writing, or have pending exceptions.\n\n\n### Reading\n\n    [`::binread`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-binread)\n:       Returns a binary string with all or a subset of bytes from the given\n        file.\n\n    [`::read`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-read)\n:       Returns a string with all or a subset of bytes from the given file.\n\n    [`::readlines`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-readlines)\n:       Returns an array of strings, which are the lines from the given file.\n\n    [`getbyte`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-getbyte)\n:       Returns the next 8-bit byte read from `self` as an integer.\n\n    [`getc`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-getc)\n:       Returns the next character read from `self` as a string.\n\n    [`gets`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-gets)\n:       Returns the line read from `self`.\n\n    [`pread`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-pread)\n:       Returns all or the next *n* bytes read from `self`, not updating the\n        receiver's offset.\n\n    [`read`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-read)\n:       Returns all remaining or the next *n* bytes read from `self` for a\n        given *n*.\n\n    [`read_nonblock`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-read_nonblock)\n:       the next *n* bytes read from `self` for a given *n*, in non-block\n        mode.\n\n    [`readbyte`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-readbyte)\n:       Returns the next byte read from `self`; same as\n        [`getbyte`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-getbyte),\n        but raises an exception on end-of-file.\n\n    [`readchar`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-readchar)\n:       Returns the next character read from `self`; same as\n        [`getc`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-getc),\n        but raises an exception on end-of-file.\n\n    [`readline`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-readline)\n:       Returns the next line read from `self`; same as getline, but raises an\n        exception of end-of-file.\n\n    [`readlines`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-readlines)\n:       Returns an array of all lines read read from `self`.\n\n    [`readpartial`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-readpartial)\n:       Returns up to the given number of bytes from `self`.\n\n\n\n### Writing\n\n    [`::binwrite`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-binwrite)\n:       Writes the given string to the file at the given filepath, in binary\n        mode.\n\n    [`::write`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-write)\n:       Writes the given string to `self`.\n\n    [:<<](#method-i-3C-3C)\n:       Appends the given string to `self`.\n\n    [`print`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-print)\n:       Prints last read line or given objects to `self`.\n\n    [`printf`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-printf)\n:       Writes to `self` based on the given format string and objects.\n\n    [`putc`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-putc)\n:       Writes a character to `self`.\n\n    [`puts`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-puts)\n:       Writes lines to `self`, making sure line ends with a newline.\n\n    [`pwrite`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-pwrite)\n:       Writes the given string at the given offset, not updating the\n        receiver's offset.\n\n    [`write`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-write)\n:       Writes one or more given strings to `self`.\n\n    [`write_nonblock`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-write_nonblock)\n:       Writes one or more given strings to `self` in non-blocking mode.\n\n\n\n### Positioning\n\n    [`lineno`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-lineno)\n:       Returns the current line number in `self`.\n\n    [`lineno=`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-lineno-3D)\n:       Sets the line number is `self`.\n\n    [`pos`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-pos) (aliased as [`tell`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-tell))\n:       Returns the current byte offset in `self`.\n\n    [`pos=`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-pos-3D)\n:       Sets the byte offset in `self`.\n\n    [`reopen`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-reopen)\n:       Reassociates `self` with a new or existing\n        [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) stream.\n\n    [`rewind`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-rewind)\n:       Positions `self` to the beginning of input.\n\n    [`seek`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-seek)\n:       Sets the offset for `self` relative to given position.\n\n\n\n### Iterating\n\n    [`::foreach`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-foreach)\n:       Yields each line of given file to the block.\n\n    [`each`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-each) (aliased as [`each_line`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-each_line))\n:       Calls the given block with each successive line in `self`.\n\n    [`each_byte`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-each_byte)\n:       Calls the given block with each successive byte in `self` as an\n        integer.\n\n    [`each_char`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-each_char)\n:       Calls the given block with each successive character in `self` as a\n        string.\n\n    [`each_codepoint`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-each_codepoint)\n:       Calls the given block with each successive codepoint in `self` as an\n        integer.\n\n\n\n### Settings\n\n    [`autoclose=`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-autoclose-3D)\n:       Sets whether `self` auto-closes.\n\n    [`binmode`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-binmode)\n:       Sets `self` to binary mode.\n\n    [`close`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-close)\n:       Closes `self`.\n\n    [`close_on_exec=`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-close_on_exec-3D)\n:       Sets the close-on-exec flag.\n\n    [`close_read`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-close_read)\n:       Closes `self` for reading.\n\n    [`close_write`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-close_write)\n:       Closes `self` for writing.\n\n    [`set_encoding`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-set_encoding)\n:       Sets the encoding for `self`.\n\n    [`set_encoding_by_bom`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-set_encoding_by_bom)\n:       Sets the encoding for `self`, based on its Unicode byte-order-mark.\n\n    [`sync=`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-sync-3D)\n:       Sets the sync-mode to the given value.\n\n\n\n### Querying\n\n    [`autoclose?`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-autoclose-3F)\n:       Returns whether `self` auto-closes.\n\n    [`binmode?`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-binmode-3F)\n:       Returns whether `self` is in binary mode.\n\n    [`close_on_exec?`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-close_on_exec-3F)\n:       Returns the close-on-exec flag for `self`.\n\n    [`closed?`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-closed-3F)\n:       Returns whether `self` is closed.\n\n    [`eof?`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-eof-3F) (aliased as [`eof`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-eof))\n:       Returns whether `self` is at end-of-file.\n\n    [`external_encoding`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-external_encoding)\n:       Returns the external encoding object for `self`.\n\n    [`fileno`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-fileno) (aliased as [`to_i`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-to_i))\n:       Returns the integer file descriptor for `self`\n\n    [`internal_encoding`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-internal_encoding)\n:       Returns the internal encoding object for `self`.\n\n    [`pid`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-pid)\n:       Returns the process ID of a child process associated with `self`, if\n        `self` was created by\n        [`::popen`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-popen).\n\n    [`stat`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-stat)\n:       Returns the\n        [`File::Stat`](https://docs.ruby-lang.org/en/2.7.0/File/Stat.html)\n        object containing status information for `self`.\n\n    [`sync`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-sync)\n:       Returns whether `self` is in sync-mode.\n\n    tty (aliased as [`isatty`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-isatty))\n:       Returns whether `self` is a terminal.\n\n\n\n### Buffering\n\n    [`fdatasync`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-fdatasync)\n:       Immediately writes all buffered data in `self` to disk.\n\n    [`flush`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-flush)\n:       Flushes any buffered data within `self` to the underlying operating\n        system.\n\n    [`fsync`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-fsync)\n:       Immediately writes all buffered data and attributes in `self` to disk.\n\n    [`ungetbyte`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-ungetbyte)\n:       Prepends buffer for `self` with given integer byte or string.\n\n    [`ungetc`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-ungetc)\n:       Prepends buffer for `self` with given string.\n\n\n\n### Low-Level Access\n\n    [`::sysopen`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-sysopen)\n:       Opens the file given by its path, returning the integer file\n        descriptor.\n\n    [`advise`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-advise)\n:       Announces the intention to access data from `self` in a specific way.\n\n    [`fcntl`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-fcntl)\n:       Passes a low-level command to the file specified by the given file\n        descriptor.\n\n    [`ioctl`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-ioctl)\n:       Passes a low-level command to the device specified by the given file\n        descriptor.\n\n    [`sysread`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-sysread)\n:       Returns up to the next *n* bytes read from self using a low-level\n        read.\n\n    [`sysseek`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-sysseek)\n:       Sets the offset for `self`.\n\n    [`syswrite`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-syswrite)\n:       Writes the given string to `self` using a low-level write.\n\n\n\n### Other\n\n    [`::copy_stream`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-copy_stream)\n:       Copies data from a source to a destination, each of which is a\n        filepath or an IO-like object.\n\n    [`::try_convert`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-try_convert)\n:       Returns a new [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html)\n        object resulting from converting the given object.\n\n    [`inspect`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-inspect)\n:       Returns the string representation of `self`."},"sortText":"000002","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"IO${0}"}},{"label":"IOError","kind":7,"detail":"IOError","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(IOError)\n```\n\n---\n\nRaised when an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) operation\nfails.\n\n```ruby\nFile.open(\"/etc/hosts\") {|f| f << \"example\"}\n  #=> IOError: not opened for writing\n\nFile.open(\"/etc/hosts\") {|f| f.close; f.read }\n  #=> IOError: closed stream\n```\n\nNote that some [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) failures\nraise `SystemCallError`s and these are not subclasses of IOError:\n\n```ruby\nFile.open(\"does/not/exist\")\n  #=> Errno::ENOENT: No such file or directory - does/not/exist\n```"},"sortText":"000003","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"IOError${0}"}},{"label":"IPAddr","kind":7,"detail":"IPAddr","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(IPAddr)\n```\n\n---\n\n[`IPAddr`](https://docs.ruby-lang.org/en/2.7.0/IPAddr.html) provides a set of\nmethods to manipulate an IP address. Both IPv4 and IPv6 are supported.\n\n## Example\n\n```ruby\nrequire 'ipaddr'\n\nipaddr1 = IPAddr.new \"3ffe:505:2::1\"\n\np ipaddr1                   #=> #<IPAddr: IPv6:3ffe:0505:0002:0000:0000:0000:0000:0001/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff>\n\np ipaddr1.to_s              #=> \"3ffe:505:2::1\"\n\nipaddr2 = ipaddr1.mask(48)  #=> #<IPAddr: IPv6:3ffe:0505:0002:0000:0000:0000:0000:0000/ffff:ffff:ffff:0000:0000:0000:0000:0000>\n\np ipaddr2.to_s              #=> \"3ffe:505:2::\"\n\nipaddr3 = IPAddr.new \"192.168.2.0/24\"\n\np ipaddr3                   #=> #<IPAddr: IPv4:192.168.2.0/255.255.255.0>\n```"},"sortText":"000004","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"IPAddr${0}"}},{"label":"IPSocket","kind":7,"detail":"IPSocket","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(IPSocket)[IPSocket]\n```\n\n---\n\n[`IPSocket`](https://docs.ruby-lang.org/en/2.7.0/IPSocket.html) is the super\nclass of [`TCPSocket`](https://docs.ruby-lang.org/en/2.7.0/TCPSocket.html) and\n[`UDPSocket`](https://docs.ruby-lang.org/en/2.7.0/UDPSocket.html)."},"sortText":"000005","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"IPSocket${0}"}},{"label":"IRB","kind":9,"detail":"IRB","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(IRB)\n```\n\n---\n\n[`IRB`](https://docs.ruby-lang.org/en/2.7.0/IRB.html) stands for \"interactive\nRuby\" and is a tool to interactively execute Ruby expressions read from the\nstandard input.\n\nThe `irb` command from your shell will start the interpreter.\n\n## Usage\n\nUse of irb is easy if you know Ruby.\n\nWhen executing irb, prompts are displayed as follows. Then, enter the Ruby\nexpression. An input is executed when it is syntactically complete.\n\n```\n$ irb\nirb(main):001:0> 1+2\n#=> 3\nirb(main):002:0> class Foo\nirb(main):003:1>  def foo\nirb(main):004:2>    print 1\nirb(main):005:2>  end\nirb(main):006:1> end\n#=> nil\n```\n\nThe singleline editor module or multiline editor module can be used with irb.\nUse of multiline editor is default if it's installed.\n\n## Command line options\n\n```\nUsage:  irb.rb [options] [programfile] [arguments]\n  -f                Suppress read of ~/.irbrc\n  -d                Set $DEBUG to true (same as `ruby -d')\n  -r load-module    Same as `ruby -r'\n  -I path           Specify $LOAD_PATH directory\n  -U                Same as `ruby -U`\n  -E enc            Same as `ruby -E`\n  -w                Same as `ruby -w`\n  -W[level=2]       Same as `ruby -W`\n  --inspect         Use `inspect' for output (default except for bc mode)\n  --noinspect       Don't use inspect for output\n  --multiline       Use multiline editor module\n  --nomultiline     Don't use multiline editor module\n  --singleline      Use singleline editor module\n  --nosingleline    Don't use singleline editor module\n  --colorize        Use colorization\n  --nocolorize      Don't use colorization\n  --prompt prompt-mode\n  --prompt-mode prompt-mode\n                    Switch prompt mode. Pre-defined prompt modes are\n                    `default', `simple', `xmp' and `inf-ruby'\n  --inf-ruby-mode   Use prompt appropriate for inf-ruby-mode on emacs.\n                    Suppresses --multiline and --singleline.\n  --simple-prompt   Simple prompt mode\n  --noprompt        No prompt mode\n  --tracer          Display trace for each execution of commands.\n  --back-trace-limit n\n                    Display backtrace top n and tail n. The default\n                    value is 16.\n  -v, --version     Print the version of irb\n```\n\n## Configuration\n\n[`IRB`](https://docs.ruby-lang.org/en/2.7.0/IRB.html) reads from `~/.irbrc`\nwhen it's invoked.\n\nIf `~/.irbrc` doesn't exist, `irb` will try to read in the following order:\n\n*   `.irbrc`\n*   `irb.rc`\n*   `_irbrc`\n*   `$irbrc`\n\n\nThe following are alternatives to the command line options. To use them type\nas follows in an `irb` session:\n\n```\nIRB.conf[:IRB_NAME]=\"irb\"\nIRB.conf[:INSPECT_MODE]=nil\nIRB.conf[:IRB_RC] = nil\nIRB.conf[:BACK_TRACE_LIMIT]=16\nIRB.conf[:USE_LOADER] = false\nIRB.conf[:USE_MULTILINE] = nil\nIRB.conf[:USE_SINGLELINE] = nil\nIRB.conf[:USE_COLORIZE] = true\nIRB.conf[:USE_TRACER] = false\nIRB.conf[:IGNORE_SIGINT] = true\nIRB.conf[:IGNORE_EOF] = false\nIRB.conf[:PROMPT_MODE] = :DEFAULT\nIRB.conf[:PROMPT] = {...}\n```\n\n### Auto indentation\n\nTo disable auto-indent mode in irb, add the following to your `.irbrc`:\n\n```ruby\nIRB.conf[:AUTO_INDENT] = false\n```\n\n### Autocompletion\n\nTo enable autocompletion for irb, add the following to your `.irbrc`:\n\n```ruby\nrequire 'irb/completion'\n```\n\n### History\n\nBy default, irb will store the last 1000 commands you used in\n`IRB.conf[:HISTORY_FILE]` (`~/.irb_history` by default).\n\nIf you want to disable history, add the following to your `.irbrc`:\n\n```ruby\nIRB.conf[:SAVE_HISTORY] = nil\n```\n\nSee\n[`IRB::Context#save_history=`](https://docs.ruby-lang.org/en/2.7.0/IRB/Context.html#method-i-save_history-3D)\nfor more information.\n\nThe history of *results* of commands evaluated is not stored by default, but\ncan be turned on to be stored with this `.irbrc` setting:\n\n```\nIRB.conf[:EVAL_HISTORY] = <number>\n```\n\nSee\n[`IRB::Context#eval_history=`](https://docs.ruby-lang.org/en/2.7.0/IRB/Context.html#method-i-eval_history-3D)\nand History class. The history of command results is not permanently saved in\nany file.\n\n## Customizing the [`IRB`](https://docs.ruby-lang.org/en/2.7.0/IRB.html) Prompt\n\nIn order to customize the prompt, you can change the following Hash:\n\n```ruby\nIRB.conf[:PROMPT]\n```\n\nThis example can be used in your `.irbrc`\n\n```ruby\nIRB.conf[:PROMPT][:MY_PROMPT] = { # name of prompt mode\n  :AUTO_INDENT => false,          # disables auto-indent mode\n  :PROMPT_I =>  \">> \",            # simple prompt\n  :PROMPT_S => nil,               # prompt for continuated strings\n  :PROMPT_C => nil,               # prompt for continuated statement\n  :RETURN => \"    ==>%s\\n\"        # format to return value\n}\n\nIRB.conf[:PROMPT_MODE] = :MY_PROMPT\n```\n\nOr, invoke irb with the above prompt mode by:\n\n```\nirb --prompt my-prompt\n```\n\nConstants `PROMPT_I`, `PROMPT_S` and `PROMPT_C` specify the format. In the\nprompt specification, some special strings are available:\n\n```\n%N    # command name which is running\n%m    # to_s of main object (self)\n%M    # inspect of main object (self)\n%l    # type of string(\", ', /, ]), `]' is inner %w[...]\n%NNi  # indent level. NN is digits and means as same as printf(\"%NNd\").\n      # It can be omitted\n%NNn  # line number.\n%%    # %\n```\n\nFor instance, the default prompt mode is defined as follows:\n\n```ruby\nIRB.conf[:PROMPT_MODE][:DEFAULT] = {\n  :PROMPT_I => \"%N(%m):%03n:%i> \",\n  :PROMPT_N => \"%N(%m):%03n:%i> \",\n  :PROMPT_S => \"%N(%m):%03n:%i%l \",\n  :PROMPT_C => \"%N(%m):%03n:%i* \",\n  :RETURN => \"%s\\n\" # used to printf\n}\n```\n\nirb comes with a number of available modes:\n\n```ruby\n# :NULL:\n#   :PROMPT_I:\n#   :PROMPT_N:\n#   :PROMPT_S:\n#   :PROMPT_C:\n#   :RETURN: |\n#     %s\n# :DEFAULT:\n#   :PROMPT_I: ! '%N(%m):%03n:%i> '\n#   :PROMPT_N: ! '%N(%m):%03n:%i> '\n#   :PROMPT_S: ! '%N(%m):%03n:%i%l '\n#   :PROMPT_C: ! '%N(%m):%03n:%i* '\n#   :RETURN: |\n#     => %s\n# :CLASSIC:\n#   :PROMPT_I: ! '%N(%m):%03n:%i> '\n#   :PROMPT_N: ! '%N(%m):%03n:%i> '\n#   :PROMPT_S: ! '%N(%m):%03n:%i%l '\n#   :PROMPT_C: ! '%N(%m):%03n:%i* '\n#   :RETURN: |\n#     %s\n# :SIMPLE:\n#   :PROMPT_I: ! '>> '\n#   :PROMPT_N: ! '>> '\n#   :PROMPT_S:\n#   :PROMPT_C: ! '?> '\n#   :RETURN: |\n#     => %s\n# :INF_RUBY:\n#   :PROMPT_I: ! '%N(%m):%03n:%i> '\n#   :PROMPT_N:\n#   :PROMPT_S:\n#   :PROMPT_C:\n#   :RETURN: |\n#     %s\n#   :AUTO_INDENT: true\n# :XMP:\n#   :PROMPT_I:\n#   :PROMPT_N:\n#   :PROMPT_S:\n#   :PROMPT_C:\n#   :RETURN: |2\n#         ==>%s\n```\n\n## Restrictions\n\nBecause irb evaluates input immediately after it is syntactically complete,\nthe results may be slightly different than directly using Ruby.\n\n## [`IRB`](https://docs.ruby-lang.org/en/2.7.0/IRB.html) Sessions\n\n[`IRB`](https://docs.ruby-lang.org/en/2.7.0/IRB.html) has a special feature,\nthat allows you to manage many sessions at once.\n\nYou can create new sessions with Irb.irb, and get a list of current sessions\nwith the `jobs` command in the prompt.\n\n### Commands\n\n[`JobManager`](https://docs.ruby-lang.org/en/2.7.0/IRB.html#method-c-JobManager)\nprovides commands to handle the current sessions:\n\n```ruby\njobs    # List of current sessions\nfg      # Switches to the session of the given number\nkill    # Kills the session with the given number\n```\n\nThe `exit` command, or\n[`::irb_exit`](https://docs.ruby-lang.org/en/2.7.0/IRB.html#method-c-irb_exit),\nwill quit the current session and call any exit hooks with\n[`IRB.irb_at_exit`](https://docs.ruby-lang.org/en/2.7.0/IRB.html#method-c-irb_at_exit).\n\nA few commands for loading files within the session are also available:\n\n`source`\n:   Loads a given file in the current session and displays the source lines,\n    see IrbLoader#source\\_file\n`irb_load`\n:   Loads the given file similarly to\n    [`Kernel#load`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-load),\n    see IrbLoader#irb\\_load\n`irb_require`\n:   Loads the given file similarly to\n    [`Kernel#require`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-require)\n\n\n### Configuration\n\nThe command line options, or\n[`IRB.conf`](https://docs.ruby-lang.org/en/2.7.0/IRB.html#method-c-conf),\nspecify the default behavior of Irb.irb.\n\nOn the other hand, each conf in [Command line options at\n`IRB`](https://docs.ruby-lang.org/en/2.7.0/IRB.html#module-IRB-label-Command+line+options)\nis used to individually configure\n[`IRB.irb`](https://docs.ruby-lang.org/en/2.7.0/IRB.html#method-c-irb).\n\nIf a proc is set for `IRB.conf[:IRB_RC]`, its will be invoked after execution\nof that proc with the context of the current session as its argument. Each\nsession can be configured using this mechanism.\n\n### Session variables\n\nThere are a few variables in every Irb session that can come in handy:\n\n`_`\n:   The value command executed, as a local variable\n`__`\n:   The history of evaluated commands. Available only if\n    `IRB.conf[:EVAL_HISTORY]` is not `nil` (which is the default). See also\n    [`IRB::Context#eval_history=`](https://docs.ruby-lang.org/en/2.7.0/IRB/Context.html#method-i-eval_history-3D)\n    and\n    [`IRB::History`](https://docs.ruby-lang.org/en/2.7.0/IRB/History.html).\n`__[line_no]`\n:   Returns the evaluation value at the given line number, `line_no`. If\n    `line_no` is a negative, the return value `line_no` many lines before the\n    most recent return value.\n\n\n### Example using [`IRB`](https://docs.ruby-lang.org/en/2.7.0/IRB.html) Sessions\n\n```\n# invoke a new session\nirb(main):001:0> irb\n# list open sessions\nirb.1(main):001:0> jobs\n  #0->irb on main (#<Thread:0x400fb7e4> : stop)\n  #1->irb#1 on main (#<Thread:0x40125d64> : running)\n\n# change the active session\nirb.1(main):002:0> fg 0\n# define class Foo in top-level session\nirb(main):002:0> class Foo;end\n# invoke a new session with the context of Foo\nirb(main):003:0> irb Foo\n# define Foo#foo\nirb.2(Foo):001:0> def foo\nirb.2(Foo):002:1>   print 1\nirb.2(Foo):003:1> end\n\n# change the active session\nirb.2(Foo):004:0> fg 0\n# list open sessions\nirb(main):004:0> jobs\n  #0->irb on main (#<Thread:0x400fb7e4> : running)\n  #1->irb#1 on main (#<Thread:0x40125d64> : stop)\n  #2->irb#2 on Foo (#<Thread:0x4011d54c> : stop)\n# check if Foo#foo is available\nirb(main):005:0> Foo.instance_methods #=> [:foo, ...]\n\n# change the active session\nirb(main):006:0> fg 2\n# define Foo#bar in the context of Foo\nirb.2(Foo):005:0> def bar\nirb.2(Foo):006:1>  print \"bar\"\nirb.2(Foo):007:1> end\nirb.2(Foo):010:0>  Foo.instance_methods #=> [:bar, :foo, ...]\n\n# change the active session\nirb.2(Foo):011:0> fg 0\nirb(main):007:0> f = Foo.new  #=> #<Foo:0x4010af3c>\n# invoke a new session with the context of f (instance of Foo)\nirb(main):008:0> irb f\n# list open sessions\nirb.3(<Foo:0x4010af3c>):001:0> jobs\n  #0->irb on main (#<Thread:0x400fb7e4> : stop)\n  #1->irb#1 on main (#<Thread:0x40125d64> : stop)\n  #2->irb#2 on Foo (#<Thread:0x4011d54c> : stop)\n  #3->irb#3 on #<Foo:0x4010af3c> (#<Thread:0x4010a1e0> : running)\n# evaluate f.foo\nirb.3(<Foo:0x4010af3c>):002:0> foo #=> 1 => nil\n# evaluate f.bar\nirb.3(<Foo:0x4010af3c>):003:0> bar #=> bar => nil\n# kill jobs 1, 2, and 3\nirb.3(<Foo:0x4010af3c>):004:0> kill 1, 2, 3\n# list open sessions, should only include main session\nirb(main):009:0> jobs\n  #0->irb on main (#<Thread:0x400fb7e4> : running)\n# quit irb\nirb(main):010:0> exit\n```\n\n```\nsave-history.rb -\n    $Release Version: 0.9.6$\n    $Revision$\n    by Keiju ISHITSUKA(keiju@ruby-lang.org)\n```\n\n--\n\n```\nframe.rb -\n    $Release Version: 0.9$\n    $Revision$\n    by Keiju ISHITSUKA(Nihon Rational Software Co.,Ltd)\n```\n\n--\n\n```\noutput-method.rb - output methods used by irb\n    $Release Version: 0.9.6$\n    $Revision$\n    by Keiju ISHITSUKA(keiju@ruby-lang.org)\n```\n\n--\nDO NOT WRITE ANY MAGIC COMMENT HERE."},"sortText":"000006","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"IRB${0}"}},{"label":"IndexError","kind":7,"detail":"IndexError","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(IndexError)\n```\n\n---\n\nRaised when the given index is invalid.\n\n```ruby\na = [:foo, :bar]\na.fetch(0)   #=> :foo\na[4]         #=> nil\na.fetch(4)   #=> IndexError: index 4 outside of array bounds: -2...2\n```"},"sortText":"000007","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"IndexError${0}"}},{"label":"Integer","kind":7,"detail":"Integer","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(Integer)\n```\n\n---\n\nHolds [`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html) values.\nYou cannot add a singleton method to an\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html) object, any\nattempt to do so will raise a\n[`TypeError`](https://docs.ruby-lang.org/en/2.7.0/TypeError.html)."},"sortText":"000008","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"Integer${0}"}},{"label":"Interrupt","kind":7,"detail":"Interrupt","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(Interrupt)\n```\n\n---\n\nRaised when the interrupt signal is received, typically because the user has\npressed Control-C (on most posix platforms). As such, it is a subclass of\n`SignalException`.\n\n```ruby\nbegin\n  puts \"Press ctrl-C when you get bored\"\n  loop {}\nrescue Interrupt => e\n  puts \"Note: You will typically use Signal.trap instead.\"\nend\n```\n\n*produces:*\n\n```\nPress ctrl-C when you get bored\n```\n\n*then waits until it is interrupted with Control-C and then prints:*\n\n```\nNote: You will typically use Signal.trap instead.\n```"},"sortText":"000009","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"Interrupt${0}"}},{"label":"NIL","kind":5,"detail":"NIL","documentation":{"kind":"markdown","value":"```ruby\nNilClass\n```\n\n---\n\nAn obsolete alias of `nil`"},"sortText":"000010","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"NIL${0}"}},{"label":"NotImplementedError","kind":7,"detail":"NotImplementedError","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(NotImplementedError)\n```\n\n---\n\nRaised when a feature is not implemented on the current platform. For example,\nmethods depending on the `fsync` or `fork` system calls may raise this\nexception if the underlying operating system or Ruby runtime does not support\nthem.\n\nNote that if `fork` raises a `NotImplementedError`, then `respond_to?(:fork)`\nreturns `false`."},"sortText":"000011","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"NotImplementedError${0}"}},{"label":"OpenURI","kind":9,"detail":"OpenURI","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(OpenURI)\n```\n\n---\n\n[`OpenURI`](https://docs.ruby-lang.org/en/2.7.0/OpenURI.html) is an\neasy-to-use wrapper for\n[`Net::HTTP`](https://docs.ruby-lang.org/en/2.7.0/Net/HTTP.html), Net::HTTPS\nand [`Net::FTP`](https://docs.ruby-lang.org/en/2.7.0/Net/FTP.html).\n\n## Example\n\nIt is possible to open an http, https or ftp URL as though it were a file:\n\n```ruby\nURI.open(\"http://www.ruby-lang.org/\") {|f|\n  f.each_line {|line| p line}\n}\n```\n\nThe opened file has several getter methods for its meta-information, as\nfollows, since it is extended by\n[`OpenURI::Meta`](https://docs.ruby-lang.org/en/2.7.0/OpenURI/Meta.html).\n\n```ruby\nURI.open(\"http://www.ruby-lang.org/en\") {|f|\n  f.each_line {|line| p line}\n  p f.base_uri         # <URI::HTTP:0x40e6ef2 URL:http://www.ruby-lang.org/en/>\n  p f.content_type     # \"text/html\"\n  p f.charset          # \"iso-8859-1\"\n  p f.content_encoding # []\n  p f.last_modified    # Thu Dec 05 02:45:02 UTC 2002\n}\n```\n\nAdditional header fields can be specified by an optional hash argument.\n\n```ruby\nURI.open(\"http://www.ruby-lang.org/en/\",\n  \"User-Agent\" => \"Ruby/#{RUBY_VERSION}\",\n  \"From\" => \"foo@bar.invalid\",\n  \"Referer\" => \"http://www.ruby-lang.org/\") {|f|\n  # ...\n}\n```\n\nThe environment variables such as http\\_proxy, https\\_proxy and ftp\\_proxy are\nin effect by default. Here we disable proxy:\n\n```ruby\nURI.open(\"http://www.ruby-lang.org/en/\", :proxy => nil) {|f|\n  # ...\n}\n```\n\nSee\n[`OpenURI::OpenRead.open`](https://docs.ruby-lang.org/en/2.7.0/OpenURI/OpenRead.html#method-i-open)\nand [`URI.open`](https://docs.ruby-lang.org/en/2.7.0/URI.html#method-c-open)\nfor more on available options.\n\n[`URI`](https://docs.ruby-lang.org/en/2.7.0/URI.html) objects can be opened in\na similar way.\n\n```ruby\nuri = URI.parse(\"http://www.ruby-lang.org/en/\")\nuri.open {|f|\n  # ...\n}\n```\n\n[`URI`](https://docs.ruby-lang.org/en/2.7.0/URI.html) objects can be read\ndirectly. The returned string is also extended by\n[`OpenURI::Meta`](https://docs.ruby-lang.org/en/2.7.0/OpenURI/Meta.html).\n\n```ruby\nstr = uri.read\np str.base_uri\n```\n\nAuthor\n:   Tanaka Akira <akr@m17n.org>"},"sortText":"000012","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"OpenURI${0}"}},{"label":"RUBY_COPYRIGHT","kind":5,"detail":"RUBY_COPYRIGHT","documentation":{"kind":"markdown","value":"```ruby\nString\n```\n\n---\n\nThe copyright string for ruby"},"sortText":"000013","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"RUBY_COPYRIGHT${0}"}},{"label":"RUBY_DESCRIPTION","kind":5,"detail":"RUBY_DESCRIPTION","documentation":{"kind":"markdown","value":"```ruby\nString\n```\n\n---\n\nThe full ruby version string, like `ruby -v` prints"},"sortText":"000014","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"RUBY_DESCRIPTION${0}"}},{"label":"RUBY_ENGINE","kind":5,"detail":"RUBY_ENGINE","documentation":{"kind":"markdown","value":"```ruby\nString\n```\n\n---\n\nThe engine or interpreter this ruby uses."},"sortText":"000015","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"RUBY_ENGINE${0}"}},{"label":"RUBY_ENGINE_VERSION","kind":5,"detail":"RUBY_ENGINE_VERSION","documentation":{"kind":"markdown","value":"```ruby\nString\n```\n\n---\n\nThe version of the engine or interpreter this ruby uses."},"sortText":"000016","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"RUBY_ENGINE_VERSION${0}"}},{"label":"RUBY_REVISION","kind":5,"detail":"RUBY_REVISION","documentation":{"kind":"markdown","value":"```ruby\nInteger\n```\n\n---\n\nThe GIT commit hash for this ruby."},"sortText":"000017","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"RUBY_REVISION${0}"}},{"label":"RUBY_VERSION","kind":5,"detail":"RUBY_VERSION","documentation":{"kind":"markdown","value":"```ruby\nString\n```\n\n---\n\nThe running version of ruby"},"sortText":"000018","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"RUBY_VERSION${0}"}},{"label":"STDIN","kind":5,"detail":"STDIN","documentation":{"kind":"markdown","value":"```ruby\nIO\n```\n\n---\n\nHolds the original stdin"},"sortText":"000019","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"STDIN${0}"}},{"label":"StopIteration","kind":7,"detail":"StopIteration","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(StopIteration)\n```\n\n---\n\nRaised to stop the iteration, in particular by\n[`Enumerator#next`](https://docs.ruby-lang.org/en/2.7.0/Enumerator.html#method-i-next).\nIt is rescued by\n[`Kernel#loop`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-loop).\n\n```ruby\nloop do\n  puts \"Hello\"\n  raise StopIteration\n  puts \"World\"\nend\nputs \"Done!\"\n```\n\n*produces:*\n\n```ruby\nHello\nDone!\n```"},"sortText":"000020","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"StopIteration${0}"}},{"label":"StringIO","kind":7,"detail":"StringIO","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(StringIO)[StringIO]\n```\n\n---\n\nPseudo I/O on [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html)\nobject, with interface corresponding to\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html).\n\nCommonly used to simulate `$stdio` or `$stderr`\n\n### Examples\n\n```ruby\nrequire 'stringio'\n\n# Writing stream emulation\nio = StringIO.new\nio.puts \"Hello World\"\nio.string #=> \"Hello World\\n\"\n\n# Reading stream emulation\nio = StringIO.new \"first\\nsecond\\nlast\\n\"\nio.getc #=> \"f\"\nio.gets #=> \"irst\\n\"\nio.read #=> \"second\\nlast\\n\"\n```"},"sortText":"000021","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"StringIO${0}"}},{"label":"TOPLEVEL_BINDING","kind":5,"detail":"TOPLEVEL_BINDING","documentation":{"kind":"markdown","value":"```ruby\nBinding\n```\n\n---\n\nThe [`Binding`](https://docs.ruby-lang.org/en/2.7.0/Binding.html) of the top\nlevel scope"},"sortText":"000022","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"TOPLEVEL_BINDING${0}"}},{"label":"UNIXServer","kind":7,"detail":"UNIXServer","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(UNIXServer)[UNIXServer]\n```\n\n---\n\n[`UNIXServer`](https://docs.ruby-lang.org/en/2.7.0/UNIXServer.html) represents\na UNIX domain stream server socket."},"sortText":"000023","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"UNIXServer${0}"}},{"label":"UNIXSocket","kind":7,"detail":"UNIXSocket","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(UNIXSocket)[UNIXSocket]\n```\n\n---\n\n[`UNIXSocket`](https://docs.ruby-lang.org/en/2.7.0/UNIXSocket.html) represents\na UNIX domain stream client socket."},"sortText":"000024","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"UNIXSocket${0}"}},{"label":"URI","kind":9,"detail":"URI","documentation":{"kind":"markdown","value":"```ruby\nT.class_of(URI)\n```\n\n---\n\n[`URI`](https://docs.ruby-lang.org/en/2.7.0/URI.html) is a module providing\nclasses to handle Uniform Resource Identifiers\n([RFC2396](http://tools.ietf.org/html/rfc2396)).\n\n## Features\n\n*   Uniform way of handling URIs.\n*   Flexibility to introduce custom\n    [`URI`](https://docs.ruby-lang.org/en/2.7.0/URI.html) schemes.\n*   Flexibility to have an alternate\n    [`URI::Parser`](https://docs.ruby-lang.org/en/2.7.0/URI/RFC2396_Parser.html)\n    (or just different patterns and regexp's).\n\n\n## Basic example\n\n```ruby\nrequire 'uri'\n\nuri = URI(\"http://foo.com/posts?id=30&limit=5#time=1305298413\")\n#=> #<URI::HTTP http://foo.com/posts?id=30&limit=5#time=1305298413>\n\nuri.scheme    #=> \"http\"\nuri.host      #=> \"foo.com\"\nuri.path      #=> \"/posts\"\nuri.query     #=> \"id=30&limit=5\"\nuri.fragment  #=> \"time=1305298413\"\n\nuri.to_s      #=> \"http://foo.com/posts?id=30&limit=5#time=1305298413\"\n```\n\n## Adding custom URIs\n\n```ruby\nmodule URI\n  class RSYNC < Generic\n    DEFAULT_PORT = 873\n  end\n  @@schemes['RSYNC'] = RSYNC\nend\n#=> URI::RSYNC\n\nURI.scheme_list\n#=> {\"FILE\"=>URI::File, \"FTP\"=>URI::FTP, \"HTTP\"=>URI::HTTP,\n#    \"HTTPS\"=>URI::HTTPS, \"LDAP\"=>URI::LDAP, \"LDAPS\"=>URI::LDAPS,\n#    \"MAILTO\"=>URI::MailTo, \"RSYNC\"=>URI::RSYNC}\n\nuri = URI(\"rsync://rsync.foo.com\")\n#=> #<URI::RSYNC rsync://rsync.foo.com>\n```\n\n## RFC References\n\nA good place to view an RFC spec is http://www.ietf.org/rfc.html.\n\nHere is a list of all related RFC's:\n*   [RFC822](http://tools.ietf.org/html/rfc822)\n*   [RFC1738](http://tools.ietf.org/html/rfc1738)\n*   [RFC2255](http://tools.ietf.org/html/rfc2255)\n*   [RFC2368](http://tools.ietf.org/html/rfc2368)\n*   [RFC2373](http://tools.ietf.org/html/rfc2373)\n*   [RFC2396](http://tools.ietf.org/html/rfc2396)\n*   [RFC2732](http://tools.ietf.org/html/rfc2732)\n*   [RFC3986](http://tools.ietf.org/html/rfc3986)\n\n\n## [`Class`](https://docs.ruby-lang.org/en/2.7.0/Class.html) tree\n\n*   [`URI::Generic`](https://docs.ruby-lang.org/en/2.7.0/URI/Generic.html) (in\n    uri/generic.rb)\n    *   [`URI::File`](https://docs.ruby-lang.org/en/2.7.0/URI/File.html) - (in\n        uri/file.rb)\n    *   [`URI::FTP`](https://docs.ruby-lang.org/en/2.7.0/URI/FTP.html) - (in\n        uri/ftp.rb)\n    *   [`URI::HTTP`](https://docs.ruby-lang.org/en/2.7.0/URI/HTTP.html) - (in\n        uri/http.rb)\n        *   [`URI::HTTPS`](https://docs.ruby-lang.org/en/2.7.0/URI/HTTPS.html)\n            - (in uri/https.rb)\n\n    *   [`URI::LDAP`](https://docs.ruby-lang.org/en/2.7.0/URI/LDAP.html) - (in\n        uri/ldap.rb)\n        *   [`URI::LDAPS`](https://docs.ruby-lang.org/en/2.7.0/URI/LDAPS.html)\n            - (in uri/ldaps.rb)\n\n    *   [`URI::MailTo`](https://docs.ruby-lang.org/en/2.7.0/URI/MailTo.html) -\n        (in uri/mailto.rb)\n\n*   [`URI::Parser`](https://docs.ruby-lang.org/en/2.7.0/URI/RFC2396_Parser.html)\n    - (in uri/common.rb)\n*   [`URI::REGEXP`](https://docs.ruby-lang.org/en/2.7.0/URI/RFC2396_REGEXP.html)\n    - (in uri/common.rb)\n    *   URI::REGEXP::PATTERN - (in uri/common.rb)\n\n*   URI::Util - (in uri/common.rb)\n*   [`URI::Error`](https://docs.ruby-lang.org/en/2.7.0/URI/Error.html) - (in\n    uri/common.rb)\n    *   [`URI::InvalidURIError`](https://docs.ruby-lang.org/en/2.7.0/URI/InvalidURIError.html)\n        - (in uri/common.rb)\n    *   [`URI::InvalidComponentError`](https://docs.ruby-lang.org/en/2.7.0/URI/InvalidComponentError.html)\n        - (in uri/common.rb)\n    *   [`URI::BadURIError`](https://docs.ruby-lang.org/en/2.7.0/URI/BadURIError.html)\n        - (in uri/common.rb)\n\n\n\n## Copyright Info\n\nAuthor\n:   Akira Yamada <akira@ruby-lang.org>\nDocumentation\n:   Akira Yamada <akira@ruby-lang.org> Dmitry V. Sabanin <sdmitry@lrn.ru>\n    Vincent Batts <vbatts@hashbangbash.com>\nLicense\n:   Copyright (c) 2001 akira yamada <akira@ruby-lang.org> You can redistribute\n    it and/or modify it under the same term as Ruby.\nRevision\n:   $Id$"},"sortText":"000025","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"URI${0}"}},{"label":"RUBYGEMS_ACTIVATION_MONITOR","kind":5,"detail":"Kernel::RUBYGEMS_ACTIVATION_MONITOR","documentation":{"kind":"markdown","value":"```ruby\nMonitor\n```"},"sortText":"000026","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":17},"end":{"line":4,"character":18}},"newText":"RUBYGEMS_ACTIVATION_MONITOR${0}"}}]}}

[2023-08-10 22:57:05.919] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":88},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x: Integer)}\n  def example(x)\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:06.020] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:06.020] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:06.021] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:06.021] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:06.047] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 50
[2023-08-10 22:57:06.047] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":16}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":5,"character":2},"end":{"line":5,"character":2}}},"message":"Insert `sig { params(x: Integer).returns(NilClass) }`"}]},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":26}},"severity":1,"code":5003,"codeDescription":{"href":"https://srb.help/5003"},"message":"Malformed `sig`: No return type specified. Specify one with .returns()","relatedInformation":[]}]}}

[2023-08-10 22:57:06.121] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":89},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x: Integer).}\n  def example(x)\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:06.121] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":41,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":4,"character":26},"context":{"triggerKind":2,"triggerCharacter":"."}}}

[2023-08-10 22:57:06.220] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:06.220] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:06.220] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:06.220] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:06.227] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 51
[2023-08-10 22:57:06.229] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":27}},"severity":1,"code":2001,"codeDescription":{"href":"https://srb.help/2001"},"message":"unexpected token tRCURLY","relatedInformation":[]},{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":26}},"severity":1,"code":5003,"codeDescription":{"href":"https://srb.help/5003"},"message":"Malformed `sig`: `<method-name-missing>` is invalid in this context","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":4,"character":7},"end":{"line":4,"character":26}}},"message":"Consult https://sorbet.org/docs/sigs for signature syntax"}]},{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":16}},"severity":1,"code":7017,"codeDescription":{"href":"https://srb.help/7017"},"message":"The method `example` does not have a `sig` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":5,"character":2},"end":{"line":5,"character":2}}},"message":"Insert `sig { params(x: Integer).returns(NilClass) }`"}]},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":27}},"severity":1,"code":5003,"codeDescription":{"href":"https://srb.help/5003"},"message":"Malformed `sig`: No return type specified. Specify one with .returns()","relatedInformation":[]}]}}

[2023-08-10 22:57:06.311] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":41,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[{"label":"abstract","kind":2,"detail":"T::Private::Methods::DeclBuilder#abstract","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Private::Methods::DeclBuilder)}\ndef abstract; end\n```"},"sortText":"000000","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"abstract${0}"}},{"label":"bind","kind":2,"detail":"T::Private::Methods::DeclBuilder#bind","documentation":{"kind":"markdown","value":"```ruby\nsig {params(claz: T.untyped).returns(T::Private::Methods::DeclBuilder)}\ndef bind(claz); end\n```"},"sortText":"000001","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"bind(${1:T.untyped})${0}"}},{"label":"checked","kind":2,"detail":"T::Private::Methods::DeclBuilder#checked","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg: T.untyped).returns(T::Private::Methods::DeclBuilder)}\ndef checked(arg); end\n```"},"sortText":"000002","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"checked(${1:T.untyped})${0}"}},{"label":"final","kind":2,"detail":"T::Private::Methods::DeclBuilder#final","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Private::Methods::DeclBuilder)}\ndef final; end\n```"},"sortText":"000003","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"final${0}"}},{"label":"implementation","kind":2,"detail":"T::Private::Methods::DeclBuilder#implementation","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Private::Methods::DeclBuilder)}\ndef implementation; end\n```"},"sortText":"000004","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"implementation${0}"}},{"label":"on_failure","kind":2,"detail":"T::Private::Methods::DeclBuilder#on_failure","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: T.untyped).returns(T::Private::Methods::DeclBuilder)}\ndef on_failure(*args); end\n```"},"sortText":"000005","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"on_failure${0}"}},{"label":"overridable","kind":2,"detail":"T::Private::Methods::DeclBuilder#overridable","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Private::Methods::DeclBuilder)}\ndef overridable; end\n```"},"sortText":"000006","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"overridable${0}"}},{"label":"override","kind":2,"detail":"T::Private::Methods::DeclBuilder#override","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    allow_incompatible: T::Boolean\n  )\n  .returns(T::Private::Methods::DeclBuilder)\nend\ndef override(allow_incompatible: …); end\n```"},"sortText":"000007","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"override${0}"}},{"label":"params","kind":2,"detail":"T::Private::Methods::DeclBuilder#params","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    unused_positional_params: T.untyped,\n    params: T.untyped\n  )\n  .returns(T::Private::Methods::DeclBuilder)\nend\ndef params(*unused_positional_params, **params); end\n```"},"sortText":"000008","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"params${0}"}},{"label":"returns","kind":2,"detail":"T::Private::Methods::DeclBuilder#returns","documentation":{"kind":"markdown","value":"```ruby\nsig {params(type: T.untyped).returns(T::Private::Methods::DeclBuilder)}\ndef returns(type); end\n```"},"sortText":"000009","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"returns(${1:T.untyped})${0}"}},{"label":"type_parameters","kind":2,"detail":"T::Private::Methods::DeclBuilder#type_parameters","documentation":{"kind":"markdown","value":"```ruby\nsig {params(params: T.untyped).returns(T::Private::Methods::DeclBuilder)}\ndef type_parameters(*params); end\n```"},"sortText":"000010","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"type_parameters${0}"}},{"label":"void","kind":2,"detail":"T::Private::Methods::DeclBuilder#void","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Private::Methods::DeclBuilder)}\ndef void; end\n```"},"sortText":"000011","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"void${0}"}},{"label":"class","kind":2,"detail":"Object#class","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.untyped)}\ndef class; end\n```"},"sortText":"000012","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"class${0}"}},{"label":"singleton_class","kind":2,"detail":"Object#singleton_class","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.untyped)}\ndef singleton_class; end\n```"},"sortText":"000013","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"singleton_class${0}"}},{"label":"!~","kind":2,"detail":"Kernel#!~","documentation":{"kind":"markdown","value":"```ruby\nsig {params(other: BasicObject).returns(T::Boolean)}\ndef !~(other); end\n```"},"sortText":"000014","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"!~(${1:BasicObject})${0}"}},{"label":"===","kind":2,"detail":"Kernel#===","documentation":{"kind":"markdown","value":"```ruby\nsig {params(other: BasicObject).returns(T::Boolean)}\ndef ===(other); end\n```"},"sortText":"000015","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"===(${1:BasicObject})${0}"}},{"label":"=~","kind":2,"detail":"Kernel#=~","documentation":{"kind":"markdown","value":"```ruby\nsig {params(other: BasicObject).returns(NilClass)}\ndef =~(other); end\n```"},"sortText":"000016","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"=~(${1:BasicObject})${0}"}},{"label":"Array","kind":2,"detail":"Kernel#Array","documentation":{"kind":"markdown","value":"```ruby\nsig {params(x: NilClass).returns(T::Array[T.untyped])}\ndef Array(x); end\n```\n\n---\n\nReturns `arg` as an\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html).\n\nFirst tries to call `to_ary` on `arg`, then `to_a`. If `arg` does not\nrespond to `to_ary` or `to_a`, returns an\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of length 1\ncontaining `arg`.\n\nIf `to_ary` or `to_a` returns something other than an\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html), raises a\n[`TypeError`](https://docs.ruby-lang.org/en/2.7.0/TypeError.html).\n\n```ruby\nArray([\"a\", \"b\"])  #=> [\"a\", \"b\"]\nArray(1..5)        #=> [1, 2, 3, 4, 5]\nArray(key: :value) #=> [[:key, :value]]\nArray(nil)         #=> []\nArray(1)           #=> [1]\n```"},"sortText":"000017","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"Array(${1:NilClass})${0}"}},{"label":"Array","kind":2,"detail":"Kernel#Array (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: T.nilable(T.any(T::Enumerable[T.type_parameter(:Elem)], T.type_parameter(:Elem)))\n  )\n  .returns(T::Array[T.type_parameter(:Elem)])\nend\ndef Array (overload.1)(x); end\n```\n\n---\n\nReturns `arg` as an\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html).\n\nFirst tries to call `to_ary` on `arg`, then `to_a`. If `arg` does not\nrespond to `to_ary` or `to_a`, returns an\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of length 1\ncontaining `arg`.\n\nIf `to_ary` or `to_a` returns something other than an\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html), raises a\n[`TypeError`](https://docs.ruby-lang.org/en/2.7.0/TypeError.html).\n\n```ruby\nArray([\"a\", \"b\"])  #=> [\"a\", \"b\"]\nArray(1..5)        #=> [1, 2, 3, 4, 5]\nArray(key: :value) #=> [[:key, :value]]\nArray(nil)         #=> []\nArray(1)           #=> [1]\n```"},"sortText":"000018","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"Array(${1:T.nilable(T.any(T::Enumerable[T.type_parameter(:Elem)], T.type_parameter(:Elem)))})${0}"}},{"label":"BigDecimal","kind":2,"detail":"Kernel#BigDecimal","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    initial: T.any(Integer, Float, Rational, BigDecimal, String),\n    digits: Integer,\n    exception: T::Boolean\n  )\n  .returns(BigDecimal)\nend\ndef BigDecimal(initial, digits=…, exception: …); end\n```\n\n---\n\n```\nReturns the \\BigDecimal converted from +value+\nwith a precision of +ndigits+ decimal digits.\n\nWhen +ndigits+ is less than the number of significant digits\nin the value, the result is rounded to that number of digits,\naccording to the current rounding mode; see BigDecimal.mode.\n```\n\nReturns `value` converted to a\n[`BigDecimal`](https://docs.ruby-lang.org/en/2.7.0/BigDecimal.html),\ndepending on the type of `value`:\n\n*   [`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html),\n    [`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html),\n    [`Rational`](https://docs.ruby-lang.org/en/2.7.0/Rational.html),\n    [`Complex`](https://docs.ruby-lang.org/en/2.7.0/Complex.html), or\n    BigDecimal: converted directly:\n\n```ruby\n# Integer, Complex, or BigDecimal value does not require ndigits; ignored if given.\nBigDecimal(2)                     # => 0.2e1\nBigDecimal(Complex(2, 0))         # => 0.2e1\nBigDecimal(BigDecimal(2))         # => 0.2e1\n# Float or Rational value requires ndigits.\nBigDecimal(2.0, 0)                # => 0.2e1\nBigDecimal(Rational(2, 1), 0)     # => 0.2e1\n```\n\n*   String: converted by parsing if it contains an integer or floating-point\n    literal; leading and trailing whitespace is ignored:\n\n```ruby\n# String does not require ndigits; ignored if given.\nBigDecimal('2')     # => 0.2e1\nBigDecimal('2.0')   # => 0.2e1\nBigDecimal('0.2e1') # => 0.2e1\nBigDecimal(' 2.0 ') # => 0.2e1\n```\n\n*   Other type that responds to method `:to_str`: first converted to a\n    string, then converted to a\n    [`BigDecimal`](https://docs.ruby-lang.org/en/2.7.0/BigDecimal.html), as\n    above.\n\n*   Other type:\n\n    *   Raises an exception if keyword argument `exception` is `true`.\n    *   Returns `nil` if keyword argument `exception` is `true`.\n\n\n\nRaises an exception if `value` evaluates to a\n[`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html) and `digits` is\nlarger than Float::DIG + 1."},"sortText":"000019","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"BigDecimal(${1:T.any(Integer, Float, Rational, BigDecimal, String)})${0}"}},{"label":"Complex","kind":2,"detail":"Kernel#Complex","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: T.any(Numeric, String),\n    y: T.any(Numeric, String),\n    exception: T::Boolean\n  )\n  .returns(Complex)\nend\ndef Complex(x, y=…, exception: …); end\n```\n\n---\n\nReturns x+i\\*y;\n\n```ruby\nComplex(1, 2)    #=> (1+2i)\nComplex('1+2i')  #=> (1+2i)\nComplex(nil)     #=> TypeError\nComplex(1, nil)  #=> TypeError\n\nComplex(1, nil, exception: false)  #=> nil\nComplex('1+2', exception: false)   #=> nil\n```\n\nSyntax of string form:\n\n```\nstring form = extra spaces , complex , extra spaces ;\ncomplex = real part | [ sign ] , imaginary part\n        | real part , sign , imaginary part\n        | rational , \"@\" , rational ;\nreal part = rational ;\nimaginary part = imaginary unit | unsigned rational , imaginary unit ;\nrational = [ sign ] , unsigned rational ;\nunsigned rational = numerator | numerator , \"/\" , denominator ;\nnumerator = integer part | fractional part | integer part , fractional part ;\ndenominator = digits ;\ninteger part = digits ;\nfractional part = \".\" , digits , [ ( \"e\" | \"E\" ) , [ sign ] , digits ] ;\nimaginary unit = \"i\" | \"I\" | \"j\" | \"J\" ;\nsign = \"-\" | \"+\" ;\ndigits = digit , { digit | \"_\" , digit };\ndigit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\nextra spaces = ? \\s* ? ;\n```\n\nSee\n[`String#to_c`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_c)."},"sortText":"000020","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"Complex(${1:T.any(Numeric, String)})${0}"}},{"label":"Float","kind":2,"detail":"Kernel#Float","documentation":{"kind":"markdown","value":"```ruby\nsig {params(x: T.any(Numeric, String), exception: T::Boolean).returns(Float)}\ndef Float(x, exception: …); end\n```\n\n---\n\nReturns *arg* converted to a float.\n[`Numeric`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html) types are\nconverted directly, and with exception to\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) and `nil` the\nrest are converted using *arg*`.to_f`. Converting a\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) with invalid\ncharacters will result in a\n[`ArgumentError`](https://docs.ruby-lang.org/en/2.7.0/ArgumentError.html).\nConverting `nil` generates a\n[`TypeError`](https://docs.ruby-lang.org/en/2.7.0/TypeError.html).\nExceptions can be suppressed by passing `exception: false`.\n\n```ruby\nFloat(1)                 #=> 1.0\nFloat(\"123.456\")         #=> 123.456\nFloat(\"123.0_badstring\") #=> ArgumentError: invalid value for Float(): \"123.0_badstring\"\nFloat(nil)               #=> TypeError: can't convert nil into Float\nFloat(\"123.0_badstring\", exception: false)  #=> nil\n```"},"sortText":"000021","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"Float(${1:T.any(Numeric, String)})${0}"}},{"label":"Hash","kind":2,"detail":"Kernel#Hash","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: Object\n  )\n  .returns(T::Hash[T.type_parameter(:K), T.type_parameter(:V)])\nend\ndef Hash(x); end\n```\n\n---\n\nConverts *arg* to a [`Hash`](https://docs.ruby-lang.org/en/2.7.0/Hash.html)\nby calling *arg*`.to_hash`. Returns an empty\n[`Hash`](https://docs.ruby-lang.org/en/2.7.0/Hash.html) when *arg* is `nil`\nor `[]`.\n\n```ruby\nHash([])          #=> {}\nHash(nil)         #=> {}\nHash(key: :value) #=> {:key => :value}\nHash([1, 2, 3])   #=> TypeError\n```"},"sortText":"000022","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"Hash(${1:Object})${0}"}},{"label":"Integer","kind":2,"detail":"Kernel#Integer","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg: T.any(Numeric, String),\n    base: Integer,\n    exception: T::Boolean\n  )\n  .returns(Integer)\nend\ndef Integer(arg, base=…, exception: …); end\n```\n\n---\n\nConverts *arg* to an\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html).\n[`Numeric`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html) types are\nconverted directly (with floating point numbers being truncated). *base* (0,\nor between 2 and 36) is a base for integer string representation. If *arg*\nis a [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html), when\n*base* is omitted or equals zero, radix indicators (`0`, `0b`, and `0x`) are\nhonored. In any case, strings should consist only of one or more digits,\nexcept for that a sign, one underscore between two digits, and\nleading/trailing spaces are optional. This behavior is different from that\nof\n[`String#to_i`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_i).\nNon string values will be converted by first trying `to_int`, then `to_i`.\n\nPassing `nil` raises a\n[`TypeError`](https://docs.ruby-lang.org/en/2.7.0/TypeError.html), while\npassing a [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) that\ndoes not conform with numeric representation raises an\n[`ArgumentError`](https://docs.ruby-lang.org/en/2.7.0/ArgumentError.html).\nThis behavior can be altered by passing `exception: false`, in this case a\nnot convertible value will return `nil`.\n\n```ruby\nInteger(123.999)    #=> 123\nInteger(\"0x1a\")     #=> 26\nInteger(Time.new)   #=> 1204973019\nInteger(\"0930\", 10) #=> 930\nInteger(\"111\", 2)   #=> 7\nInteger(\" +1_0 \")   #=> 10\nInteger(nil)        #=> TypeError: can't convert nil into Integer\nInteger(\"x\")        #=> ArgumentError: invalid value for Integer(): \"x\"\n\nInteger(\"x\", exception: false)        #=> nil\n```"},"sortText":"000023","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"Integer(${1:T.any(Numeric, String)})${0}"}},{"label":"Pathname","kind":2,"detail":"Kernel#Pathname","documentation":{"kind":"markdown","value":"```ruby\nsig {params(path: T.any(String, Pathname)).returns(Pathname)}\ndef Pathname(path); end\n```\n\n---\n\nCreates a new\n[`Pathname`](https://docs.ruby-lang.org/en/2.7.0/Pathname.html) object from\nthe given string, `path`, and returns pathname object.\n\nIn order to use this constructor, you must first require the\n[`Pathname`](https://docs.ruby-lang.org/en/2.7.0/Pathname.html) standard\nlibrary extension.\n\n```ruby\nrequire 'pathname'\nPathname(\"/home/zzak\")\n#=> #<Pathname:/home/zzak>\n```\n\nSee also\n[`Pathname::new`](https://docs.ruby-lang.org/en/2.7.0/Pathname.html#method-c-new)\nfor more information."},"sortText":"000024","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"Pathname(${1:T.any(String, Pathname)})${0}"}},{"label":"Rational","kind":2,"detail":"Kernel#Rational","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: Object,\n    y: T.any(Numeric, String),\n    exception: T::Boolean\n  )\n  .returns(Rational)\nend\ndef Rational(x, y=…, exception: …); end\n```\n\n---\n\nReturns `x/y` or `arg` as a\n[`Rational`](https://docs.ruby-lang.org/en/2.7.0/Rational.html).\n\n```ruby\nRational(2, 3)   #=> (2/3)\nRational(5)      #=> (5/1)\nRational(0.5)    #=> (1/2)\nRational(0.3)    #=> (5404319552844595/18014398509481984)\n\nRational(\"2/3\")  #=> (2/3)\nRational(\"0.3\")  #=> (3/10)\n\nRational(\"10 cents\")  #=> ArgumentError\nRational(nil)         #=> TypeError\nRational(1, nil)      #=> TypeError\n\nRational(\"10 cents\", exception: false)  #=> nil\n```\n\nSyntax of the string form:\n\n```\nstring form = extra spaces , rational , extra spaces ;\nrational = [ sign ] , unsigned rational ;\nunsigned rational = numerator | numerator , \"/\" , denominator ;\nnumerator = integer part | fractional part | integer part , fractional part ;\ndenominator = digits ;\ninteger part = digits ;\nfractional part = \".\" , digits , [ ( \"e\" | \"E\" ) , [ sign ] , digits ] ;\nsign = \"-\" | \"+\" ;\ndigits = digit , { digit | \"_\" , digit } ;\ndigit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\nextra spaces = ? \\s* ? ;\n```\n\nSee also\n[`String#to_r`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_r)."},"sortText":"000025","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"Rational(${1:Object})${0}"}},{"label":"String","kind":2,"detail":"Kernel#String","documentation":{"kind":"markdown","value":"```ruby\nsig {params(x: Object).returns(String)}\ndef String(x); end\n```\n\n---\n\nReturns *arg* as a\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html).\n\nFirst tries to call its `to_str` method, then its `to_s` method.\n\n```ruby\nString(self)        #=> \"main\"\nString(self.class)  #=> \"Object\"\nString(123456)      #=> \"123456\"\n```"},"sortText":"000026","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"String(${1:Object})${0}"}},{"label":"URI","kind":2,"detail":"Kernel#URI","documentation":{"kind":"markdown","value":"```ruby\nsig {params(uri: T.any(URI::Generic, String)).returns(URI::Generic)}\ndef URI(uri); end\n```\n\n---\n\nReturns `uri` converted to an\n[`URI`](https://docs.ruby-lang.org/en/2.7.0/URI.html) object."},"sortText":"000027","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"URI(${1:T.any(URI::Generic, String)})${0}"}},{"label":"__callee__","kind":2,"detail":"Kernel#__callee__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(Symbol))}\ndef __callee__; end\n```\n\n---\n\nReturns the called name of the current method as a\n[`Symbol`](https://docs.ruby-lang.org/en/2.7.0/Symbol.html). If called\noutside of a method, it returns `nil`."},"sortText":"000028","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"__callee__${0}"}},{"label":"__dir__","kind":2,"detail":"Kernel#__dir__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(String))}\ndef __dir__; end\n```\n\n---\n\nReturns the canonicalized absolute path of the directory of the file from\nwhich this method is called. It means symlinks in the path is resolved. If\n`__FILE__` is `nil`, it returns `nil`. The return value equals to\n`File.dirname(File.realpath(__FILE__))`."},"sortText":"000029","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"__dir__${0}"}},{"label":"__method__","kind":2,"detail":"Kernel#__method__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(Symbol))}\ndef __method__; end\n```\n\n---\n\nReturns the name at the definition of the current method as a\n[`Symbol`](https://docs.ruby-lang.org/en/2.7.0/Symbol.html). If called\noutside of a method, it returns `nil`."},"sortText":"000030","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"__method__${0}"}},{"label":"`","kind":2,"detail":"Kernel#`","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String).returns(String)}\ndef `(arg0); end\n```\n\n---\n\nReturns the standard output of running *cmd* in a subshell. The built-in\nsyntax `%x{...}` uses this method. Sets `$?` to the process status.\n\n```ruby\n`date`                   #=> \"Wed Apr  9 08:56:30 CDT 2003\\n\"\n`ls testdir`.split[1]    #=> \"main.rb\"\n`echo oops && exit 99`   #=> \"oops\\n\"\n$?.exitstatus            #=> 99\n```"},"sortText":"000031","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"`(${1:String})${0}"}},{"label":"abort","kind":2,"detail":"Kernel#abort","documentation":{"kind":"markdown","value":"```ruby\nsig {params(msg: String).returns(T.noreturn)}\ndef abort(msg=…); end\n```\n\n---\n\nTerminate execution immediately, effectively by calling\n`Kernel.exit(false)`. If *msg* is given, it is written to STDERR prior to\nterminating."},"sortText":"000032","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"abort${0}"}},{"label":"at_exit","kind":2,"detail":"Kernel#at_exit","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.proc.returns(BasicObject)).returns(Proc)}\ndef at_exit(&blk); end\n```\n\n---\n\nConverts *block* to a `Proc` object (and therefore binds it at the point of\ncall) and registers it for execution when the program exits. If multiple\nhandlers are registered, they are executed in reverse order of registration.\n\n```ruby\ndef do_at_exit(str1)\n  at_exit { print str1 }\nend\nat_exit { puts \"cruel world\" }\ndo_at_exit(\"goodbye \")\nexit\n```\n\n*produces:*\n\n```ruby\ngoodbye cruel world\n```"},"sortText":"000033","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"at_exit do\n  ${1}\nend${0}"}},{"label":"autoload","kind":2,"detail":"Kernel#autoload","documentation":{"kind":"markdown","value":"```ruby\nsig {params(_module: T.any(String, Symbol), filename: String).returns(NilClass)}\ndef autoload(_module, filename); end\n```\n\n---\n\nRegisters *filename* to be loaded (using Kernel::require) the first time\nthat *module* (which may be a\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) or a symbol) is\naccessed.\n\n```ruby\nautoload(:MyModule, \"/usr/local/lib/modules/my_module.rb\")\n```"},"sortText":"000034","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"autoload(${1:T.any(String, Symbol)}, ${2:String})${0}"}},{"label":"autoload?","kind":2,"detail":"Kernel#autoload?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(name: T.any(Symbol, String)).returns(T.nilable(String))}\ndef autoload?(name); end\n```\n\n---\n\nReturns *filename* to be loaded if *name* is registered as `autoload`.\n\n```ruby\nautoload(:B, \"b\")\nautoload?(:B)            #=> \"b\"\n```"},"sortText":"000035","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"autoload?(${1:T.any(Symbol, String)})${0}"}},{"label":"binding","kind":2,"detail":"Kernel#binding","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Binding)}\ndef binding; end\n```\n\n---\n\nReturns a `Binding` object, describing the variable and method bindings at\nthe point of call. This object can be used when calling `eval` to execute\nthe evaluated command in this environment. See also the description of class\n`Binding`.\n\n```ruby\ndef get_binding(param)\n  binding\nend\nb = get_binding(\"hello\")\neval(\"param\", b)   #=> \"hello\"\n```"},"sortText":"000036","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"binding${0}"}},{"label":"block_given?","kind":2,"detail":"Kernel#block_given?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef block_given?; end\n```\n\n---\n\nReturns `true` if `yield` would execute a block in the current context. The\n`iterator?` form is mildly deprecated.\n\n```ruby\ndef try\n  if block_given?\n    yield\n  else\n    \"no block\"\n  end\nend\ntry                  #=> \"no block\"\ntry { \"hello\" }      #=> \"hello\"\ntry do \"hello\" end   #=> \"hello\"\n```"},"sortText":"000037","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"block_given?${0}"}},{"label":"callcc","kind":2,"detail":"Kernel#callcc","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    block: T.proc.params(arg0: Continuation).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef callcc(&block); end\n```\n\n---\n\nGenerates a [`Continuation`](https://ruby-doc.org/3.2.1/Continuation.html)\nobject, which it passes to the associated block. You need to\n`require 'continuation'` before using this method. Performing a\ncont.call will cause the\n[`callcc`](https://ruby-doc.org/3.2.1/Kernel.html#method-i-callcc) to\nreturn (as will falling through the end\nof the block). The value returned by the\n[`callcc`](https://ruby-doc.org/3.2.1/Kernel.html#method-i-callcc) is the\nvalue of the block, or the value passed to cont.call. See class\n[`Continuation`](https://ruby-doc.org/3.2.1/Continuation.html) for more\ndetails. Also see\n[`Kernel#throw`](https://ruby-doc.org/3.2.1/Kernel.html#method-i-throw)\nfor an alternative mechanism for unwinding a call stack."},"sortText":"000038","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"callcc do |${1:Continuation}|\n  ${2}\nend${0}"}},{"label":"caller","kind":2,"detail":"Kernel#caller","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: Integer,\n    length: Integer\n  )\n  .returns(T.nilable(T::Array[String]))\nend\ndef caller(start_or_range=…, length=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing strings in the\nform `file:line` or `file:line: in `method'`.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.\n\n```ruby\ndef a(skip)\n  caller(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\nc(0)   #=> [\"prog:2:in `a'\", \"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:10:in `<main>'\"]\nc(1)   #=> [\"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:11:in `<main>'\"]\nc(2)   #=> [\"prog:8:in `c'\", \"prog:12:in `<main>'\"]\nc(3)   #=> [\"prog:13:in `<main>'\"]\nc(4)   #=> []\nc(5)   #=> nil\n```"},"sortText":"000039","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"caller${0}"}},{"label":"caller","kind":2,"detail":"Kernel#caller (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: T::Range[Integer]\n  )\n  .returns(T.nilable(T::Array[String]))\nend\ndef caller (overload.1)(start_or_range=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing strings in the\nform `file:line` or `file:line: in `method'`.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.\n\n```ruby\ndef a(skip)\n  caller(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\nc(0)   #=> [\"prog:2:in `a'\", \"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:10:in `<main>'\"]\nc(1)   #=> [\"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:11:in `<main>'\"]\nc(2)   #=> [\"prog:8:in `c'\", \"prog:12:in `<main>'\"]\nc(3)   #=> [\"prog:13:in `<main>'\"]\nc(4)   #=> []\nc(5)   #=> nil\n```"},"sortText":"000040","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"caller${0}"}},{"label":"caller","kind":2,"detail":"Kernel#caller (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[String])}\ndef caller (overload.2); end\n```\n\n---\n\nReturns the current execution stack---an array containing strings in the\nform `file:line` or `file:line: in `method'`.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.\n\n```ruby\ndef a(skip)\n  caller(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\nc(0)   #=> [\"prog:2:in `a'\", \"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:10:in `<main>'\"]\nc(1)   #=> [\"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:11:in `<main>'\"]\nc(2)   #=> [\"prog:8:in `c'\", \"prog:12:in `<main>'\"]\nc(3)   #=> [\"prog:13:in `<main>'\"]\nc(4)   #=> []\nc(5)   #=> nil\n```"},"sortText":"000041","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"caller${0}"}},{"label":"caller_locations","kind":2,"detail":"Kernel#caller_locations","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: Integer,\n    length: Integer\n  )\n  .returns(T.nilable(T::Array[Thread::Backtrace::Location]))\nend\ndef caller_locations(start_or_range=…, length=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing backtrace location\nobjects.\n\nSee\n[`Thread::Backtrace::Location`](https://docs.ruby-lang.org/en/2.7.0/Thread/Backtrace/Location.html)\nfor more information.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range."},"sortText":"000042","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"caller_locations${0}"}},{"label":"caller_locations","kind":2,"detail":"Kernel#caller_locations (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: T::Range[Integer]\n  )\n  .returns(T.nilable(T::Array[Thread::Backtrace::Location]))\nend\ndef caller_locations (overload.1)(start_or_range=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing backtrace location\nobjects.\n\nSee\n[`Thread::Backtrace::Location`](https://docs.ruby-lang.org/en/2.7.0/Thread/Backtrace/Location.html)\nfor more information.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range."},"sortText":"000043","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"caller_locations${0}"}},{"label":"catch","kind":2,"detail":"Kernel#catch","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    tag: Object,\n    blk: T.proc.params(arg0: Object).returns(T.untyped)\n  )\n  .returns(T.untyped)\nend\ndef catch(tag=…, &blk); end\n```\n\n---\n\n`catch` executes its block. If `throw` is not called, the block executes\nnormally, and `catch` returns the value of the last expression evaluated.\n\n```ruby\ncatch(1) { 123 }            # => 123\n```\n\nIf `throw(tag2, val)` is called, Ruby searches up its stack for a `catch`\nblock whose `tag` has the same `object_id` as *tag2*. When found, the block\nstops executing and returns *val* (or `nil` if no second argument was given\nto `throw`).\n\n```ruby\ncatch(1) { throw(1, 456) }  # => 456\ncatch(1) { throw(1) }       # => nil\n```\n\nWhen `tag` is passed as the first argument, `catch` yields it as the\nparameter of the block.\n\n```ruby\ncatch(1) {|x| x + 2 }       # => 3\n```\n\nWhen no `tag` is given, `catch` yields a new unique object (as from\n`Object.new`) as the block parameter. This object can then be used as the\nargument to `throw`, and will match the correct `catch` block.\n\n```ruby\ncatch do |obj_A|\n  catch do |obj_B|\n    throw(obj_B, 123)\n    puts \"This puts is not reached\"\n  end\n\n  puts \"This puts is displayed\"\n  456\nend\n\n# => 456\n\ncatch do |obj_A|\n  catch do |obj_B|\n    throw(obj_A, 123)\n    puts \"This puts is still not reached\"\n  end\n\n  puts \"Now this puts is also not reached\"\n  456\nend\n\n# => 123\n```"},"sortText":"000044","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"catch do |${1:Object}|\n  ${2}\nend${0}"}},{"label":"clone","kind":2,"detail":"Kernel#clone","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    freeze: T.nilable(T::Boolean)\n  )\n  .returns(T::Private::Methods::DeclBuilder)\nend\ndef clone(freeze: …); end\n```\n\n---\n\nProduces a shallow copy of *obj*---the instance variables of *obj* are\ncopied, but not the objects they reference.\n[`clone`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-clone)\ncopies the frozen value state of *obj*, unless the `:freeze` keyword\nargument is given with a false or true value. See also the discussion under\n[`Object#dup`](https://docs.ruby-lang.org/en/2.7.0/Object.html#method-i-dup).\n\n```ruby\nclass Klass\n   attr_accessor :str\nend\ns1 = Klass.new      #=> #<Klass:0x401b3a38>\ns1.str = \"Hello\"    #=> \"Hello\"\ns2 = s1.clone       #=> #<Klass:0x401b3998 @str=\"Hello\">\ns2.str[1,4] = \"i\"   #=> \"i\"\ns1.inspect          #=> \"#<Klass:0x401b3a38 @str=\\\"Hi\\\">\"\ns2.inspect          #=> \"#<Klass:0x401b3998 @str=\\\"Hi\\\">\"\n```\n\nThis method may have class-specific behavior. If so, that behavior will be\ndocumented under the #`initialize_copy` method of the class."},"sortText":"000045","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"clone${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    symbol: T.any(Symbol, String),\n    method: T.any(Proc, Method, UnboundMethod)\n  )\n  .returns(Symbol)\nend\ndef define_singleton_method(symbol, method=…); end\n```"},"sortText":"000046","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"define_singleton_method(${1:T.any(Symbol, String)})${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(symbol: T.any(Symbol, String), blk: T.untyped).returns(Symbol)}\ndef define_singleton_method (overload.1)(symbol, &blk); end\n```"},"sortText":"000047","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"define_singleton_method(${1:T.any(Symbol, String)})${0}"}},{"label":"display","kind":2,"detail":"Kernel#display","documentation":{"kind":"markdown","value":"```ruby\nsig {params(port: IO).returns(NilClass)}\ndef display(port); end\n```"},"sortText":"000048","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"display(${1:IO})${0}"}},{"label":"dup","kind":2,"detail":"Kernel#dup","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Private::Methods::DeclBuilder)}\ndef dup; end\n```"},"sortText":"000049","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"dup${0}"}},{"label":"enum_for","kind":2,"detail":"Kernel#enum_for","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef enum_for(method=…, *args); end\n```"},"sortText":"000050","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"enum_for${0}"}},{"label":"enum_for","kind":2,"detail":"Kernel#enum_for (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef enum_for (overload.1)(method=…, *args, &blk); end\n```"},"sortText":"000051","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"enum_for${0}"}},{"label":"eql?","kind":2,"detail":"Kernel#eql?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(other: BasicObject).returns(T::Boolean)}\ndef eql?(other); end\n```"},"sortText":"000052","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"eql?(${1:BasicObject})${0}"}},{"label":"eval","kind":2,"detail":"Kernel#eval","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: String,\n    arg1: T.nilable(Binding),\n    filename: String,\n    lineno: Integer\n  )\n  .returns(T.untyped)\nend\ndef eval(arg0, arg1=…, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates the Ruby expression(s) in *string*. If *binding* is given, which\nmust be a [`Binding`](https://docs.ruby-lang.org/en/2.7.0/Binding.html)\nobject, the evaluation is performed in its context. If the optional\n*filename* and *lineno* parameters are present, they will be used when\nreporting syntax errors.\n\n```ruby\ndef get_binding(str)\n  return binding\nend\nstr = \"hello\"\neval \"str + ' Fred'\"                      #=> \"hello Fred\"\neval \"str + ' Fred'\", get_binding(\"bye\")  #=> \"bye Fred\"\n```"},"sortText":"000053","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"eval(${1:String})${0}"}},{"label":"exec","kind":2,"detail":"Kernel#exec","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: String).returns(T.noreturn)}\ndef exec(*args); end\n```\n\n---\n\nReplaces the current process by running the given external *command*, which\ncan take one of the following forms:\n\n`exec(commandline)`\n:   command line string which is passed to the standard shell\n`exec(cmdname, arg1, ...)`\n:   command name and one or more arguments (no shell)\n`exec([cmdname, argv0], arg1, ...)`\n:   command name, [argv](0) and zero or more arguments (no shell)\n\n\nIn the first form, the string is taken as a command line that is subject to\nshell expansion before being executed.\n\nThe standard shell always means `\"/bin/sh\"` on Unix-like systems, otherwise,\n`ENV[\"RUBYSHELL\"]` or `ENV[\"COMSPEC\"]` on Windows and similar. The command\nis passed as an argument to the `\"-c\"` switch to the shell, except in the\ncase of `COMSPEC`.\n\nIf the string from the first form (`exec(\"command\")`) follows these simple\nrules:\n\n*   no meta characters\n*   not starting with shell reserved word or special built-in\n*   Ruby invokes the command directly without shell\n\n\nYou can force shell invocation by adding \";\" to the string (because \";\" is a\nmeta character).\n\nNote that this behavior is observable by pid obtained (return value of\nspawn() and\n[`IO#pid`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-pid) for\n[`IO.popen`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-popen)) is\nthe pid of the invoked command, not shell.\n\nIn the second form (`exec(\"command1\", \"arg1\", ...)`), the first is taken as\na command name and the rest are passed as parameters to command with no\nshell expansion.\n\nIn the third form (`exec([\"command\", \"argv0\"], \"arg1\", ...)`), starting a\ntwo-element array at the beginning of the command, the first element is the\ncommand to be executed, and the second argument is used as the `argv[0]`\nvalue, which may show up in process listings.\n\nIn order to execute the command, one of the `exec(2)` system calls are used,\nso the running command may inherit some of the environment of the original\nprogram (including open file descriptors).\n\nThis behavior is modified by the given `env` and `options` parameters. See\n::spawn for details.\n\nIf the command fails to execute (typically Errno::ENOENT when it was not\nfound) a\n[`SystemCallError`](https://docs.ruby-lang.org/en/2.7.0/SystemCallError.html)\nexception is raised.\n\nThis method modifies process attributes according to given `options` before\n`exec(2)` system call. See ::spawn for more details about the given\n`options`.\n\nThe modified attributes may be retained when `exec(2)` system call fails.\n\nFor example, hard resource limits are not restorable.\n\nConsider to create a child process using ::spawn or\n[`Kernel#system`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-system)\nif this is not acceptable.\n\n```ruby\nexec \"echo *\"       # echoes list of files in current directory\n# never get here\n\nexec \"echo\", \"*\"    # echoes an asterisk\n# never get here\n```"},"sortText":"000054","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"exec${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef exit; end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000055","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"exit${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit (overload.1)(status=…); end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000056","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"exit${0}"}},{"label":"exit!","kind":2,"detail":"Kernel#exit!","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit!(status=…); end\n```\n\n---\n\nExits the process immediately. No exit handlers are run. *status* is\nreturned to the underlying system as the exit status.\n\n```ruby\nProcess.exit!(true)\n```"},"sortText":"000057","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"exit!${0}"}},{"label":"extend","kind":2,"detail":"Kernel#extend","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T::Private::Methods::DeclBuilder)}\ndef extend(*arg0); end\n```"},"sortText":"000058","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"extend${0}"}},{"label":"fail","kind":2,"detail":"Kernel#fail","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef fail; end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlias for:\n[`raise`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-raise)"},"sortText":"000059","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"fail${0}"}},{"label":"fail","kind":2,"detail":"Kernel#fail (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String).returns(T.noreturn)}\ndef fail (overload.1)(arg0=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlias for:\n[`raise`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-raise)"},"sortText":"000060","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"fail${0}"}},{"label":"fail","kind":2,"detail":"Kernel#fail (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T::Class[T.anything],\n    arg1: T.any(T::Array[String], String)\n  )\n  .returns(T.noreturn)\nend\ndef fail (overload.2)(arg0=…, arg1=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlias for:\n[`raise`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-raise)"},"sortText":"000061","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"fail${0}"}},{"label":"fail","kind":2,"detail":"Kernel#fail (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: Exception,\n    arg1: String,\n    arg2: T::Array[String]\n  )\n  .returns(T.noreturn)\nend\ndef fail (overload.3)(arg0=…, arg1=…, arg2=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlias for:\n[`raise`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-raise)"},"sortText":"000062","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"fail${0}"}},{"label":"fork","kind":2,"detail":"Kernel#fork","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(Integer))}\ndef fork; end\n```\n\n---\n\nCreates a subprocess. If a block is specified, that block is run in the\nsubprocess, and the subprocess terminates with a status of zero. Otherwise,\nthe `fork` call returns twice, once in the parent, returning the process ID\nof the child, and once in the child, returning *nil*. The child process can\nexit using\n[`Kernel.exit!`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-exit-21)\nto avoid running any `at_exit` functions. The parent process should use\n[`Process.wait`](https://docs.ruby-lang.org/en/2.7.0/Process.html#method-c-wait)\nto collect the termination statuses of its children or use\n[`Process.detach`](https://docs.ruby-lang.org/en/2.7.0/Process.html#method-c-detach)\nto register disinterest in their status; otherwise, the operating system may\naccumulate zombie processes.\n\nThe thread calling fork is the only thread in the created child process.\nfork doesn't copy other threads.\n\nIf fork is not usable, Process.respond\\_to?(:fork) returns false.\n\nNote that fork(2) is not available on some platforms like Windows and NetBSD\n4. Therefore you should use spawn() instead of fork()."},"sortText":"000063","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"fork${0}"}},{"label":"fork","kind":2,"detail":"Kernel#fork (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.proc.returns(BasicObject)).returns(Integer)}\ndef fork (overload.1)(&blk); end\n```\n\n---\n\nCreates a subprocess. If a block is specified, that block is run in the\nsubprocess, and the subprocess terminates with a status of zero. Otherwise,\nthe `fork` call returns twice, once in the parent, returning the process ID\nof the child, and once in the child, returning *nil*. The child process can\nexit using\n[`Kernel.exit!`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-exit-21)\nto avoid running any `at_exit` functions. The parent process should use\n[`Process.wait`](https://docs.ruby-lang.org/en/2.7.0/Process.html#method-c-wait)\nto collect the termination statuses of its children or use\n[`Process.detach`](https://docs.ruby-lang.org/en/2.7.0/Process.html#method-c-detach)\nto register disinterest in their status; otherwise, the operating system may\naccumulate zombie processes.\n\nThe thread calling fork is the only thread in the created child process.\nfork doesn't copy other threads.\n\nIf fork is not usable, Process.respond\\_to?(:fork) returns false.\n\nNote that fork(2) is not available on some platforms like Windows and NetBSD\n4. Therefore you should use spawn() instead of fork()."},"sortText":"000064","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"fork do\n  ${1}\nend${0}"}},{"label":"format","kind":2,"detail":"Kernel#format","documentation":{"kind":"markdown","value":"```ruby\nsig {params(format: String, args: BasicObject).returns(String)}\ndef format(format, *args); end\n```\n\n---\n\nReturns the string resulting from applying *format\\_string* to any\nadditional arguments. Within the format string, any characters other than\nformat sequences are copied to the result.\n\nThe syntax of a format sequence is as follows.\n\n```\n%[flags][width][.precision]type\n```\n\nA format sequence consists of a percent sign, followed by optional flags,\nwidth, and precision indicators, then terminated with a field type\ncharacter. The field type controls how the corresponding `sprintf` argument\nis to be interpreted, while the flags modify that interpretation.\n\nThe field type characters are:\n\n```\nField |  Integer Format\n------+--------------------------------------------------------------\n  b   | Convert argument as a binary number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..1'.\n  B   | Equivalent to `b', but uses an uppercase 0B for prefix\n      | in the alternative format by #.\n  d   | Convert argument as a decimal number.\n  i   | Identical to `d'.\n  o   | Convert argument as an octal number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..7'.\n  u   | Identical to `d'.\n  x   | Convert argument as a hexadecimal number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..f' (representing an infinite string of\n      | leading 'ff's).\n  X   | Equivalent to `x', but uses uppercase letters.\n\nField |  Float Format\n------+--------------------------------------------------------------\n  e   | Convert floating point argument into exponential notation\n      | with one digit before the decimal point as [-]d.dddddde[+-]dd.\n      | The precision specifies the number of digits after the decimal\n      | point (defaulting to six).\n  E   | Equivalent to `e', but uses an uppercase E to indicate\n      | the exponent.\n  f   | Convert floating point argument as [-]ddd.dddddd,\n      | where the precision specifies the number of digits after\n      | the decimal point.\n  g   | Convert a floating point number using exponential form\n      | if the exponent is less than -4 or greater than or\n      | equal to the precision, or in dd.dddd form otherwise.\n      | The precision specifies the number of significant digits.\n  G   | Equivalent to `g', but use an uppercase `E' in exponent form.\n  a   | Convert floating point argument as [-]0xh.hhhhp[+-]dd,\n      | which is consisted from optional sign, \"0x\", fraction part\n      | as hexadecimal, \"p\", and exponential part as decimal.\n  A   | Equivalent to `a', but use uppercase `X' and `P'.\n\nField |  Other Format\n------+--------------------------------------------------------------\n  c   | Argument is the numeric code for a single character or\n      | a single character string itself.\n  p   | The valuing of argument.inspect.\n  s   | Argument is a string to be substituted.  If the format\n      | sequence contains a precision, at most that many characters\n      | will be copied.\n  %   | A percent sign itself will be displayed.  No argument taken.\n```\n\nThe flags modifies the behavior of the formats. The flag characters are:\n\n```\nFlag     | Applies to    | Meaning\n---------+---------------+-----------------------------------------\nspace    | bBdiouxX      | Leave a space at the start of\n         | aAeEfgG       | non-negative numbers.\n         | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n         |               | a minus sign with absolute value for\n         |               | negative values.\n---------+---------------+-----------------------------------------\n(digit)$ | all           | Specifies the absolute argument number\n         |               | for this field.  Absolute and relative\n         |               | argument numbers cannot be mixed in a\n         |               | sprintf string.\n---------+---------------+-----------------------------------------\n #       | bBoxX         | Use an alternative format.\n         | aAeEfgG       | For the conversions `o', increase the precision\n         |               | until the first digit will be `0' if\n         |               | it is not formatted as complements.\n         |               | For the conversions `x', `X', `b' and `B'\n         |               | on non-zero, prefix the result with ``0x'',\n         |               | ``0X'', ``0b'' and ``0B'', respectively.\n         |               | For `a', `A', `e', `E', `f', `g', and 'G',\n         |               | force a decimal point to be added,\n         |               | even if no digits follow.\n         |               | For `g' and 'G', do not remove trailing zeros.\n---------+---------------+-----------------------------------------\n+        | bBdiouxX      | Add a leading plus sign to non-negative\n         | aAeEfgG       | numbers.\n         | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n         |               | a minus sign with absolute value for\n         |               | negative values.\n---------+---------------+-----------------------------------------\n-        | all           | Left-justify the result of this conversion.\n---------+---------------+-----------------------------------------\n0 (zero) | bBdiouxX      | Pad with zeros, not spaces.\n         | aAeEfgG       | For `o', `x', `X', `b' and `B', radix-1\n         | (numeric fmt) | is used for negative numbers formatted as\n         |               | complements.\n---------+---------------+-----------------------------------------\n*        | all           | Use the next argument as the field width.\n         |               | If negative, left-justify the result. If the\n         |               | asterisk is followed by a number and a dollar\n         |               | sign, use the indicated argument as the width.\n```\n\nExamples of flags:\n\n```ruby\n# `+' and space flag specifies the sign of non-negative numbers.\nsprintf(\"%d\", 123)  #=> \"123\"\nsprintf(\"%+d\", 123) #=> \"+123\"\nsprintf(\"% d\", 123) #=> \" 123\"\n\n# `#' flag for `o' increases number of digits to show `0'.\n# `+' and space flag changes format of negative numbers.\nsprintf(\"%o\", 123)   #=> \"173\"\nsprintf(\"%#o\", 123)  #=> \"0173\"\nsprintf(\"%+o\", -123) #=> \"-173\"\nsprintf(\"%o\", -123)  #=> \"..7605\"\nsprintf(\"%#o\", -123) #=> \"..7605\"\n\n# `#' flag for `x' add a prefix `0x' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf(\"%x\", 123)   #=> \"7b\"\nsprintf(\"%#x\", 123)  #=> \"0x7b\"\nsprintf(\"%+x\", -123) #=> \"-7b\"\nsprintf(\"%x\", -123)  #=> \"..f85\"\nsprintf(\"%#x\", -123) #=> \"0x..f85\"\nsprintf(\"%#x\", 0)    #=> \"0\"\n\n# `#' for `X' uses the prefix `0X'.\nsprintf(\"%X\", 123)  #=> \"7B\"\nsprintf(\"%#X\", 123) #=> \"0X7B\"\n\n# `#' flag for `b' add a prefix `0b' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf(\"%b\", 123)   #=> \"1111011\"\nsprintf(\"%#b\", 123)  #=> \"0b1111011\"\nsprintf(\"%+b\", -123) #=> \"-1111011\"\nsprintf(\"%b\", -123)  #=> \"..10000101\"\nsprintf(\"%#b\", -123) #=> \"0b..10000101\"\nsprintf(\"%#b\", 0)    #=> \"0\"\n\n# `#' for `B' uses the prefix `0B'.\nsprintf(\"%B\", 123)  #=> \"1111011\"\nsprintf(\"%#B\", 123) #=> \"0B1111011\"\n\n# `#' for `e' forces to show the decimal point.\nsprintf(\"%.0e\", 1)  #=> \"1e+00\"\nsprintf(\"%#.0e\", 1) #=> \"1.e+00\"\n\n# `#' for `f' forces to show the decimal point.\nsprintf(\"%.0f\", 1234)  #=> \"1234\"\nsprintf(\"%#.0f\", 1234) #=> \"1234.\"\n\n# `#' for `g' forces to show the decimal point.\n# It also disables stripping lowest zeros.\nsprintf(\"%g\", 123.4)   #=> \"123.4\"\nsprintf(\"%#g\", 123.4)  #=> \"123.400\"\nsprintf(\"%g\", 123456)  #=> \"123456\"\nsprintf(\"%#g\", 123456) #=> \"123456.\"\n```\n\nThe field width is an optional integer, followed optionally by a period and\na precision. The width specifies the minimum number of characters that will\nbe written to the result for this field.\n\nExamples of width:\n\n```ruby\n# padding is done by spaces,       width=20\n# 0 or radix-1.             <------------------>\nsprintf(\"%20d\", 123)   #=> \"                 123\"\nsprintf(\"%+20d\", 123)  #=> \"                +123\"\nsprintf(\"%020d\", 123)  #=> \"00000000000000000123\"\nsprintf(\"%+020d\", 123) #=> \"+0000000000000000123\"\nsprintf(\"% 020d\", 123) #=> \" 0000000000000000123\"\nsprintf(\"%-20d\", 123)  #=> \"123                 \"\nsprintf(\"%-+20d\", 123) #=> \"+123                \"\nsprintf(\"%- 20d\", 123) #=> \" 123                \"\nsprintf(\"%020x\", -123) #=> \"..ffffffffffffffff85\"\n```\n\nFor numeric fields, the precision controls the number of decimal places\ndisplayed. For string fields, the precision determines the maximum number of\ncharacters to be copied from the string. (Thus, the format sequence\n`%10.10s` will always contribute exactly ten characters to the result.)\n\nExamples of precisions:\n\n```ruby\n# precision for `d', 'o', 'x' and 'b' is\n# minimum number of digits               <------>\nsprintf(\"%20.8d\", 123)  #=> \"            00000123\"\nsprintf(\"%20.8o\", 123)  #=> \"            00000173\"\nsprintf(\"%20.8x\", 123)  #=> \"            0000007b\"\nsprintf(\"%20.8b\", 123)  #=> \"            01111011\"\nsprintf(\"%20.8d\", -123) #=> \"           -00000123\"\nsprintf(\"%20.8o\", -123) #=> \"            ..777605\"\nsprintf(\"%20.8x\", -123) #=> \"            ..ffff85\"\nsprintf(\"%20.8b\", -11)  #=> \"            ..110101\"\n\n# \"0x\" and \"0b\" for `#x' and `#b' is not counted for\n# precision but \"0\" for `#o' is counted.  <------>\nsprintf(\"%#20.8d\", 123)  #=> \"            00000123\"\nsprintf(\"%#20.8o\", 123)  #=> \"            00000173\"\nsprintf(\"%#20.8x\", 123)  #=> \"          0x0000007b\"\nsprintf(\"%#20.8b\", 123)  #=> \"          0b01111011\"\nsprintf(\"%#20.8d\", -123) #=> \"           -00000123\"\nsprintf(\"%#20.8o\", -123) #=> \"            ..777605\"\nsprintf(\"%#20.8x\", -123) #=> \"          0x..ffff85\"\nsprintf(\"%#20.8b\", -11)  #=> \"          0b..110101\"\n\n# precision for `e' is number of\n# digits after the decimal point           <------>\nsprintf(\"%20.8e\", 1234.56789) #=> \"      1.23456789e+03\"\n\n# precision for `f' is number of\n# digits after the decimal point               <------>\nsprintf(\"%20.8f\", 1234.56789) #=> \"       1234.56789000\"\n\n# precision for `g' is number of\n# significant digits                          <------->\nsprintf(\"%20.8g\", 1234.56789) #=> \"           1234.5679\"\n\n#                                         <------->\nsprintf(\"%20.8g\", 123456789)  #=> \"       1.2345679e+08\"\n\n# precision for `s' is\n# maximum number of characters                    <------>\nsprintf(\"%20.8s\", \"string test\") #=> \"            string t\"\n```\n\nExamples:\n\n```ruby\nsprintf(\"%d %04x\", 123, 123)               #=> \"123 007b\"\nsprintf(\"%08b '%4s'\", 123, 123)            #=> \"01111011 ' 123'\"\nsprintf(\"%1$*2$s %2$d %1$s\", \"hello\", 8)   #=> \"   hello 8 hello\"\nsprintf(\"%1$*2$s %2$d\", \"hello\", -8)       #=> \"hello    -8\"\nsprintf(\"%+g:% g:%-g\", 1.23, 1.23, 1.23)   #=> \"+1.23: 1.23:1.23\"\nsprintf(\"%u\", -123)                        #=> \"-123\"\n```\n\nFor more complex formatting, Ruby supports a reference by name. %<name>s\nstyle uses format style, but %{name} style doesn't.\n\nExamples:\n\n```ruby\nsprintf(\"%<foo>d : %<bar>f\", { :foo => 1, :bar => 2 })\n  #=> 1 : 2.000000\nsprintf(\"%{foo}f\", { :foo => 1 })\n  # => \"1f\"\n```\n\n\nAlias for:\n[`sprintf`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-sprintf)"},"sortText":"000065","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"format(${1:String})${0}"}},{"label":"freeze","kind":2,"detail":"Kernel#freeze","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Private::Methods::DeclBuilder)}\ndef freeze; end\n```"},"sortText":"000066","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"freeze${0}"}},{"label":"frozen?","kind":2,"detail":"Kernel#frozen?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef frozen?; end\n```\n\n---\n\nReturns the freeze status of *obj*.\n\n```ruby\na = [ \"a\", \"b\", \"c\" ]\na.freeze    #=> [\"a\", \"b\", \"c\"]\na.frozen?   #=> true\n```"},"sortText":"000067","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"frozen?${0}"}},{"label":"gem","kind":2,"detail":"Kernel#gem","documentation":{"kind":"markdown","value":"```ruby\nsig {params(dep: T.untyped, reqs: T.untyped).returns(T.untyped)}\ndef gem(dep, *reqs); end\n```\n\n---\n\nUse\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nto activate a specific version of `gem_name`.\n\n`requirements` is a list of version requirements that the specified gem must\nmatch, most commonly \"= example.version.number\". See\n[`Gem::Requirement`](https://docs.ruby-lang.org/en/2.7.0/Gem/Requirement.html)\nfor how to specify a version requirement.\n\nIf you will be activating the latest version of a gem, there is no need to\ncall\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem),\n[`Kernel#require`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-require)\nwill do the right thing for you.\n\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nreturns true if the gem was activated, otherwise false. If the gem could not\nbe found, didn't match the version requirements, or a different version was\nalready activated, an exception will be raised.\n\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nshould be called **before** any require statements (otherwise RubyGems may\nload a conflicting library version).\n\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nonly loads prerelease versions when prerelease `requirements` are given:\n\n```ruby\ngem 'rake', '>= 1.1.a', '< 2'\n```\n\nIn older RubyGems versions, the environment variable GEM\\_SKIP could be used\nto skip activation of specified gems, for example to test out changes that\nhaven't been installed yet. Now RubyGems defers to -I and the RUBYLIB\nenvironment variable to skip activation of a gem.\n\nExample:\n\n```\nGEM_SKIP=libA:libB ruby -I../libA -I../libB ./mycode.rb\n```"},"sortText":"000068","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"gem(${1})${0}"}},{"label":"gets","kind":2,"detail":"Kernel#gets","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(String)}\ndef gets(arg0=…, arg1=…); end\n```\n\n---\n\nReturns (and assigns to `$_`) the next line from the list of files in `ARGV`\n(or `$*`), or from standard input if no files are present on the command\nline. Returns `nil` at end of file. The optional argument specifies the\nrecord separator. The separator is included with the contents of each\nrecord. A separator of `nil` reads the entire contents, and a zero-length\nseparator reads the input one paragraph at a time, where paragraphs are\ndivided by two consecutive newlines. If the first argument is an integer, or\noptional second argument is given, the returning string would not be longer\nthan the given value in bytes. If multiple filenames are present in `ARGV`,\n`gets(nil)` will read the contents one file at a time.\n\n```ruby\nARGV << \"testfile\"\nprint while gets\n```\n\n*produces:*\n\n```ruby\nThis is line one\nThis is line two\nThis is line three\nAnd so on...\n```\n\nThe style of programming using `$_` as an implicit parameter is gradually\nlosing favor in the Ruby community."},"sortText":"000069","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"gets${0}"}},{"label":"global_variables","kind":2,"detail":"Kernel#global_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef global_variables; end\n```\n\n---\n\nReturns an array of the names of global variables. This includes special\nregexp global variables such as `$~` and `$+`, but does not include the\nnumbered regexp global variables (`$1`, `$2`, etc.).\n\n```ruby\nglobal_variables.grep /std/   #=> [:$stdin, :$stdout, :$stderr]\n```"},"sortText":"000070","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"global_variables${0}"}},{"label":"hash","kind":2,"detail":"Kernel#hash","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef hash; end\n```"},"sortText":"000071","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"hash${0}"}},{"label":"initialize_copy","kind":2,"detail":"Kernel#initialize_copy","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    object: T::Private::Methods::DeclBuilder\n  )\n  .returns(T::Private::Methods::DeclBuilder)\nend\ndef initialize_copy(object); end\n```"},"sortText":"000072","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"initialize_copy(${1:T::Private::Methods::DeclBuilder})${0}"}},{"label":"inspect","kind":2,"detail":"Kernel#inspect","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(String)}\ndef inspect; end\n```"},"sortText":"000073","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"inspect${0}"}},{"label":"instance_of?","kind":2,"detail":"Kernel#instance_of?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T::Class[T.anything]).returns(T::Boolean)}\ndef instance_of?(arg0); end\n```"},"sortText":"000074","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"instance_of?(${1:T::Class[T.anything]})${0}"}},{"label":"instance_variable_defined?","kind":2,"detail":"Kernel#instance_variable_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef instance_variable_defined?(arg0); end\n```"},"sortText":"000075","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"instance_variable_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"instance_variable_get","kind":2,"detail":"Kernel#instance_variable_get","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.untyped)}\ndef instance_variable_get(arg0); end\n```"},"sortText":"000076","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"instance_variable_get(${1:T.any(Symbol, String)})${0}"}},{"label":"instance_variable_set","kind":2,"detail":"Kernel#instance_variable_set","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String), arg1: BasicObject).returns(T.untyped)}\ndef instance_variable_set(arg0, arg1); end\n```"},"sortText":"000077","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"instance_variable_set(${1:T.any(Symbol, String)}, ${2:BasicObject})${0}"}},{"label":"instance_variables","kind":2,"detail":"Kernel#instance_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef instance_variables; end\n```"},"sortText":"000078","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"instance_variables${0}"}},{"label":"is_a?","kind":2,"detail":"Kernel#is_a?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T::Boolean)}\ndef is_a?(arg0); end\n```"},"sortText":"000079","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"is_a?(${1:Module})${0}"}},{"label":"iterator?","kind":2,"detail":"Kernel#iterator?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef iterator?; end\n```\n\n---\n\nDeprecated. Use block\\_given? instead."},"sortText":"000080","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"iterator?${0}"}},{"label":"itself","kind":2,"detail":"Kernel#itself","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Private::Methods::DeclBuilder)}\ndef itself; end\n```\n\n---\n\nReturns the receiver `obj`.\n\n```ruby\nobj = Object.new; obj.itself.object_id == o.object_id # => true\n```"},"sortText":"000081","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"itself${0}"}},{"label":"kind_of?","kind":2,"detail":"Kernel#kind_of?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T::Boolean)}\ndef kind_of?(arg0); end\n```"},"sortText":"000082","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"kind_of?(${1:Module})${0}"}},{"label":"lambda","kind":2,"detail":"Kernel#lambda","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.untyped).returns(Proc)}\ndef lambda(&blk); end\n```\n\n---\n\nEquivalent to\n[`Proc.new`](https://docs.ruby-lang.org/en/2.7.0/Proc.html#method-c-new),\nexcept the resulting [`Proc`](https://docs.ruby-lang.org/en/2.7.0/Proc.html)\nobjects check the number of parameters passed when called."},"sortText":"000083","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"lambda${0}"}},{"label":"load","kind":2,"detail":"Kernel#load","documentation":{"kind":"markdown","value":"```ruby\nsig {params(filename: String, arg0: T::Boolean).returns(T::Boolean)}\ndef load(filename, arg0=…); end\n```\n\n---\n\nLoads and executes the Ruby program in the file *filename*.\n\nIf the filename is an absolute path (e.g. starts with '/'), the file will be\nloaded directly using the absolute path.\n\nIf the filename is an explicit relative path (e.g. starts with './' or\n'../'), the file will be loaded using the relative path from the current\ndirectory.\n\nOtherwise, the file will be searched for in the library directories listed\nin `$LOAD_PATH` (`$:`). If the file is found in a directory, it will attempt\nto load the file relative to that directory. If the file is not found in any\nof the directories in `$LOAD_PATH`, the file will be loaded using the\nrelative path from the current directory.\n\nIf the file doesn't exist when there is an attempt to load it, a\n[`LoadError`](https://docs.ruby-lang.org/en/2.7.0/LoadError.html) will be\nraised.\n\nIf the optional *wrap* parameter is `true`, the loaded script will be\nexecuted under an anonymous module, protecting the calling program's global\nnamespace. If the optional *wrap* parameter is a module, the loaded script\nwill be executed under the given module. In no circumstance will any local\nvariables in the loaded file be propagated to the loading environment."},"sortText":"000084","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"load(${1:String})${0}"}},{"label":"local_variables","kind":2,"detail":"Kernel#local_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef local_variables; end\n```\n\n---\n\nReturns the names of the current local variables.\n\n```ruby\nfred = 1\nfor i in 1..10\n   # ...\nend\nlocal_variables   #=> [:fred, :i]\n```"},"sortText":"000085","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"local_variables${0}"}},{"label":"loop","kind":2,"detail":"Kernel#loop","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.proc.returns(T.untyped)).returns(T.noreturn)}\ndef loop(&blk); end\n```\n\n---\n\nRepeatedly executes the block.\n\nIf no block is given, an enumerator is returned instead.\n\n```ruby\nloop do\n  print \"Input: \"\n  line = gets\n  break if !line or line =~ /^qQ/\n  # ...\nend\n```\n\n[`StopIteration`](https://docs.ruby-lang.org/en/2.7.0/StopIteration.html)\nraised in the block breaks the loop. In this case, loop returns the \"result\"\nvalue stored in the exception.\n\n```ruby\nenum = Enumerator.new { |y|\n  y << \"one\"\n  y << \"two\"\n  :ok\n}\n\nresult = loop {\n  puts enum.next\n} #=> :ok\n```"},"sortText":"000086","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"loop do\n  ${1}\nend${0}"}},{"label":"loop","kind":2,"detail":"Kernel#loop (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Enumerator[T.untyped])}\ndef loop (overload.1); end\n```\n\n---\n\nRepeatedly executes the block.\n\nIf no block is given, an enumerator is returned instead.\n\n```ruby\nloop do\n  print \"Input: \"\n  line = gets\n  break if !line or line =~ /^qQ/\n  # ...\nend\n```\n\n[`StopIteration`](https://docs.ruby-lang.org/en/2.7.0/StopIteration.html)\nraised in the block breaks the loop. In this case, loop returns the \"result\"\nvalue stored in the exception.\n\n```ruby\nenum = Enumerator.new { |y|\n  y << \"one\"\n  y << \"two\"\n  :ok\n}\n\nresult = loop {\n  puts enum.next\n} #=> :ok\n```"},"sortText":"000087","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"loop${0}"}},{"label":"method","kind":2,"detail":"Kernel#method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef method(arg0); end\n```"},"sortText":"000088","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"method(${1:Symbol})${0}"}},{"label":"methods","kind":2,"detail":"Kernel#methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(regular: T::Boolean).returns(T::Array[Symbol])}\ndef methods(regular=…); end\n```"},"sortText":"000089","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"methods${0}"}},{"label":"nil?","kind":2,"detail":"Kernel#nil?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef nil?; end\n```"},"sortText":"000090","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"nil?${0}"}},{"label":"object_id","kind":2,"detail":"Kernel#object_id","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef object_id; end\n```\n\n---\n\nReturns an integer identifier for `obj`.\n\nThe same number will be returned on all calls to `object_id` for a given\nobject, and no two active objects will share an id.\n\nNote: that some objects of builtin classes are reused for optimization. This\nis the case for immediate values and frozen string literals.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_id\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`object_id`.\n\nImmediate values are not passed by reference but are passed by value: `nil`,\n`true`, `false`, Fixnums, Symbols, and some Floats.\n\n```ruby\nObject.new.object_id  == Object.new.object_id  # => false\n(21 * 2).object_id    == (21 * 2).object_id    # => true\n\"hello\".object_id     == \"hello\".object_id     # => false\n\"hi\".freeze.object_id == \"hi\".freeze.object_id # => true\n```"},"sortText":"000091","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"object_id${0}"}},{"label":"open","kind":2,"detail":"Kernel#open","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    path: String,\n    mode: T.any(Integer, String),\n    perm: T.nilable(Integer),\n    opt: T.nilable(T::Hash[Symbol, T.untyped])\n  )\n  .returns(T.nilable(IO))\nend\ndef open(path, mode=…, perm=…, opt=…); end\n```\n\n---\n\nCreates an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object\nconnected to the given stream, file, or subprocess.\n\nIf `path` does not start with a pipe character (`|`), treat it as the name\nof a file to open using the specified mode (defaulting to \"r\").\n\nThe `mode` is either a string or an integer. If it is an integer, it must be\nbitwise-or of open(2) flags, such as File::RDWR or File::EXCL. If it is a\nstring, it is either \"fmode\", \"fmode:ext\\_enc\", or\n\"fmode:ext\\_enc:int\\_enc\".\n\nSee the documentation of\n[`IO.new`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-new) for\nfull documentation of the `mode` string directives.\n\nIf a file is being created, its initial permissions may be set using the\n`perm` parameter. See\n[`File.new`](https://docs.ruby-lang.org/en/2.7.0/File.html#method-c-new) and\nthe open(2) and chmod(2) man pages for a description of permissions.\n\nIf a block is specified, it will be invoked with the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object as a parameter,\nand the [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) will be\nautomatically closed when the block terminates. The call returns the value\nof the block.\n\nIf `path` starts with a pipe character (`\"|\"`), a subprocess is created,\nconnected to the caller by a pair of pipes. The returned\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object may be used to\nwrite to the standard input and read from the standard output of this\nsubprocess.\n\nIf the command following the pipe is a single minus sign (`\"|-\"`), Ruby\nforks, and this subprocess is connected to the parent. If the command is not\n`\"-\"`, the subprocess runs the command. Note that the command may be\nprocessed by shell if it contains shell metacharacters.\n\nWhen the subprocess is Ruby (opened via `\"|-\"`), the `open` call returns\n`nil`. If a block is associated with the open call, that block will run\ntwice --- once in the parent and once in the child.\n\nThe block parameter will be an\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object in the parent and\n`nil` in the child. The parent's `IO` object will be connected to the\nchild's $stdin and $stdout. The subprocess will be terminated at the end of\nthe block.\n\n### Examples\n\nReading from \"testfile\":\n\n```ruby\nopen(\"testfile\") do |f|\n  print f.gets\nend\n```\n\nProduces:\n\n```ruby\nThis is line one\n```\n\nOpen a subprocess and read its output:\n\n```ruby\ncmd = open(\"|date\")\nprint cmd.gets\ncmd.close\n```\n\nProduces:\n\n```\nWed Apr  9 08:56:31 CDT 2003\n```\n\nOpen a subprocess running the same Ruby program:\n\n```ruby\nf = open(\"|-\", \"w+\")\nif f.nil?\n  puts \"in Child\"\n  exit\nelse\n  puts \"Got: #{f.gets}\"\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```\n\nOpen a subprocess using a block to receive the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object:\n\n```ruby\nopen \"|-\" do |f|\n  if f then\n    # parent process\n    puts \"Got: #{f.gets}\"\n  else\n    # child process\n    puts \"in Child\"\n  end\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```"},"sortText":"000092","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"open(${1:String})${0}"}},{"label":"open","kind":2,"detail":"Kernel#open (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    path: String,\n    mode: T.any(Integer, String),\n    perm: T.nilable(Integer),\n    opt: T.nilable(T::Hash[Symbol, T.untyped]),\n    blk: T.proc.params(arg0: IO).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef open (overload.1)(path, mode=…, perm=…, opt=…, &blk); end\n```\n\n---\n\nCreates an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object\nconnected to the given stream, file, or subprocess.\n\nIf `path` does not start with a pipe character (`|`), treat it as the name\nof a file to open using the specified mode (defaulting to \"r\").\n\nThe `mode` is either a string or an integer. If it is an integer, it must be\nbitwise-or of open(2) flags, such as File::RDWR or File::EXCL. If it is a\nstring, it is either \"fmode\", \"fmode:ext\\_enc\", or\n\"fmode:ext\\_enc:int\\_enc\".\n\nSee the documentation of\n[`IO.new`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-new) for\nfull documentation of the `mode` string directives.\n\nIf a file is being created, its initial permissions may be set using the\n`perm` parameter. See\n[`File.new`](https://docs.ruby-lang.org/en/2.7.0/File.html#method-c-new) and\nthe open(2) and chmod(2) man pages for a description of permissions.\n\nIf a block is specified, it will be invoked with the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object as a parameter,\nand the [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) will be\nautomatically closed when the block terminates. The call returns the value\nof the block.\n\nIf `path` starts with a pipe character (`\"|\"`), a subprocess is created,\nconnected to the caller by a pair of pipes. The returned\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object may be used to\nwrite to the standard input and read from the standard output of this\nsubprocess.\n\nIf the command following the pipe is a single minus sign (`\"|-\"`), Ruby\nforks, and this subprocess is connected to the parent. If the command is not\n`\"-\"`, the subprocess runs the command. Note that the command may be\nprocessed by shell if it contains shell metacharacters.\n\nWhen the subprocess is Ruby (opened via `\"|-\"`), the `open` call returns\n`nil`. If a block is associated with the open call, that block will run\ntwice --- once in the parent and once in the child.\n\nThe block parameter will be an\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object in the parent and\n`nil` in the child. The parent's `IO` object will be connected to the\nchild's $stdin and $stdout. The subprocess will be terminated at the end of\nthe block.\n\n### Examples\n\nReading from \"testfile\":\n\n```ruby\nopen(\"testfile\") do |f|\n  print f.gets\nend\n```\n\nProduces:\n\n```ruby\nThis is line one\n```\n\nOpen a subprocess and read its output:\n\n```ruby\ncmd = open(\"|date\")\nprint cmd.gets\ncmd.close\n```\n\nProduces:\n\n```\nWed Apr  9 08:56:31 CDT 2003\n```\n\nOpen a subprocess running the same Ruby program:\n\n```ruby\nf = open(\"|-\", \"w+\")\nif f.nil?\n  puts \"in Child\"\n  exit\nelse\n  puts \"Got: #{f.gets}\"\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```\n\nOpen a subprocess using a block to receive the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object:\n\n```ruby\nopen \"|-\" do |f|\n  if f then\n    # parent process\n    puts \"Got: #{f.gets}\"\n  else\n    # child process\n    puts \"in Child\"\n  end\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```"},"sortText":"000093","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"open(${1:String}) do |${2:IO}|\n  ${3}\nend${0}"}},{"label":"p","kind":2,"detail":"Kernel#p","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BasicObject).returns(NilClass)}\ndef p(*arg0); end\n```\n\n---\n\nFor each object, directly writes *obj*.`inspect` followed by a newline to\nthe program's standard output.\n\n```ruby\nS = Struct.new(:name, :state)\ns = S['dave', 'TX']\np s\n```\n\n*produces:*\n\n```ruby\n#<S name=\"dave\", state=\"TX\">\n```"},"sortText":"000094","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"p${0}"}},{"label":"pp","kind":2,"detail":"Kernel#pp","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    obj: T.untyped,\n    out: T.untyped,\n    width: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef pp(obj, out=…, width=…); end\n```\n\n---\n\nprints arguments in pretty form.\n\npp returns argument(s).\n\nAlso aliased as:\n[`pp`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-pp)"},"sortText":"000095","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"pp(${1})${0}"}},{"label":"print","kind":2,"detail":"Kernel#print","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: Kernel).returns(NilClass)}\ndef print(*args); end\n```\n\n---\n\nPrints each object in turn to `$stdout`. If the output field separator\n(`$,`) is not `nil`, its contents will appear between each field. If the\noutput record separator (`$\\`) is not `nil`, it will be appended to the\noutput. If no arguments are given, prints `$_`. Objects that aren't strings\nwill be converted by calling their `to_s` method.\n\n```ruby\nprint \"cat\", [1,2,3], 99, \"\\n\"\n$, = \", \"\n$\\ = \"\\n\"\nprint \"cat\", [1,2,3], 99\n```\n\n*produces:*\n\n```\ncat12399\ncat, 1, 2, 3, 99\n```"},"sortText":"000096","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"print${0}"}},{"label":"printf","kind":2,"detail":"Kernel#printf","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: IO, arg1: String, arg2: BasicObject).returns(NilClass)}\ndef printf(arg0=…, arg1=…, *arg2); end\n```\n\n---\n\nEquivalent to:\n\n```\nio.write(sprintf(string, obj, ...))\n```\n\nor\n\n```\n$stdout.write(sprintf(string, obj, ...))\n```"},"sortText":"000097","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"printf${0}"}},{"label":"private_methods","kind":2,"detail":"Kernel#private_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef private_methods(all=…); end\n```"},"sortText":"000098","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"private_methods${0}"}},{"label":"proc","kind":2,"detail":"Kernel#proc","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.untyped).returns(Proc)}\ndef proc(&blk); end\n```\n\n---\n\nEquivalent to\n[`Proc.new`](https://docs.ruby-lang.org/en/2.7.0/Proc.html#method-c-new)."},"sortText":"000099","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"proc${0}"}},{"label":"protected_methods","kind":2,"detail":"Kernel#protected_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef protected_methods(all=…); end\n```"},"sortText":"000100","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"protected_methods${0}"}},{"label":"public_method","kind":2,"detail":"Kernel#public_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef public_method(arg0); end\n```"},"sortText":"000101","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"public_method(${1:Symbol})${0}"}},{"label":"public_methods","kind":2,"detail":"Kernel#public_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef public_methods(all=…); end\n```"},"sortText":"000102","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"public_methods${0}"}},{"label":"public_send","kind":2,"detail":"Kernel#public_send","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef public_send(arg0, *args, &blk); end\n```"},"sortText":"000103","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"public_send(${1:T.any(Symbol, String)})${0}"}},{"label":"putc","kind":2,"detail":"Kernel#putc","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Integer)}\ndef putc(arg0); end\n```\n\n---\n\nEquivalent to:\n\n```ruby\n$stdout.putc(int)\n```\n\nRefer to the documentation for\n[`IO#putc`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-putc) for\nimportant information regarding multi-byte characters."},"sortText":"000104","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"putc(${1:Integer})${0}"}},{"label":"puts","kind":2,"detail":"Kernel#puts","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BasicObject).returns(NilClass)}\ndef puts(*arg0); end\n```\n\n---\n\nEquivalent to\n\n```\n$stdout.puts(obj, ...)\n```"},"sortText":"000105","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"puts${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef raise; end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000106","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"raise${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Class[T.anything], Exception, String)\n  )\n  .returns(T.noreturn)\nend\ndef raise (overload.1)(arg0=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000107","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"raise${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Class[T.anything], Exception),\n    arg1: T.untyped,\n    arg2: T.nilable(T::Array[String])\n  )\n  .returns(T.noreturn)\nend\ndef raise (overload.2)(arg0=…, arg1=…, arg2=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000108","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"raise${0}"}},{"label":"rand","kind":2,"detail":"Kernel#rand","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Float)}\ndef rand; end\n```\n\n---\n\nIf called without an argument, or if `max.to_i.abs == 0`, rand returns a\npseudo-random floating point number between 0.0 and 1.0, including 0.0 and\nexcluding 1.0.\n\n```ruby\nrand        #=> 0.2725926052826416\n```\n\nWhen `max.abs` is greater than or equal to 1, `rand` returns a pseudo-random\ninteger greater than or equal to 0 and less than `max.to_i.abs`.\n\n```ruby\nrand(100)   #=> 12\n```\n\nWhen `max` is a [`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html),\n`rand` returns a random number where range.member?(number) == true.\n\nNegative or floating point values for `max` are allowed, but may give\nsurprising results.\n\n```ruby\nrand(-100) # => 87\nrand(-0.5) # => 0.8130921818028143\nrand(1.9)  # equivalent to rand(1), which is always 0\n```\n\n[`Kernel.srand`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-srand)\nmay be used to ensure that sequences of random numbers are reproducible\nbetween different runs of a program.\n\nSee also\n[`Random.rand`](https://docs.ruby-lang.org/en/2.7.0/Random.html#method-c-rand)."},"sortText":"000109","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"rand${0}"}},{"label":"rand","kind":2,"detail":"Kernel#rand (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(T::Range[Integer], Integer)).returns(Integer)}\ndef rand (overload.1)(arg0=…); end\n```\n\n---\n\nIf called without an argument, or if `max.to_i.abs == 0`, rand returns a\npseudo-random floating point number between 0.0 and 1.0, including 0.0 and\nexcluding 1.0.\n\n```ruby\nrand        #=> 0.2725926052826416\n```\n\nWhen `max.abs` is greater than or equal to 1, `rand` returns a pseudo-random\ninteger greater than or equal to 0 and less than `max.to_i.abs`.\n\n```ruby\nrand(100)   #=> 12\n```\n\nWhen `max` is a [`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html),\n`rand` returns a random number where range.member?(number) == true.\n\nNegative or floating point values for `max` are allowed, but may give\nsurprising results.\n\n```ruby\nrand(-100) # => 87\nrand(-0.5) # => 0.8130921818028143\nrand(1.9)  # equivalent to rand(1), which is always 0\n```\n\n[`Kernel.srand`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-srand)\nmay be used to ensure that sequences of random numbers are reproducible\nbetween different runs of a program.\n\nSee also\n[`Random.rand`](https://docs.ruby-lang.org/en/2.7.0/Random.html#method-c-rand)."},"sortText":"000110","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"rand${0}"}},{"label":"rand","kind":2,"detail":"Kernel#rand (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.nilable(T.any(Float, T::Range[Float]))).returns(Float)}\ndef rand (overload.2)(arg0=…); end\n```\n\n---\n\nIf called without an argument, or if `max.to_i.abs == 0`, rand returns a\npseudo-random floating point number between 0.0 and 1.0, including 0.0 and\nexcluding 1.0.\n\n```ruby\nrand        #=> 0.2725926052826416\n```\n\nWhen `max.abs` is greater than or equal to 1, `rand` returns a pseudo-random\ninteger greater than or equal to 0 and less than `max.to_i.abs`.\n\n```ruby\nrand(100)   #=> 12\n```\n\nWhen `max` is a [`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html),\n`rand` returns a random number where range.member?(number) == true.\n\nNegative or floating point values for `max` are allowed, but may give\nsurprising results.\n\n```ruby\nrand(-100) # => 87\nrand(-0.5) # => 0.8130921818028143\nrand(1.9)  # equivalent to rand(1), which is always 0\n```\n\n[`Kernel.srand`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-srand)\nmay be used to ensure that sequences of random numbers are reproducible\nbetween different runs of a program.\n\nSee also\n[`Random.rand`](https://docs.ruby-lang.org/en/2.7.0/Random.html#method-c-rand)."},"sortText":"000111","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"rand${0}"}},{"label":"rand","kind":2,"detail":"Kernel#rand (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(T::Range[Numeric], Numeric)).returns(Numeric)}\ndef rand (overload.3)(arg0=…); end\n```\n\n---\n\nIf called without an argument, or if `max.to_i.abs == 0`, rand returns a\npseudo-random floating point number between 0.0 and 1.0, including 0.0 and\nexcluding 1.0.\n\n```ruby\nrand        #=> 0.2725926052826416\n```\n\nWhen `max.abs` is greater than or equal to 1, `rand` returns a pseudo-random\ninteger greater than or equal to 0 and less than `max.to_i.abs`.\n\n```ruby\nrand(100)   #=> 12\n```\n\nWhen `max` is a [`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html),\n`rand` returns a random number where range.member?(number) == true.\n\nNegative or floating point values for `max` are allowed, but may give\nsurprising results.\n\n```ruby\nrand(-100) # => 87\nrand(-0.5) # => 0.8130921818028143\nrand(1.9)  # equivalent to rand(1), which is always 0\n```\n\n[`Kernel.srand`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-srand)\nmay be used to ensure that sequences of random numbers are reproducible\nbetween different runs of a program.\n\nSee also\n[`Random.rand`](https://docs.ruby-lang.org/en/2.7.0/Random.html#method-c-rand)."},"sortText":"000112","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"rand${0}"}},{"label":"readline","kind":2,"detail":"Kernel#readline","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(String)}\ndef readline(arg0=…, arg1=…); end\n```\n\n---\n\nEquivalent to Kernel::gets, except `readline` raises `EOFError` at end of\nfile."},"sortText":"000113","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"readline${0}"}},{"label":"readlines","kind":2,"detail":"Kernel#readlines","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(T::Array[String])}\ndef readlines(arg0=…, arg1=…); end\n```\n\n---\n\nReturns an array containing the lines returned by calling `Kernel.gets(sep)`\nuntil the end of file."},"sortText":"000114","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"readlines${0}"}},{"label":"remove_instance_variable","kind":2,"detail":"Kernel#remove_instance_variable","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(T.untyped)}\ndef remove_instance_variable(arg0); end\n```"},"sortText":"000115","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"remove_instance_variable(${1:Symbol})${0}"}},{"label":"require","kind":2,"detail":"Kernel#require","documentation":{"kind":"markdown","value":"```ruby\nsig {params(path: String).returns(T::Boolean)}\ndef require(path); end\n```\n\n---\n\nLoads the given `name`, returning `true` if successful and `false` if the\nfeature is already loaded.\n\nIf the filename does not resolve to an absolute path, it will be searched\nfor in the directories listed in `$LOAD_PATH` (`$:`).\n\nIf the filename has the extension \".rb\", it is loaded as a source file; if\nthe extension is \".so\", \".o\", or \".dll\", or the default shared library\nextension on the current platform, Ruby loads the shared library as a Ruby\nextension. Otherwise, Ruby tries adding \".rb\", \".so\", and so on to the name\nuntil found. If the file named cannot be found, a\n[`LoadError`](https://docs.ruby-lang.org/en/2.6.0/LoadError.html) will be\nraised.\n\nFor Ruby extensions the filename given may use any shared library extension.\nFor example, on Linux the socket extension is \"socket.so\" and `require\n'socket.dll'` will load the socket extension.\n\nThe absolute path of the loaded file is added to `$LOADED_FEATURES` (`$\"`).\nA file will not be loaded again if its path already appears in `$\"`. For\nexample, `require 'a'; require './a'` will not load `a.rb` again.\n\n```ruby\nrequire \"my-library.rb\"\nrequire \"db-driver\"\n```\n\nAny constants or globals within the loaded source file will be available in\nthe calling program's global namespace. However, local variables will not be\npropagated to the loading environment.\n\nWhen RubyGems is required,\n[`#require`](https://docs.ruby-lang.org/en/2.6.0/Kernel.html#method-i-require)\nis replaced with our own which is capable of loading gems on demand.\n\nWhen you call `require 'x'`, this is what happens:\n*   If the file can be loaded from the existing Ruby loadpath, it is.\n*   Otherwise, installed gems are searched for a file that matches. If it's\n    found in gem 'y', that gem is activated (added to the loadpath).\n\n\nThe normal `require` functionality of returning false if that file has\nalready been loaded is preserved.\n\nAlso aliased as:\n[`gem_original_require`](https://docs.ruby-lang.org/en/2.6.0/Kernel.html#method-i-gem_original_require)"},"sortText":"000116","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"require(${1:String})${0}"}},{"label":"require_relative","kind":2,"detail":"Kernel#require_relative","documentation":{"kind":"markdown","value":"```ruby\nsig {params(feature: T.any(String, Pathname)).returns(T::Boolean)}\ndef require_relative(feature); end\n```\n\n---\n\nRuby tries to load the library named *string* relative to the requiring\nfile's path. If the file's path cannot be determined a\n[`LoadError`](https://docs.ruby-lang.org/en/2.7.0/LoadError.html) is raised.\nIf a file is loaded `true` is returned and false otherwise."},"sortText":"000117","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"require_relative(${1:T.any(String, Pathname)})${0}"}},{"label":"respond_to?","kind":2,"detail":"Kernel#respond_to?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    include_all: T.untyped\n  )\n  .returns(T::Boolean)\nend\ndef respond_to?(arg0, include_all=…); end\n```"},"sortText":"000118","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"respond_to?(${1:T.any(String, Symbol)})${0}"}},{"label":"select","kind":2,"detail":"Kernel#select","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    read_array: T.nilable(T::Array[IO]),\n    write_array: T.nilable(T::Array[IO]),\n    error_array: T.nilable(T::Array[IO]),\n    timeout: T.nilable(T.any(Integer, Float))\n  )\n  .returns(T.nilable(T::Array[T::Array[IO]]))\nend\ndef select(read_array, write_array=…, error_array=…, timeout=…); end\n```\n\n---\n\nCalls select(2) system call. It monitors given arrays of\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects, waits until one\nor more of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects are\nready for reading, are ready for writing, and have pending exceptions\nrespectively, and returns an array that contains arrays of those\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects. It will return\n`nil` if optional *timeout* value is given and no\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object is ready in\n*timeout* seconds.\n\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\npeeks the buffer of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html)\nobjects for testing readability. If the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) buffer is not empty,\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nimmediately notifies readability. This \"peek\" only happens for\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects. It does not\nhappen for IO-like objects such as\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\n\nThe best way to use\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis invoking it after nonblocking methods such as read\\_nonblock,\nwrite\\_nonblock, etc. The methods raise an exception which is extended by\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nor\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html).\nThe modules notify how the caller should wait with\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\nIf\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nis raised, the caller should wait for reading. If\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html)\nis raised, the caller should wait for writing.\n\nSo, blocking read (readpartial) can be emulated using read\\_nonblock and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nas follows:\n\n```ruby\nbegin\n  result = io_like.read_nonblock(maxlen)\nrescue IO::WaitReadable\n  IO.select([io_like])\n  retry\nrescue IO::WaitWritable\n  IO.select(nil, [io_like])\n  retry\nend\n```\n\nEspecially, the combination of nonblocking methods and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis preferred for [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) like\nobjects such as\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\nIt has to\\_io method to return underlying\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object.\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ncalls to\\_io to obtain the file descriptor to wait.\n\nThis means that readability notified by\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ndoesn't mean readability from\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\nobject.\n\nThe most likely situation is that\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\nbuffers some data.\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ndoesn't see the buffer. So\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ncan block when\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\ndoesn't block.\n\nHowever, several more complicated situations exist.\n\nSSL is a protocol which is sequence of records. The record consists of\nmultiple bytes. So, the remote side of SSL sends a partial record,\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nnotifies readability but\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\ncannot decrypt a byte and\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\nwill block.\n\nAlso, the remote side can request SSL renegotiation which forces the local\nSSL engine to write some data. This means\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\nmay invoke write system call and it can block. In such a situation,\n[`OpenSSL::SSL::SSLSocket#read_nonblock`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-read_nonblock)\nraises\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html)\ninstead of blocking. So, the caller should wait for ready for writability as\nabove example.\n\nThe combination of nonblocking methods and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis also useful for streams such as tty, pipe socket socket when multiple\nprocesses read from a stream.\n\nFinally, Linux kernel developers don't guarantee that readability of\nselect(2) means readability of following read(2) even for a single process.\nSee select(2) manual on GNU/Linux system.\n\nInvoking\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nbefore\n[`IO#readpartial`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-readpartial)\nworks well as usual. However it is not the best way to use\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\n\nThe writability notified by select(2) doesn't show how many bytes are\nwritable.\n[`IO#write`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-write)\nmethod blocks until given whole string is written. So, `IO#write(two or more\nbytes)` can block after writability is notified by\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\n[`IO#write_nonblock`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-write_nonblock)\nis required to avoid the blocking.\n\nBlocking write (write) can be emulated using write\\_nonblock and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nas follows:\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nshould also be rescued for SSL renegotiation in\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\n\n```ruby\nwhile 0 < string.bytesize\n  begin\n    written = io_like.write_nonblock(string)\n  rescue IO::WaitReadable\n    IO.select([io_like])\n    retry\n  rescue IO::WaitWritable\n    IO.select(nil, [io_like])\n    retry\n  end\n  string = string.byteslice(written..-1)\nend\n```\n\n### Parameters\nread\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait until ready for read\nwrite\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait until ready for write\nerror\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait for exceptions\ntimeout\n:   a numeric value in second\n\n\n### Example\n\n```ruby\nrp, wp = IO.pipe\nmesg = \"ping \"\n100.times {\n  # IO.select follows IO#read.  Not the best way to use IO.select.\n  rs, ws, = IO.select([rp], [wp])\n  if r = rs[0]\n    ret = r.read(5)\n    print ret\n    case ret\n    when /ping/\n      mesg = \"pong\\n\"\n    when /pong/\n      mesg = \"ping \"\n    end\n  end\n  if w = ws[0]\n    w.write(mesg)\n  end\n}\n```\n\n*produces:*\n\n```ruby\nping pong\nping pong\nping pong\n(snipped)\nping\n```"},"sortText":"000119","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"select(${1:T.nilable(T::Array[IO])})${0}"}},{"label":"send","kind":2,"detail":"Kernel#send","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(String, Symbol), arg1: T.anything).returns(T.untyped)}\ndef send(arg0, *arg1); end\n```"},"sortText":"000120","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"send(${1:T.any(String, Symbol)})${0}"}},{"label":"send","kind":2,"detail":"Kernel#send (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    arg1: T.anything,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef send (overload.1)(arg0, *arg1, &blk); end\n```"},"sortText":"000121","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"send(${1:T.any(String, Symbol)})${0}"}},{"label":"set_trace_func","kind":2,"detail":"Kernel#set_trace_func","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.nilable(T.proc.params(arg0: String, arg1: String, arg2: Integer, arg3: T.nilable(Symbol), arg4: T.nilable(Binding), arg5: Object).returns(T.untyped))\n  )\n  .void\nend\ndef set_trace_func(arg0); end\n```\n\n---\n\nEstablishes _proc_ as the handler for tracing, or disables\ntracing if the parameter is +nil+.\n\n*Note:* this method is obsolete, please use TracePoint instead.\n\n_proc_ takes up to six parameters:\n\n*   an event name\n*   a filename\n*   a line number\n*   an object id\n*   a binding\n*   the name of a class\n\n_proc_ is invoked whenever an event occurs.\n\nEvents are:\n\n+c-call+:: call a C-language routine\n+c-return+:: return from a C-language routine\n+call+:: call a Ruby method\n+class+:: start a class or module definition\n+end+:: finish a class or module definition\n+line+:: execute code on a new line\n+raise+:: raise an exception\n+return+:: return from a Ruby method\n\nTracing is disabled within the context of _proc_.\n\n    class Test\n    def test\n      a = 1\n      b = 2\n    end\n    end\n\n    set_trace_func proc { |event, file, line, id, binding, classname|\n       printf \"%8s %s:%-2d %10s %8s\\n\", event, file, line, id, classname\n    }\n    t = Test.new\n    t.test\n\n      line prog.rb:11               false\n    c-call prog.rb:11        new    Class\n    c-call prog.rb:11 initialize   Object\n  c-return prog.rb:11 initialize   Object\n  c-return prog.rb:11        new    Class\n      line prog.rb:12               false\n      call prog.rb:2        test     Test\n      line prog.rb:3        test     Test\n      line prog.rb:4        test     Test\n    return prog.rb:4        test     Test"},"sortText":"000122","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"set_trace_func(${1:T.nilable(T.proc.params(arg0: String, arg1: String, arg2: Integer, arg3: T.nilable(Symbol), arg4: T.nilable(Binding), arg5: Object).returns(T.untyped))})${0}"}},{"label":"set_trace_func","kind":2,"detail":"Kernel#set_trace_func (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: NilClass).returns(NilClass)}\ndef set_trace_func (overload.1)(arg0); end\n```\n\n---\n\nEstablishes _proc_ as the handler for tracing, or disables\ntracing if the parameter is +nil+.\n\n*Note:* this method is obsolete, please use TracePoint instead.\n\n_proc_ takes up to six parameters:\n\n*   an event name\n*   a filename\n*   a line number\n*   an object id\n*   a binding\n*   the name of a class\n\n_proc_ is invoked whenever an event occurs.\n\nEvents are:\n\n+c-call+:: call a C-language routine\n+c-return+:: return from a C-language routine\n+call+:: call a Ruby method\n+class+:: start a class or module definition\n+end+:: finish a class or module definition\n+line+:: execute code on a new line\n+raise+:: raise an exception\n+return+:: return from a Ruby method\n\nTracing is disabled within the context of _proc_.\n\n    class Test\n    def test\n      a = 1\n      b = 2\n    end\n    end\n\n    set_trace_func proc { |event, file, line, id, binding, classname|\n       printf \"%8s %s:%-2d %10s %8s\\n\", event, file, line, id, classname\n    }\n    t = Test.new\n    t.test\n\n      line prog.rb:11               false\n    c-call prog.rb:11        new    Class\n    c-call prog.rb:11 initialize   Object\n  c-return prog.rb:11 initialize   Object\n  c-return prog.rb:11        new    Class\n      line prog.rb:12               false\n      call prog.rb:2        test     Test\n      line prog.rb:3        test     Test\n      line prog.rb:4        test     Test\n    return prog.rb:4        test     Test"},"sortText":"000123","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"set_trace_func(${1:NilClass})${0}"}},{"label":"singleton_method","kind":2,"detail":"Kernel#singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef singleton_method(arg0); end\n```"},"sortText":"000124","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"singleton_method(${1:Symbol})${0}"}},{"label":"singleton_methods","kind":2,"detail":"Kernel#singleton_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef singleton_methods(all=…); end\n```"},"sortText":"000125","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"singleton_methods${0}"}},{"label":"sleep","kind":2,"detail":"Kernel#sleep","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef sleep; end\n```\n\n---\n\nSuspends the current thread for *duration* seconds (which may be any number,\nincluding a `Float` with fractional seconds). Returns the actual number of\nseconds slept (rounded), which may be less than that asked for if another\nthread calls\n[`Thread#run`](https://docs.ruby-lang.org/en/2.7.0/Thread.html#method-i-run).\nCalled without an argument, sleep() will sleep forever.\n\n```ruby\nTime.new    #=> 2008-03-08 19:56:19 +0900\nsleep 1.2   #=> 1\nTime.new    #=> 2008-03-08 19:56:20 +0900\nsleep 1.9   #=> 2\nTime.new    #=> 2008-03-08 19:56:22 +0900\n```"},"sortText":"000126","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"sleep${0}"}},{"label":"sleep","kind":2,"detail":"Kernel#sleep (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(duration: Numeric).returns(Integer)}\ndef sleep (overload.1)(duration); end\n```\n\n---\n\nSuspends the current thread for *duration* seconds (which may be any number,\nincluding a `Float` with fractional seconds). Returns the actual number of\nseconds slept (rounded), which may be less than that asked for if another\nthread calls\n[`Thread#run`](https://docs.ruby-lang.org/en/2.7.0/Thread.html#method-i-run).\nCalled without an argument, sleep() will sleep forever.\n\n```ruby\nTime.new    #=> 2008-03-08 19:56:19 +0900\nsleep 1.2   #=> 1\nTime.new    #=> 2008-03-08 19:56:20 +0900\nsleep 1.9   #=> 2\nTime.new    #=> 2008-03-08 19:56:22 +0900\n```"},"sortText":"000127","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"sleep(${1:Numeric})${0}"}},{"label":"sprintf","kind":2,"detail":"Kernel#sprintf","documentation":{"kind":"markdown","value":"```ruby\nsig {params(format: String, args: BasicObject).returns(String)}\ndef sprintf(format, *args); end\n```\n\n---\n\nReturns the string resulting from applying *format\\_string* to any\nadditional arguments. Within the format string, any characters other than\nformat sequences are copied to the result.\n\nThe syntax of a format sequence is as follows.\n\n```\n%[flags][width][.precision]type\n```\n\nA format sequence consists of a percent sign, followed by optional flags,\nwidth, and precision indicators, then terminated with a field type\ncharacter. The field type controls how the corresponding `sprintf` argument\nis to be interpreted, while the flags modify that interpretation.\n\nThe field type characters are:\n\n```\nField |  Integer Format\n------+--------------------------------------------------------------\n  b   | Convert argument as a binary number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..1'.\n  B   | Equivalent to `b', but uses an uppercase 0B for prefix\n      | in the alternative format by #.\n  d   | Convert argument as a decimal number.\n  i   | Identical to `d'.\n  o   | Convert argument as an octal number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..7'.\n  u   | Identical to `d'.\n  x   | Convert argument as a hexadecimal number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..f' (representing an infinite string of\n      | leading 'ff's).\n  X   | Equivalent to `x', but uses uppercase letters.\n\nField |  Float Format\n------+--------------------------------------------------------------\n  e   | Convert floating point argument into exponential notation\n      | with one digit before the decimal point as [-]d.dddddde[+-]dd.\n      | The precision specifies the number of digits after the decimal\n      | point (defaulting to six).\n  E   | Equivalent to `e', but uses an uppercase E to indicate\n      | the exponent.\n  f   | Convert floating point argument as [-]ddd.dddddd,\n      | where the precision specifies the number of digits after\n      | the decimal point.\n  g   | Convert a floating point number using exponential form\n      | if the exponent is less than -4 or greater than or\n      | equal to the precision, or in dd.dddd form otherwise.\n      | The precision specifies the number of significant digits.\n  G   | Equivalent to `g', but use an uppercase `E' in exponent form.\n  a   | Convert floating point argument as [-]0xh.hhhhp[+-]dd,\n      | which is consisted from optional sign, \"0x\", fraction part\n      | as hexadecimal, \"p\", and exponential part as decimal.\n  A   | Equivalent to `a', but use uppercase `X' and `P'.\n\nField |  Other Format\n------+--------------------------------------------------------------\n  c   | Argument is the numeric code for a single character or\n      | a single character string itself.\n  p   | The valuing of argument.inspect.\n  s   | Argument is a string to be substituted.  If the format\n      | sequence contains a precision, at most that many characters\n      | will be copied.\n  %   | A percent sign itself will be displayed.  No argument taken.\n```\n\nThe flags modifies the behavior of the formats. The flag characters are:\n\n```\nFlag     | Applies to    | Meaning\n---------+---------------+-----------------------------------------\nspace    | bBdiouxX      | Leave a space at the start of\n         | aAeEfgG       | non-negative numbers.\n         | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n         |               | a minus sign with absolute value for\n         |               | negative values.\n---------+---------------+-----------------------------------------\n(digit)$ | all           | Specifies the absolute argument number\n         |               | for this field.  Absolute and relative\n         |               | argument numbers cannot be mixed in a\n         |               | sprintf string.\n---------+---------------+-----------------------------------------\n #       | bBoxX         | Use an alternative format.\n         | aAeEfgG       | For the conversions `o', increase the precision\n         |               | until the first digit will be `0' if\n         |               | it is not formatted as complements.\n         |               | For the conversions `x', `X', `b' and `B'\n         |               | on non-zero, prefix the result with ``0x'',\n         |               | ``0X'', ``0b'' and ``0B'', respectively.\n         |               | For `a', `A', `e', `E', `f', `g', and 'G',\n         |               | force a decimal point to be added,\n         |               | even if no digits follow.\n         |               | For `g' and 'G', do not remove trailing zeros.\n---------+---------------+-----------------------------------------\n+        | bBdiouxX      | Add a leading plus sign to non-negative\n         | aAeEfgG       | numbers.\n         | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n         |               | a minus sign with absolute value for\n         |               | negative values.\n---------+---------------+-----------------------------------------\n-        | all           | Left-justify the result of this conversion.\n---------+---------------+-----------------------------------------\n0 (zero) | bBdiouxX      | Pad with zeros, not spaces.\n         | aAeEfgG       | For `o', `x', `X', `b' and `B', radix-1\n         | (numeric fmt) | is used for negative numbers formatted as\n         |               | complements.\n---------+---------------+-----------------------------------------\n*        | all           | Use the next argument as the field width.\n         |               | If negative, left-justify the result. If the\n         |               | asterisk is followed by a number and a dollar\n         |               | sign, use the indicated argument as the width.\n```\n\nExamples of flags:\n\n```ruby\n# `+' and space flag specifies the sign of non-negative numbers.\nsprintf(\"%d\", 123)  #=> \"123\"\nsprintf(\"%+d\", 123) #=> \"+123\"\nsprintf(\"% d\", 123) #=> \" 123\"\n\n# `#' flag for `o' increases number of digits to show `0'.\n# `+' and space flag changes format of negative numbers.\nsprintf(\"%o\", 123)   #=> \"173\"\nsprintf(\"%#o\", 123)  #=> \"0173\"\nsprintf(\"%+o\", -123) #=> \"-173\"\nsprintf(\"%o\", -123)  #=> \"..7605\"\nsprintf(\"%#o\", -123) #=> \"..7605\"\n\n# `#' flag for `x' add a prefix `0x' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf(\"%x\", 123)   #=> \"7b\"\nsprintf(\"%#x\", 123)  #=> \"0x7b\"\nsprintf(\"%+x\", -123) #=> \"-7b\"\nsprintf(\"%x\", -123)  #=> \"..f85\"\nsprintf(\"%#x\", -123) #=> \"0x..f85\"\nsprintf(\"%#x\", 0)    #=> \"0\"\n\n# `#' for `X' uses the prefix `0X'.\nsprintf(\"%X\", 123)  #=> \"7B\"\nsprintf(\"%#X\", 123) #=> \"0X7B\"\n\n# `#' flag for `b' add a prefix `0b' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf(\"%b\", 123)   #=> \"1111011\"\nsprintf(\"%#b\", 123)  #=> \"0b1111011\"\nsprintf(\"%+b\", -123) #=> \"-1111011\"\nsprintf(\"%b\", -123)  #=> \"..10000101\"\nsprintf(\"%#b\", -123) #=> \"0b..10000101\"\nsprintf(\"%#b\", 0)    #=> \"0\"\n\n# `#' for `B' uses the prefix `0B'.\nsprintf(\"%B\", 123)  #=> \"1111011\"\nsprintf(\"%#B\", 123) #=> \"0B1111011\"\n\n# `#' for `e' forces to show the decimal point.\nsprintf(\"%.0e\", 1)  #=> \"1e+00\"\nsprintf(\"%#.0e\", 1) #=> \"1.e+00\"\n\n# `#' for `f' forces to show the decimal point.\nsprintf(\"%.0f\", 1234)  #=> \"1234\"\nsprintf(\"%#.0f\", 1234) #=> \"1234.\"\n\n# `#' for `g' forces to show the decimal point.\n# It also disables stripping lowest zeros.\nsprintf(\"%g\", 123.4)   #=> \"123.4\"\nsprintf(\"%#g\", 123.4)  #=> \"123.400\"\nsprintf(\"%g\", 123456)  #=> \"123456\"\nsprintf(\"%#g\", 123456) #=> \"123456.\"\n```\n\nThe field width is an optional integer, followed optionally by a period and\na precision. The width specifies the minimum number of characters that will\nbe written to the result for this field.\n\nExamples of width:\n\n```ruby\n# padding is done by spaces,       width=20\n# 0 or radix-1.             <------------------>\nsprintf(\"%20d\", 123)   #=> \"                 123\"\nsprintf(\"%+20d\", 123)  #=> \"                +123\"\nsprintf(\"%020d\", 123)  #=> \"00000000000000000123\"\nsprintf(\"%+020d\", 123) #=> \"+0000000000000000123\"\nsprintf(\"% 020d\", 123) #=> \" 0000000000000000123\"\nsprintf(\"%-20d\", 123)  #=> \"123                 \"\nsprintf(\"%-+20d\", 123) #=> \"+123                \"\nsprintf(\"%- 20d\", 123) #=> \" 123                \"\nsprintf(\"%020x\", -123) #=> \"..ffffffffffffffff85\"\n```\n\nFor numeric fields, the precision controls the number of decimal places\ndisplayed. For string fields, the precision determines the maximum number of\ncharacters to be copied from the string. (Thus, the format sequence\n`%10.10s` will always contribute exactly ten characters to the result.)\n\nExamples of precisions:\n\n```ruby\n# precision for `d', 'o', 'x' and 'b' is\n# minimum number of digits               <------>\nsprintf(\"%20.8d\", 123)  #=> \"            00000123\"\nsprintf(\"%20.8o\", 123)  #=> \"            00000173\"\nsprintf(\"%20.8x\", 123)  #=> \"            0000007b\"\nsprintf(\"%20.8b\", 123)  #=> \"            01111011\"\nsprintf(\"%20.8d\", -123) #=> \"           -00000123\"\nsprintf(\"%20.8o\", -123) #=> \"            ..777605\"\nsprintf(\"%20.8x\", -123) #=> \"            ..ffff85\"\nsprintf(\"%20.8b\", -11)  #=> \"            ..110101\"\n\n# \"0x\" and \"0b\" for `#x' and `#b' is not counted for\n# precision but \"0\" for `#o' is counted.  <------>\nsprintf(\"%#20.8d\", 123)  #=> \"            00000123\"\nsprintf(\"%#20.8o\", 123)  #=> \"            00000173\"\nsprintf(\"%#20.8x\", 123)  #=> \"          0x0000007b\"\nsprintf(\"%#20.8b\", 123)  #=> \"          0b01111011\"\nsprintf(\"%#20.8d\", -123) #=> \"           -00000123\"\nsprintf(\"%#20.8o\", -123) #=> \"            ..777605\"\nsprintf(\"%#20.8x\", -123) #=> \"          0x..ffff85\"\nsprintf(\"%#20.8b\", -11)  #=> \"          0b..110101\"\n\n# precision for `e' is number of\n# digits after the decimal point           <------>\nsprintf(\"%20.8e\", 1234.56789) #=> \"      1.23456789e+03\"\n\n# precision for `f' is number of\n# digits after the decimal point               <------>\nsprintf(\"%20.8f\", 1234.56789) #=> \"       1234.56789000\"\n\n# precision for `g' is number of\n# significant digits                          <------->\nsprintf(\"%20.8g\", 1234.56789) #=> \"           1234.5679\"\n\n#                                         <------->\nsprintf(\"%20.8g\", 123456789)  #=> \"       1.2345679e+08\"\n\n# precision for `s' is\n# maximum number of characters                    <------>\nsprintf(\"%20.8s\", \"string test\") #=> \"            string t\"\n```\n\nExamples:\n\n```ruby\nsprintf(\"%d %04x\", 123, 123)               #=> \"123 007b\"\nsprintf(\"%08b '%4s'\", 123, 123)            #=> \"01111011 ' 123'\"\nsprintf(\"%1$*2$s %2$d %1$s\", \"hello\", 8)   #=> \"   hello 8 hello\"\nsprintf(\"%1$*2$s %2$d\", \"hello\", -8)       #=> \"hello    -8\"\nsprintf(\"%+g:% g:%-g\", 1.23, 1.23, 1.23)   #=> \"+1.23: 1.23:1.23\"\nsprintf(\"%u\", -123)                        #=> \"-123\"\n```\n\nFor more complex formatting, Ruby supports a reference by name. %<name>s\nstyle uses format style, but %{name} style doesn't.\n\nExamples:\n\n```ruby\nsprintf(\"%<foo>d : %<bar>f\", { :foo => 1, :bar => 2 })\n  #=> 1 : 2.000000\nsprintf(\"%{foo}f\", { :foo => 1 })\n  # => \"1f\"\n```\n\n\nAlso aliased as:\n[`format`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-format)"},"sortText":"000128","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"sprintf(${1:String})${0}"}},{"label":"srand","kind":2,"detail":"Kernel#srand","documentation":{"kind":"markdown","value":"```ruby\nsig {params(number: Numeric).returns(Numeric)}\ndef srand(number=…); end\n```\n\n---\n\nSeeds the system pseudo-random number generator, with `number`. The previous\nseed value is returned.\n\nIf `number` is omitted, seeds the generator using a source of entropy\nprovided by the operating system, if available (/dev/urandom on Unix systems\nor the RSA cryptographic provider on Windows), which is then combined with\nthe time, the process id, and a sequence number.\n\nsrand may be used to ensure repeatable sequences of pseudo-random numbers\nbetween different runs of the program. By setting the seed to a known value,\nprograms can be made deterministic during testing.\n\n```ruby\nsrand 1234               # => 268519324636777531569100071560086917274\n[ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]\n[ rand(10), rand(1000) ] # => [4, 664]\nsrand 1234               # => 1234\n[ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]\n```"},"sortText":"000129","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"srand${0}"}},{"label":"syscall","kind":2,"detail":"Kernel#syscall","documentation":{"kind":"markdown","value":"```ruby\nsig {params(num: Integer, args: BasicObject).returns(T.untyped)}\ndef syscall(num, *args); end\n```\n\n---\n\nCalls the operating system function identified by *num* and returns the\nresult of the function or raises\n[`SystemCallError`](https://docs.ruby-lang.org/en/2.7.0/SystemCallError.html)\nif it failed.\n\nArguments for the function can follow *num*. They must be either `String`\nobjects or `Integer` objects. A `String` object is passed as a pointer to\nthe byte sequence. An `Integer` object is passed as an integer whose bit\nsize is the same as a pointer. Up to nine parameters may be passed.\n\nThe function identified by *num* is system dependent. On some Unix systems,\nthe numbers may be obtained from a header file called `syscall.h`.\n\n```ruby\nsyscall 4, 1, \"hello\\n\", 6   # '4' is write(2) on our box\n```\n\n*produces:*\n\n```ruby\nhello\n```\n\nCalling `syscall` on a platform which does not have any way to an arbitrary\nsystem function just fails with\n[`NotImplementedError`](https://docs.ruby-lang.org/en/2.7.0/NotImplementedError.html).\n\n**Note:** `syscall` is essentially unsafe and unportable. Feel free to shoot\nyour foot. The DL\n([`Fiddle`](https://docs.ruby-lang.org/en/2.7.0/Fiddle.html)) library is\npreferred for safer and a bit more portable programming."},"sortText":"000130","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"syscall(${1:Integer})${0}"}},{"label":"system","kind":2,"detail":"Kernel#system","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    env: T.any(String, [String, String], T::Hash[String, T.nilable(String)]),\n    argv0: T.any(String, [String, String]),\n    args: String,\n    options: T.untyped\n  )\n  .returns(T.nilable(T::Boolean))\nend\ndef system(env, argv0=…, *args, **options); end\n```\n\n---\n\nExecutes *command...* in a subshell. *command...* is one of following forms.\n\n`commandline`\n:   command line string which is passed to the standard shell\n`cmdname, arg1, ...`\n:   command name and one or more arguments (no shell)\n`[cmdname, argv0], arg1, ...`\n:   command name, `argv[0]` and zero or more arguments (no shell)\n\n\nsystem returns `true` if the command gives zero exit status, `false` for non\nzero exit status. Returns `nil` if command execution fails. An error status\nis available in `$?`.\n\nIf the `exception: true` argument is passed, the method raises an exception\ninstead of returning `false` or `nil`.\n\nThe arguments are processed in the same way as for\n[`Kernel#spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn).\n\nThe hash arguments, env and options, are same as\n[`exec`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-exec) and\n[`spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn).\nSee\n[`Kernel#spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn)\nfor details.\n\n```ruby\nsystem(\"echo *\")\nsystem(\"echo\", \"*\")\n```\n\n*produces:*\n\n```\nconfig.h main.rb\n*\n```\n\nError handling:\n\n```ruby\nsystem(\"cat nonexistent.txt\")\n# => false\nsystem(\"catt nonexistent.txt\")\n# => nil\n\nsystem(\"cat nonexistent.txt\", exception: true)\n# RuntimeError (Command failed with exit 1: cat)\nsystem(\"catt nonexistent.txt\", exception: true)\n# Errno::ENOENT (No such file or directory - catt)\n```\n\nSee\n[`Kernel#exec`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-exec)\nfor the standard shell."},"sortText":"000131","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"system(${1:T.any(String, [String, String], T::Hash[String, T.nilable(String)])})${0}"}},{"label":"taint","kind":2,"detail":"Kernel#taint","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Private::Methods::DeclBuilder)}\ndef taint; end\n```"},"sortText":"000132","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"taint${0}"}},{"label":"tainted?","kind":2,"detail":"Kernel#tainted?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef tainted?; end\n```"},"sortText":"000133","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"tainted?${0}"}},{"label":"tap","kind":2,"detail":"Kernel#tap","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).void\n  )\n  .returns(T::Private::Methods::DeclBuilder)\nend\ndef tap(&blk); end\n```\n\n---\n\nYields self to the block, and then returns self. The primary purpose of this\nmethod is to \"tap into\" a method chain, in order to perform operations on\nintermediate results within the chain.\n\n```ruby\n(1..10)                  .tap {|x| puts \"original: #{x}\" }\n  .to_a                  .tap {|x| puts \"array:    #{x}\" }\n  .select {|x| x.even? } .tap {|x| puts \"evens:    #{x}\" }\n  .map {|x| x*x }        .tap {|x| puts \"squares:  #{x}\" }\n```"},"sortText":"000134","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"tap do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"test","kind":2,"detail":"Kernel#test","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    cmd: String,\n    file1: String,\n    file2: String\n  )\n  .returns(T.any(TrueClass, FalseClass, Time))\nend\ndef test(cmd, file1, file2=…); end\n```\n\n---\n\nUses the character `cmd` to perform various tests on `file1` (first table\nbelow) or on `file1` and `file2` (second table).\n\n[`File`](https://docs.ruby-lang.org/en/2.7.0/File.html) tests on a single\nfile:\n\n```\nCmd    Returns   Meaning\n\"A\"  | Time    | Last access time for file1\n\"b\"  | boolean | True if file1 is a block device\n\"c\"  | boolean | True if file1 is a character device\n\"C\"  | Time    | Last change time for file1\n\"d\"  | boolean | True if file1 exists and is a directory\n\"e\"  | boolean | True if file1 exists\n\"f\"  | boolean | True if file1 exists and is a regular file\n\"g\"  | boolean | True if file1 has the \\CF{setgid} bit\n     |         | set (false under NT)\n\"G\"  | boolean | True if file1 exists and has a group\n     |         | ownership equal to the caller's group\n\"k\"  | boolean | True if file1 exists and has the sticky bit set\n\"l\"  | boolean | True if file1 exists and is a symbolic link\n\"M\"  | Time    | Last modification time for file1\n\"o\"  | boolean | True if file1 exists and is owned by\n     |         | the caller's effective uid\n\"O\"  | boolean | True if file1 exists and is owned by\n     |         | the caller's real uid\n\"p\"  | boolean | True if file1 exists and is a fifo\n\"r\"  | boolean | True if file1 is readable by the effective\n     |         | uid/gid of the caller\n\"R\"  | boolean | True if file is readable by the real\n     |         | uid/gid of the caller\n\"s\"  | int/nil | If file1 has nonzero size, return the size,\n     |         | otherwise return nil\n\"S\"  | boolean | True if file1 exists and is a socket\n\"u\"  | boolean | True if file1 has the setuid bit set\n\"w\"  | boolean | True if file1 exists and is writable by\n     |         | the effective uid/gid\n\"W\"  | boolean | True if file1 exists and is writable by\n     |         | the real uid/gid\n\"x\"  | boolean | True if file1 exists and is executable by\n     |         | the effective uid/gid\n\"X\"  | boolean | True if file1 exists and is executable by\n     |         | the real uid/gid\n\"z\"  | boolean | True if file1 exists and has a zero length\n```\n\nTests that take two files:\n\n```\n\"-\"  | boolean | True if file1 and file2 are identical\n\"=\"  | boolean | True if the modification times of file1\n     |         | and file2 are equal\n\"<\"  | boolean | True if the modification time of file1\n     |         | is prior to that of file2\n\">\"  | boolean | True if the modification time of file1\n     |         | is after that of file2\n```"},"sortText":"000135","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"test(${1:String}, ${2:String})${0}"}},{"label":"then","kind":2,"detail":"Kernel#then","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:X))\n  )\n  .returns(T.type_parameter(:X))\nend\ndef then(&blk); end\n```\n\n---\n\nYields self to the block and returns the result of the block.\n\n```ruby\n3.next.then {|x| x**x }.to_s             #=> \"256\"\n```\n\nGood usage for `then` is value piping in method chains:\n\n```ruby\nrequire 'open-uri'\nrequire 'json'\n\nconstruct_url(arguments).\n  then {|url| URI(url).read }.\n  then {|response| JSON.parse(response) }\n```\n\nWhen called without block, the method returns `Enumerator`, which can be\nused, for example, for conditional circuit-breaking:\n\n```ruby\n# meets condition, no-op\n1.then.detect(&:odd?)            # => 1\n# does not meet condition, drop value\n2.then.detect(&:odd?)            # => nil\n```"},"sortText":"000136","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"then do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"throw","kind":2,"detail":"Kernel#throw","documentation":{"kind":"markdown","value":"```ruby\nsig {params(tag: Object, obj: BasicObject).returns(T.noreturn)}\ndef throw(tag, obj=…); end\n```\n\n---\n\nTransfers control to the end of the active `catch` block waiting for *tag*.\nRaises `UncaughtThrowError` if there is no `catch` block for the *tag*. The\noptional second parameter supplies a return value for the `catch` block,\nwhich otherwise defaults to `nil`. For examples, see Kernel::catch."},"sortText":"000137","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"throw(${1:Object})${0}"}},{"label":"to_enum","kind":2,"detail":"Kernel#to_enum","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef to_enum(method=…, *args); end\n```"},"sortText":"000138","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"to_enum${0}"}},{"label":"to_enum","kind":2,"detail":"Kernel#to_enum (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef to_enum (overload.1)(method=…, *args, &blk); end\n```"},"sortText":"000139","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"to_enum${0}"}},{"label":"to_s","kind":2,"detail":"Kernel#to_s","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(String)}\ndef to_s; end\n```"},"sortText":"000140","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"to_s${0}"}},{"label":"trap","kind":2,"detail":"Kernel#trap","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    signal: T.any(Integer, String, Symbol),\n    command: BasicObject\n  )\n  .returns(T.any(String, Proc))\nend\ndef trap(signal, command=…); end\n```\n\n---\n\nSpecifies the handling of signals. The first parameter is a signal name (a\nstring such as \"SIGALRM\", \"SIGUSR1\", and so on) or a signal number. The\ncharacters \"SIG\" may be omitted from the signal name. The command or block\nspecifies code to be run when the signal is raised. If the command is the\nstring \"IGNORE\" or \"SIG\\_IGN\", the signal will be ignored. If the command is\n\"DEFAULT\" or \"SIG\\_DFL\", the Ruby's default handler will be invoked. If the\ncommand is \"EXIT\", the script will be terminated by the signal. If the\ncommand is \"SYSTEM\\_DEFAULT\", the operating system's default handler will be\ninvoked. Otherwise, the given command or block will be run. The special\nsignal name \"EXIT\" or signal number zero will be invoked just prior to\nprogram termination. trap returns the previous handler for the given signal.\n\n```ruby\nSignal.trap(0, proc { puts \"Terminating: #{$$}\" })\nSignal.trap(\"CLD\")  { puts \"Child died\" }\nfork && Process.wait\n```\n\nproduces:\n\n```\nTerminating: 27461\nChild died\nTerminating: 27460\n```"},"sortText":"000141","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"trap(${1:T.any(Integer, String, Symbol)})${0}"}},{"label":"trap","kind":2,"detail":"Kernel#trap (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    signal: T.any(Integer, String, Symbol),\n    blk: T.proc.params(arg0: Integer).returns(BasicObject)\n  )\n  .returns(T.any(String, Proc))\nend\ndef trap (overload.1)(signal, &blk); end\n```\n\n---\n\nSpecifies the handling of signals. The first parameter is a signal name (a\nstring such as \"SIGALRM\", \"SIGUSR1\", and so on) or a signal number. The\ncharacters \"SIG\" may be omitted from the signal name. The command or block\nspecifies code to be run when the signal is raised. If the command is the\nstring \"IGNORE\" or \"SIG\\_IGN\", the signal will be ignored. If the command is\n\"DEFAULT\" or \"SIG\\_DFL\", the Ruby's default handler will be invoked. If the\ncommand is \"EXIT\", the script will be terminated by the signal. If the\ncommand is \"SYSTEM\\_DEFAULT\", the operating system's default handler will be\ninvoked. Otherwise, the given command or block will be run. The special\nsignal name \"EXIT\" or signal number zero will be invoked just prior to\nprogram termination. trap returns the previous handler for the given signal.\n\n```ruby\nSignal.trap(0, proc { puts \"Terminating: #{$$}\" })\nSignal.trap(\"CLD\")  { puts \"Child died\" }\nfork && Process.wait\n```\n\nproduces:\n\n```\nTerminating: 27461\nChild died\nTerminating: 27460\n```"},"sortText":"000142","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"trap(${1:T.any(Integer, String, Symbol)}) do |${2:Integer}|\n  ${3}\nend${0}"}},{"label":"trust","kind":2,"detail":"Kernel#trust","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Private::Methods::DeclBuilder)}\ndef trust; end\n```"},"sortText":"000143","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"trust${0}"}},{"label":"undef","kind":2,"detail":"Kernel#undef","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg: BasicObject).void}\ndef undef(*arg); end\n```"},"sortText":"000144","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"undef${0}"}},{"label":"untaint","kind":2,"detail":"Kernel#untaint","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Private::Methods::DeclBuilder)}\ndef untaint; end\n```"},"sortText":"000145","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"untaint${0}"}},{"label":"untrust","kind":2,"detail":"Kernel#untrust","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Private::Methods::DeclBuilder)}\ndef untrust; end\n```"},"sortText":"000146","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"untrust${0}"}},{"label":"untrusted?","kind":2,"detail":"Kernel#untrusted?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef untrusted?; end\n```"},"sortText":"000147","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"untrusted?${0}"}},{"label":"warn","kind":2,"detail":"Kernel#warn","documentation":{"kind":"markdown","value":"```ruby\nsig {params(msg: String).returns(NilClass)}\ndef warn(*msg); end\n```\n\n---\n\nIf warnings have been disabled (for example with the `-W0` flag), does\nnothing. Otherwise, converts each of the messages to strings, appends a\nnewline character to the string if the string does not end in a newline, and\ncalls\n[`Warning.warn`](https://docs.ruby-lang.org/en/2.7.0/Warning.html#method-i-warn)\nwith the string.\n\n```\n  warn(\"warning 1\", \"warning 2\")\n\n<em>produces:</em>\n\n  warning 1\n  warning 2\n```\n\nIf the `uplevel` keyword argument is given, the string will be prepended\nwith information for the given caller frame in the same format used by the\n`rb_warn` C function.\n\n```\n  # In baz.rb\n  def foo\n    warn(\"invalid call to foo\", uplevel: 1)\n  end\n\n  def bar\n    foo\n  end\n\n  bar\n\n<em>produces:</em>\n\n  baz.rb:6: warning: invalid call to foo\n```\n\nIf `category` keyword argument is given, passes the category to\n`Warning.warn`. The category given must be be one of the following\ncategories:\n\n:deprecated\n:   Used for warning for deprecated functionality that may be removed in the\n    future.\n:experimental\n:   Used for experimental features that may change in future releases."},"sortText":"000148","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"warn${0}"}},{"label":"yield_self","kind":2,"detail":"Kernel#yield_self","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:X))\n  )\n  .returns(T.type_parameter(:X))\nend\ndef yield_self(&blk); end\n```\n\n---\n\nYields self to the block and returns the result of the block.\n\n```ruby\n\"my string\".yield_self {|s| s.upcase }   #=> \"MY STRING\"\n```\n\nGood usage for `then` is value piping in method chains:\n\n```ruby\nrequire 'open-uri'\nrequire 'json'\n\nconstruct_url(arguments).\n  then {|url| URI(url).read }.\n  then {|response| JSON.parse(response) }\n```"},"sortText":"000149","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"yield_self do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"!","kind":2,"detail":"BasicObject#!","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef !; end\n```\n\n---\n\nBoolean negate."},"sortText":"000150","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"!${0}"}},{"label":"!=","kind":2,"detail":"BasicObject#!=","documentation":{"kind":"markdown","value":"```ruby\nsig {params(other: BasicObject).returns(T::Boolean)}\ndef !=(other); end\n```\n\n---\n\nReturns true if two objects are not-equal, otherwise false."},"sortText":"000151","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"!=(${1:BasicObject})${0}"}},{"label":"==","kind":2,"detail":"BasicObject#==","documentation":{"kind":"markdown","value":"```ruby\nsig {params(other: BasicObject).returns(T::Boolean)}\ndef ==(other); end\n```\n\n---\n\nEquality --- At the\n[`Object`](https://docs.ruby-lang.org/en/2.7.0/Object.html) level, #==\nreturns `true` only if `obj` and `other` are the same object. Typically,\nthis method is overridden in descendant classes to provide class-specific\nmeaning.\n\nUnlike #==, the\n[`equal?`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html#method-i-equal-3F)\nmethod should never be overridden by subclasses as it is used to determine\nobject identity (that is, `a.equal?(b)` if and only if `a` is the same\nobject as `b`):\n\n```ruby\nobj = \"a\"\nother = obj.dup\n\nobj == other      #=> true\nobj.equal? other  #=> false\nobj.equal? obj    #=> true\n```\n\nThe eql? method returns `true` if `obj` and `other` refer to the same hash\nkey. This is used by [`Hash`](https://docs.ruby-lang.org/en/2.7.0/Hash.html)\nto test members for equality. For any pair of objects where eql? returns\n`true`, the hash value of both objects must be equal. So any subclass that\noverrides eql? should also override hash appropriately.\n\nFor objects of class\n[`Object`](https://docs.ruby-lang.org/en/2.7.0/Object.html), eql?  is\nsynonymous with #==. Subclasses normally continue this tradition by aliasing\neql? to their overridden #== method, but there are exceptions.\n[`Numeric`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html) types, for\nexample, perform type conversion across #==, but not across eql?, so:\n\n```ruby\n1 == 1.0     #=> true\n1.eql? 1.0   #=> false\n```"},"sortText":"000152","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"==(${1:BasicObject})${0}"}},{"label":"__id__","kind":2,"detail":"BasicObject#__id__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef __id__; end\n```\n\n---\n\nReturns an integer identifier for `obj`.\n\nThe same number will be returned on all calls to `object_id` for a given\nobject, and no two active objects will share an id.\n\nNote: that some objects of builtin classes are reused for optimization. This\nis the case for immediate values and frozen string literals.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_id\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`object_id`.\n\nImmediate values are not passed by reference but are passed by value: `nil`,\n`true`, `false`, Fixnums, Symbols, and some Floats.\n\n```ruby\nObject.new.object_id  == Object.new.object_id  # => false\n(21 * 2).object_id    == (21 * 2).object_id    # => true\n\"hello\".object_id     == \"hello\".object_id     # => false\n\"hi\".freeze.object_id == \"hi\".freeze.object_id # => true\n```"},"sortText":"000153","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"__id__${0}"}},{"label":"__send__","kind":2,"detail":"BasicObject#__send__","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol, arg1: BasicObject).returns(T.untyped)}\ndef __send__(arg0, *arg1); end\n```\n\n---\n\nInvokes the method identified by *symbol*, passing it any arguments\nspecified. You can use `__send__` if the name `send` clashes with an\nexisting method in *obj*. When the method is identified by a string, the\nstring is converted to a symbol.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_send\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`send`.\n\n```ruby\nclass Klass\n  def hello(*args)\n    \"Hello \" + args.join(' ')\n  end\nend\nk = Klass.new\nk.send :hello, \"gentle\", \"readers\"   #=> \"Hello gentle readers\"\n```"},"sortText":"000154","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"__send__(${1:Symbol})${0}"}},{"label":"equal?","kind":2,"detail":"BasicObject#equal?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(other: BasicObject).returns(T::Boolean)}\ndef equal?(other); end\n```\n\n---\n\nEquality --- At the\n[`Object`](https://docs.ruby-lang.org/en/2.7.0/Object.html) level, #==\nreturns `true` only if `obj` and `other` are the same object. Typically,\nthis method is overridden in descendant classes to provide class-specific\nmeaning.\n\nUnlike #==, the\n[`equal?`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html#method-i-equal-3F)\nmethod should never be overridden by subclasses as it is used to determine\nobject identity (that is, `a.equal?(b)` if and only if `a` is the same\nobject as `b`):\n\n```ruby\nobj = \"a\"\nother = obj.dup\n\nobj == other      #=> true\nobj.equal? other  #=> false\nobj.equal? obj    #=> true\n```\n\nThe eql? method returns `true` if `obj` and `other` refer to the same hash\nkey. This is used by [`Hash`](https://docs.ruby-lang.org/en/2.7.0/Hash.html)\nto test members for equality. For any pair of objects where eql? returns\n`true`, the hash value of both objects must be equal. So any subclass that\noverrides eql? should also override hash appropriately.\n\nFor objects of class\n[`Object`](https://docs.ruby-lang.org/en/2.7.0/Object.html), eql?  is\nsynonymous with #==. Subclasses normally continue this tradition by aliasing\neql? to their overridden #== method, but there are exceptions.\n[`Numeric`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html) types, for\nexample, perform type conversion across #==, but not across eql?, so:\n\n```ruby\n1 == 1.0     #=> true\n1.eql? 1.0   #=> false\n```"},"sortText":"000155","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"equal?(${1:BasicObject})${0}"}},{"label":"instance_eval","kind":2,"detail":"BasicObject#instance_eval","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, filename: String, lineno: Integer).returns(T.untyped)}\ndef instance_eval(arg0=…, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver (*obj*). In order to set the context, the\nvariable `self` is set to *obj* while the code is executing, giving the code\naccess to *obj*'s instance variables and private methods.\n\nWhen `instance_eval` is given a block, *obj* is also passed in as the\nblock's only argument.\n\nWhen `instance_eval` is given a `String`, the optional second and third\nparameters supply a filename and starting line number that are used when\nreporting compilation errors.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\n  private\n  def the_secret\n    \"Ssssh! The secret is #{@secret}.\"\n  end\nend\nk = KlassWithSecret.new\nk.instance_eval { @secret }          #=> 99\nk.instance_eval { the_secret }       #=> \"Ssssh! The secret is 99.\"\nk.instance_eval {|obj| obj == self } #=> true\n```"},"sortText":"000156","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"instance_eval${0}"}},{"label":"instance_eval","kind":2,"detail":"BasicObject#instance_eval (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_eval (overload.1)(&blk); end\n```\n\n---\n\nEvaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver (*obj*). In order to set the context, the\nvariable `self` is set to *obj* while the code is executing, giving the code\naccess to *obj*'s instance variables and private methods.\n\nWhen `instance_eval` is given a block, *obj* is also passed in as the\nblock's only argument.\n\nWhen `instance_eval` is given a `String`, the optional second and third\nparameters supply a filename and starting line number that are used when\nreporting compilation errors.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\n  private\n  def the_secret\n    \"Ssssh! The secret is #{@secret}.\"\n  end\nend\nk = KlassWithSecret.new\nk.instance_eval { @secret }          #=> 99\nk.instance_eval { the_secret }       #=> \"Ssssh! The secret is 99.\"\nk.instance_eval {|obj| obj == self } #=> true\n```"},"sortText":"000157","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"instance_eval do\n  ${1}\nend${0}"}},{"label":"instance_exec","kind":2,"detail":"BasicObject#instance_exec","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    args: T.type_parameter(:V),\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_exec(*args, &blk); end\n```\n\n---\n\nExecutes the given block within the context of the receiver (*obj*). In\norder to set the context, the variable `self` is set to *obj* while the code\nis executing, giving the code access to *obj*'s instance variables.\nArguments are passed as block parameters.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\nend\nk = KlassWithSecret.new\nk.instance_exec(5) {|x| @secret+x }   #=> 104\n```"},"sortText":"000158","insertTextFormat":2,"textEdit":{"range":{"start":{"line":4,"character":26},"end":{"line":4,"character":26}},"newText":"instance_exec do |${1:T.untyped}|\n  ${2}\nend${0}"}}]}}

[2023-08-10 22:57:06.670] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":93},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x: Integer).void}\n  def example(x)\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:06.767] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:06.767] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:06.768] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:06.768] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:06.794] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 52
[2023-08-10 22:57:06.794] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[]}}

[2023-08-10 22:57:07.047] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":42,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":4,"character":31},"end":{"line":4,"character":31}},"context":{"diagnostics":[]}}}

[2023-08-10 22:57:07.048] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:07.048] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:07.063] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":42,"requestMethod":"textDocument/codeAction","result":[]}

[2023-08-10 22:57:08.816] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":43,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":4,"character":22},"end":{"line":4,"character":22}},"context":{"diagnostics":[]}}}

[2023-08-10 22:57:08.817] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:08.817] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:08.833] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":43,"requestMethod":"textDocument/codeAction","result":[]}

[2023-08-10 22:57:09.593] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":94},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x: Integer).void}\n  def example(x)\n    \n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:09.676] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":95},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x: Integer).void}\n  def example(x)\n    i\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:09.676] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":44,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":6,"character":5},"context":{"triggerKind":1}}}

[2023-08-10 22:57:09.689] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:09.689] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:09.689] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:09.689] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:09.788] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:09.788] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:09.788] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:09.788] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:09.794] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 54
[2023-08-10 22:57:09.795] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `i` does not exist on `A`","relatedInformation":[]}]}}

[2023-08-10 22:57:09.830] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":44,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[{"label":"if","kind":15,"detail":"(sorbet) if/end","documentation":{"kind":"markdown","value":"```ruby\nif ${1:expr}\n  $0\nend\n```\n\n---\n\nUsed for if and modifier if expressions."},"sortText":"000000","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"if ${1:expr}\n  $0\nend"}},{"label":"in","kind":14,"detail":"(sorbet) Ruby keyword: in","documentation":"Used to separate the iterable object and iterator variable in a for loop.","sortText":"000001","insertTextFormat":1,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"in"}},{"label":"singleton_class","kind":2,"detail":"Object#singleton_class","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.untyped)}\ndef singleton_class; end\n```"},"sortText":"000002","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"singleton_class${0}"}},{"label":"initialize_copy","kind":2,"detail":"Kernel#initialize_copy","documentation":{"kind":"markdown","value":"```ruby\nsig {params(object: A).returns(A)}\ndef initialize_copy(object); end\n```"},"sortText":"000003","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"initialize_copy(${1:A})${0}"}},{"label":"inspect","kind":2,"detail":"Kernel#inspect","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(String)}\ndef inspect; end\n```"},"sortText":"000004","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"inspect${0}"}},{"label":"instance_of?","kind":2,"detail":"Kernel#instance_of?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T::Class[T.anything]).returns(T::Boolean)}\ndef instance_of?(arg0); end\n```"},"sortText":"000005","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"instance_of?(${1:T::Class[T.anything]})${0}"}},{"label":"instance_variable_defined?","kind":2,"detail":"Kernel#instance_variable_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef instance_variable_defined?(arg0); end\n```"},"sortText":"000006","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"instance_variable_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"instance_variable_get","kind":2,"detail":"Kernel#instance_variable_get","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.untyped)}\ndef instance_variable_get(arg0); end\n```"},"sortText":"000007","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"instance_variable_get(${1:T.any(Symbol, String)})${0}"}},{"label":"instance_variable_set","kind":2,"detail":"Kernel#instance_variable_set","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String), arg1: BasicObject).returns(T.untyped)}\ndef instance_variable_set(arg0, arg1); end\n```"},"sortText":"000008","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"instance_variable_set(${1:T.any(Symbol, String)}, ${2:BasicObject})${0}"}},{"label":"instance_variables","kind":2,"detail":"Kernel#instance_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef instance_variables; end\n```"},"sortText":"000009","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"instance_variables${0}"}},{"label":"is_a?","kind":2,"detail":"Kernel#is_a?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T::Boolean)}\ndef is_a?(arg0); end\n```"},"sortText":"000010","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"is_a?(${1:Module})${0}"}},{"label":"iterator?","kind":2,"detail":"Kernel#iterator?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef iterator?; end\n```\n\n---\n\nDeprecated. Use block\\_given? instead."},"sortText":"000011","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"iterator?${0}"}},{"label":"itself","kind":2,"detail":"Kernel#itself","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(A)}\ndef itself; end\n```\n\n---\n\nReturns the receiver `obj`.\n\n```ruby\nobj = Object.new; obj.itself.object_id == o.object_id # => true\n```"},"sortText":"000012","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"itself${0}"}},{"label":"BigDecimal","kind":2,"detail":"Kernel#BigDecimal","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    initial: T.any(Integer, Float, Rational, BigDecimal, String),\n    digits: Integer,\n    exception: T::Boolean\n  )\n  .returns(BigDecimal)\nend\ndef BigDecimal(initial, digits=…, exception: …); end\n```\n\n---\n\n```\nReturns the \\BigDecimal converted from +value+\nwith a precision of +ndigits+ decimal digits.\n\nWhen +ndigits+ is less than the number of significant digits\nin the value, the result is rounded to that number of digits,\naccording to the current rounding mode; see BigDecimal.mode.\n```\n\nReturns `value` converted to a\n[`BigDecimal`](https://docs.ruby-lang.org/en/2.7.0/BigDecimal.html),\ndepending on the type of `value`:\n\n*   [`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html),\n    [`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html),\n    [`Rational`](https://docs.ruby-lang.org/en/2.7.0/Rational.html),\n    [`Complex`](https://docs.ruby-lang.org/en/2.7.0/Complex.html), or\n    BigDecimal: converted directly:\n\n```ruby\n# Integer, Complex, or BigDecimal value does not require ndigits; ignored if given.\nBigDecimal(2)                     # => 0.2e1\nBigDecimal(Complex(2, 0))         # => 0.2e1\nBigDecimal(BigDecimal(2))         # => 0.2e1\n# Float or Rational value requires ndigits.\nBigDecimal(2.0, 0)                # => 0.2e1\nBigDecimal(Rational(2, 1), 0)     # => 0.2e1\n```\n\n*   String: converted by parsing if it contains an integer or floating-point\n    literal; leading and trailing whitespace is ignored:\n\n```ruby\n# String does not require ndigits; ignored if given.\nBigDecimal('2')     # => 0.2e1\nBigDecimal('2.0')   # => 0.2e1\nBigDecimal('0.2e1') # => 0.2e1\nBigDecimal(' 2.0 ') # => 0.2e1\n```\n\n*   Other type that responds to method `:to_str`: first converted to a\n    string, then converted to a\n    [`BigDecimal`](https://docs.ruby-lang.org/en/2.7.0/BigDecimal.html), as\n    above.\n\n*   Other type:\n\n    *   Raises an exception if keyword argument `exception` is `true`.\n    *   Returns `nil` if keyword argument `exception` is `true`.\n\n\n\nRaises an exception if `value` evaluates to a\n[`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html) and `digits` is\nlarger than Float::DIG + 1."},"sortText":"000013","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"BigDecimal(${1:T.any(Integer, Float, Rational, BigDecimal, String)})${0}"}},{"label":"Rational","kind":2,"detail":"Kernel#Rational","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: Object,\n    y: T.any(Numeric, String),\n    exception: T::Boolean\n  )\n  .returns(Rational)\nend\ndef Rational(x, y=…, exception: …); end\n```\n\n---\n\nReturns `x/y` or `arg` as a\n[`Rational`](https://docs.ruby-lang.org/en/2.7.0/Rational.html).\n\n```ruby\nRational(2, 3)   #=> (2/3)\nRational(5)      #=> (5/1)\nRational(0.5)    #=> (1/2)\nRational(0.3)    #=> (5404319552844595/18014398509481984)\n\nRational(\"2/3\")  #=> (2/3)\nRational(\"0.3\")  #=> (3/10)\n\nRational(\"10 cents\")  #=> ArgumentError\nRational(nil)         #=> TypeError\nRational(1, nil)      #=> TypeError\n\nRational(\"10 cents\", exception: false)  #=> nil\n```\n\nSyntax of the string form:\n\n```\nstring form = extra spaces , rational , extra spaces ;\nrational = [ sign ] , unsigned rational ;\nunsigned rational = numerator | numerator , \"/\" , denominator ;\nnumerator = integer part | fractional part | integer part , fractional part ;\ndenominator = digits ;\ninteger part = digits ;\nfractional part = \".\" , digits , [ ( \"e\" | \"E\" ) , [ sign ] , digits ] ;\nsign = \"-\" | \"+\" ;\ndigits = digit , { digit | \"_\" , digit } ;\ndigit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\nextra spaces = ? \\s* ? ;\n```\n\nSee also\n[`String#to_r`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_r)."},"sortText":"000014","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"Rational(${1:Object})${0}"}},{"label":"String","kind":2,"detail":"Kernel#String","documentation":{"kind":"markdown","value":"```ruby\nsig {params(x: Object).returns(String)}\ndef String(x); end\n```\n\n---\n\nReturns *arg* as a\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html).\n\nFirst tries to call its `to_str` method, then its `to_s` method.\n\n```ruby\nString(self)        #=> \"main\"\nString(self.class)  #=> \"Object\"\nString(123456)      #=> \"123456\"\n```"},"sortText":"000015","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"String(${1:Object})${0}"}},{"label":"__dir__","kind":2,"detail":"Kernel#__dir__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(String))}\ndef __dir__; end\n```\n\n---\n\nReturns the canonicalized absolute path of the directory of the file from\nwhich this method is called. It means symlinks in the path is resolved. If\n`__FILE__` is `nil`, it returns `nil`. The return value equals to\n`File.dirname(File.realpath(__FILE__))`."},"sortText":"000016","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"__dir__${0}"}},{"label":"at_exit","kind":2,"detail":"Kernel#at_exit","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.proc.returns(BasicObject)).returns(Proc)}\ndef at_exit(&blk); end\n```\n\n---\n\nConverts *block* to a `Proc` object (and therefore binds it at the point of\ncall) and registers it for execution when the program exits. If multiple\nhandlers are registered, they are executed in reverse order of registration.\n\n```ruby\ndef do_at_exit(str1)\n  at_exit { print str1 }\nend\nat_exit { puts \"cruel world\" }\ndo_at_exit(\"goodbye \")\nexit\n```\n\n*produces:*\n\n```ruby\ngoodbye cruel world\n```"},"sortText":"000017","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"at_exit do\n  ${1}\nend${0}"}},{"label":"binding","kind":2,"detail":"Kernel#binding","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Binding)}\ndef binding; end\n```\n\n---\n\nReturns a `Binding` object, describing the variable and method bindings at\nthe point of call. This object can be used when calling `eval` to execute\nthe evaluated command in this environment. See also the description of class\n`Binding`.\n\n```ruby\ndef get_binding(param)\n  binding\nend\nb = get_binding(\"hello\")\neval(\"param\", b)   #=> \"hello\"\n```"},"sortText":"000018","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"binding${0}"}},{"label":"block_given?","kind":2,"detail":"Kernel#block_given?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef block_given?; end\n```\n\n---\n\nReturns `true` if `yield` would execute a block in the current context. The\n`iterator?` form is mildly deprecated.\n\n```ruby\ndef try\n  if block_given?\n    yield\n  else\n    \"no block\"\n  end\nend\ntry                  #=> \"no block\"\ntry { \"hello\" }      #=> \"hello\"\ntry do \"hello\" end   #=> \"hello\"\n```"},"sortText":"000019","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"block_given?${0}"}},{"label":"caller_locations","kind":2,"detail":"Kernel#caller_locations","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: Integer,\n    length: Integer\n  )\n  .returns(T.nilable(T::Array[Thread::Backtrace::Location]))\nend\ndef caller_locations(start_or_range=…, length=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing backtrace location\nobjects.\n\nSee\n[`Thread::Backtrace::Location`](https://docs.ruby-lang.org/en/2.7.0/Thread/Backtrace/Location.html)\nfor more information.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range."},"sortText":"000020","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"caller_locations${0}"}},{"label":"caller_locations","kind":2,"detail":"Kernel#caller_locations (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: T::Range[Integer]\n  )\n  .returns(T.nilable(T::Array[Thread::Backtrace::Location]))\nend\ndef caller_locations (overload.1)(start_or_range=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing backtrace location\nobjects.\n\nSee\n[`Thread::Backtrace::Location`](https://docs.ruby-lang.org/en/2.7.0/Thread/Backtrace/Location.html)\nfor more information.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range."},"sortText":"000021","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"caller_locations${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    symbol: T.any(Symbol, String),\n    method: T.any(Proc, Method, UnboundMethod)\n  )\n  .returns(Symbol)\nend\ndef define_singleton_method(symbol, method=…); end\n```"},"sortText":"000022","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"define_singleton_method(${1:T.any(Symbol, String)})${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(symbol: T.any(Symbol, String), blk: T.untyped).returns(Symbol)}\ndef define_singleton_method (overload.1)(symbol, &blk); end\n```"},"sortText":"000023","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"define_singleton_method(${1:T.any(Symbol, String)})${0}"}},{"label":"display","kind":2,"detail":"Kernel#display","documentation":{"kind":"markdown","value":"```ruby\nsig {params(port: IO).returns(NilClass)}\ndef display(port); end\n```"},"sortText":"000024","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"display(${1:IO})${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef exit; end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000025","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"exit${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit (overload.1)(status=…); end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000026","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"exit${0}"}},{"label":"exit!","kind":2,"detail":"Kernel#exit!","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit!(status=…); end\n```\n\n---\n\nExits the process immediately. No exit handlers are run. *status* is\nreturned to the underlying system as the exit status.\n\n```ruby\nProcess.exit!(true)\n```"},"sortText":"000027","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"exit!${0}"}},{"label":"fail","kind":2,"detail":"Kernel#fail","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef fail; end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlias for:\n[`raise`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-raise)"},"sortText":"000028","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"fail${0}"}},{"label":"fail","kind":2,"detail":"Kernel#fail (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String).returns(T.noreturn)}\ndef fail (overload.1)(arg0=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlias for:\n[`raise`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-raise)"},"sortText":"000029","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"fail${0}"}},{"label":"fail","kind":2,"detail":"Kernel#fail (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T::Class[T.anything],\n    arg1: T.any(T::Array[String], String)\n  )\n  .returns(T.noreturn)\nend\ndef fail (overload.2)(arg0=…, arg1=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlias for:\n[`raise`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-raise)"},"sortText":"000030","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"fail${0}"}},{"label":"fail","kind":2,"detail":"Kernel#fail (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: Exception,\n    arg1: String,\n    arg2: T::Array[String]\n  )\n  .returns(T.noreturn)\nend\ndef fail (overload.3)(arg0=…, arg1=…, arg2=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlias for:\n[`raise`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-raise)"},"sortText":"000031","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"fail${0}"}},{"label":"global_variables","kind":2,"detail":"Kernel#global_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef global_variables; end\n```\n\n---\n\nReturns an array of the names of global variables. This includes special\nregexp global variables such as `$~` and `$+`, but does not include the\nnumbered regexp global variables (`$1`, `$2`, etc.).\n\n```ruby\nglobal_variables.grep /std/   #=> [:$stdin, :$stdout, :$stderr]\n```"},"sortText":"000032","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"global_variables${0}"}},{"label":"kind_of?","kind":2,"detail":"Kernel#kind_of?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T::Boolean)}\ndef kind_of?(arg0); end\n```"},"sortText":"000033","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"kind_of?(${1:Module})${0}"}},{"label":"local_variables","kind":2,"detail":"Kernel#local_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef local_variables; end\n```\n\n---\n\nReturns the names of the current local variables.\n\n```ruby\nfred = 1\nfor i in 1..10\n   # ...\nend\nlocal_variables   #=> [:fred, :i]\n```"},"sortText":"000034","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"local_variables${0}"}},{"label":"nil?","kind":2,"detail":"Kernel#nil?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef nil?; end\n```"},"sortText":"000035","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"nil?${0}"}},{"label":"object_id","kind":2,"detail":"Kernel#object_id","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef object_id; end\n```\n\n---\n\nReturns an integer identifier for `obj`.\n\nThe same number will be returned on all calls to `object_id` for a given\nobject, and no two active objects will share an id.\n\nNote: that some objects of builtin classes are reused for optimization. This\nis the case for immediate values and frozen string literals.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_id\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`object_id`.\n\nImmediate values are not passed by reference but are passed by value: `nil`,\n`true`, `false`, Fixnums, Symbols, and some Floats.\n\n```ruby\nObject.new.object_id  == Object.new.object_id  # => false\n(21 * 2).object_id    == (21 * 2).object_id    # => true\n\"hello\".object_id     == \"hello\".object_id     # => false\n\"hi\".freeze.object_id == \"hi\".freeze.object_id # => true\n```"},"sortText":"000036","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"object_id${0}"}},{"label":"print","kind":2,"detail":"Kernel#print","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: Kernel).returns(NilClass)}\ndef print(*args); end\n```\n\n---\n\nPrints each object in turn to `$stdout`. If the output field separator\n(`$,`) is not `nil`, its contents will appear between each field. If the\noutput record separator (`$\\`) is not `nil`, it will be appended to the\noutput. If no arguments are given, prints `$_`. Objects that aren't strings\nwill be converted by calling their `to_s` method.\n\n```ruby\nprint \"cat\", [1,2,3], 99, \"\\n\"\n$, = \", \"\n$\\ = \"\\n\"\nprint \"cat\", [1,2,3], 99\n```\n\n*produces:*\n\n```\ncat12399\ncat, 1, 2, 3, 99\n```"},"sortText":"000037","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"print${0}"}},{"label":"printf","kind":2,"detail":"Kernel#printf","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: IO, arg1: String, arg2: BasicObject).returns(NilClass)}\ndef printf(arg0=…, arg1=…, *arg2); end\n```\n\n---\n\nEquivalent to:\n\n```\nio.write(sprintf(string, obj, ...))\n```\n\nor\n\n```\n$stdout.write(sprintf(string, obj, ...))\n```"},"sortText":"000038","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"printf${0}"}},{"label":"private_methods","kind":2,"detail":"Kernel#private_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef private_methods(all=…); end\n```"},"sortText":"000039","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"private_methods${0}"}},{"label":"public_method","kind":2,"detail":"Kernel#public_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef public_method(arg0); end\n```"},"sortText":"000040","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"public_method(${1:Symbol})${0}"}},{"label":"public_methods","kind":2,"detail":"Kernel#public_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef public_methods(all=…); end\n```"},"sortText":"000041","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"public_methods${0}"}},{"label":"public_send","kind":2,"detail":"Kernel#public_send","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef public_send(arg0, *args, &blk); end\n```"},"sortText":"000042","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"public_send(${1:T.any(Symbol, String)})${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef raise; end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000043","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"raise${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Class[T.anything], Exception, String)\n  )\n  .returns(T.noreturn)\nend\ndef raise (overload.1)(arg0=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000044","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"raise${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Class[T.anything], Exception),\n    arg1: T.untyped,\n    arg2: T.nilable(T::Array[String])\n  )\n  .returns(T.noreturn)\nend\ndef raise (overload.2)(arg0=…, arg1=…, arg2=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000045","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"raise${0}"}},{"label":"readline","kind":2,"detail":"Kernel#readline","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(String)}\ndef readline(arg0=…, arg1=…); end\n```\n\n---\n\nEquivalent to Kernel::gets, except `readline` raises `EOFError` at end of\nfile."},"sortText":"000046","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"readline${0}"}},{"label":"readlines","kind":2,"detail":"Kernel#readlines","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(T::Array[String])}\ndef readlines(arg0=…, arg1=…); end\n```\n\n---\n\nReturns an array containing the lines returned by calling `Kernel.gets(sep)`\nuntil the end of file."},"sortText":"000047","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"readlines${0}"}},{"label":"remove_instance_variable","kind":2,"detail":"Kernel#remove_instance_variable","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(T.untyped)}\ndef remove_instance_variable(arg0); end\n```"},"sortText":"000048","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"remove_instance_variable(${1:Symbol})${0}"}},{"label":"require","kind":2,"detail":"Kernel#require","documentation":{"kind":"markdown","value":"```ruby\nsig {params(path: String).returns(T::Boolean)}\ndef require(path); end\n```\n\n---\n\nLoads the given `name`, returning `true` if successful and `false` if the\nfeature is already loaded.\n\nIf the filename does not resolve to an absolute path, it will be searched\nfor in the directories listed in `$LOAD_PATH` (`$:`).\n\nIf the filename has the extension \".rb\", it is loaded as a source file; if\nthe extension is \".so\", \".o\", or \".dll\", or the default shared library\nextension on the current platform, Ruby loads the shared library as a Ruby\nextension. Otherwise, Ruby tries adding \".rb\", \".so\", and so on to the name\nuntil found. If the file named cannot be found, a\n[`LoadError`](https://docs.ruby-lang.org/en/2.6.0/LoadError.html) will be\nraised.\n\nFor Ruby extensions the filename given may use any shared library extension.\nFor example, on Linux the socket extension is \"socket.so\" and `require\n'socket.dll'` will load the socket extension.\n\nThe absolute path of the loaded file is added to `$LOADED_FEATURES` (`$\"`).\nA file will not be loaded again if its path already appears in `$\"`. For\nexample, `require 'a'; require './a'` will not load `a.rb` again.\n\n```ruby\nrequire \"my-library.rb\"\nrequire \"db-driver\"\n```\n\nAny constants or globals within the loaded source file will be available in\nthe calling program's global namespace. However, local variables will not be\npropagated to the loading environment.\n\nWhen RubyGems is required,\n[`#require`](https://docs.ruby-lang.org/en/2.6.0/Kernel.html#method-i-require)\nis replaced with our own which is capable of loading gems on demand.\n\nWhen you call `require 'x'`, this is what happens:\n*   If the file can be loaded from the existing Ruby loadpath, it is.\n*   Otherwise, installed gems are searched for a file that matches. If it's\n    found in gem 'y', that gem is activated (added to the loadpath).\n\n\nThe normal `require` functionality of returning false if that file has\nalready been loaded is preserved.\n\nAlso aliased as:\n[`gem_original_require`](https://docs.ruby-lang.org/en/2.6.0/Kernel.html#method-i-gem_original_require)"},"sortText":"000049","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"require(${1:String})${0}"}},{"label":"require_relative","kind":2,"detail":"Kernel#require_relative","documentation":{"kind":"markdown","value":"```ruby\nsig {params(feature: T.any(String, Pathname)).returns(T::Boolean)}\ndef require_relative(feature); end\n```\n\n---\n\nRuby tries to load the library named *string* relative to the requiring\nfile's path. If the file's path cannot be determined a\n[`LoadError`](https://docs.ruby-lang.org/en/2.7.0/LoadError.html) is raised.\nIf a file is loaded `true` is returned and false otherwise."},"sortText":"000050","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"require_relative(${1:T.any(String, Pathname)})${0}"}},{"label":"singleton_method","kind":2,"detail":"Kernel#singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef singleton_method(arg0); end\n```"},"sortText":"000051","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"singleton_method(${1:Symbol})${0}"}},{"label":"singleton_methods","kind":2,"detail":"Kernel#singleton_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef singleton_methods(all=…); end\n```"},"sortText":"000052","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"singleton_methods${0}"}},{"label":"sprintf","kind":2,"detail":"Kernel#sprintf","documentation":{"kind":"markdown","value":"```ruby\nsig {params(format: String, args: BasicObject).returns(String)}\ndef sprintf(format, *args); end\n```\n\n---\n\nReturns the string resulting from applying *format\\_string* to any\nadditional arguments. Within the format string, any characters other than\nformat sequences are copied to the result.\n\nThe syntax of a format sequence is as follows.\n\n```\n%[flags][width][.precision]type\n```\n\nA format sequence consists of a percent sign, followed by optional flags,\nwidth, and precision indicators, then terminated with a field type\ncharacter. The field type controls how the corresponding `sprintf` argument\nis to be interpreted, while the flags modify that interpretation.\n\nThe field type characters are:\n\n```\nField |  Integer Format\n------+--------------------------------------------------------------\n  b   | Convert argument as a binary number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..1'.\n  B   | Equivalent to `b', but uses an uppercase 0B for prefix\n      | in the alternative format by #.\n  d   | Convert argument as a decimal number.\n  i   | Identical to `d'.\n  o   | Convert argument as an octal number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..7'.\n  u   | Identical to `d'.\n  x   | Convert argument as a hexadecimal number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..f' (representing an infinite string of\n      | leading 'ff's).\n  X   | Equivalent to `x', but uses uppercase letters.\n\nField |  Float Format\n------+--------------------------------------------------------------\n  e   | Convert floating point argument into exponential notation\n      | with one digit before the decimal point as [-]d.dddddde[+-]dd.\n      | The precision specifies the number of digits after the decimal\n      | point (defaulting to six).\n  E   | Equivalent to `e', but uses an uppercase E to indicate\n      | the exponent.\n  f   | Convert floating point argument as [-]ddd.dddddd,\n      | where the precision specifies the number of digits after\n      | the decimal point.\n  g   | Convert a floating point number using exponential form\n      | if the exponent is less than -4 or greater than or\n      | equal to the precision, or in dd.dddd form otherwise.\n      | The precision specifies the number of significant digits.\n  G   | Equivalent to `g', but use an uppercase `E' in exponent form.\n  a   | Convert floating point argument as [-]0xh.hhhhp[+-]dd,\n      | which is consisted from optional sign, \"0x\", fraction part\n      | as hexadecimal, \"p\", and exponential part as decimal.\n  A   | Equivalent to `a', but use uppercase `X' and `P'.\n\nField |  Other Format\n------+--------------------------------------------------------------\n  c   | Argument is the numeric code for a single character or\n      | a single character string itself.\n  p   | The valuing of argument.inspect.\n  s   | Argument is a string to be substituted.  If the format\n      | sequence contains a precision, at most that many characters\n      | will be copied.\n  %   | A percent sign itself will be displayed.  No argument taken.\n```\n\nThe flags modifies the behavior of the formats. The flag characters are:\n\n```\nFlag     | Applies to    | Meaning\n---------+---------------+-----------------------------------------\nspace    | bBdiouxX      | Leave a space at the start of\n         | aAeEfgG       | non-negative numbers.\n         | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n         |               | a minus sign with absolute value for\n         |               | negative values.\n---------+---------------+-----------------------------------------\n(digit)$ | all           | Specifies the absolute argument number\n         |               | for this field.  Absolute and relative\n         |               | argument numbers cannot be mixed in a\n         |               | sprintf string.\n---------+---------------+-----------------------------------------\n #       | bBoxX         | Use an alternative format.\n         | aAeEfgG       | For the conversions `o', increase the precision\n         |               | until the first digit will be `0' if\n         |               | it is not formatted as complements.\n         |               | For the conversions `x', `X', `b' and `B'\n         |               | on non-zero, prefix the result with ``0x'',\n         |               | ``0X'', ``0b'' and ``0B'', respectively.\n         |               | For `a', `A', `e', `E', `f', `g', and 'G',\n         |               | force a decimal point to be added,\n         |               | even if no digits follow.\n         |               | For `g' and 'G', do not remove trailing zeros.\n---------+---------------+-----------------------------------------\n+        | bBdiouxX      | Add a leading plus sign to non-negative\n         | aAeEfgG       | numbers.\n         | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n         |               | a minus sign with absolute value for\n         |               | negative values.\n---------+---------------+-----------------------------------------\n-        | all           | Left-justify the result of this conversion.\n---------+---------------+-----------------------------------------\n0 (zero) | bBdiouxX      | Pad with zeros, not spaces.\n         | aAeEfgG       | For `o', `x', `X', `b' and `B', radix-1\n         | (numeric fmt) | is used for negative numbers formatted as\n         |               | complements.\n---------+---------------+-----------------------------------------\n*        | all           | Use the next argument as the field width.\n         |               | If negative, left-justify the result. If the\n         |               | asterisk is followed by a number and a dollar\n         |               | sign, use the indicated argument as the width.\n```\n\nExamples of flags:\n\n```ruby\n# `+' and space flag specifies the sign of non-negative numbers.\nsprintf(\"%d\", 123)  #=> \"123\"\nsprintf(\"%+d\", 123) #=> \"+123\"\nsprintf(\"% d\", 123) #=> \" 123\"\n\n# `#' flag for `o' increases number of digits to show `0'.\n# `+' and space flag changes format of negative numbers.\nsprintf(\"%o\", 123)   #=> \"173\"\nsprintf(\"%#o\", 123)  #=> \"0173\"\nsprintf(\"%+o\", -123) #=> \"-173\"\nsprintf(\"%o\", -123)  #=> \"..7605\"\nsprintf(\"%#o\", -123) #=> \"..7605\"\n\n# `#' flag for `x' add a prefix `0x' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf(\"%x\", 123)   #=> \"7b\"\nsprintf(\"%#x\", 123)  #=> \"0x7b\"\nsprintf(\"%+x\", -123) #=> \"-7b\"\nsprintf(\"%x\", -123)  #=> \"..f85\"\nsprintf(\"%#x\", -123) #=> \"0x..f85\"\nsprintf(\"%#x\", 0)    #=> \"0\"\n\n# `#' for `X' uses the prefix `0X'.\nsprintf(\"%X\", 123)  #=> \"7B\"\nsprintf(\"%#X\", 123) #=> \"0X7B\"\n\n# `#' flag for `b' add a prefix `0b' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf(\"%b\", 123)   #=> \"1111011\"\nsprintf(\"%#b\", 123)  #=> \"0b1111011\"\nsprintf(\"%+b\", -123) #=> \"-1111011\"\nsprintf(\"%b\", -123)  #=> \"..10000101\"\nsprintf(\"%#b\", -123) #=> \"0b..10000101\"\nsprintf(\"%#b\", 0)    #=> \"0\"\n\n# `#' for `B' uses the prefix `0B'.\nsprintf(\"%B\", 123)  #=> \"1111011\"\nsprintf(\"%#B\", 123) #=> \"0B1111011\"\n\n# `#' for `e' forces to show the decimal point.\nsprintf(\"%.0e\", 1)  #=> \"1e+00\"\nsprintf(\"%#.0e\", 1) #=> \"1.e+00\"\n\n# `#' for `f' forces to show the decimal point.\nsprintf(\"%.0f\", 1234)  #=> \"1234\"\nsprintf(\"%#.0f\", 1234) #=> \"1234.\"\n\n# `#' for `g' forces to show the decimal point.\n# It also disables stripping lowest zeros.\nsprintf(\"%g\", 123.4)   #=> \"123.4\"\nsprintf(\"%#g\", 123.4)  #=> \"123.400\"\nsprintf(\"%g\", 123456)  #=> \"123456\"\nsprintf(\"%#g\", 123456) #=> \"123456.\"\n```\n\nThe field width is an optional integer, followed optionally by a period and\na precision. The width specifies the minimum number of characters that will\nbe written to the result for this field.\n\nExamples of width:\n\n```ruby\n# padding is done by spaces,       width=20\n# 0 or radix-1.             <------------------>\nsprintf(\"%20d\", 123)   #=> \"                 123\"\nsprintf(\"%+20d\", 123)  #=> \"                +123\"\nsprintf(\"%020d\", 123)  #=> \"00000000000000000123\"\nsprintf(\"%+020d\", 123) #=> \"+0000000000000000123\"\nsprintf(\"% 020d\", 123) #=> \" 0000000000000000123\"\nsprintf(\"%-20d\", 123)  #=> \"123                 \"\nsprintf(\"%-+20d\", 123) #=> \"+123                \"\nsprintf(\"%- 20d\", 123) #=> \" 123                \"\nsprintf(\"%020x\", -123) #=> \"..ffffffffffffffff85\"\n```\n\nFor numeric fields, the precision controls the number of decimal places\ndisplayed. For string fields, the precision determines the maximum number of\ncharacters to be copied from the string. (Thus, the format sequence\n`%10.10s` will always contribute exactly ten characters to the result.)\n\nExamples of precisions:\n\n```ruby\n# precision for `d', 'o', 'x' and 'b' is\n# minimum number of digits               <------>\nsprintf(\"%20.8d\", 123)  #=> \"            00000123\"\nsprintf(\"%20.8o\", 123)  #=> \"            00000173\"\nsprintf(\"%20.8x\", 123)  #=> \"            0000007b\"\nsprintf(\"%20.8b\", 123)  #=> \"            01111011\"\nsprintf(\"%20.8d\", -123) #=> \"           -00000123\"\nsprintf(\"%20.8o\", -123) #=> \"            ..777605\"\nsprintf(\"%20.8x\", -123) #=> \"            ..ffff85\"\nsprintf(\"%20.8b\", -11)  #=> \"            ..110101\"\n\n# \"0x\" and \"0b\" for `#x' and `#b' is not counted for\n# precision but \"0\" for `#o' is counted.  <------>\nsprintf(\"%#20.8d\", 123)  #=> \"            00000123\"\nsprintf(\"%#20.8o\", 123)  #=> \"            00000173\"\nsprintf(\"%#20.8x\", 123)  #=> \"          0x0000007b\"\nsprintf(\"%#20.8b\", 123)  #=> \"          0b01111011\"\nsprintf(\"%#20.8d\", -123) #=> \"           -00000123\"\nsprintf(\"%#20.8o\", -123) #=> \"            ..777605\"\nsprintf(\"%#20.8x\", -123) #=> \"          0x..ffff85\"\nsprintf(\"%#20.8b\", -11)  #=> \"          0b..110101\"\n\n# precision for `e' is number of\n# digits after the decimal point           <------>\nsprintf(\"%20.8e\", 1234.56789) #=> \"      1.23456789e+03\"\n\n# precision for `f' is number of\n# digits after the decimal point               <------>\nsprintf(\"%20.8f\", 1234.56789) #=> \"       1234.56789000\"\n\n# precision for `g' is number of\n# significant digits                          <------->\nsprintf(\"%20.8g\", 1234.56789) #=> \"           1234.5679\"\n\n#                                         <------->\nsprintf(\"%20.8g\", 123456789)  #=> \"       1.2345679e+08\"\n\n# precision for `s' is\n# maximum number of characters                    <------>\nsprintf(\"%20.8s\", \"string test\") #=> \"            string t\"\n```\n\nExamples:\n\n```ruby\nsprintf(\"%d %04x\", 123, 123)               #=> \"123 007b\"\nsprintf(\"%08b '%4s'\", 123, 123)            #=> \"01111011 ' 123'\"\nsprintf(\"%1$*2$s %2$d %1$s\", \"hello\", 8)   #=> \"   hello 8 hello\"\nsprintf(\"%1$*2$s %2$d\", \"hello\", -8)       #=> \"hello    -8\"\nsprintf(\"%+g:% g:%-g\", 1.23, 1.23, 1.23)   #=> \"+1.23: 1.23:1.23\"\nsprintf(\"%u\", -123)                        #=> \"-123\"\n```\n\nFor more complex formatting, Ruby supports a reference by name. %<name>s\nstyle uses format style, but %{name} style doesn't.\n\nExamples:\n\n```ruby\nsprintf(\"%<foo>d : %<bar>f\", { :foo => 1, :bar => 2 })\n  #=> 1 : 2.000000\nsprintf(\"%{foo}f\", { :foo => 1 })\n  # => \"1f\"\n```\n\n\nAlso aliased as:\n[`format`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-format)"},"sortText":"000053","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"sprintf(${1:String})${0}"}},{"label":"taint","kind":2,"detail":"Kernel#taint","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(A)}\ndef taint; end\n```"},"sortText":"000054","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"taint${0}"}},{"label":"tainted?","kind":2,"detail":"Kernel#tainted?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef tainted?; end\n```"},"sortText":"000055","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"tainted?${0}"}},{"label":"untaint","kind":2,"detail":"Kernel#untaint","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(A)}\ndef untaint; end\n```"},"sortText":"000056","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"untaint${0}"}},{"label":"yield_self","kind":2,"detail":"Kernel#yield_self","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:X))\n  )\n  .returns(T.type_parameter(:X))\nend\ndef yield_self(&blk); end\n```\n\n---\n\nYields self to the block and returns the result of the block.\n\n```ruby\n\"my string\".yield_self {|s| s.upcase }   #=> \"MY STRING\"\n```\n\nGood usage for `then` is value piping in method chains:\n\n```ruby\nrequire 'open-uri'\nrequire 'json'\n\nconstruct_url(arguments).\n  then {|url| URI(url).read }.\n  then {|response| JSON.parse(response) }\n```"},"sortText":"000057","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"yield_self do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"instance_eval","kind":2,"detail":"BasicObject#instance_eval","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, filename: String, lineno: Integer).returns(T.untyped)}\ndef instance_eval(arg0=…, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver (*obj*). In order to set the context, the\nvariable `self` is set to *obj* while the code is executing, giving the code\naccess to *obj*'s instance variables and private methods.\n\nWhen `instance_eval` is given a block, *obj* is also passed in as the\nblock's only argument.\n\nWhen `instance_eval` is given a `String`, the optional second and third\nparameters supply a filename and starting line number that are used when\nreporting compilation errors.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\n  private\n  def the_secret\n    \"Ssssh! The secret is #{@secret}.\"\n  end\nend\nk = KlassWithSecret.new\nk.instance_eval { @secret }          #=> 99\nk.instance_eval { the_secret }       #=> \"Ssssh! The secret is 99.\"\nk.instance_eval {|obj| obj == self } #=> true\n```"},"sortText":"000058","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"instance_eval${0}"}},{"label":"instance_eval","kind":2,"detail":"BasicObject#instance_eval (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_eval (overload.1)(&blk); end\n```\n\n---\n\nEvaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver (*obj*). In order to set the context, the\nvariable `self` is set to *obj* while the code is executing, giving the code\naccess to *obj*'s instance variables and private methods.\n\nWhen `instance_eval` is given a block, *obj* is also passed in as the\nblock's only argument.\n\nWhen `instance_eval` is given a `String`, the optional second and third\nparameters supply a filename and starting line number that are used when\nreporting compilation errors.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\n  private\n  def the_secret\n    \"Ssssh! The secret is #{@secret}.\"\n  end\nend\nk = KlassWithSecret.new\nk.instance_eval { @secret }          #=> 99\nk.instance_eval { the_secret }       #=> \"Ssssh! The secret is 99.\"\nk.instance_eval {|obj| obj == self } #=> true\n```"},"sortText":"000059","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"instance_eval do\n  ${1}\nend${0}"}},{"label":"instance_exec","kind":2,"detail":"BasicObject#instance_exec","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    args: T.type_parameter(:V),\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_exec(*args, &blk); end\n```\n\n---\n\nExecutes the given block within the context of the receiver (*obj*). In\norder to set the context, the variable `self` is set to *obj* while the code\nis executing, giving the code access to *obj*'s instance variables.\nArguments are passed as block parameters.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\nend\nk = KlassWithSecret.new\nk.instance_exec(5) {|x| @secret+x }   #=> 104\n```"},"sortText":"000060","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"instance_exec do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"__id__","kind":2,"detail":"BasicObject#__id__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef __id__; end\n```\n\n---\n\nReturns an integer identifier for `obj`.\n\nThe same number will be returned on all calls to `object_id` for a given\nobject, and no two active objects will share an id.\n\nNote: that some objects of builtin classes are reused for optimization. This\nis the case for immediate values and frozen string literals.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_id\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`object_id`.\n\nImmediate values are not passed by reference but are passed by value: `nil`,\n`true`, `false`, Fixnums, Symbols, and some Floats.\n\n```ruby\nObject.new.object_id  == Object.new.object_id  # => false\n(21 * 2).object_id    == (21 * 2).object_id    # => true\n\"hello\".object_id     == \"hello\".object_id     # => false\n\"hi\".freeze.object_id == \"hi\".freeze.object_id # => true\n```"},"sortText":"000061","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"newText":"__id__${0}"}}]}}

[2023-08-10 22:57:10.006] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":97},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x: Integer).void}\n  def example(x)\n    if \n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:10.103] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:10.103] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:10.103] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:10.103] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:10.110] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 55
[2023-08-10 22:57:10.110] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":9,"character":3},"end":{"line":10,"character":0}},"severity":1,"code":2001,"codeDescription":{"href":"https://srb.help/2001"},"message":"unexpected token \"end of file\"","relatedInformation":[]},{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":6}},"severity":1,"code":2003,"codeDescription":{"href":"https://srb.help/2003"},"message":"Hint: this \"if\" token might not be properly closed","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":8,"character":2},"end":{"line":8,"character":5}}},"message":"Matching `end` found here but is not indented as far"}]}]}}

[2023-08-10 22:57:10.809] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":99},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x: Integer).void}\n  def example(x)\n    if x.\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:10.809] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":45,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":6,"character":9},"context":{"triggerKind":2,"triggerCharacter":"."}}}

[2023-08-10 22:57:10.905] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:10.905] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:10.905] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:10.905] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:10.912] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 56
[2023-08-10 22:57:10.912] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":9,"character":3},"end":{"line":10,"character":0}},"severity":1,"code":2001,"codeDescription":{"href":"https://srb.help/2001"},"message":"unexpected token \"end of file\"","relatedInformation":[]},{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":6}},"severity":1,"code":2003,"codeDescription":{"href":"https://srb.help/2003"},"message":"Hint: this \"if\" token might not be properly closed","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":8,"character":2},"end":{"line":8,"character":5}}},"message":"Matching `end` found here but is not indented as far"}]}]}}

[2023-08-10 22:57:11.031] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":45,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[{"label":"%","kind":2,"detail":"Integer#%","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Integer)}\ndef %(arg0); end\n```\n\n---\n\nReturns `int` modulo `other`.\n\nSee\n[`Numeric#divmod`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html#method-i-divmod)\nfor more information."},"sortText":"000000","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"%${0}"}},{"label":"%","kind":2,"detail":"Integer#% (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Float).returns(Float)}\ndef % (overload.1)(arg0); end\n```\n\n---\n\nReturns `int` modulo `other`.\n\nSee\n[`Numeric#divmod`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html#method-i-divmod)\nfor more information."},"sortText":"000001","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"%${0}"}},{"label":"%","kind":2,"detail":"Integer#% (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Rational).returns(Rational)}\ndef % (overload.2)(arg0); end\n```\n\n---\n\nReturns `int` modulo `other`.\n\nSee\n[`Numeric#divmod`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html#method-i-divmod)\nfor more information."},"sortText":"000002","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"%${0}"}},{"label":"%","kind":2,"detail":"Integer#% (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BigDecimal).returns(BigDecimal)}\ndef % (overload.3)(arg0); end\n```\n\n---\n\nReturns `int` modulo `other`.\n\nSee\n[`Numeric#divmod`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html#method-i-divmod)\nfor more information."},"sortText":"000003","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"%${0}"}},{"label":"%","kind":2,"detail":"Integer#% (overload.4)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Integer, Float)).returns(T.any(Integer, Float))}\ndef % (overload.4)(arg0); end\n```\n\n---\n\nReturns `int` modulo `other`.\n\nSee\n[`Numeric#divmod`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html#method-i-divmod)\nfor more information."},"sortText":"000004","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"%${0}"}},{"label":"&","kind":2,"detail":"Integer#&","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Integer)}\ndef &(arg0); end\n```\n\n---\n\nBitwise AND."},"sortText":"000005","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"&${0}"}},{"label":"*","kind":2,"detail":"Integer#*","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Integer)}\ndef *(arg0); end\n```\n\n---\n\nPerforms multiplication: the class of the resulting object depends on the\nclass of `numeric`."},"sortText":"000006","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"*${0}"}},{"label":"*","kind":2,"detail":"Integer#* (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Float).returns(Float)}\ndef * (overload.1)(arg0); end\n```\n\n---\n\nPerforms multiplication: the class of the resulting object depends on the\nclass of `numeric`."},"sortText":"000007","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"*${0}"}},{"label":"*","kind":2,"detail":"Integer#* (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Rational).returns(Rational)}\ndef * (overload.2)(arg0); end\n```\n\n---\n\nPerforms multiplication: the class of the resulting object depends on the\nclass of `numeric`."},"sortText":"000008","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"*${0}"}},{"label":"*","kind":2,"detail":"Integer#* (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BigDecimal).returns(BigDecimal)}\ndef * (overload.3)(arg0); end\n```\n\n---\n\nPerforms multiplication: the class of the resulting object depends on the\nclass of `numeric`."},"sortText":"000009","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"*${0}"}},{"label":"*","kind":2,"detail":"Integer#* (overload.4)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Complex).returns(Complex)}\ndef * (overload.4)(arg0); end\n```\n\n---\n\nPerforms multiplication: the class of the resulting object depends on the\nclass of `numeric`."},"sortText":"000010","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"*${0}"}},{"label":"*","kind":2,"detail":"Integer#* (overload.5)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Integer, Float)).returns(T.any(Integer, Float))}\ndef * (overload.5)(arg0); end\n```\n\n---\n\nPerforms multiplication: the class of the resulting object depends on the\nclass of `numeric`."},"sortText":"000011","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"*${0}"}},{"label":"**","kind":2,"detail":"Integer#**","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Numeric)}\ndef **(arg0); end\n```\n\n---\n\nRaises `int` to the power of `numeric`, which may be negative or fractional.\nThe result may be an\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html), a\n[`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html), a\n[`Rational`](https://docs.ruby-lang.org/en/2.7.0/Rational.html), or a\ncomplex number.\n\n```ruby\n2 ** 3        #=> 8\n2 ** -1       #=> (1/2)\n2 ** 0.5      #=> 1.4142135623730951\n(-1) ** 0.5   #=> (0.0+1.0i)\n\n123456789 ** 2     #=> 15241578750190521\n123456789 ** 1.2   #=> 5126464716.0993185\n123456789 ** -2    #=> (1/15241578750190521)\n```"},"sortText":"000012","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"**${0}"}},{"label":"**","kind":2,"detail":"Integer#** (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Float).returns(Numeric)}\ndef ** (overload.1)(arg0); end\n```\n\n---\n\nRaises `int` to the power of `numeric`, which may be negative or fractional.\nThe result may be an\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html), a\n[`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html), a\n[`Rational`](https://docs.ruby-lang.org/en/2.7.0/Rational.html), or a\ncomplex number.\n\n```ruby\n2 ** 3        #=> 8\n2 ** -1       #=> (1/2)\n2 ** 0.5      #=> 1.4142135623730951\n(-1) ** 0.5   #=> (0.0+1.0i)\n\n123456789 ** 2     #=> 15241578750190521\n123456789 ** 1.2   #=> 5126464716.0993185\n123456789 ** -2    #=> (1/15241578750190521)\n```"},"sortText":"000013","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"**${0}"}},{"label":"**","kind":2,"detail":"Integer#** (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Rational).returns(Numeric)}\ndef ** (overload.2)(arg0); end\n```\n\n---\n\nRaises `int` to the power of `numeric`, which may be negative or fractional.\nThe result may be an\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html), a\n[`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html), a\n[`Rational`](https://docs.ruby-lang.org/en/2.7.0/Rational.html), or a\ncomplex number.\n\n```ruby\n2 ** 3        #=> 8\n2 ** -1       #=> (1/2)\n2 ** 0.5      #=> 1.4142135623730951\n(-1) ** 0.5   #=> (0.0+1.0i)\n\n123456789 ** 2     #=> 15241578750190521\n123456789 ** 1.2   #=> 5126464716.0993185\n123456789 ** -2    #=> (1/15241578750190521)\n```"},"sortText":"000014","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"**${0}"}},{"label":"**","kind":2,"detail":"Integer#** (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BigDecimal).returns(BigDecimal)}\ndef ** (overload.3)(arg0); end\n```\n\n---\n\nRaises `int` to the power of `numeric`, which may be negative or fractional.\nThe result may be an\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html), a\n[`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html), a\n[`Rational`](https://docs.ruby-lang.org/en/2.7.0/Rational.html), or a\ncomplex number.\n\n```ruby\n2 ** 3        #=> 8\n2 ** -1       #=> (1/2)\n2 ** 0.5      #=> 1.4142135623730951\n(-1) ** 0.5   #=> (0.0+1.0i)\n\n123456789 ** 2     #=> 15241578750190521\n123456789 ** 1.2   #=> 5126464716.0993185\n123456789 ** -2    #=> (1/15241578750190521)\n```"},"sortText":"000015","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"**${0}"}},{"label":"**","kind":2,"detail":"Integer#** (overload.4)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Complex).returns(Complex)}\ndef ** (overload.4)(arg0); end\n```\n\n---\n\nRaises `int` to the power of `numeric`, which may be negative or fractional.\nThe result may be an\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html), a\n[`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html), a\n[`Rational`](https://docs.ruby-lang.org/en/2.7.0/Rational.html), or a\ncomplex number.\n\n```ruby\n2 ** 3        #=> 8\n2 ** -1       #=> (1/2)\n2 ** 0.5      #=> 1.4142135623730951\n(-1) ** 0.5   #=> (0.0+1.0i)\n\n123456789 ** 2     #=> 15241578750190521\n123456789 ** 1.2   #=> 5126464716.0993185\n123456789 ** -2    #=> (1/15241578750190521)\n```"},"sortText":"000016","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"**${0}"}},{"label":"+","kind":2,"detail":"Integer#+","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Integer)}\ndef +(arg0); end\n```\n\n---\n\nPerforms addition: the class of the resulting object depends on the class of\n`numeric`."},"sortText":"000017","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"+${0}"}},{"label":"+","kind":2,"detail":"Integer#+ (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Float).returns(Float)}\ndef + (overload.1)(arg0); end\n```\n\n---\n\nPerforms addition: the class of the resulting object depends on the class of\n`numeric`."},"sortText":"000018","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"+${0}"}},{"label":"+","kind":2,"detail":"Integer#+ (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Rational).returns(Rational)}\ndef + (overload.2)(arg0); end\n```\n\n---\n\nPerforms addition: the class of the resulting object depends on the class of\n`numeric`."},"sortText":"000019","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"+${0}"}},{"label":"+","kind":2,"detail":"Integer#+ (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BigDecimal).returns(BigDecimal)}\ndef + (overload.3)(arg0); end\n```\n\n---\n\nPerforms addition: the class of the resulting object depends on the class of\n`numeric`."},"sortText":"000020","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"+${0}"}},{"label":"+","kind":2,"detail":"Integer#+ (overload.4)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Complex).returns(Complex)}\ndef + (overload.4)(arg0); end\n```\n\n---\n\nPerforms addition: the class of the resulting object depends on the class of\n`numeric`."},"sortText":"000021","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"+${0}"}},{"label":"+","kind":2,"detail":"Integer#+ (overload.5)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Integer, Float)).returns(T.any(Integer, Float))}\ndef + (overload.5)(arg0); end\n```\n\n---\n\nPerforms addition: the class of the resulting object depends on the class of\n`numeric`."},"sortText":"000022","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"+${0}"}},{"label":"+@","kind":2,"detail":"Integer#+@","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef +@; end\n```"},"sortText":"000023","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"+@${0}"}},{"label":"-","kind":2,"detail":"Integer#-","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Integer)}\ndef -(arg0); end\n```\n\n---\n\nPerforms subtraction: the class of the resulting object depends on the class\nof `numeric`."},"sortText":"000024","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"-${0}"}},{"label":"-","kind":2,"detail":"Integer#- (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Float).returns(Float)}\ndef - (overload.1)(arg0); end\n```\n\n---\n\nPerforms subtraction: the class of the resulting object depends on the class\nof `numeric`."},"sortText":"000025","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"-${0}"}},{"label":"-","kind":2,"detail":"Integer#- (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Rational).returns(Rational)}\ndef - (overload.2)(arg0); end\n```\n\n---\n\nPerforms subtraction: the class of the resulting object depends on the class\nof `numeric`."},"sortText":"000026","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"-${0}"}},{"label":"-","kind":2,"detail":"Integer#- (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BigDecimal).returns(BigDecimal)}\ndef - (overload.3)(arg0); end\n```\n\n---\n\nPerforms subtraction: the class of the resulting object depends on the class\nof `numeric`."},"sortText":"000027","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"-${0}"}},{"label":"-","kind":2,"detail":"Integer#- (overload.4)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Complex).returns(Complex)}\ndef - (overload.4)(arg0); end\n```\n\n---\n\nPerforms subtraction: the class of the resulting object depends on the class\nof `numeric`."},"sortText":"000028","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"-${0}"}},{"label":"-","kind":2,"detail":"Integer#- (overload.5)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Integer, Float)).returns(T.any(Integer, Float))}\ndef - (overload.5)(arg0); end\n```\n\n---\n\nPerforms subtraction: the class of the resulting object depends on the class\nof `numeric`."},"sortText":"000029","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"-${0}"}},{"label":"-@","kind":2,"detail":"Integer#-@","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef -@; end\n```\n\n---\n\nReturns `int`, negated."},"sortText":"000030","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"-@${0}"}},{"label":"/","kind":2,"detail":"Integer#/","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Integer)}\ndef /(arg0); end\n```\n\n---\n\nPerforms division: the class of the resulting object depends on the class of\n`numeric`."},"sortText":"000031","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"/${0}"}},{"label":"/","kind":2,"detail":"Integer#/ (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Float).returns(Float)}\ndef / (overload.1)(arg0); end\n```\n\n---\n\nPerforms division: the class of the resulting object depends on the class of\n`numeric`."},"sortText":"000032","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"/${0}"}},{"label":"/","kind":2,"detail":"Integer#/ (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Rational).returns(Rational)}\ndef / (overload.2)(arg0); end\n```\n\n---\n\nPerforms division: the class of the resulting object depends on the class of\n`numeric`."},"sortText":"000033","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"/${0}"}},{"label":"/","kind":2,"detail":"Integer#/ (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BigDecimal).returns(BigDecimal)}\ndef / (overload.3)(arg0); end\n```\n\n---\n\nPerforms division: the class of the resulting object depends on the class of\n`numeric`."},"sortText":"000034","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"/${0}"}},{"label":"/","kind":2,"detail":"Integer#/ (overload.4)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Complex).returns(Complex)}\ndef / (overload.4)(arg0); end\n```\n\n---\n\nPerforms division: the class of the resulting object depends on the class of\n`numeric`."},"sortText":"000035","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"/${0}"}},{"label":"/","kind":2,"detail":"Integer#/ (overload.5)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Integer, Float)).returns(T.any(Integer, Float))}\ndef / (overload.5)(arg0); end\n```\n\n---\n\nPerforms division: the class of the resulting object depends on the class of\n`numeric`."},"sortText":"000036","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"/${0}"}},{"label":"==","kind":2,"detail":"Integer#==","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Object).returns(T::Boolean)}\ndef ==(arg0); end\n```\n\n---\n\nReturns `true` if `int` equals `other` numerically. Contrast this with\n[`Integer#eql?`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html#method-i-eql-3F),\nwhich requires `other` to be an\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html).\n\n```ruby\n1 == 2     #=> false\n1 == 1.0   #=> true\n```"},"sortText":"000037","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"==${0}"}},{"label":"===","kind":2,"detail":"Integer#===","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Object).returns(T::Boolean)}\ndef ===(arg0); end\n```\n\n---\n\nReturns `true` if `int` equals `other` numerically. Contrast this with\n[`Integer#eql?`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html#method-i-eql-3F),\nwhich requires `other` to be an\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html).\n\n```ruby\n1 == 2     #=> false\n1 == 1.0   #=> true\n```"},"sortText":"000038","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"===${0}"}},{"label":"[]","kind":2,"detail":"Integer#[]","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Integer)}\ndef [](arg0); end\n```\n\n---\n\nBit Reference---Returns the `n`th bit in the binary representation of `int`,\nwhere `int[0]` is the least significant bit.\n\n```ruby\na = 0b11001100101010\n30.downto(0) {|n| print a[n] }\n#=> 0000000000000000011001100101010\n\na = 9**15\n50.downto(0) {|n| print a[n] }\n#=> 000101110110100000111000011110010100111100010111001\n```\n\nIn principle, `n[i]` is equivalent to `(n >> i) & 1`. Thus, any negative\nindex always returns zero:\n\n```ruby\np 255[-1] #=> 0\n```\n\n[`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html) operations `n[i,\nlen]` and `n[i..j]` are naturally extended.\n\n*   `n[i, len]` equals to `(n >> i) & ((1 << len) - 1)`.\n*   `n[i..j]` equals to `(n >> i) & ((1 << (j - i + 1)) - 1)`.\n*   `n[i...j]` equals to `(n >> i) & ((1 << (j - i)) - 1)`.\n*   `n[i..]` equals to `(n >> i)`.\n*   `n[..j]` is zero if `n & ((1 << (j + 1)) - 1)` is zero. Otherwise,\n    raises an\n    [`ArgumentError`](https://docs.ruby-lang.org/en/2.7.0/ArgumentError.html).\n*   `n[...j]` is zero if `n & ((1 << j) - 1)` is zero. Otherwise, raises an\n    [`ArgumentError`](https://docs.ruby-lang.org/en/2.7.0/ArgumentError.html).\n\n\nNote that range operation may exhaust memory. For example, `-1[0,\n1000000000000]` will raise\n[`NoMemoryError`](https://docs.ruby-lang.org/en/2.7.0/NoMemoryError.html)."},"sortText":"000039","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"[]${0}"}},{"label":"[]","kind":2,"detail":"Integer#[] (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Rational).returns(Integer)}\ndef [] (overload.1)(arg0); end\n```\n\n---\n\nBit Reference---Returns the `n`th bit in the binary representation of `int`,\nwhere `int[0]` is the least significant bit.\n\n```ruby\na = 0b11001100101010\n30.downto(0) {|n| print a[n] }\n#=> 0000000000000000011001100101010\n\na = 9**15\n50.downto(0) {|n| print a[n] }\n#=> 000101110110100000111000011110010100111100010111001\n```\n\nIn principle, `n[i]` is equivalent to `(n >> i) & 1`. Thus, any negative\nindex always returns zero:\n\n```ruby\np 255[-1] #=> 0\n```\n\n[`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html) operations `n[i,\nlen]` and `n[i..j]` are naturally extended.\n\n*   `n[i, len]` equals to `(n >> i) & ((1 << len) - 1)`.\n*   `n[i..j]` equals to `(n >> i) & ((1 << (j - i + 1)) - 1)`.\n*   `n[i...j]` equals to `(n >> i) & ((1 << (j - i)) - 1)`.\n*   `n[i..]` equals to `(n >> i)`.\n*   `n[..j]` is zero if `n & ((1 << (j + 1)) - 1)` is zero. Otherwise,\n    raises an\n    [`ArgumentError`](https://docs.ruby-lang.org/en/2.7.0/ArgumentError.html).\n*   `n[...j]` is zero if `n & ((1 << j) - 1)` is zero. Otherwise, raises an\n    [`ArgumentError`](https://docs.ruby-lang.org/en/2.7.0/ArgumentError.html).\n\n\nNote that range operation may exhaust memory. For example, `-1[0,\n1000000000000]` will raise\n[`NoMemoryError`](https://docs.ruby-lang.org/en/2.7.0/NoMemoryError.html)."},"sortText":"000040","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"[]${0}"}},{"label":"[]","kind":2,"detail":"Integer#[] (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Float).returns(Integer)}\ndef [] (overload.2)(arg0); end\n```\n\n---\n\nBit Reference---Returns the `n`th bit in the binary representation of `int`,\nwhere `int[0]` is the least significant bit.\n\n```ruby\na = 0b11001100101010\n30.downto(0) {|n| print a[n] }\n#=> 0000000000000000011001100101010\n\na = 9**15\n50.downto(0) {|n| print a[n] }\n#=> 000101110110100000111000011110010100111100010111001\n```\n\nIn principle, `n[i]` is equivalent to `(n >> i) & 1`. Thus, any negative\nindex always returns zero:\n\n```ruby\np 255[-1] #=> 0\n```\n\n[`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html) operations `n[i,\nlen]` and `n[i..j]` are naturally extended.\n\n*   `n[i, len]` equals to `(n >> i) & ((1 << len) - 1)`.\n*   `n[i..j]` equals to `(n >> i) & ((1 << (j - i + 1)) - 1)`.\n*   `n[i...j]` equals to `(n >> i) & ((1 << (j - i)) - 1)`.\n*   `n[i..]` equals to `(n >> i)`.\n*   `n[..j]` is zero if `n & ((1 << (j + 1)) - 1)` is zero. Otherwise,\n    raises an\n    [`ArgumentError`](https://docs.ruby-lang.org/en/2.7.0/ArgumentError.html).\n*   `n[...j]` is zero if `n & ((1 << j) - 1)` is zero. Otherwise, raises an\n    [`ArgumentError`](https://docs.ruby-lang.org/en/2.7.0/ArgumentError.html).\n\n\nNote that range operation may exhaust memory. For example, `-1[0,\n1000000000000]` will raise\n[`NoMemoryError`](https://docs.ruby-lang.org/en/2.7.0/NoMemoryError.html)."},"sortText":"000041","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"[]${0}"}},{"label":"[]","kind":2,"detail":"Integer#[] (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BigDecimal).returns(Integer)}\ndef [] (overload.3)(arg0); end\n```\n\n---\n\nBit Reference---Returns the `n`th bit in the binary representation of `int`,\nwhere `int[0]` is the least significant bit.\n\n```ruby\na = 0b11001100101010\n30.downto(0) {|n| print a[n] }\n#=> 0000000000000000011001100101010\n\na = 9**15\n50.downto(0) {|n| print a[n] }\n#=> 000101110110100000111000011110010100111100010111001\n```\n\nIn principle, `n[i]` is equivalent to `(n >> i) & 1`. Thus, any negative\nindex always returns zero:\n\n```ruby\np 255[-1] #=> 0\n```\n\n[`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html) operations `n[i,\nlen]` and `n[i..j]` are naturally extended.\n\n*   `n[i, len]` equals to `(n >> i) & ((1 << len) - 1)`.\n*   `n[i..j]` equals to `(n >> i) & ((1 << (j - i + 1)) - 1)`.\n*   `n[i...j]` equals to `(n >> i) & ((1 << (j - i)) - 1)`.\n*   `n[i..]` equals to `(n >> i)`.\n*   `n[..j]` is zero if `n & ((1 << (j + 1)) - 1)` is zero. Otherwise,\n    raises an\n    [`ArgumentError`](https://docs.ruby-lang.org/en/2.7.0/ArgumentError.html).\n*   `n[...j]` is zero if `n & ((1 << j) - 1)` is zero. Otherwise, raises an\n    [`ArgumentError`](https://docs.ruby-lang.org/en/2.7.0/ArgumentError.html).\n\n\nNote that range operation may exhaust memory. For example, `-1[0,\n1000000000000]` will raise\n[`NoMemoryError`](https://docs.ruby-lang.org/en/2.7.0/NoMemoryError.html)."},"sortText":"000042","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"[]${0}"}},{"label":"[]","kind":2,"detail":"Integer#[] (overload.4)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T::Range[Integer]).returns(Integer)}\ndef [] (overload.4)(arg0); end\n```\n\n---\n\nBit Reference---Returns the `n`th bit in the binary representation of `int`,\nwhere `int[0]` is the least significant bit.\n\n```ruby\na = 0b11001100101010\n30.downto(0) {|n| print a[n] }\n#=> 0000000000000000011001100101010\n\na = 9**15\n50.downto(0) {|n| print a[n] }\n#=> 000101110110100000111000011110010100111100010111001\n```\n\nIn principle, `n[i]` is equivalent to `(n >> i) & 1`. Thus, any negative\nindex always returns zero:\n\n```ruby\np 255[-1] #=> 0\n```\n\n[`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html) operations `n[i,\nlen]` and `n[i..j]` are naturally extended.\n\n*   `n[i, len]` equals to `(n >> i) & ((1 << len) - 1)`.\n*   `n[i..j]` equals to `(n >> i) & ((1 << (j - i + 1)) - 1)`.\n*   `n[i...j]` equals to `(n >> i) & ((1 << (j - i)) - 1)`.\n*   `n[i..]` equals to `(n >> i)`.\n*   `n[..j]` is zero if `n & ((1 << (j + 1)) - 1)` is zero. Otherwise,\n    raises an\n    [`ArgumentError`](https://docs.ruby-lang.org/en/2.7.0/ArgumentError.html).\n*   `n[...j]` is zero if `n & ((1 << j) - 1)` is zero. Otherwise, raises an\n    [`ArgumentError`](https://docs.ruby-lang.org/en/2.7.0/ArgumentError.html).\n\n\nNote that range operation may exhaust memory. For example, `-1[0,\n1000000000000]` will raise\n[`NoMemoryError`](https://docs.ruby-lang.org/en/2.7.0/NoMemoryError.html)."},"sortText":"000043","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"[]${0}"}},{"label":"^","kind":2,"detail":"Integer#^","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Integer)}\ndef ^(arg0); end\n```\n\n---\n\nBitwise EXCLUSIVE OR."},"sortText":"000044","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"^${0}"}},{"label":"abs","kind":2,"detail":"Integer#abs","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef abs; end\n```\n\n---\n\nReturns the absolute value of `int`.\n\n```ruby\n(-12345).abs   #=> 12345\n-12345.abs     #=> 12345\n12345.abs      #=> 12345\n```\n\n[`Integer#magnitude`](https://docs.ruby-lang.org/en/2.7.0/Integer.html#method-i-magnitude)\nis an alias for\n[`Integer#abs`](https://docs.ruby-lang.org/en/2.7.0/Integer.html#method-i-abs)."},"sortText":"000045","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"abs${0}"}},{"label":"abs2","kind":2,"detail":"Integer#abs2","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef abs2; end\n```"},"sortText":"000046","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"abs2${0}"}},{"label":"allbits?","kind":2,"detail":"Integer#allbits?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(_: T.untyped).returns(T.untyped)}\ndef allbits?(_); end\n```\n\n---\n\nReturns `true` if all bits of `int & mask` are 1."},"sortText":"000047","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"allbits?${0}"}},{"label":"angle","kind":2,"detail":"Integer#angle","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Numeric)}\ndef angle; end\n```"},"sortText":"000048","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"angle${0}"}},{"label":"anybits?","kind":2,"detail":"Integer#anybits?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(_: T.untyped).returns(T.untyped)}\ndef anybits?(_); end\n```\n\n---\n\nReturns `true` if any bits of `int & mask` are 1."},"sortText":"000049","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"anybits?${0}"}},{"label":"arg","kind":2,"detail":"Integer#arg","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Numeric)}\ndef arg; end\n```"},"sortText":"000050","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"arg${0}"}},{"label":"bit_length","kind":2,"detail":"Integer#bit_length","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef bit_length; end\n```\n\n---\n\nReturns the number of bits of the value of `int`.\n\n\"Number of bits\" means the bit position of the highest bit which is\ndifferent from the sign bit (where the least significant bit has bit\nposition 1). If there is no such bit (zero or minus one), zero is returned.\n\nI.e. this method returns *ceil(log2(int < 0 ? -int : int+1))*.\n\n```ruby\n(-2**1000-1).bit_length   #=> 1001\n(-2**1000).bit_length     #=> 1000\n(-2**1000+1).bit_length   #=> 1000\n(-2**12-1).bit_length     #=> 13\n(-2**12).bit_length       #=> 12\n(-2**12+1).bit_length     #=> 12\n-0x101.bit_length         #=> 9\n-0x100.bit_length         #=> 8\n-0xff.bit_length          #=> 8\n-2.bit_length             #=> 1\n-1.bit_length             #=> 0\n0.bit_length              #=> 0\n1.bit_length              #=> 1\n0xff.bit_length           #=> 8\n0x100.bit_length          #=> 9\n(2**12-1).bit_length      #=> 12\n(2**12).bit_length        #=> 13\n(2**12+1).bit_length      #=> 13\n(2**1000-1).bit_length    #=> 1000\n(2**1000).bit_length      #=> 1001\n(2**1000+1).bit_length    #=> 1001\n```\n\nThis method can be used to detect overflow in\n[`Array#pack`](https://docs.ruby-lang.org/en/2.7.0/Array.html#method-i-pack)\nas follows:\n\n```ruby\nif n.bit_length < 32\n  [n].pack(\"l\") # no overflow\nelse\n  raise \"overflow\"\nend\n```"},"sortText":"000051","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"bit_length${0}"}},{"label":"ceil","kind":2,"detail":"Integer#ceil","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef ceil; end\n```\n\n---\n\nReturns the smallest number greater than or equal to `int` with a precision\nof `ndigits` decimal digits (default: 0).\n\nWhen the precision is negative, the returned value is an integer with at\nleast `ndigits.abs` trailing zeros.\n\nReturns `self` when `ndigits` is zero or positive.\n\n```ruby\n1.ceil           #=> 1\n1.ceil(2)        #=> 1\n18.ceil(-1)      #=> 20\n(-18).ceil(-1)   #=> -10\n```"},"sortText":"000052","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"ceil${0}"}},{"label":"ceil","kind":2,"detail":"Integer#ceil (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(digits: Integer).returns(Numeric)}\ndef ceil (overload.1)(digits=…); end\n```\n\n---\n\nReturns the smallest number greater than or equal to `int` with a precision\nof `ndigits` decimal digits (default: 0).\n\nWhen the precision is negative, the returned value is an integer with at\nleast `ndigits.abs` trailing zeros.\n\nReturns `self` when `ndigits` is zero or positive.\n\n```ruby\n1.ceil           #=> 1\n1.ceil(2)        #=> 1\n18.ceil(-1)      #=> 20\n(-18).ceil(-1)   #=> -10\n```"},"sortText":"000053","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"ceil${0}"}},{"label":"chr","kind":2,"detail":"Integer#chr","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(String)}\ndef chr; end\n```\n\n---\n\nReturns a string containing the character represented by the `int`'s value\naccording to `encoding`.\n\n```ruby\n65.chr    #=> \"A\"\n230.chr   #=> \"\\xE6\"\n255.chr(Encoding::UTF_8)   #=> \"\\u00FF\"\n```"},"sortText":"000054","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"chr${0}"}},{"label":"chr","kind":2,"detail":"Integer#chr (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Encoding, String)).returns(String)}\ndef chr (overload.1)(arg0=…); end\n```\n\n---\n\nReturns a string containing the character represented by the `int`'s value\naccording to `encoding`.\n\n```ruby\n65.chr    #=> \"A\"\n230.chr   #=> \"\\xE6\"\n255.chr(Encoding::UTF_8)   #=> \"\\u00FF\"\n```"},"sortText":"000055","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"chr${0}"}},{"label":"coerce","kind":2,"detail":"Integer#coerce","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: Numeric\n  )\n  .returns([T.any(Integer, Float, Rational, BigDecimal), T.any(Integer, Float, Rational, BigDecimal)])\nend\ndef coerce(arg0); end\n```\n\n---\n\nReturns an array with both a `numeric` and a `big` represented as Bignum\nobjects.\n\nThis is achieved by converting `numeric` to a Bignum.\n\nA [`TypeError`](https://docs.ruby-lang.org/en/2.7.0/TypeError.html) is\nraised if the `numeric` is not a Fixnum or Bignum type.\n\n```ruby\n(0x3FFFFFFFFFFFFFFF+1).coerce(42)   #=> [42, 4611686018427387904]\n```"},"sortText":"000056","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"coerce${0}"}},{"label":"conj","kind":2,"detail":"Integer#conj","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef conj; end\n```"},"sortText":"000057","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"conj${0}"}},{"label":"conjugate","kind":2,"detail":"Integer#conjugate","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef conjugate; end\n```"},"sortText":"000058","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"conjugate${0}"}},{"label":"denominator","kind":2,"detail":"Integer#denominator","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef denominator; end\n```\n\n---\n\nReturns 1."},"sortText":"000059","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"denominator${0}"}},{"label":"digits","kind":2,"detail":"Integer#digits","documentation":{"kind":"markdown","value":"```ruby\nsig {params(_: T.untyped).returns(T.untyped)}\ndef digits(*_); end\n```\n\n---\n\nReturns the digits of `int`'s place-value representation with radix `base`\n(default: 10). The digits are returned as an array with the least\nsignificant digit as the first array element.\n\n`base` must be greater than or equal to 2.\n\n```ruby\n12345.digits      #=> [5, 4, 3, 2, 1]\n12345.digits(7)   #=> [4, 6, 6, 0, 5]\n12345.digits(100) #=> [45, 23, 1]\n\n-12345.digits(7)  #=> Math::DomainError\n```"},"sortText":"000060","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"digits${0}"}},{"label":"div","kind":2,"detail":"Integer#div","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Integer)}\ndef div(arg0); end\n```\n\n---\n\nPerforms integer division: returns the integer result of dividing `int` by\n`numeric`."},"sortText":"000061","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"div${0}"}},{"label":"div","kind":2,"detail":"Integer#div (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Float).returns(Integer)}\ndef div (overload.1)(arg0); end\n```\n\n---\n\nPerforms integer division: returns the integer result of dividing `int` by\n`numeric`."},"sortText":"000062","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"div${0}"}},{"label":"div","kind":2,"detail":"Integer#div (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Rational).returns(Integer)}\ndef div (overload.2)(arg0); end\n```\n\n---\n\nPerforms integer division: returns the integer result of dividing `int` by\n`numeric`."},"sortText":"000063","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"div${0}"}},{"label":"div","kind":2,"detail":"Integer#div (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BigDecimal).returns(Integer)}\ndef div (overload.3)(arg0); end\n```\n\n---\n\nPerforms integer division: returns the integer result of dividing `int` by\n`numeric`."},"sortText":"000064","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"div${0}"}},{"label":"divmod","kind":2,"detail":"Integer#divmod","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns([Integer, Integer])}\ndef divmod(arg0); end\n```\n\n---\n\nSee\n[`Numeric#divmod`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html#method-i-divmod)."},"sortText":"000065","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"divmod${0}"}},{"label":"divmod","kind":2,"detail":"Integer#divmod (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Float, Rational, BigDecimal)\n  )\n  .returns([T.any(Integer, Float, Rational, BigDecimal), T.any(Integer, Float, Rational, BigDecimal)])\nend\ndef divmod (overload.1)(arg0); end\n```\n\n---\n\nSee\n[`Numeric#divmod`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html#method-i-divmod)."},"sortText":"000066","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"divmod${0}"}},{"label":"downto","kind":2,"detail":"Integer#downto","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    limit: Integer,\n    blk: T.proc.params(arg0: Integer).returns(BasicObject)\n  )\n  .returns(Integer)\nend\ndef downto(limit, &blk); end\n```\n\n---\n\nIterates the given block, passing in decreasing values from `int` down to\nand including `limit`.\n\nIf no block is given, an\n[`Enumerator`](https://docs.ruby-lang.org/en/2.7.0/Enumerator.html) is\nreturned instead.\n\n```ruby\n5.downto(1) { |n| print n, \".. \" }\nputs \"Liftoff!\"\n#=> \"5.. 4.. 3.. 2.. 1.. Liftoff!\"\n```"},"sortText":"000067","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"downto${0}"}},{"label":"downto","kind":2,"detail":"Integer#downto (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(limit: Integer).returns(T::Enumerator[Integer])}\ndef downto (overload.1)(limit); end\n```\n\n---\n\nIterates the given block, passing in decreasing values from `int` down to\nand including `limit`.\n\nIf no block is given, an\n[`Enumerator`](https://docs.ruby-lang.org/en/2.7.0/Enumerator.html) is\nreturned instead.\n\n```ruby\n5.downto(1) { |n| print n, \".. \" }\nputs \"Liftoff!\"\n#=> \"5.. 4.. 3.. 2.. 1.. Liftoff!\"\n```"},"sortText":"000068","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"downto${0}"}},{"label":"eql?","kind":2,"detail":"Integer#eql?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Object).returns(T::Boolean)}\ndef eql?(arg0); end\n```"},"sortText":"000069","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"eql?${0}"}},{"label":"equal?","kind":2,"detail":"Integer#equal?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Object).returns(T::Boolean)}\ndef equal?(arg0); end\n```"},"sortText":"000070","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"equal?${0}"}},{"label":"even?","kind":2,"detail":"Integer#even?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef even?; end\n```\n\n---\n\nReturns `true` if `int` is an even number."},"sortText":"000071","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"even?${0}"}},{"label":"fdiv","kind":2,"detail":"Integer#fdiv","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Float)}\ndef fdiv(arg0); end\n```\n\n---\n\nReturns the floating point result of dividing `int` by `numeric`.\n\n```ruby\n654321.fdiv(13731)      #=> 47.652829364212366\n654321.fdiv(13731.24)   #=> 47.65199646936475\n-654321.fdiv(13731)     #=> -47.652829364212366\n```"},"sortText":"000072","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"fdiv${0}"}},{"label":"fdiv","kind":2,"detail":"Integer#fdiv (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Float).returns(Float)}\ndef fdiv (overload.1)(arg0); end\n```\n\n---\n\nReturns the floating point result of dividing `int` by `numeric`.\n\n```ruby\n654321.fdiv(13731)      #=> 47.652829364212366\n654321.fdiv(13731.24)   #=> 47.65199646936475\n-654321.fdiv(13731)     #=> -47.652829364212366\n```"},"sortText":"000073","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"fdiv${0}"}},{"label":"fdiv","kind":2,"detail":"Integer#fdiv (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Rational).returns(Float)}\ndef fdiv (overload.2)(arg0); end\n```\n\n---\n\nReturns the floating point result of dividing `int` by `numeric`.\n\n```ruby\n654321.fdiv(13731)      #=> 47.652829364212366\n654321.fdiv(13731.24)   #=> 47.65199646936475\n-654321.fdiv(13731)     #=> -47.652829364212366\n```"},"sortText":"000074","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"fdiv${0}"}},{"label":"fdiv","kind":2,"detail":"Integer#fdiv (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BigDecimal).returns(BigDecimal)}\ndef fdiv (overload.3)(arg0); end\n```\n\n---\n\nReturns the floating point result of dividing `int` by `numeric`.\n\n```ruby\n654321.fdiv(13731)      #=> 47.652829364212366\n654321.fdiv(13731.24)   #=> 47.65199646936475\n-654321.fdiv(13731)     #=> -47.652829364212366\n```"},"sortText":"000075","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"fdiv${0}"}},{"label":"fdiv","kind":2,"detail":"Integer#fdiv (overload.4)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Complex).returns(Complex)}\ndef fdiv (overload.4)(arg0); end\n```\n\n---\n\nReturns the floating point result of dividing `int` by `numeric`.\n\n```ruby\n654321.fdiv(13731)      #=> 47.652829364212366\n654321.fdiv(13731.24)   #=> 47.65199646936475\n-654321.fdiv(13731)     #=> -47.652829364212366\n```"},"sortText":"000076","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"fdiv${0}"}},{"label":"floor","kind":2,"detail":"Integer#floor","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef floor; end\n```\n\n---\n\nReturns the largest number less than or equal to `int` with a precision of\n`ndigits` decimal digits (default: 0).\n\nWhen the precision is negative, the returned value is an integer with at\nleast `ndigits.abs` trailing zeros.\n\nReturns `self` when `ndigits` is zero or positive.\n\n```ruby\n1.floor           #=> 1\n1.floor(2)        #=> 1\n18.floor(-1)      #=> 10\n(-18).floor(-1)   #=> -20\n```"},"sortText":"000077","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"floor${0}"}},{"label":"floor","kind":2,"detail":"Integer#floor (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(digits: Integer).returns(Numeric)}\ndef floor (overload.1)(digits=…); end\n```\n\n---\n\nReturns the largest number less than or equal to `int` with a precision of\n`ndigits` decimal digits (default: 0).\n\nWhen the precision is negative, the returned value is an integer with at\nleast `ndigits.abs` trailing zeros.\n\nReturns `self` when `ndigits` is zero or positive.\n\n```ruby\n1.floor           #=> 1\n1.floor(2)        #=> 1\n18.floor(-1)      #=> 10\n(-18).floor(-1)   #=> -20\n```"},"sortText":"000078","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"floor${0}"}},{"label":"gcd","kind":2,"detail":"Integer#gcd","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Integer)}\ndef gcd(arg0); end\n```\n\n---\n\nReturns the greatest common divisor of the two integers. The result is\nalways positive. 0.gcd(x) and x.gcd(0) return x.abs.\n\n```ruby\n36.gcd(60)                  #=> 12\n2.gcd(2)                    #=> 2\n3.gcd(-7)                   #=> 1\n((1<<31)-1).gcd((1<<61)-1)  #=> 1\n```"},"sortText":"000079","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"gcd${0}"}},{"label":"gcdlcm","kind":2,"detail":"Integer#gcdlcm","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns([Integer, Integer])}\ndef gcdlcm(arg0); end\n```\n\n---\n\nReturns an array with the greatest common divisor and the least common\nmultiple of the two integers, [gcd, lcm].\n\n```ruby\n36.gcdlcm(60)                  #=> [12, 180]\n2.gcdlcm(2)                    #=> [2, 2]\n3.gcdlcm(-7)                   #=> [1, 21]\n((1<<31)-1).gcdlcm((1<<61)-1)  #=> [1, 4951760154835678088235319297]\n```"},"sortText":"000080","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"gcdlcm${0}"}},{"label":"hash","kind":2,"detail":"Integer#hash","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef hash; end\n```"},"sortText":"000081","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"hash${0}"}},{"label":"imag","kind":2,"detail":"Integer#imag","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef imag; end\n```"},"sortText":"000082","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"imag${0}"}},{"label":"imaginary","kind":2,"detail":"Integer#imaginary","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef imaginary; end\n```"},"sortText":"000083","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"imaginary${0}"}},{"label":"inspect","kind":2,"detail":"Integer#inspect","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(String)}\ndef inspect; end\n```\n\n---\n\nAlias for:\n[`to_s`](https://docs.ruby-lang.org/en/2.7.0/Integer.html#method-i-to_s)"},"sortText":"000084","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"inspect${0}"}},{"label":"integer?","kind":2,"detail":"Integer#integer?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(TrueClass)}\ndef integer?; end\n```\n\n---\n\nSince `int` is already an\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html), this always\nreturns `true`."},"sortText":"000085","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"integer?${0}"}},{"label":"lcm","kind":2,"detail":"Integer#lcm","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Integer)}\ndef lcm(arg0); end\n```\n\n---\n\nReturns the least common multiple of the two integers. The result is always\npositive. 0.lcm(x) and x.lcm(0) return zero.\n\n```ruby\n36.lcm(60)                  #=> 180\n2.lcm(2)                    #=> 2\n3.lcm(-7)                   #=> 21\n((1<<31)-1).lcm((1<<61)-1)  #=> 4951760154835678088235319297\n```"},"sortText":"000086","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"lcm${0}"}},{"label":"magnitude","kind":2,"detail":"Integer#magnitude","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef magnitude; end\n```\n\n---\n\nReturns the absolute value of `int`.\n\n```ruby\n(-12345).abs   #=> 12345\n-12345.abs     #=> 12345\n12345.abs      #=> 12345\n```\n\n[`Integer#magnitude`](https://docs.ruby-lang.org/en/2.7.0/Integer.html#method-i-magnitude)\nis an alias for\n[`Integer#abs`](https://docs.ruby-lang.org/en/2.7.0/Integer.html#method-i-abs)."},"sortText":"000087","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"magnitude${0}"}},{"label":"modulo","kind":2,"detail":"Integer#modulo","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Integer)}\ndef modulo(arg0); end\n```\n\n---\n\nReturns `int` modulo `other`.\n\nSee\n[`Numeric#divmod`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html#method-i-divmod)\nfor more information."},"sortText":"000088","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"modulo${0}"}},{"label":"modulo","kind":2,"detail":"Integer#modulo (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Float).returns(Float)}\ndef modulo (overload.1)(arg0); end\n```\n\n---\n\nReturns `int` modulo `other`.\n\nSee\n[`Numeric#divmod`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html#method-i-divmod)\nfor more information."},"sortText":"000089","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"modulo${0}"}},{"label":"modulo","kind":2,"detail":"Integer#modulo (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Rational).returns(Rational)}\ndef modulo (overload.2)(arg0); end\n```\n\n---\n\nReturns `int` modulo `other`.\n\nSee\n[`Numeric#divmod`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html#method-i-divmod)\nfor more information."},"sortText":"000090","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"modulo${0}"}},{"label":"modulo","kind":2,"detail":"Integer#modulo (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BigDecimal).returns(BigDecimal)}\ndef modulo (overload.3)(arg0); end\n```\n\n---\n\nReturns `int` modulo `other`.\n\nSee\n[`Numeric#divmod`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html#method-i-divmod)\nfor more information."},"sortText":"000091","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"modulo${0}"}},{"label":"next","kind":2,"detail":"Integer#next","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef next; end\n```\n\n---\n\nReturns the successor of `int`, i.e. the\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html) equal to\n`int+1`.\n\n```ruby\n1.next      #=> 2\n(-1).next   #=> 0\n1.succ      #=> 2\n(-1).succ   #=> 0\n```"},"sortText":"000092","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"next${0}"}},{"label":"nobits?","kind":2,"detail":"Integer#nobits?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(_: T.untyped).returns(T.untyped)}\ndef nobits?(_); end\n```\n\n---\n\nReturns `true` if no bits of `int & mask` are 1."},"sortText":"000093","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"nobits?${0}"}},{"label":"numerator","kind":2,"detail":"Integer#numerator","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef numerator; end\n```\n\n---\n\nReturns self."},"sortText":"000094","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"numerator${0}"}},{"label":"odd?","kind":2,"detail":"Integer#odd?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef odd?; end\n```\n\n---\n\nReturns `true` if `int` is an odd number."},"sortText":"000095","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"odd?${0}"}},{"label":"ord","kind":2,"detail":"Integer#ord","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef ord; end\n```\n\n---\n\nReturns the `int` itself.\n\n```ruby\n97.ord   #=> 97\n```\n\nThis method is intended for compatibility to character literals in Ruby 1.9.\n\nFor example, `?a.ord` returns 97 both in 1.8 and 1.9."},"sortText":"000096","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"ord${0}"}},{"label":"phase","kind":2,"detail":"Integer#phase","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Numeric)}\ndef phase; end\n```"},"sortText":"000097","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"phase${0}"}},{"label":"pow","kind":2,"detail":"Integer#pow","documentation":{"kind":"markdown","value":"```ruby\nsig {params(_: T.untyped).returns(T.untyped)}\ndef pow(*_); end\n```\n\n---\n\nReturns (modular) exponentiation as:\n\n```ruby\na.pow(b)     #=> same as a**b\na.pow(b, m)  #=> same as (a**b) % m, but avoids huge temporary values\n```"},"sortText":"000098","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"pow${0}"}},{"label":"pred","kind":2,"detail":"Integer#pred","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef pred; end\n```\n\n---\n\nReturns the predecessor of `int`, i.e. the\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html) equal to\n`int-1`.\n\n```ruby\n1.pred      #=> 0\n(-1).pred   #=> -2\n```"},"sortText":"000099","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"pred${0}"}},{"label":"quo","kind":2,"detail":"Integer#quo","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Rational)}\ndef quo(arg0); end\n```"},"sortText":"000100","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"quo${0}"}},{"label":"quo","kind":2,"detail":"Integer#quo (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Float).returns(Float)}\ndef quo (overload.1)(arg0); end\n```"},"sortText":"000101","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"quo${0}"}},{"label":"quo","kind":2,"detail":"Integer#quo (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Rational).returns(Rational)}\ndef quo (overload.2)(arg0); end\n```"},"sortText":"000102","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"quo${0}"}},{"label":"quo","kind":2,"detail":"Integer#quo (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BigDecimal).returns(BigDecimal)}\ndef quo (overload.3)(arg0); end\n```"},"sortText":"000103","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"quo${0}"}},{"label":"quo","kind":2,"detail":"Integer#quo (overload.4)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Complex).returns(Complex)}\ndef quo (overload.4)(arg0); end\n```"},"sortText":"000104","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"quo${0}"}},{"label":"rationalize","kind":2,"detail":"Integer#rationalize","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Rational)}\ndef rationalize; end\n```\n\n---\n\nReturns the value as a rational. The optional argument `eps` is always\nignored."},"sortText":"000105","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"rationalize${0}"}},{"label":"rationalize","kind":2,"detail":"Integer#rationalize (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Numeric).returns(Rational)}\ndef rationalize (overload.1)(arg0=…); end\n```\n\n---\n\nReturns the value as a rational. The optional argument `eps` is always\nignored."},"sortText":"000106","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"rationalize${0}"}},{"label":"real","kind":2,"detail":"Integer#real","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef real; end\n```"},"sortText":"000107","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"real${0}"}},{"label":"real?","kind":2,"detail":"Integer#real?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(TrueClass)}\ndef real?; end\n```"},"sortText":"000108","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"real?${0}"}},{"label":"remainder","kind":2,"detail":"Integer#remainder","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Integer)}\ndef remainder(arg0); end\n```\n\n---\n\nReturns the remainder after dividing `int` by `numeric`.\n\n`x.remainder(y)` means `x-y*(x/y).truncate`.\n\n```ruby\n5.remainder(3)     #=> 2\n-5.remainder(3)    #=> -2\n5.remainder(-3)    #=> 2\n-5.remainder(-3)   #=> -2\n5.remainder(1.5)   #=> 0.5\n```\n\nSee\n[`Numeric#divmod`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html#method-i-divmod)."},"sortText":"000109","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"remainder${0}"}},{"label":"remainder","kind":2,"detail":"Integer#remainder (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Float).returns(Float)}\ndef remainder (overload.1)(arg0); end\n```\n\n---\n\nReturns the remainder after dividing `int` by `numeric`.\n\n`x.remainder(y)` means `x-y*(x/y).truncate`.\n\n```ruby\n5.remainder(3)     #=> 2\n-5.remainder(3)    #=> -2\n5.remainder(-3)    #=> 2\n-5.remainder(-3)   #=> -2\n5.remainder(1.5)   #=> 0.5\n```\n\nSee\n[`Numeric#divmod`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html#method-i-divmod)."},"sortText":"000110","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"remainder${0}"}},{"label":"remainder","kind":2,"detail":"Integer#remainder (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Rational).returns(Rational)}\ndef remainder (overload.2)(arg0); end\n```\n\n---\n\nReturns the remainder after dividing `int` by `numeric`.\n\n`x.remainder(y)` means `x-y*(x/y).truncate`.\n\n```ruby\n5.remainder(3)     #=> 2\n-5.remainder(3)    #=> -2\n5.remainder(-3)    #=> 2\n-5.remainder(-3)   #=> -2\n5.remainder(1.5)   #=> 0.5\n```\n\nSee\n[`Numeric#divmod`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html#method-i-divmod)."},"sortText":"000111","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"remainder${0}"}},{"label":"remainder","kind":2,"detail":"Integer#remainder (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BigDecimal).returns(BigDecimal)}\ndef remainder (overload.3)(arg0); end\n```\n\n---\n\nReturns the remainder after dividing `int` by `numeric`.\n\n`x.remainder(y)` means `x-y*(x/y).truncate`.\n\n```ruby\n5.remainder(3)     #=> 2\n-5.remainder(3)    #=> -2\n5.remainder(-3)    #=> 2\n-5.remainder(-3)   #=> -2\n5.remainder(1.5)   #=> 0.5\n```\n\nSee\n[`Numeric#divmod`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html#method-i-divmod)."},"sortText":"000112","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"remainder${0}"}},{"label":"round","kind":2,"detail":"Integer#round","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef round; end\n```\n\n---\n\nReturns `int` rounded to the nearest value with a precision of `ndigits`\ndecimal digits (default: 0).\n\nWhen the precision is negative, the returned value is an integer with at\nleast `ndigits.abs` trailing zeros.\n\nReturns `self` when `ndigits` is zero or positive.\n\n```ruby\n1.round           #=> 1\n1.round(2)        #=> 1\n15.round(-1)      #=> 20\n(-15).round(-1)   #=> -20\n```\n\nThe optional `half` keyword argument is available similar to\n[`Float#round`](https://docs.ruby-lang.org/en/2.7.0/Float.html#method-i-round).\n\n```ruby\n25.round(-1, half: :up)      #=> 30\n25.round(-1, half: :down)    #=> 20\n25.round(-1, half: :even)    #=> 20\n35.round(-1, half: :up)      #=> 40\n35.round(-1, half: :down)    #=> 30\n35.round(-1, half: :even)    #=> 40\n(-25).round(-1, half: :up)   #=> -30\n(-25).round(-1, half: :down) #=> -20\n(-25).round(-1, half: :even) #=> -20\n```"},"sortText":"000113","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"round${0}"}},{"label":"round","kind":2,"detail":"Integer#round (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Numeric).returns(Integer)}\ndef round (overload.1)(arg0=…); end\n```\n\n---\n\nReturns `int` rounded to the nearest value with a precision of `ndigits`\ndecimal digits (default: 0).\n\nWhen the precision is negative, the returned value is an integer with at\nleast `ndigits.abs` trailing zeros.\n\nReturns `self` when `ndigits` is zero or positive.\n\n```ruby\n1.round           #=> 1\n1.round(2)        #=> 1\n15.round(-1)      #=> 20\n(-15).round(-1)   #=> -20\n```\n\nThe optional `half` keyword argument is available similar to\n[`Float#round`](https://docs.ruby-lang.org/en/2.7.0/Float.html#method-i-round).\n\n```ruby\n25.round(-1, half: :up)      #=> 30\n25.round(-1, half: :down)    #=> 20\n25.round(-1, half: :even)    #=> 20\n35.round(-1, half: :up)      #=> 40\n35.round(-1, half: :down)    #=> 30\n35.round(-1, half: :even)    #=> 40\n(-25).round(-1, half: :up)   #=> -30\n(-25).round(-1, half: :down) #=> -20\n(-25).round(-1, half: :even) #=> -20\n```"},"sortText":"000114","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"round${0}"}},{"label":"size","kind":2,"detail":"Integer#size","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef size; end\n```\n\n---\n\nReturns the number of bytes in the machine representation of `int` (machine\ndependent).\n\n```ruby\n1.size               #=> 8\n-1.size              #=> 8\n2147483647.size      #=> 8\n(256**10 - 1).size   #=> 10\n(256**20 - 1).size   #=> 20\n(256**40 - 1).size   #=> 40\n```"},"sortText":"000115","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"size${0}"}},{"label":"succ","kind":2,"detail":"Integer#succ","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef succ; end\n```\n\n---\n\nReturns the successor of `int`, i.e. the\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html) equal to\n`int+1`.\n\n```ruby\n1.next      #=> 2\n(-1).next   #=> 0\n1.succ      #=> 2\n(-1).succ   #=> 0\n```"},"sortText":"000116","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"succ${0}"}},{"label":"times","kind":2,"detail":"Integer#times","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: Integer).returns(BasicObject)\n  )\n  .returns(Integer)\nend\ndef times(&blk); end\n```\n\n---\n\nIterates the given block `int` times, passing in values from zero to `int -\n1`.\n\nIf no block is given, an\n[`Enumerator`](https://docs.ruby-lang.org/en/2.7.0/Enumerator.html) is\nreturned instead.\n\n```ruby\n5.times {|i| print i, \" \" }   #=> 0 1 2 3 4\n```"},"sortText":"000117","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"times${0}"}},{"label":"times","kind":2,"detail":"Integer#times (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Enumerator[Integer])}\ndef times (overload.1); end\n```\n\n---\n\nIterates the given block `int` times, passing in values from zero to `int -\n1`.\n\nIf no block is given, an\n[`Enumerator`](https://docs.ruby-lang.org/en/2.7.0/Enumerator.html) is\nreturned instead.\n\n```ruby\n5.times {|i| print i, \" \" }   #=> 0 1 2 3 4\n```"},"sortText":"000118","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"times${0}"}},{"label":"to_c","kind":2,"detail":"Integer#to_c","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Complex)}\ndef to_c; end\n```"},"sortText":"000119","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"to_c${0}"}},{"label":"to_d","kind":2,"detail":"Integer#to_d","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(BigDecimal)}\ndef to_d; end\n```\n\n---\n\nReturns the value of `int` as a\n[`BigDecimal`](https://docs.ruby-lang.org/en/2.7.0/BigDecimal.html).\n\n```ruby\nrequire 'bigdecimal'\nrequire 'bigdecimal/util'\n\n42.to_d   # => 0.42e2\n```\n\nSee also\n[`BigDecimal::new`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html#method-c-new)."},"sortText":"000120","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"to_d${0}"}},{"label":"to_f","kind":2,"detail":"Integer#to_f","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Float)}\ndef to_f; end\n```\n\n---\n\nConverts `int` to a\n[`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html). If `int` doesn't\nfit in a [`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html), the\nresult is infinity."},"sortText":"000121","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"to_f${0}"}},{"label":"to_i","kind":2,"detail":"Integer#to_i","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef to_i; end\n```\n\n---\n\nSince `int` is already an\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html), returns\n`self`.\n\n[`to_int`](https://docs.ruby-lang.org/en/2.7.0/Integer.html#method-i-to_int)\nis an alias for\n[`to_i`](https://docs.ruby-lang.org/en/2.7.0/Integer.html#method-i-to_i)."},"sortText":"000122","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"to_i${0}"}},{"label":"to_int","kind":2,"detail":"Integer#to_int","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef to_int; end\n```\n\n---\n\nSince `int` is already an\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html), returns\n`self`.\n\n[`to_int`](https://docs.ruby-lang.org/en/2.7.0/Integer.html#method-i-to_int)\nis an alias for\n[`to_i`](https://docs.ruby-lang.org/en/2.7.0/Integer.html#method-i-to_i)."},"sortText":"000123","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"to_int${0}"}},{"label":"to_r","kind":2,"detail":"Integer#to_r","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Rational)}\ndef to_r; end\n```\n\n---\n\nReturns the value as a rational.\n\n```ruby\n1.to_r        #=> (1/1)\n(1<<64).to_r  #=> (18446744073709551616/1)\n```"},"sortText":"000124","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"to_r${0}"}},{"label":"to_s","kind":2,"detail":"Integer#to_s","documentation":{"kind":"markdown","value":"```ruby\nsig {params(base: Integer).returns(String)}\ndef to_s(base=…); end\n```\n\n---\n\nReturns a string containing the place-value representation of `int` with\nradix `base` (between 2 and 36).\n\n```ruby\n12345.to_s       #=> \"12345\"\n12345.to_s(2)    #=> \"11000000111001\"\n12345.to_s(8)    #=> \"30071\"\n12345.to_s(10)   #=> \"12345\"\n12345.to_s(16)   #=> \"3039\"\n12345.to_s(36)   #=> \"9ix\"\n78546939656932.to_s(36)  #=> \"rubyrules\"\n```\n\n\nAlso aliased as:\n[`inspect`](https://docs.ruby-lang.org/en/2.7.0/Integer.html#method-i-inspect)"},"sortText":"000125","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"to_s${0}"}},{"label":"truncate","kind":2,"detail":"Integer#truncate","documentation":{"kind":"markdown","value":"```ruby\nsig {params(ndigits: Integer).returns(Integer)}\ndef truncate(ndigits=…); end\n```\n\n---\n\nReturns `int` truncated (toward zero) to a precision of `ndigits` decimal\ndigits (default: 0).\n\nWhen the precision is negative, the returned value is an integer with at\nleast `ndigits.abs` trailing zeros.\n\nReturns `self` when `ndigits` is zero or positive.\n\n```ruby\n1.truncate           #=> 1\n1.truncate(2)        #=> 1\n18.truncate(-1)      #=> 10\n(-18).truncate(-1)   #=> -10\n```"},"sortText":"000126","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"truncate${0}"}},{"label":"upto","kind":2,"detail":"Integer#upto","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: Integer,\n    blk: T.proc.params(arg0: Integer).returns(BasicObject)\n  )\n  .returns(Integer)\nend\ndef upto(arg0, &blk); end\n```\n\n---\n\nIterates the given block, passing in integer values from `int` up to and\nincluding `limit`.\n\nIf no block is given, an\n[`Enumerator`](https://docs.ruby-lang.org/en/2.7.0/Enumerator.html) is\nreturned instead.\n\n```ruby\n5.upto(10) {|i| print i, \" \" }   #=> 5 6 7 8 9 10\n```"},"sortText":"000127","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"upto${0}"}},{"label":"upto","kind":2,"detail":"Integer#upto (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(T::Enumerator[Integer])}\ndef upto (overload.1)(arg0); end\n```\n\n---\n\nIterates the given block, passing in integer values from `int` up to and\nincluding `limit`.\n\nIf no block is given, an\n[`Enumerator`](https://docs.ruby-lang.org/en/2.7.0/Enumerator.html) is\nreturned instead.\n\n```ruby\n5.upto(10) {|i| print i, \" \" }   #=> 5 6 7 8 9 10\n```"},"sortText":"000128","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"upto${0}"}},{"label":"zero?","kind":2,"detail":"Integer#zero?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef zero?; end\n```"},"sortText":"000129","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"zero?${0}"}},{"label":"|","kind":2,"detail":"Integer#|","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Integer)}\ndef |(arg0); end\n```\n\n---\n\nBitwise OR."},"sortText":"000130","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"|${0}"}},{"label":"~","kind":2,"detail":"Integer#~","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef ~; end\n```\n\n---\n\nOne's complement: returns a number where each bit is flipped.\n\nInverts the bits in an\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html). As integers\nare conceptually of infinite length, the result acts as if it had an\ninfinite number of one bits to the left. In hex representations, this is\ndisplayed as two periods to the left of the digits.\n\n```ruby\nsprintf(\"%X\", ~0x1122334455)    #=> \"..FEEDDCCBBAA\"\n```"},"sortText":"000131","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"~${0}"}},{"label":"clone","kind":2,"detail":"Numeric#clone","documentation":{"kind":"markdown","value":"```ruby\nsig {params(_: T.untyped).returns(T.untyped)}\ndef clone(*_); end\n```\n\n---\n\nReturns the receiver. `freeze` cannot be `false`."},"sortText":"000132","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"clone${0}"}},{"label":"dup","kind":2,"detail":"Numeric#dup","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.untyped)}\ndef dup; end\n```\n\n---\n\nReturns the receiver."},"sortText":"000133","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"dup${0}"}},{"label":"finite?","kind":2,"detail":"Numeric#finite?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef finite?; end\n```\n\n---\n\nReturns `true` if `num` is a finite number, otherwise returns `false`."},"sortText":"000134","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"finite?${0}"}},{"label":"i","kind":2,"detail":"Numeric#i","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Complex)}\ndef i; end\n```\n\n---\n\nReturns the corresponding imaginary number. Not available for complex\nnumbers.\n\n```ruby\n-42.i  #=> (0-42i)\n2.0.i  #=> (0+2.0i)\n```"},"sortText":"000135","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"i${0}"}},{"label":"infinite?","kind":2,"detail":"Numeric#infinite?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(Integer))}\ndef infinite?; end\n```\n\n---\n\nReturns `nil`, -1, or 1 depending on whether the value is finite,\n`-Infinity`, or `+Infinity`."},"sortText":"000136","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"infinite?${0}"}},{"label":"negative?","kind":2,"detail":"Numeric#negative?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef negative?; end\n```\n\n---\n\nReturns `true` if `num` is less than 0."},"sortText":"000137","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"negative?${0}"}},{"label":"nonzero?","kind":2,"detail":"Numeric#nonzero?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(Integer))}\ndef nonzero?; end\n```\n\n---\n\nReturns `self` if `num` is not zero, `nil` otherwise.\n\nThis behavior is useful when chaining comparisons:\n\n```ruby\na = %w( z Bb bB bb BB a aA Aa AA A )\nb = a.sort {|a,b| (a.downcase <=> b.downcase).nonzero? || a <=> b }\nb   #=> [\"A\", \"a\", \"AA\", \"Aa\", \"aA\", \"BB\", \"Bb\", \"bB\", \"bb\", \"z\"]\n```"},"sortText":"000138","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"nonzero?${0}"}},{"label":"polar","kind":2,"detail":"Numeric#polar","documentation":{"kind":"markdown","value":"```ruby\nsig {returns([Numeric, Numeric])}\ndef polar; end\n```\n\n---\n\nReturns an array; [num.abs, num.arg]."},"sortText":"000139","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"polar${0}"}},{"label":"positive?","kind":2,"detail":"Numeric#positive?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef positive?; end\n```\n\n---\n\nReturns `true` if `num` is greater than 0."},"sortText":"000140","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"positive?${0}"}},{"label":"rect","kind":2,"detail":"Numeric#rect","documentation":{"kind":"markdown","value":"```ruby\nsig {returns([Numeric, Numeric])}\ndef rect; end\n```\n\n---\n\nReturns an array; [num, 0]."},"sortText":"000141","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"rect${0}"}},{"label":"rectangular","kind":2,"detail":"Numeric#rectangular","documentation":{"kind":"markdown","value":"```ruby\nsig {returns([Numeric, Numeric])}\ndef rectangular; end\n```\n\n---\n\nReturns an array; [num, 0]."},"sortText":"000142","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"rectangular${0}"}},{"label":"singleton_method_added","kind":2,"detail":"Numeric#singleton_method_added","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(TypeError)}\ndef singleton_method_added(arg0); end\n```"},"sortText":"000143","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"singleton_method_added${0}"}},{"label":"step","kind":2,"detail":"Numeric#step","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    limit: T.nilable(Numeric),\n    step: Numeric,\n    blk: T.proc.params(arg0: Numeric).returns(BasicObject)\n  )\n  .returns(Numeric)\nend\ndef step(limit=…, step=…, &blk); end\n```\n\n---\n\nInvokes the given block with the sequence of numbers starting at `num`,\nincremented by `step` (defaulted to `1`) on each call.\n\nThe loop finishes when the value to be passed to the block is greater than\n`limit` (if `step` is positive) or less than `limit` (if `step` is\nnegative), where `limit` is defaulted to infinity.\n\nIn the recommended keyword argument style, either or both of `step` and\n`limit` (default infinity) can be omitted. In the fixed position argument\nstyle, zero as a step (i.e. `num.step(limit, 0)`) is not allowed for\nhistorical compatibility reasons.\n\nIf all the arguments are integers, the loop operates using an integer\ncounter.\n\nIf any of the arguments are floating point numbers, all are converted to\nfloats, and the loop is executed *floor(n + n\\*Float::EPSILON) + 1* times,\nwhere *n = (limit - num)/step*.\n\nOtherwise, the loop starts at `num`, uses either the less-than (`<`) or\ngreater-than (`>`) operator to compare the counter against `limit`, and\nincrements itself using the `+` operator.\n\nIf no block is given, an\n[`Enumerator`](https://docs.ruby-lang.org/en/2.7.0/Enumerator.html) is\nreturned instead. Especially, the enumerator is an\n[`Enumerator::ArithmeticSequence`](https://docs.ruby-lang.org/en/2.7.0/Enumerator/ArithmeticSequence.html)\nif both `limit` and `step` are kind of\n[`Numeric`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html) or `nil`.\n\nFor example:\n\n```ruby\np 1.step.take(4)\np 10.step(by: -1).take(4)\n3.step(to: 5) {|i| print i, \" \" }\n1.step(10, 2) {|i| print i, \" \" }\nMath::E.step(to: Math::PI, by: 0.2) {|f| print f, \" \" }\n```\n\nWill produce:\n\n```\n[1, 2, 3, 4]\n[10, 9, 8, 7]\n3 4 5\n1 3 5 7 9\n2.718281828459045 2.9182818284590453 3.118281828459045\n```"},"sortText":"000144","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"step${0}"}},{"label":"step","kind":2,"detail":"Numeric#step (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    limit: T.nilable(Numeric),\n    step: Numeric\n  )\n  .returns(T::Enumerator[Numeric])\nend\ndef step (overload.1)(limit=…, step=…); end\n```\n\n---\n\nInvokes the given block with the sequence of numbers starting at `num`,\nincremented by `step` (defaulted to `1`) on each call.\n\nThe loop finishes when the value to be passed to the block is greater than\n`limit` (if `step` is positive) or less than `limit` (if `step` is\nnegative), where `limit` is defaulted to infinity.\n\nIn the recommended keyword argument style, either or both of `step` and\n`limit` (default infinity) can be omitted. In the fixed position argument\nstyle, zero as a step (i.e. `num.step(limit, 0)`) is not allowed for\nhistorical compatibility reasons.\n\nIf all the arguments are integers, the loop operates using an integer\ncounter.\n\nIf any of the arguments are floating point numbers, all are converted to\nfloats, and the loop is executed *floor(n + n\\*Float::EPSILON) + 1* times,\nwhere *n = (limit - num)/step*.\n\nOtherwise, the loop starts at `num`, uses either the less-than (`<`) or\ngreater-than (`>`) operator to compare the counter against `limit`, and\nincrements itself using the `+` operator.\n\nIf no block is given, an\n[`Enumerator`](https://docs.ruby-lang.org/en/2.7.0/Enumerator.html) is\nreturned instead. Especially, the enumerator is an\n[`Enumerator::ArithmeticSequence`](https://docs.ruby-lang.org/en/2.7.0/Enumerator/ArithmeticSequence.html)\nif both `limit` and `step` are kind of\n[`Numeric`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html) or `nil`.\n\nFor example:\n\n```ruby\np 1.step.take(4)\np 10.step(by: -1).take(4)\n3.step(to: 5) {|i| print i, \" \" }\n1.step(10, 2) {|i| print i, \" \" }\nMath::E.step(to: Math::PI, by: 0.2) {|f| print f, \" \" }\n```\n\nWill produce:\n\n```\n[1, 2, 3, 4]\n[10, 9, 8, 7]\n3 4 5\n1 3 5 7 9\n2.718281828459045 2.9182818284590453 3.118281828459045\n```"},"sortText":"000145","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"step${0}"}},{"label":"truncate","kind":2,"detail":"Numeric#truncate (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(T.any(Integer, Float))}\ndef truncate (overload.1)(arg0=…); end\n```\n\n---\n\nReturns `num` truncated (toward zero) to a precision of `ndigits` decimal\ndigits (default: 0).\n\n[`Numeric`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html) implements\nthis by converting its value to a\n[`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html) and invoking\n[`Float#truncate`](https://docs.ruby-lang.org/en/2.7.0/Float.html#method-i-truncate)."},"sortText":"000146","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"truncate${0}"}},{"label":"between?","kind":2,"detail":"Comparable#between?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(min: T.untyped, max: T.untyped).returns(T::Boolean)}\ndef between?(min, max); end\n```\n\n---\n\nReturns `false` if *obj* `<=>` *min* is less than zero or if *obj* `<=>`\n*max* is greater than zero, `true` otherwise.\n\n```ruby\n3.between?(1, 5)               #=> true\n6.between?(1, 5)               #=> false\n'cat'.between?('ant', 'dog')   #=> true\n'gnu'.between?('ant', 'dog')   #=> false\n```"},"sortText":"000147","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"between?${0}"}},{"label":"clamp","kind":2,"detail":"Comparable#clamp","documentation":{"kind":"markdown","value":"```ruby\nsig {params(s: T::Range[T.untyped]).returns(T.untyped)}\ndef clamp(s); end\n```\n\n---\n\nIn `(min, max)` form, returns *min* if *obj* `<=>` *min* is less than zero,\n*max* if *obj* `<=>` *max* is greater than zero, and *obj* otherwise.\n\n```ruby\n12.clamp(0, 100)         #=> 12\n523.clamp(0, 100)        #=> 100\n-3.123.clamp(0, 100)     #=> 0\n\n'd'.clamp('a', 'f')      #=> 'd'\n'z'.clamp('a', 'f')      #=> 'f'\n```\n\nIn `(range)` form, returns *range.begin* if *obj* `<=>` *range.begin* is\nless than zero, *range.end* if *obj* `<=>` *range.end* is greater than zero,\nand *obj* otherwise.\n\n```ruby\n12.clamp(0..100)         #=> 12\n523.clamp(0..100)        #=> 100\n-3.123.clamp(0..100)     #=> 0\n\n'd'.clamp('a'..'f')      #=> 'd'\n'z'.clamp('a'..'f')      #=> 'f'\n```\n\nIf *range.begin* is `nil`, it is considered smaller than *obj*, and if\n*range.end* is `nil`, it is considered greater than *obj*.\n\n```ruby\n-20.clamp(0..)           #=> 0\n523.clamp(..100)         #=> 100\n```\n\nWhen *range.end* is excluded and not `nil`, an exception is raised.\n\n```ruby\n100.clamp(0...100)       # ArgumentError\n```"},"sortText":"000148","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"clamp${0}"}},{"label":"clamp","kind":2,"detail":"Comparable#clamp (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(s: T.untyped, e: T.untyped).returns(T.untyped)}\ndef clamp (overload.1)(s, e); end\n```\n\n---\n\nIn `(min, max)` form, returns *min* if *obj* `<=>` *min* is less than zero,\n*max* if *obj* `<=>` *max* is greater than zero, and *obj* otherwise.\n\n```ruby\n12.clamp(0, 100)         #=> 12\n523.clamp(0, 100)        #=> 100\n-3.123.clamp(0, 100)     #=> 0\n\n'd'.clamp('a', 'f')      #=> 'd'\n'z'.clamp('a', 'f')      #=> 'f'\n```\n\nIn `(range)` form, returns *range.begin* if *obj* `<=>` *range.begin* is\nless than zero, *range.end* if *obj* `<=>` *range.end* is greater than zero,\nand *obj* otherwise.\n\n```ruby\n12.clamp(0..100)         #=> 12\n523.clamp(0..100)        #=> 100\n-3.123.clamp(0..100)     #=> 0\n\n'd'.clamp('a'..'f')      #=> 'd'\n'z'.clamp('a'..'f')      #=> 'f'\n```\n\nIf *range.begin* is `nil`, it is considered smaller than *obj*, and if\n*range.end* is `nil`, it is considered greater than *obj*.\n\n```ruby\n-20.clamp(0..)           #=> 0\n523.clamp(..100)         #=> 100\n```\n\nWhen *range.end* is excluded and not `nil`, an exception is raised.\n\n```ruby\n100.clamp(0...100)       # ArgumentError\n```"},"sortText":"000149","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"clamp${0}"}},{"label":"class","kind":2,"detail":"Object#class","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.untyped)}\ndef class; end\n```"},"sortText":"000150","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"class${0}"}},{"label":"singleton_class","kind":2,"detail":"Object#singleton_class","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.untyped)}\ndef singleton_class; end\n```"},"sortText":"000151","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"singleton_class${0}"}},{"label":"!~","kind":2,"detail":"Kernel#!~","documentation":{"kind":"markdown","value":"```ruby\nsig {params(other: BasicObject).returns(T::Boolean)}\ndef !~(other); end\n```"},"sortText":"000152","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"!~${0}"}},{"label":"=~","kind":2,"detail":"Kernel#=~","documentation":{"kind":"markdown","value":"```ruby\nsig {params(other: BasicObject).returns(NilClass)}\ndef =~(other); end\n```"},"sortText":"000153","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"=~${0}"}},{"label":"Array","kind":2,"detail":"Kernel#Array","documentation":{"kind":"markdown","value":"```ruby\nsig {params(x: NilClass).returns(T::Array[T.untyped])}\ndef Array(x); end\n```\n\n---\n\nReturns `arg` as an\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html).\n\nFirst tries to call `to_ary` on `arg`, then `to_a`. If `arg` does not\nrespond to `to_ary` or `to_a`, returns an\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of length 1\ncontaining `arg`.\n\nIf `to_ary` or `to_a` returns something other than an\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html), raises a\n[`TypeError`](https://docs.ruby-lang.org/en/2.7.0/TypeError.html).\n\n```ruby\nArray([\"a\", \"b\"])  #=> [\"a\", \"b\"]\nArray(1..5)        #=> [1, 2, 3, 4, 5]\nArray(key: :value) #=> [[:key, :value]]\nArray(nil)         #=> []\nArray(1)           #=> [1]\n```"},"sortText":"000154","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"Array${0}"}},{"label":"Array","kind":2,"detail":"Kernel#Array (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: T.nilable(T.any(T::Enumerable[T.type_parameter(:Elem)], T.type_parameter(:Elem)))\n  )\n  .returns(T::Array[T.type_parameter(:Elem)])\nend\ndef Array (overload.1)(x); end\n```\n\n---\n\nReturns `arg` as an\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html).\n\nFirst tries to call `to_ary` on `arg`, then `to_a`. If `arg` does not\nrespond to `to_ary` or `to_a`, returns an\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html) of length 1\ncontaining `arg`.\n\nIf `to_ary` or `to_a` returns something other than an\n[`Array`](https://docs.ruby-lang.org/en/2.7.0/Array.html), raises a\n[`TypeError`](https://docs.ruby-lang.org/en/2.7.0/TypeError.html).\n\n```ruby\nArray([\"a\", \"b\"])  #=> [\"a\", \"b\"]\nArray(1..5)        #=> [1, 2, 3, 4, 5]\nArray(key: :value) #=> [[:key, :value]]\nArray(nil)         #=> []\nArray(1)           #=> [1]\n```"},"sortText":"000155","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"Array${0}"}},{"label":"BigDecimal","kind":2,"detail":"Kernel#BigDecimal","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    initial: T.any(Integer, Float, Rational, BigDecimal, String),\n    digits: Integer,\n    exception: T::Boolean\n  )\n  .returns(BigDecimal)\nend\ndef BigDecimal(initial, digits=…, exception: …); end\n```\n\n---\n\n```\nReturns the \\BigDecimal converted from +value+\nwith a precision of +ndigits+ decimal digits.\n\nWhen +ndigits+ is less than the number of significant digits\nin the value, the result is rounded to that number of digits,\naccording to the current rounding mode; see BigDecimal.mode.\n```\n\nReturns `value` converted to a\n[`BigDecimal`](https://docs.ruby-lang.org/en/2.7.0/BigDecimal.html),\ndepending on the type of `value`:\n\n*   [`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html),\n    [`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html),\n    [`Rational`](https://docs.ruby-lang.org/en/2.7.0/Rational.html),\n    [`Complex`](https://docs.ruby-lang.org/en/2.7.0/Complex.html), or\n    BigDecimal: converted directly:\n\n```ruby\n# Integer, Complex, or BigDecimal value does not require ndigits; ignored if given.\nBigDecimal(2)                     # => 0.2e1\nBigDecimal(Complex(2, 0))         # => 0.2e1\nBigDecimal(BigDecimal(2))         # => 0.2e1\n# Float or Rational value requires ndigits.\nBigDecimal(2.0, 0)                # => 0.2e1\nBigDecimal(Rational(2, 1), 0)     # => 0.2e1\n```\n\n*   String: converted by parsing if it contains an integer or floating-point\n    literal; leading and trailing whitespace is ignored:\n\n```ruby\n# String does not require ndigits; ignored if given.\nBigDecimal('2')     # => 0.2e1\nBigDecimal('2.0')   # => 0.2e1\nBigDecimal('0.2e1') # => 0.2e1\nBigDecimal(' 2.0 ') # => 0.2e1\n```\n\n*   Other type that responds to method `:to_str`: first converted to a\n    string, then converted to a\n    [`BigDecimal`](https://docs.ruby-lang.org/en/2.7.0/BigDecimal.html), as\n    above.\n\n*   Other type:\n\n    *   Raises an exception if keyword argument `exception` is `true`.\n    *   Returns `nil` if keyword argument `exception` is `true`.\n\n\n\nRaises an exception if `value` evaluates to a\n[`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html) and `digits` is\nlarger than Float::DIG + 1."},"sortText":"000156","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"BigDecimal${0}"}},{"label":"Complex","kind":2,"detail":"Kernel#Complex","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: T.any(Numeric, String),\n    y: T.any(Numeric, String),\n    exception: T::Boolean\n  )\n  .returns(Complex)\nend\ndef Complex(x, y=…, exception: …); end\n```\n\n---\n\nReturns x+i\\*y;\n\n```ruby\nComplex(1, 2)    #=> (1+2i)\nComplex('1+2i')  #=> (1+2i)\nComplex(nil)     #=> TypeError\nComplex(1, nil)  #=> TypeError\n\nComplex(1, nil, exception: false)  #=> nil\nComplex('1+2', exception: false)   #=> nil\n```\n\nSyntax of string form:\n\n```\nstring form = extra spaces , complex , extra spaces ;\ncomplex = real part | [ sign ] , imaginary part\n        | real part , sign , imaginary part\n        | rational , \"@\" , rational ;\nreal part = rational ;\nimaginary part = imaginary unit | unsigned rational , imaginary unit ;\nrational = [ sign ] , unsigned rational ;\nunsigned rational = numerator | numerator , \"/\" , denominator ;\nnumerator = integer part | fractional part | integer part , fractional part ;\ndenominator = digits ;\ninteger part = digits ;\nfractional part = \".\" , digits , [ ( \"e\" | \"E\" ) , [ sign ] , digits ] ;\nimaginary unit = \"i\" | \"I\" | \"j\" | \"J\" ;\nsign = \"-\" | \"+\" ;\ndigits = digit , { digit | \"_\" , digit };\ndigit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\nextra spaces = ? \\s* ? ;\n```\n\nSee\n[`String#to_c`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_c)."},"sortText":"000157","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"Complex${0}"}},{"label":"Float","kind":2,"detail":"Kernel#Float","documentation":{"kind":"markdown","value":"```ruby\nsig {params(x: T.any(Numeric, String), exception: T::Boolean).returns(Float)}\ndef Float(x, exception: …); end\n```\n\n---\n\nReturns *arg* converted to a float.\n[`Numeric`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html) types are\nconverted directly, and with exception to\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) and `nil` the\nrest are converted using *arg*`.to_f`. Converting a\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) with invalid\ncharacters will result in a\n[`ArgumentError`](https://docs.ruby-lang.org/en/2.7.0/ArgumentError.html).\nConverting `nil` generates a\n[`TypeError`](https://docs.ruby-lang.org/en/2.7.0/TypeError.html).\nExceptions can be suppressed by passing `exception: false`.\n\n```ruby\nFloat(1)                 #=> 1.0\nFloat(\"123.456\")         #=> 123.456\nFloat(\"123.0_badstring\") #=> ArgumentError: invalid value for Float(): \"123.0_badstring\"\nFloat(nil)               #=> TypeError: can't convert nil into Float\nFloat(\"123.0_badstring\", exception: false)  #=> nil\n```"},"sortText":"000158","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"Float${0}"}},{"label":"Hash","kind":2,"detail":"Kernel#Hash","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: Object\n  )\n  .returns(T::Hash[T.type_parameter(:K), T.type_parameter(:V)])\nend\ndef Hash(x); end\n```\n\n---\n\nConverts *arg* to a [`Hash`](https://docs.ruby-lang.org/en/2.7.0/Hash.html)\nby calling *arg*`.to_hash`. Returns an empty\n[`Hash`](https://docs.ruby-lang.org/en/2.7.0/Hash.html) when *arg* is `nil`\nor `[]`.\n\n```ruby\nHash([])          #=> {}\nHash(nil)         #=> {}\nHash(key: :value) #=> {:key => :value}\nHash([1, 2, 3])   #=> TypeError\n```"},"sortText":"000159","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"Hash${0}"}},{"label":"Integer","kind":2,"detail":"Kernel#Integer","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg: T.any(Numeric, String),\n    base: Integer,\n    exception: T::Boolean\n  )\n  .returns(Integer)\nend\ndef Integer(arg, base=…, exception: …); end\n```\n\n---\n\nConverts *arg* to an\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html).\n[`Numeric`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html) types are\nconverted directly (with floating point numbers being truncated). *base* (0,\nor between 2 and 36) is a base for integer string representation. If *arg*\nis a [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html), when\n*base* is omitted or equals zero, radix indicators (`0`, `0b`, and `0x`) are\nhonored. In any case, strings should consist only of one or more digits,\nexcept for that a sign, one underscore between two digits, and\nleading/trailing spaces are optional. This behavior is different from that\nof\n[`String#to_i`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_i).\nNon string values will be converted by first trying `to_int`, then `to_i`.\n\nPassing `nil` raises a\n[`TypeError`](https://docs.ruby-lang.org/en/2.7.0/TypeError.html), while\npassing a [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) that\ndoes not conform with numeric representation raises an\n[`ArgumentError`](https://docs.ruby-lang.org/en/2.7.0/ArgumentError.html).\nThis behavior can be altered by passing `exception: false`, in this case a\nnot convertible value will return `nil`.\n\n```ruby\nInteger(123.999)    #=> 123\nInteger(\"0x1a\")     #=> 26\nInteger(Time.new)   #=> 1204973019\nInteger(\"0930\", 10) #=> 930\nInteger(\"111\", 2)   #=> 7\nInteger(\" +1_0 \")   #=> 10\nInteger(nil)        #=> TypeError: can't convert nil into Integer\nInteger(\"x\")        #=> ArgumentError: invalid value for Integer(): \"x\"\n\nInteger(\"x\", exception: false)        #=> nil\n```"},"sortText":"000160","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"Integer${0}"}},{"label":"Pathname","kind":2,"detail":"Kernel#Pathname","documentation":{"kind":"markdown","value":"```ruby\nsig {params(path: T.any(String, Pathname)).returns(Pathname)}\ndef Pathname(path); end\n```\n\n---\n\nCreates a new\n[`Pathname`](https://docs.ruby-lang.org/en/2.7.0/Pathname.html) object from\nthe given string, `path`, and returns pathname object.\n\nIn order to use this constructor, you must first require the\n[`Pathname`](https://docs.ruby-lang.org/en/2.7.0/Pathname.html) standard\nlibrary extension.\n\n```ruby\nrequire 'pathname'\nPathname(\"/home/zzak\")\n#=> #<Pathname:/home/zzak>\n```\n\nSee also\n[`Pathname::new`](https://docs.ruby-lang.org/en/2.7.0/Pathname.html#method-c-new)\nfor more information."},"sortText":"000161","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"Pathname${0}"}},{"label":"Rational","kind":2,"detail":"Kernel#Rational","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: Object,\n    y: T.any(Numeric, String),\n    exception: T::Boolean\n  )\n  .returns(Rational)\nend\ndef Rational(x, y=…, exception: …); end\n```\n\n---\n\nReturns `x/y` or `arg` as a\n[`Rational`](https://docs.ruby-lang.org/en/2.7.0/Rational.html).\n\n```ruby\nRational(2, 3)   #=> (2/3)\nRational(5)      #=> (5/1)\nRational(0.5)    #=> (1/2)\nRational(0.3)    #=> (5404319552844595/18014398509481984)\n\nRational(\"2/3\")  #=> (2/3)\nRational(\"0.3\")  #=> (3/10)\n\nRational(\"10 cents\")  #=> ArgumentError\nRational(nil)         #=> TypeError\nRational(1, nil)      #=> TypeError\n\nRational(\"10 cents\", exception: false)  #=> nil\n```\n\nSyntax of the string form:\n\n```\nstring form = extra spaces , rational , extra spaces ;\nrational = [ sign ] , unsigned rational ;\nunsigned rational = numerator | numerator , \"/\" , denominator ;\nnumerator = integer part | fractional part | integer part , fractional part ;\ndenominator = digits ;\ninteger part = digits ;\nfractional part = \".\" , digits , [ ( \"e\" | \"E\" ) , [ sign ] , digits ] ;\nsign = \"-\" | \"+\" ;\ndigits = digit , { digit | \"_\" , digit } ;\ndigit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\nextra spaces = ? \\s* ? ;\n```\n\nSee also\n[`String#to_r`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_r)."},"sortText":"000162","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"Rational${0}"}},{"label":"String","kind":2,"detail":"Kernel#String","documentation":{"kind":"markdown","value":"```ruby\nsig {params(x: Object).returns(String)}\ndef String(x); end\n```\n\n---\n\nReturns *arg* as a\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html).\n\nFirst tries to call its `to_str` method, then its `to_s` method.\n\n```ruby\nString(self)        #=> \"main\"\nString(self.class)  #=> \"Object\"\nString(123456)      #=> \"123456\"\n```"},"sortText":"000163","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"String${0}"}},{"label":"URI","kind":2,"detail":"Kernel#URI","documentation":{"kind":"markdown","value":"```ruby\nsig {params(uri: T.any(URI::Generic, String)).returns(URI::Generic)}\ndef URI(uri); end\n```\n\n---\n\nReturns `uri` converted to an\n[`URI`](https://docs.ruby-lang.org/en/2.7.0/URI.html) object."},"sortText":"000164","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"URI${0}"}},{"label":"__callee__","kind":2,"detail":"Kernel#__callee__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(Symbol))}\ndef __callee__; end\n```\n\n---\n\nReturns the called name of the current method as a\n[`Symbol`](https://docs.ruby-lang.org/en/2.7.0/Symbol.html). If called\noutside of a method, it returns `nil`."},"sortText":"000165","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"__callee__${0}"}},{"label":"__dir__","kind":2,"detail":"Kernel#__dir__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(String))}\ndef __dir__; end\n```\n\n---\n\nReturns the canonicalized absolute path of the directory of the file from\nwhich this method is called. It means symlinks in the path is resolved. If\n`__FILE__` is `nil`, it returns `nil`. The return value equals to\n`File.dirname(File.realpath(__FILE__))`."},"sortText":"000166","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"__dir__${0}"}},{"label":"__method__","kind":2,"detail":"Kernel#__method__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(Symbol))}\ndef __method__; end\n```\n\n---\n\nReturns the name at the definition of the current method as a\n[`Symbol`](https://docs.ruby-lang.org/en/2.7.0/Symbol.html). If called\noutside of a method, it returns `nil`."},"sortText":"000167","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"__method__${0}"}},{"label":"`","kind":2,"detail":"Kernel#`","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String).returns(String)}\ndef `(arg0); end\n```\n\n---\n\nReturns the standard output of running *cmd* in a subshell. The built-in\nsyntax `%x{...}` uses this method. Sets `$?` to the process status.\n\n```ruby\n`date`                   #=> \"Wed Apr  9 08:56:30 CDT 2003\\n\"\n`ls testdir`.split[1]    #=> \"main.rb\"\n`echo oops && exit 99`   #=> \"oops\\n\"\n$?.exitstatus            #=> 99\n```"},"sortText":"000168","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"`${0}"}},{"label":"abort","kind":2,"detail":"Kernel#abort","documentation":{"kind":"markdown","value":"```ruby\nsig {params(msg: String).returns(T.noreturn)}\ndef abort(msg=…); end\n```\n\n---\n\nTerminate execution immediately, effectively by calling\n`Kernel.exit(false)`. If *msg* is given, it is written to STDERR prior to\nterminating."},"sortText":"000169","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"abort${0}"}},{"label":"at_exit","kind":2,"detail":"Kernel#at_exit","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.proc.returns(BasicObject)).returns(Proc)}\ndef at_exit(&blk); end\n```\n\n---\n\nConverts *block* to a `Proc` object (and therefore binds it at the point of\ncall) and registers it for execution when the program exits. If multiple\nhandlers are registered, they are executed in reverse order of registration.\n\n```ruby\ndef do_at_exit(str1)\n  at_exit { print str1 }\nend\nat_exit { puts \"cruel world\" }\ndo_at_exit(\"goodbye \")\nexit\n```\n\n*produces:*\n\n```ruby\ngoodbye cruel world\n```"},"sortText":"000170","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"at_exit${0}"}},{"label":"autoload","kind":2,"detail":"Kernel#autoload","documentation":{"kind":"markdown","value":"```ruby\nsig {params(_module: T.any(String, Symbol), filename: String).returns(NilClass)}\ndef autoload(_module, filename); end\n```\n\n---\n\nRegisters *filename* to be loaded (using Kernel::require) the first time\nthat *module* (which may be a\n[`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) or a symbol) is\naccessed.\n\n```ruby\nautoload(:MyModule, \"/usr/local/lib/modules/my_module.rb\")\n```"},"sortText":"000171","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"autoload${0}"}},{"label":"autoload?","kind":2,"detail":"Kernel#autoload?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(name: T.any(Symbol, String)).returns(T.nilable(String))}\ndef autoload?(name); end\n```\n\n---\n\nReturns *filename* to be loaded if *name* is registered as `autoload`.\n\n```ruby\nautoload(:B, \"b\")\nautoload?(:B)            #=> \"b\"\n```"},"sortText":"000172","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"autoload?${0}"}},{"label":"binding","kind":2,"detail":"Kernel#binding","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Binding)}\ndef binding; end\n```\n\n---\n\nReturns a `Binding` object, describing the variable and method bindings at\nthe point of call. This object can be used when calling `eval` to execute\nthe evaluated command in this environment. See also the description of class\n`Binding`.\n\n```ruby\ndef get_binding(param)\n  binding\nend\nb = get_binding(\"hello\")\neval(\"param\", b)   #=> \"hello\"\n```"},"sortText":"000173","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"binding${0}"}},{"label":"block_given?","kind":2,"detail":"Kernel#block_given?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef block_given?; end\n```\n\n---\n\nReturns `true` if `yield` would execute a block in the current context. The\n`iterator?` form is mildly deprecated.\n\n```ruby\ndef try\n  if block_given?\n    yield\n  else\n    \"no block\"\n  end\nend\ntry                  #=> \"no block\"\ntry { \"hello\" }      #=> \"hello\"\ntry do \"hello\" end   #=> \"hello\"\n```"},"sortText":"000174","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"block_given?${0}"}},{"label":"callcc","kind":2,"detail":"Kernel#callcc","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    block: T.proc.params(arg0: Continuation).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef callcc(&block); end\n```\n\n---\n\nGenerates a [`Continuation`](https://ruby-doc.org/3.2.1/Continuation.html)\nobject, which it passes to the associated block. You need to\n`require 'continuation'` before using this method. Performing a\ncont.call will cause the\n[`callcc`](https://ruby-doc.org/3.2.1/Kernel.html#method-i-callcc) to\nreturn (as will falling through the end\nof the block). The value returned by the\n[`callcc`](https://ruby-doc.org/3.2.1/Kernel.html#method-i-callcc) is the\nvalue of the block, or the value passed to cont.call. See class\n[`Continuation`](https://ruby-doc.org/3.2.1/Continuation.html) for more\ndetails. Also see\n[`Kernel#throw`](https://ruby-doc.org/3.2.1/Kernel.html#method-i-throw)\nfor an alternative mechanism for unwinding a call stack."},"sortText":"000175","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"callcc${0}"}},{"label":"caller","kind":2,"detail":"Kernel#caller","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: Integer,\n    length: Integer\n  )\n  .returns(T.nilable(T::Array[String]))\nend\ndef caller(start_or_range=…, length=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing strings in the\nform `file:line` or `file:line: in `method'`.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.\n\n```ruby\ndef a(skip)\n  caller(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\nc(0)   #=> [\"prog:2:in `a'\", \"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:10:in `<main>'\"]\nc(1)   #=> [\"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:11:in `<main>'\"]\nc(2)   #=> [\"prog:8:in `c'\", \"prog:12:in `<main>'\"]\nc(3)   #=> [\"prog:13:in `<main>'\"]\nc(4)   #=> []\nc(5)   #=> nil\n```"},"sortText":"000176","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"caller${0}"}},{"label":"caller","kind":2,"detail":"Kernel#caller (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: T::Range[Integer]\n  )\n  .returns(T.nilable(T::Array[String]))\nend\ndef caller (overload.1)(start_or_range=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing strings in the\nform `file:line` or `file:line: in `method'`.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.\n\n```ruby\ndef a(skip)\n  caller(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\nc(0)   #=> [\"prog:2:in `a'\", \"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:10:in `<main>'\"]\nc(1)   #=> [\"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:11:in `<main>'\"]\nc(2)   #=> [\"prog:8:in `c'\", \"prog:12:in `<main>'\"]\nc(3)   #=> [\"prog:13:in `<main>'\"]\nc(4)   #=> []\nc(5)   #=> nil\n```"},"sortText":"000177","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"caller${0}"}},{"label":"caller","kind":2,"detail":"Kernel#caller (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[String])}\ndef caller (overload.2); end\n```\n\n---\n\nReturns the current execution stack---an array containing strings in the\nform `file:line` or `file:line: in `method'`.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.\n\n```ruby\ndef a(skip)\n  caller(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\nc(0)   #=> [\"prog:2:in `a'\", \"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:10:in `<main>'\"]\nc(1)   #=> [\"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:11:in `<main>'\"]\nc(2)   #=> [\"prog:8:in `c'\", \"prog:12:in `<main>'\"]\nc(3)   #=> [\"prog:13:in `<main>'\"]\nc(4)   #=> []\nc(5)   #=> nil\n```"},"sortText":"000178","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"caller${0}"}},{"label":"caller_locations","kind":2,"detail":"Kernel#caller_locations","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: Integer,\n    length: Integer\n  )\n  .returns(T.nilable(T::Array[Thread::Backtrace::Location]))\nend\ndef caller_locations(start_or_range=…, length=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing backtrace location\nobjects.\n\nSee\n[`Thread::Backtrace::Location`](https://docs.ruby-lang.org/en/2.7.0/Thread/Backtrace/Location.html)\nfor more information.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range."},"sortText":"000179","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"caller_locations${0}"}},{"label":"caller_locations","kind":2,"detail":"Kernel#caller_locations (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: T::Range[Integer]\n  )\n  .returns(T.nilable(T::Array[Thread::Backtrace::Location]))\nend\ndef caller_locations (overload.1)(start_or_range=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing backtrace location\nobjects.\n\nSee\n[`Thread::Backtrace::Location`](https://docs.ruby-lang.org/en/2.7.0/Thread/Backtrace/Location.html)\nfor more information.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range."},"sortText":"000180","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"caller_locations${0}"}},{"label":"catch","kind":2,"detail":"Kernel#catch","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    tag: Object,\n    blk: T.proc.params(arg0: Object).returns(T.untyped)\n  )\n  .returns(T.untyped)\nend\ndef catch(tag=…, &blk); end\n```\n\n---\n\n`catch` executes its block. If `throw` is not called, the block executes\nnormally, and `catch` returns the value of the last expression evaluated.\n\n```ruby\ncatch(1) { 123 }            # => 123\n```\n\nIf `throw(tag2, val)` is called, Ruby searches up its stack for a `catch`\nblock whose `tag` has the same `object_id` as *tag2*. When found, the block\nstops executing and returns *val* (or `nil` if no second argument was given\nto `throw`).\n\n```ruby\ncatch(1) { throw(1, 456) }  # => 456\ncatch(1) { throw(1) }       # => nil\n```\n\nWhen `tag` is passed as the first argument, `catch` yields it as the\nparameter of the block.\n\n```ruby\ncatch(1) {|x| x + 2 }       # => 3\n```\n\nWhen no `tag` is given, `catch` yields a new unique object (as from\n`Object.new`) as the block parameter. This object can then be used as the\nargument to `throw`, and will match the correct `catch` block.\n\n```ruby\ncatch do |obj_A|\n  catch do |obj_B|\n    throw(obj_B, 123)\n    puts \"This puts is not reached\"\n  end\n\n  puts \"This puts is displayed\"\n  456\nend\n\n# => 456\n\ncatch do |obj_A|\n  catch do |obj_B|\n    throw(obj_A, 123)\n    puts \"This puts is still not reached\"\n  end\n\n  puts \"Now this puts is also not reached\"\n  456\nend\n\n# => 123\n```"},"sortText":"000181","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"catch${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    symbol: T.any(Symbol, String),\n    method: T.any(Proc, Method, UnboundMethod)\n  )\n  .returns(Symbol)\nend\ndef define_singleton_method(symbol, method=…); end\n```"},"sortText":"000182","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"define_singleton_method${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(symbol: T.any(Symbol, String), blk: T.untyped).returns(Symbol)}\ndef define_singleton_method (overload.1)(symbol, &blk); end\n```"},"sortText":"000183","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"define_singleton_method${0}"}},{"label":"display","kind":2,"detail":"Kernel#display","documentation":{"kind":"markdown","value":"```ruby\nsig {params(port: IO).returns(NilClass)}\ndef display(port); end\n```"},"sortText":"000184","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"display${0}"}},{"label":"enum_for","kind":2,"detail":"Kernel#enum_for","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef enum_for(method=…, *args); end\n```"},"sortText":"000185","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"enum_for${0}"}},{"label":"enum_for","kind":2,"detail":"Kernel#enum_for (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef enum_for (overload.1)(method=…, *args, &blk); end\n```"},"sortText":"000186","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"enum_for${0}"}},{"label":"eval","kind":2,"detail":"Kernel#eval","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: String,\n    arg1: T.nilable(Binding),\n    filename: String,\n    lineno: Integer\n  )\n  .returns(T.untyped)\nend\ndef eval(arg0, arg1=…, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates the Ruby expression(s) in *string*. If *binding* is given, which\nmust be a [`Binding`](https://docs.ruby-lang.org/en/2.7.0/Binding.html)\nobject, the evaluation is performed in its context. If the optional\n*filename* and *lineno* parameters are present, they will be used when\nreporting syntax errors.\n\n```ruby\ndef get_binding(str)\n  return binding\nend\nstr = \"hello\"\neval \"str + ' Fred'\"                      #=> \"hello Fred\"\neval \"str + ' Fred'\", get_binding(\"bye\")  #=> \"bye Fred\"\n```"},"sortText":"000187","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"eval${0}"}},{"label":"exec","kind":2,"detail":"Kernel#exec","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: String).returns(T.noreturn)}\ndef exec(*args); end\n```\n\n---\n\nReplaces the current process by running the given external *command*, which\ncan take one of the following forms:\n\n`exec(commandline)`\n:   command line string which is passed to the standard shell\n`exec(cmdname, arg1, ...)`\n:   command name and one or more arguments (no shell)\n`exec([cmdname, argv0], arg1, ...)`\n:   command name, [argv](0) and zero or more arguments (no shell)\n\n\nIn the first form, the string is taken as a command line that is subject to\nshell expansion before being executed.\n\nThe standard shell always means `\"/bin/sh\"` on Unix-like systems, otherwise,\n`ENV[\"RUBYSHELL\"]` or `ENV[\"COMSPEC\"]` on Windows and similar. The command\nis passed as an argument to the `\"-c\"` switch to the shell, except in the\ncase of `COMSPEC`.\n\nIf the string from the first form (`exec(\"command\")`) follows these simple\nrules:\n\n*   no meta characters\n*   not starting with shell reserved word or special built-in\n*   Ruby invokes the command directly without shell\n\n\nYou can force shell invocation by adding \";\" to the string (because \";\" is a\nmeta character).\n\nNote that this behavior is observable by pid obtained (return value of\nspawn() and\n[`IO#pid`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-pid) for\n[`IO.popen`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-popen)) is\nthe pid of the invoked command, not shell.\n\nIn the second form (`exec(\"command1\", \"arg1\", ...)`), the first is taken as\na command name and the rest are passed as parameters to command with no\nshell expansion.\n\nIn the third form (`exec([\"command\", \"argv0\"], \"arg1\", ...)`), starting a\ntwo-element array at the beginning of the command, the first element is the\ncommand to be executed, and the second argument is used as the `argv[0]`\nvalue, which may show up in process listings.\n\nIn order to execute the command, one of the `exec(2)` system calls are used,\nso the running command may inherit some of the environment of the original\nprogram (including open file descriptors).\n\nThis behavior is modified by the given `env` and `options` parameters. See\n::spawn for details.\n\nIf the command fails to execute (typically Errno::ENOENT when it was not\nfound) a\n[`SystemCallError`](https://docs.ruby-lang.org/en/2.7.0/SystemCallError.html)\nexception is raised.\n\nThis method modifies process attributes according to given `options` before\n`exec(2)` system call. See ::spawn for more details about the given\n`options`.\n\nThe modified attributes may be retained when `exec(2)` system call fails.\n\nFor example, hard resource limits are not restorable.\n\nConsider to create a child process using ::spawn or\n[`Kernel#system`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-system)\nif this is not acceptable.\n\n```ruby\nexec \"echo *\"       # echoes list of files in current directory\n# never get here\n\nexec \"echo\", \"*\"    # echoes an asterisk\n# never get here\n```"},"sortText":"000188","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"exec${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef exit; end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000189","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"exit${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit (overload.1)(status=…); end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000190","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"exit${0}"}},{"label":"exit!","kind":2,"detail":"Kernel#exit!","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit!(status=…); end\n```\n\n---\n\nExits the process immediately. No exit handlers are run. *status* is\nreturned to the underlying system as the exit status.\n\n```ruby\nProcess.exit!(true)\n```"},"sortText":"000191","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"exit!${0}"}},{"label":"extend","kind":2,"detail":"Kernel#extend","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(Integer)}\ndef extend(*arg0); end\n```"},"sortText":"000192","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"extend${0}"}},{"label":"fail","kind":2,"detail":"Kernel#fail","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef fail; end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlias for:\n[`raise`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-raise)"},"sortText":"000193","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"fail${0}"}},{"label":"fail","kind":2,"detail":"Kernel#fail (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String).returns(T.noreturn)}\ndef fail (overload.1)(arg0=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlias for:\n[`raise`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-raise)"},"sortText":"000194","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"fail${0}"}},{"label":"fail","kind":2,"detail":"Kernel#fail (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T::Class[T.anything],\n    arg1: T.any(T::Array[String], String)\n  )\n  .returns(T.noreturn)\nend\ndef fail (overload.2)(arg0=…, arg1=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlias for:\n[`raise`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-raise)"},"sortText":"000195","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"fail${0}"}},{"label":"fail","kind":2,"detail":"Kernel#fail (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: Exception,\n    arg1: String,\n    arg2: T::Array[String]\n  )\n  .returns(T.noreturn)\nend\ndef fail (overload.3)(arg0=…, arg1=…, arg2=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlias for:\n[`raise`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-raise)"},"sortText":"000196","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"fail${0}"}},{"label":"fork","kind":2,"detail":"Kernel#fork","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(Integer))}\ndef fork; end\n```\n\n---\n\nCreates a subprocess. If a block is specified, that block is run in the\nsubprocess, and the subprocess terminates with a status of zero. Otherwise,\nthe `fork` call returns twice, once in the parent, returning the process ID\nof the child, and once in the child, returning *nil*. The child process can\nexit using\n[`Kernel.exit!`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-exit-21)\nto avoid running any `at_exit` functions. The parent process should use\n[`Process.wait`](https://docs.ruby-lang.org/en/2.7.0/Process.html#method-c-wait)\nto collect the termination statuses of its children or use\n[`Process.detach`](https://docs.ruby-lang.org/en/2.7.0/Process.html#method-c-detach)\nto register disinterest in their status; otherwise, the operating system may\naccumulate zombie processes.\n\nThe thread calling fork is the only thread in the created child process.\nfork doesn't copy other threads.\n\nIf fork is not usable, Process.respond\\_to?(:fork) returns false.\n\nNote that fork(2) is not available on some platforms like Windows and NetBSD\n4. Therefore you should use spawn() instead of fork()."},"sortText":"000197","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"fork${0}"}},{"label":"fork","kind":2,"detail":"Kernel#fork (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.proc.returns(BasicObject)).returns(Integer)}\ndef fork (overload.1)(&blk); end\n```\n\n---\n\nCreates a subprocess. If a block is specified, that block is run in the\nsubprocess, and the subprocess terminates with a status of zero. Otherwise,\nthe `fork` call returns twice, once in the parent, returning the process ID\nof the child, and once in the child, returning *nil*. The child process can\nexit using\n[`Kernel.exit!`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-exit-21)\nto avoid running any `at_exit` functions. The parent process should use\n[`Process.wait`](https://docs.ruby-lang.org/en/2.7.0/Process.html#method-c-wait)\nto collect the termination statuses of its children or use\n[`Process.detach`](https://docs.ruby-lang.org/en/2.7.0/Process.html#method-c-detach)\nto register disinterest in their status; otherwise, the operating system may\naccumulate zombie processes.\n\nThe thread calling fork is the only thread in the created child process.\nfork doesn't copy other threads.\n\nIf fork is not usable, Process.respond\\_to?(:fork) returns false.\n\nNote that fork(2) is not available on some platforms like Windows and NetBSD\n4. Therefore you should use spawn() instead of fork()."},"sortText":"000198","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"fork${0}"}},{"label":"format","kind":2,"detail":"Kernel#format","documentation":{"kind":"markdown","value":"```ruby\nsig {params(format: String, args: BasicObject).returns(String)}\ndef format(format, *args); end\n```\n\n---\n\nReturns the string resulting from applying *format\\_string* to any\nadditional arguments. Within the format string, any characters other than\nformat sequences are copied to the result.\n\nThe syntax of a format sequence is as follows.\n\n```\n%[flags][width][.precision]type\n```\n\nA format sequence consists of a percent sign, followed by optional flags,\nwidth, and precision indicators, then terminated with a field type\ncharacter. The field type controls how the corresponding `sprintf` argument\nis to be interpreted, while the flags modify that interpretation.\n\nThe field type characters are:\n\n```\nField |  Integer Format\n------+--------------------------------------------------------------\n  b   | Convert argument as a binary number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..1'.\n  B   | Equivalent to `b', but uses an uppercase 0B for prefix\n      | in the alternative format by #.\n  d   | Convert argument as a decimal number.\n  i   | Identical to `d'.\n  o   | Convert argument as an octal number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..7'.\n  u   | Identical to `d'.\n  x   | Convert argument as a hexadecimal number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..f' (representing an infinite string of\n      | leading 'ff's).\n  X   | Equivalent to `x', but uses uppercase letters.\n\nField |  Float Format\n------+--------------------------------------------------------------\n  e   | Convert floating point argument into exponential notation\n      | with one digit before the decimal point as [-]d.dddddde[+-]dd.\n      | The precision specifies the number of digits after the decimal\n      | point (defaulting to six).\n  E   | Equivalent to `e', but uses an uppercase E to indicate\n      | the exponent.\n  f   | Convert floating point argument as [-]ddd.dddddd,\n      | where the precision specifies the number of digits after\n      | the decimal point.\n  g   | Convert a floating point number using exponential form\n      | if the exponent is less than -4 or greater than or\n      | equal to the precision, or in dd.dddd form otherwise.\n      | The precision specifies the number of significant digits.\n  G   | Equivalent to `g', but use an uppercase `E' in exponent form.\n  a   | Convert floating point argument as [-]0xh.hhhhp[+-]dd,\n      | which is consisted from optional sign, \"0x\", fraction part\n      | as hexadecimal, \"p\", and exponential part as decimal.\n  A   | Equivalent to `a', but use uppercase `X' and `P'.\n\nField |  Other Format\n------+--------------------------------------------------------------\n  c   | Argument is the numeric code for a single character or\n      | a single character string itself.\n  p   | The valuing of argument.inspect.\n  s   | Argument is a string to be substituted.  If the format\n      | sequence contains a precision, at most that many characters\n      | will be copied.\n  %   | A percent sign itself will be displayed.  No argument taken.\n```\n\nThe flags modifies the behavior of the formats. The flag characters are:\n\n```\nFlag     | Applies to    | Meaning\n---------+---------------+-----------------------------------------\nspace    | bBdiouxX      | Leave a space at the start of\n         | aAeEfgG       | non-negative numbers.\n         | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n         |               | a minus sign with absolute value for\n         |               | negative values.\n---------+---------------+-----------------------------------------\n(digit)$ | all           | Specifies the absolute argument number\n         |               | for this field.  Absolute and relative\n         |               | argument numbers cannot be mixed in a\n         |               | sprintf string.\n---------+---------------+-----------------------------------------\n #       | bBoxX         | Use an alternative format.\n         | aAeEfgG       | For the conversions `o', increase the precision\n         |               | until the first digit will be `0' if\n         |               | it is not formatted as complements.\n         |               | For the conversions `x', `X', `b' and `B'\n         |               | on non-zero, prefix the result with ``0x'',\n         |               | ``0X'', ``0b'' and ``0B'', respectively.\n         |               | For `a', `A', `e', `E', `f', `g', and 'G',\n         |               | force a decimal point to be added,\n         |               | even if no digits follow.\n         |               | For `g' and 'G', do not remove trailing zeros.\n---------+---------------+-----------------------------------------\n+        | bBdiouxX      | Add a leading plus sign to non-negative\n         | aAeEfgG       | numbers.\n         | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n         |               | a minus sign with absolute value for\n         |               | negative values.\n---------+---------------+-----------------------------------------\n-        | all           | Left-justify the result of this conversion.\n---------+---------------+-----------------------------------------\n0 (zero) | bBdiouxX      | Pad with zeros, not spaces.\n         | aAeEfgG       | For `o', `x', `X', `b' and `B', radix-1\n         | (numeric fmt) | is used for negative numbers formatted as\n         |               | complements.\n---------+---------------+-----------------------------------------\n*        | all           | Use the next argument as the field width.\n         |               | If negative, left-justify the result. If the\n         |               | asterisk is followed by a number and a dollar\n         |               | sign, use the indicated argument as the width.\n```\n\nExamples of flags:\n\n```ruby\n# `+' and space flag specifies the sign of non-negative numbers.\nsprintf(\"%d\", 123)  #=> \"123\"\nsprintf(\"%+d\", 123) #=> \"+123\"\nsprintf(\"% d\", 123) #=> \" 123\"\n\n# `#' flag for `o' increases number of digits to show `0'.\n# `+' and space flag changes format of negative numbers.\nsprintf(\"%o\", 123)   #=> \"173\"\nsprintf(\"%#o\", 123)  #=> \"0173\"\nsprintf(\"%+o\", -123) #=> \"-173\"\nsprintf(\"%o\", -123)  #=> \"..7605\"\nsprintf(\"%#o\", -123) #=> \"..7605\"\n\n# `#' flag for `x' add a prefix `0x' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf(\"%x\", 123)   #=> \"7b\"\nsprintf(\"%#x\", 123)  #=> \"0x7b\"\nsprintf(\"%+x\", -123) #=> \"-7b\"\nsprintf(\"%x\", -123)  #=> \"..f85\"\nsprintf(\"%#x\", -123) #=> \"0x..f85\"\nsprintf(\"%#x\", 0)    #=> \"0\"\n\n# `#' for `X' uses the prefix `0X'.\nsprintf(\"%X\", 123)  #=> \"7B\"\nsprintf(\"%#X\", 123) #=> \"0X7B\"\n\n# `#' flag for `b' add a prefix `0b' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf(\"%b\", 123)   #=> \"1111011\"\nsprintf(\"%#b\", 123)  #=> \"0b1111011\"\nsprintf(\"%+b\", -123) #=> \"-1111011\"\nsprintf(\"%b\", -123)  #=> \"..10000101\"\nsprintf(\"%#b\", -123) #=> \"0b..10000101\"\nsprintf(\"%#b\", 0)    #=> \"0\"\n\n# `#' for `B' uses the prefix `0B'.\nsprintf(\"%B\", 123)  #=> \"1111011\"\nsprintf(\"%#B\", 123) #=> \"0B1111011\"\n\n# `#' for `e' forces to show the decimal point.\nsprintf(\"%.0e\", 1)  #=> \"1e+00\"\nsprintf(\"%#.0e\", 1) #=> \"1.e+00\"\n\n# `#' for `f' forces to show the decimal point.\nsprintf(\"%.0f\", 1234)  #=> \"1234\"\nsprintf(\"%#.0f\", 1234) #=> \"1234.\"\n\n# `#' for `g' forces to show the decimal point.\n# It also disables stripping lowest zeros.\nsprintf(\"%g\", 123.4)   #=> \"123.4\"\nsprintf(\"%#g\", 123.4)  #=> \"123.400\"\nsprintf(\"%g\", 123456)  #=> \"123456\"\nsprintf(\"%#g\", 123456) #=> \"123456.\"\n```\n\nThe field width is an optional integer, followed optionally by a period and\na precision. The width specifies the minimum number of characters that will\nbe written to the result for this field.\n\nExamples of width:\n\n```ruby\n# padding is done by spaces,       width=20\n# 0 or radix-1.             <------------------>\nsprintf(\"%20d\", 123)   #=> \"                 123\"\nsprintf(\"%+20d\", 123)  #=> \"                +123\"\nsprintf(\"%020d\", 123)  #=> \"00000000000000000123\"\nsprintf(\"%+020d\", 123) #=> \"+0000000000000000123\"\nsprintf(\"% 020d\", 123) #=> \" 0000000000000000123\"\nsprintf(\"%-20d\", 123)  #=> \"123                 \"\nsprintf(\"%-+20d\", 123) #=> \"+123                \"\nsprintf(\"%- 20d\", 123) #=> \" 123                \"\nsprintf(\"%020x\", -123) #=> \"..ffffffffffffffff85\"\n```\n\nFor numeric fields, the precision controls the number of decimal places\ndisplayed. For string fields, the precision determines the maximum number of\ncharacters to be copied from the string. (Thus, the format sequence\n`%10.10s` will always contribute exactly ten characters to the result.)\n\nExamples of precisions:\n\n```ruby\n# precision for `d', 'o', 'x' and 'b' is\n# minimum number of digits               <------>\nsprintf(\"%20.8d\", 123)  #=> \"            00000123\"\nsprintf(\"%20.8o\", 123)  #=> \"            00000173\"\nsprintf(\"%20.8x\", 123)  #=> \"            0000007b\"\nsprintf(\"%20.8b\", 123)  #=> \"            01111011\"\nsprintf(\"%20.8d\", -123) #=> \"           -00000123\"\nsprintf(\"%20.8o\", -123) #=> \"            ..777605\"\nsprintf(\"%20.8x\", -123) #=> \"            ..ffff85\"\nsprintf(\"%20.8b\", -11)  #=> \"            ..110101\"\n\n# \"0x\" and \"0b\" for `#x' and `#b' is not counted for\n# precision but \"0\" for `#o' is counted.  <------>\nsprintf(\"%#20.8d\", 123)  #=> \"            00000123\"\nsprintf(\"%#20.8o\", 123)  #=> \"            00000173\"\nsprintf(\"%#20.8x\", 123)  #=> \"          0x0000007b\"\nsprintf(\"%#20.8b\", 123)  #=> \"          0b01111011\"\nsprintf(\"%#20.8d\", -123) #=> \"           -00000123\"\nsprintf(\"%#20.8o\", -123) #=> \"            ..777605\"\nsprintf(\"%#20.8x\", -123) #=> \"          0x..ffff85\"\nsprintf(\"%#20.8b\", -11)  #=> \"          0b..110101\"\n\n# precision for `e' is number of\n# digits after the decimal point           <------>\nsprintf(\"%20.8e\", 1234.56789) #=> \"      1.23456789e+03\"\n\n# precision for `f' is number of\n# digits after the decimal point               <------>\nsprintf(\"%20.8f\", 1234.56789) #=> \"       1234.56789000\"\n\n# precision for `g' is number of\n# significant digits                          <------->\nsprintf(\"%20.8g\", 1234.56789) #=> \"           1234.5679\"\n\n#                                         <------->\nsprintf(\"%20.8g\", 123456789)  #=> \"       1.2345679e+08\"\n\n# precision for `s' is\n# maximum number of characters                    <------>\nsprintf(\"%20.8s\", \"string test\") #=> \"            string t\"\n```\n\nExamples:\n\n```ruby\nsprintf(\"%d %04x\", 123, 123)               #=> \"123 007b\"\nsprintf(\"%08b '%4s'\", 123, 123)            #=> \"01111011 ' 123'\"\nsprintf(\"%1$*2$s %2$d %1$s\", \"hello\", 8)   #=> \"   hello 8 hello\"\nsprintf(\"%1$*2$s %2$d\", \"hello\", -8)       #=> \"hello    -8\"\nsprintf(\"%+g:% g:%-g\", 1.23, 1.23, 1.23)   #=> \"+1.23: 1.23:1.23\"\nsprintf(\"%u\", -123)                        #=> \"-123\"\n```\n\nFor more complex formatting, Ruby supports a reference by name. %<name>s\nstyle uses format style, but %{name} style doesn't.\n\nExamples:\n\n```ruby\nsprintf(\"%<foo>d : %<bar>f\", { :foo => 1, :bar => 2 })\n  #=> 1 : 2.000000\nsprintf(\"%{foo}f\", { :foo => 1 })\n  # => \"1f\"\n```\n\n\nAlias for:\n[`sprintf`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-sprintf)"},"sortText":"000199","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"format${0}"}},{"label":"freeze","kind":2,"detail":"Kernel#freeze","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef freeze; end\n```"},"sortText":"000200","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"freeze${0}"}},{"label":"frozen?","kind":2,"detail":"Kernel#frozen?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef frozen?; end\n```\n\n---\n\nReturns the freeze status of *obj*.\n\n```ruby\na = [ \"a\", \"b\", \"c\" ]\na.freeze    #=> [\"a\", \"b\", \"c\"]\na.frozen?   #=> true\n```"},"sortText":"000201","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"frozen?${0}"}},{"label":"gem","kind":2,"detail":"Kernel#gem","documentation":{"kind":"markdown","value":"```ruby\nsig {params(dep: T.untyped, reqs: T.untyped).returns(T.untyped)}\ndef gem(dep, *reqs); end\n```\n\n---\n\nUse\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nto activate a specific version of `gem_name`.\n\n`requirements` is a list of version requirements that the specified gem must\nmatch, most commonly \"= example.version.number\". See\n[`Gem::Requirement`](https://docs.ruby-lang.org/en/2.7.0/Gem/Requirement.html)\nfor how to specify a version requirement.\n\nIf you will be activating the latest version of a gem, there is no need to\ncall\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem),\n[`Kernel#require`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-require)\nwill do the right thing for you.\n\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nreturns true if the gem was activated, otherwise false. If the gem could not\nbe found, didn't match the version requirements, or a different version was\nalready activated, an exception will be raised.\n\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nshould be called **before** any require statements (otherwise RubyGems may\nload a conflicting library version).\n\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nonly loads prerelease versions when prerelease `requirements` are given:\n\n```ruby\ngem 'rake', '>= 1.1.a', '< 2'\n```\n\nIn older RubyGems versions, the environment variable GEM\\_SKIP could be used\nto skip activation of specified gems, for example to test out changes that\nhaven't been installed yet. Now RubyGems defers to -I and the RUBYLIB\nenvironment variable to skip activation of a gem.\n\nExample:\n\n```\nGEM_SKIP=libA:libB ruby -I../libA -I../libB ./mycode.rb\n```"},"sortText":"000202","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"gem${0}"}},{"label":"gets","kind":2,"detail":"Kernel#gets","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(String)}\ndef gets(arg0=…, arg1=…); end\n```\n\n---\n\nReturns (and assigns to `$_`) the next line from the list of files in `ARGV`\n(or `$*`), or from standard input if no files are present on the command\nline. Returns `nil` at end of file. The optional argument specifies the\nrecord separator. The separator is included with the contents of each\nrecord. A separator of `nil` reads the entire contents, and a zero-length\nseparator reads the input one paragraph at a time, where paragraphs are\ndivided by two consecutive newlines. If the first argument is an integer, or\noptional second argument is given, the returning string would not be longer\nthan the given value in bytes. If multiple filenames are present in `ARGV`,\n`gets(nil)` will read the contents one file at a time.\n\n```ruby\nARGV << \"testfile\"\nprint while gets\n```\n\n*produces:*\n\n```ruby\nThis is line one\nThis is line two\nThis is line three\nAnd so on...\n```\n\nThe style of programming using `$_` as an implicit parameter is gradually\nlosing favor in the Ruby community."},"sortText":"000203","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"gets${0}"}},{"label":"global_variables","kind":2,"detail":"Kernel#global_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef global_variables; end\n```\n\n---\n\nReturns an array of the names of global variables. This includes special\nregexp global variables such as `$~` and `$+`, but does not include the\nnumbered regexp global variables (`$1`, `$2`, etc.).\n\n```ruby\nglobal_variables.grep /std/   #=> [:$stdin, :$stdout, :$stderr]\n```"},"sortText":"000204","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"global_variables${0}"}},{"label":"initialize_copy","kind":2,"detail":"Kernel#initialize_copy","documentation":{"kind":"markdown","value":"```ruby\nsig {params(object: Integer).returns(Integer)}\ndef initialize_copy(object); end\n```"},"sortText":"000205","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"initialize_copy${0}"}},{"label":"instance_of?","kind":2,"detail":"Kernel#instance_of?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T::Class[T.anything]).returns(T::Boolean)}\ndef instance_of?(arg0); end\n```"},"sortText":"000206","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"instance_of?${0}"}},{"label":"instance_variable_defined?","kind":2,"detail":"Kernel#instance_variable_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef instance_variable_defined?(arg0); end\n```"},"sortText":"000207","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"instance_variable_defined?${0}"}},{"label":"instance_variable_get","kind":2,"detail":"Kernel#instance_variable_get","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.untyped)}\ndef instance_variable_get(arg0); end\n```"},"sortText":"000208","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"instance_variable_get${0}"}},{"label":"instance_variable_set","kind":2,"detail":"Kernel#instance_variable_set","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String), arg1: BasicObject).returns(T.untyped)}\ndef instance_variable_set(arg0, arg1); end\n```"},"sortText":"000209","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"instance_variable_set${0}"}},{"label":"instance_variables","kind":2,"detail":"Kernel#instance_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef instance_variables; end\n```"},"sortText":"000210","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"instance_variables${0}"}},{"label":"is_a?","kind":2,"detail":"Kernel#is_a?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T::Boolean)}\ndef is_a?(arg0); end\n```"},"sortText":"000211","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"is_a?${0}"}},{"label":"iterator?","kind":2,"detail":"Kernel#iterator?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef iterator?; end\n```\n\n---\n\nDeprecated. Use block\\_given? instead."},"sortText":"000212","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"iterator?${0}"}},{"label":"itself","kind":2,"detail":"Kernel#itself","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef itself; end\n```\n\n---\n\nReturns the receiver `obj`.\n\n```ruby\nobj = Object.new; obj.itself.object_id == o.object_id # => true\n```"},"sortText":"000213","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"itself${0}"}},{"label":"kind_of?","kind":2,"detail":"Kernel#kind_of?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(T::Boolean)}\ndef kind_of?(arg0); end\n```"},"sortText":"000214","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"kind_of?${0}"}},{"label":"lambda","kind":2,"detail":"Kernel#lambda","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.untyped).returns(Proc)}\ndef lambda(&blk); end\n```\n\n---\n\nEquivalent to\n[`Proc.new`](https://docs.ruby-lang.org/en/2.7.0/Proc.html#method-c-new),\nexcept the resulting [`Proc`](https://docs.ruby-lang.org/en/2.7.0/Proc.html)\nobjects check the number of parameters passed when called."},"sortText":"000215","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"lambda${0}"}},{"label":"load","kind":2,"detail":"Kernel#load","documentation":{"kind":"markdown","value":"```ruby\nsig {params(filename: String, arg0: T::Boolean).returns(T::Boolean)}\ndef load(filename, arg0=…); end\n```\n\n---\n\nLoads and executes the Ruby program in the file *filename*.\n\nIf the filename is an absolute path (e.g. starts with '/'), the file will be\nloaded directly using the absolute path.\n\nIf the filename is an explicit relative path (e.g. starts with './' or\n'../'), the file will be loaded using the relative path from the current\ndirectory.\n\nOtherwise, the file will be searched for in the library directories listed\nin `$LOAD_PATH` (`$:`). If the file is found in a directory, it will attempt\nto load the file relative to that directory. If the file is not found in any\nof the directories in `$LOAD_PATH`, the file will be loaded using the\nrelative path from the current directory.\n\nIf the file doesn't exist when there is an attempt to load it, a\n[`LoadError`](https://docs.ruby-lang.org/en/2.7.0/LoadError.html) will be\nraised.\n\nIf the optional *wrap* parameter is `true`, the loaded script will be\nexecuted under an anonymous module, protecting the calling program's global\nnamespace. If the optional *wrap* parameter is a module, the loaded script\nwill be executed under the given module. In no circumstance will any local\nvariables in the loaded file be propagated to the loading environment."},"sortText":"000216","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"load${0}"}},{"label":"local_variables","kind":2,"detail":"Kernel#local_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef local_variables; end\n```\n\n---\n\nReturns the names of the current local variables.\n\n```ruby\nfred = 1\nfor i in 1..10\n   # ...\nend\nlocal_variables   #=> [:fred, :i]\n```"},"sortText":"000217","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"local_variables${0}"}},{"label":"loop","kind":2,"detail":"Kernel#loop","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.proc.returns(T.untyped)).returns(T.noreturn)}\ndef loop(&blk); end\n```\n\n---\n\nRepeatedly executes the block.\n\nIf no block is given, an enumerator is returned instead.\n\n```ruby\nloop do\n  print \"Input: \"\n  line = gets\n  break if !line or line =~ /^qQ/\n  # ...\nend\n```\n\n[`StopIteration`](https://docs.ruby-lang.org/en/2.7.0/StopIteration.html)\nraised in the block breaks the loop. In this case, loop returns the \"result\"\nvalue stored in the exception.\n\n```ruby\nenum = Enumerator.new { |y|\n  y << \"one\"\n  y << \"two\"\n  :ok\n}\n\nresult = loop {\n  puts enum.next\n} #=> :ok\n```"},"sortText":"000218","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"loop${0}"}},{"label":"loop","kind":2,"detail":"Kernel#loop (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Enumerator[T.untyped])}\ndef loop (overload.1); end\n```\n\n---\n\nRepeatedly executes the block.\n\nIf no block is given, an enumerator is returned instead.\n\n```ruby\nloop do\n  print \"Input: \"\n  line = gets\n  break if !line or line =~ /^qQ/\n  # ...\nend\n```\n\n[`StopIteration`](https://docs.ruby-lang.org/en/2.7.0/StopIteration.html)\nraised in the block breaks the loop. In this case, loop returns the \"result\"\nvalue stored in the exception.\n\n```ruby\nenum = Enumerator.new { |y|\n  y << \"one\"\n  y << \"two\"\n  :ok\n}\n\nresult = loop {\n  puts enum.next\n} #=> :ok\n```"},"sortText":"000219","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"loop${0}"}},{"label":"method","kind":2,"detail":"Kernel#method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef method(arg0); end\n```"},"sortText":"000220","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"method${0}"}},{"label":"methods","kind":2,"detail":"Kernel#methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(regular: T::Boolean).returns(T::Array[Symbol])}\ndef methods(regular=…); end\n```"},"sortText":"000221","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"methods${0}"}},{"label":"nil?","kind":2,"detail":"Kernel#nil?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef nil?; end\n```"},"sortText":"000222","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"nil?${0}"}},{"label":"object_id","kind":2,"detail":"Kernel#object_id","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef object_id; end\n```\n\n---\n\nReturns an integer identifier for `obj`.\n\nThe same number will be returned on all calls to `object_id` for a given\nobject, and no two active objects will share an id.\n\nNote: that some objects of builtin classes are reused for optimization. This\nis the case for immediate values and frozen string literals.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_id\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`object_id`.\n\nImmediate values are not passed by reference but are passed by value: `nil`,\n`true`, `false`, Fixnums, Symbols, and some Floats.\n\n```ruby\nObject.new.object_id  == Object.new.object_id  # => false\n(21 * 2).object_id    == (21 * 2).object_id    # => true\n\"hello\".object_id     == \"hello\".object_id     # => false\n\"hi\".freeze.object_id == \"hi\".freeze.object_id # => true\n```"},"sortText":"000223","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"object_id${0}"}},{"label":"open","kind":2,"detail":"Kernel#open","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    path: String,\n    mode: T.any(Integer, String),\n    perm: T.nilable(Integer),\n    opt: T.nilable(T::Hash[Symbol, T.untyped])\n  )\n  .returns(T.nilable(IO))\nend\ndef open(path, mode=…, perm=…, opt=…); end\n```\n\n---\n\nCreates an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object\nconnected to the given stream, file, or subprocess.\n\nIf `path` does not start with a pipe character (`|`), treat it as the name\nof a file to open using the specified mode (defaulting to \"r\").\n\nThe `mode` is either a string or an integer. If it is an integer, it must be\nbitwise-or of open(2) flags, such as File::RDWR or File::EXCL. If it is a\nstring, it is either \"fmode\", \"fmode:ext\\_enc\", or\n\"fmode:ext\\_enc:int\\_enc\".\n\nSee the documentation of\n[`IO.new`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-new) for\nfull documentation of the `mode` string directives.\n\nIf a file is being created, its initial permissions may be set using the\n`perm` parameter. See\n[`File.new`](https://docs.ruby-lang.org/en/2.7.0/File.html#method-c-new) and\nthe open(2) and chmod(2) man pages for a description of permissions.\n\nIf a block is specified, it will be invoked with the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object as a parameter,\nand the [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) will be\nautomatically closed when the block terminates. The call returns the value\nof the block.\n\nIf `path` starts with a pipe character (`\"|\"`), a subprocess is created,\nconnected to the caller by a pair of pipes. The returned\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object may be used to\nwrite to the standard input and read from the standard output of this\nsubprocess.\n\nIf the command following the pipe is a single minus sign (`\"|-\"`), Ruby\nforks, and this subprocess is connected to the parent. If the command is not\n`\"-\"`, the subprocess runs the command. Note that the command may be\nprocessed by shell if it contains shell metacharacters.\n\nWhen the subprocess is Ruby (opened via `\"|-\"`), the `open` call returns\n`nil`. If a block is associated with the open call, that block will run\ntwice --- once in the parent and once in the child.\n\nThe block parameter will be an\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object in the parent and\n`nil` in the child. The parent's `IO` object will be connected to the\nchild's $stdin and $stdout. The subprocess will be terminated at the end of\nthe block.\n\n### Examples\n\nReading from \"testfile\":\n\n```ruby\nopen(\"testfile\") do |f|\n  print f.gets\nend\n```\n\nProduces:\n\n```ruby\nThis is line one\n```\n\nOpen a subprocess and read its output:\n\n```ruby\ncmd = open(\"|date\")\nprint cmd.gets\ncmd.close\n```\n\nProduces:\n\n```\nWed Apr  9 08:56:31 CDT 2003\n```\n\nOpen a subprocess running the same Ruby program:\n\n```ruby\nf = open(\"|-\", \"w+\")\nif f.nil?\n  puts \"in Child\"\n  exit\nelse\n  puts \"Got: #{f.gets}\"\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```\n\nOpen a subprocess using a block to receive the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object:\n\n```ruby\nopen \"|-\" do |f|\n  if f then\n    # parent process\n    puts \"Got: #{f.gets}\"\n  else\n    # child process\n    puts \"in Child\"\n  end\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```"},"sortText":"000224","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"open${0}"}},{"label":"open","kind":2,"detail":"Kernel#open (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    path: String,\n    mode: T.any(Integer, String),\n    perm: T.nilable(Integer),\n    opt: T.nilable(T::Hash[Symbol, T.untyped]),\n    blk: T.proc.params(arg0: IO).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef open (overload.1)(path, mode=…, perm=…, opt=…, &blk); end\n```\n\n---\n\nCreates an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object\nconnected to the given stream, file, or subprocess.\n\nIf `path` does not start with a pipe character (`|`), treat it as the name\nof a file to open using the specified mode (defaulting to \"r\").\n\nThe `mode` is either a string or an integer. If it is an integer, it must be\nbitwise-or of open(2) flags, such as File::RDWR or File::EXCL. If it is a\nstring, it is either \"fmode\", \"fmode:ext\\_enc\", or\n\"fmode:ext\\_enc:int\\_enc\".\n\nSee the documentation of\n[`IO.new`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-new) for\nfull documentation of the `mode` string directives.\n\nIf a file is being created, its initial permissions may be set using the\n`perm` parameter. See\n[`File.new`](https://docs.ruby-lang.org/en/2.7.0/File.html#method-c-new) and\nthe open(2) and chmod(2) man pages for a description of permissions.\n\nIf a block is specified, it will be invoked with the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object as a parameter,\nand the [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) will be\nautomatically closed when the block terminates. The call returns the value\nof the block.\n\nIf `path` starts with a pipe character (`\"|\"`), a subprocess is created,\nconnected to the caller by a pair of pipes. The returned\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object may be used to\nwrite to the standard input and read from the standard output of this\nsubprocess.\n\nIf the command following the pipe is a single minus sign (`\"|-\"`), Ruby\nforks, and this subprocess is connected to the parent. If the command is not\n`\"-\"`, the subprocess runs the command. Note that the command may be\nprocessed by shell if it contains shell metacharacters.\n\nWhen the subprocess is Ruby (opened via `\"|-\"`), the `open` call returns\n`nil`. If a block is associated with the open call, that block will run\ntwice --- once in the parent and once in the child.\n\nThe block parameter will be an\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object in the parent and\n`nil` in the child. The parent's `IO` object will be connected to the\nchild's $stdin and $stdout. The subprocess will be terminated at the end of\nthe block.\n\n### Examples\n\nReading from \"testfile\":\n\n```ruby\nopen(\"testfile\") do |f|\n  print f.gets\nend\n```\n\nProduces:\n\n```ruby\nThis is line one\n```\n\nOpen a subprocess and read its output:\n\n```ruby\ncmd = open(\"|date\")\nprint cmd.gets\ncmd.close\n```\n\nProduces:\n\n```\nWed Apr  9 08:56:31 CDT 2003\n```\n\nOpen a subprocess running the same Ruby program:\n\n```ruby\nf = open(\"|-\", \"w+\")\nif f.nil?\n  puts \"in Child\"\n  exit\nelse\n  puts \"Got: #{f.gets}\"\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```\n\nOpen a subprocess using a block to receive the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object:\n\n```ruby\nopen \"|-\" do |f|\n  if f then\n    # parent process\n    puts \"Got: #{f.gets}\"\n  else\n    # child process\n    puts \"in Child\"\n  end\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```"},"sortText":"000225","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"open${0}"}},{"label":"p","kind":2,"detail":"Kernel#p","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BasicObject).returns(NilClass)}\ndef p(*arg0); end\n```\n\n---\n\nFor each object, directly writes *obj*.`inspect` followed by a newline to\nthe program's standard output.\n\n```ruby\nS = Struct.new(:name, :state)\ns = S['dave', 'TX']\np s\n```\n\n*produces:*\n\n```ruby\n#<S name=\"dave\", state=\"TX\">\n```"},"sortText":"000226","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"p${0}"}},{"label":"pp","kind":2,"detail":"Kernel#pp","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    obj: T.untyped,\n    out: T.untyped,\n    width: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef pp(obj, out=…, width=…); end\n```\n\n---\n\nprints arguments in pretty form.\n\npp returns argument(s).\n\nAlso aliased as:\n[`pp`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-pp)"},"sortText":"000227","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"pp${0}"}},{"label":"print","kind":2,"detail":"Kernel#print","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: Kernel).returns(NilClass)}\ndef print(*args); end\n```\n\n---\n\nPrints each object in turn to `$stdout`. If the output field separator\n(`$,`) is not `nil`, its contents will appear between each field. If the\noutput record separator (`$\\`) is not `nil`, it will be appended to the\noutput. If no arguments are given, prints `$_`. Objects that aren't strings\nwill be converted by calling their `to_s` method.\n\n```ruby\nprint \"cat\", [1,2,3], 99, \"\\n\"\n$, = \", \"\n$\\ = \"\\n\"\nprint \"cat\", [1,2,3], 99\n```\n\n*produces:*\n\n```\ncat12399\ncat, 1, 2, 3, 99\n```"},"sortText":"000228","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"print${0}"}},{"label":"printf","kind":2,"detail":"Kernel#printf","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: IO, arg1: String, arg2: BasicObject).returns(NilClass)}\ndef printf(arg0=…, arg1=…, *arg2); end\n```\n\n---\n\nEquivalent to:\n\n```\nio.write(sprintf(string, obj, ...))\n```\n\nor\n\n```\n$stdout.write(sprintf(string, obj, ...))\n```"},"sortText":"000229","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"printf${0}"}},{"label":"private_methods","kind":2,"detail":"Kernel#private_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef private_methods(all=…); end\n```"},"sortText":"000230","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"private_methods${0}"}},{"label":"proc","kind":2,"detail":"Kernel#proc","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.untyped).returns(Proc)}\ndef proc(&blk); end\n```\n\n---\n\nEquivalent to\n[`Proc.new`](https://docs.ruby-lang.org/en/2.7.0/Proc.html#method-c-new)."},"sortText":"000231","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"proc${0}"}},{"label":"protected_methods","kind":2,"detail":"Kernel#protected_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef protected_methods(all=…); end\n```"},"sortText":"000232","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"protected_methods${0}"}},{"label":"public_method","kind":2,"detail":"Kernel#public_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef public_method(arg0); end\n```"},"sortText":"000233","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"public_method${0}"}},{"label":"public_methods","kind":2,"detail":"Kernel#public_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef public_methods(all=…); end\n```"},"sortText":"000234","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"public_methods${0}"}},{"label":"public_send","kind":2,"detail":"Kernel#public_send","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef public_send(arg0, *args, &blk); end\n```"},"sortText":"000235","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"public_send${0}"}},{"label":"putc","kind":2,"detail":"Kernel#putc","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Integer).returns(Integer)}\ndef putc(arg0); end\n```\n\n---\n\nEquivalent to:\n\n```ruby\n$stdout.putc(int)\n```\n\nRefer to the documentation for\n[`IO#putc`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-putc) for\nimportant information regarding multi-byte characters."},"sortText":"000236","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"putc${0}"}},{"label":"puts","kind":2,"detail":"Kernel#puts","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BasicObject).returns(NilClass)}\ndef puts(*arg0); end\n```\n\n---\n\nEquivalent to\n\n```\n$stdout.puts(obj, ...)\n```"},"sortText":"000237","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"puts${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef raise; end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000238","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"raise${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Class[T.anything], Exception, String)\n  )\n  .returns(T.noreturn)\nend\ndef raise (overload.1)(arg0=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000239","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"raise${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Class[T.anything], Exception),\n    arg1: T.untyped,\n    arg2: T.nilable(T::Array[String])\n  )\n  .returns(T.noreturn)\nend\ndef raise (overload.2)(arg0=…, arg1=…, arg2=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000240","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"raise${0}"}},{"label":"rand","kind":2,"detail":"Kernel#rand","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Float)}\ndef rand; end\n```\n\n---\n\nIf called without an argument, or if `max.to_i.abs == 0`, rand returns a\npseudo-random floating point number between 0.0 and 1.0, including 0.0 and\nexcluding 1.0.\n\n```ruby\nrand        #=> 0.2725926052826416\n```\n\nWhen `max.abs` is greater than or equal to 1, `rand` returns a pseudo-random\ninteger greater than or equal to 0 and less than `max.to_i.abs`.\n\n```ruby\nrand(100)   #=> 12\n```\n\nWhen `max` is a [`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html),\n`rand` returns a random number where range.member?(number) == true.\n\nNegative or floating point values for `max` are allowed, but may give\nsurprising results.\n\n```ruby\nrand(-100) # => 87\nrand(-0.5) # => 0.8130921818028143\nrand(1.9)  # equivalent to rand(1), which is always 0\n```\n\n[`Kernel.srand`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-srand)\nmay be used to ensure that sequences of random numbers are reproducible\nbetween different runs of a program.\n\nSee also\n[`Random.rand`](https://docs.ruby-lang.org/en/2.7.0/Random.html#method-c-rand)."},"sortText":"000241","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"rand${0}"}},{"label":"rand","kind":2,"detail":"Kernel#rand (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(T::Range[Integer], Integer)).returns(Integer)}\ndef rand (overload.1)(arg0=…); end\n```\n\n---\n\nIf called without an argument, or if `max.to_i.abs == 0`, rand returns a\npseudo-random floating point number between 0.0 and 1.0, including 0.0 and\nexcluding 1.0.\n\n```ruby\nrand        #=> 0.2725926052826416\n```\n\nWhen `max.abs` is greater than or equal to 1, `rand` returns a pseudo-random\ninteger greater than or equal to 0 and less than `max.to_i.abs`.\n\n```ruby\nrand(100)   #=> 12\n```\n\nWhen `max` is a [`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html),\n`rand` returns a random number where range.member?(number) == true.\n\nNegative or floating point values for `max` are allowed, but may give\nsurprising results.\n\n```ruby\nrand(-100) # => 87\nrand(-0.5) # => 0.8130921818028143\nrand(1.9)  # equivalent to rand(1), which is always 0\n```\n\n[`Kernel.srand`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-srand)\nmay be used to ensure that sequences of random numbers are reproducible\nbetween different runs of a program.\n\nSee also\n[`Random.rand`](https://docs.ruby-lang.org/en/2.7.0/Random.html#method-c-rand)."},"sortText":"000242","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"rand${0}"}},{"label":"rand","kind":2,"detail":"Kernel#rand (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.nilable(T.any(Float, T::Range[Float]))).returns(Float)}\ndef rand (overload.2)(arg0=…); end\n```\n\n---\n\nIf called without an argument, or if `max.to_i.abs == 0`, rand returns a\npseudo-random floating point number between 0.0 and 1.0, including 0.0 and\nexcluding 1.0.\n\n```ruby\nrand        #=> 0.2725926052826416\n```\n\nWhen `max.abs` is greater than or equal to 1, `rand` returns a pseudo-random\ninteger greater than or equal to 0 and less than `max.to_i.abs`.\n\n```ruby\nrand(100)   #=> 12\n```\n\nWhen `max` is a [`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html),\n`rand` returns a random number where range.member?(number) == true.\n\nNegative or floating point values for `max` are allowed, but may give\nsurprising results.\n\n```ruby\nrand(-100) # => 87\nrand(-0.5) # => 0.8130921818028143\nrand(1.9)  # equivalent to rand(1), which is always 0\n```\n\n[`Kernel.srand`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-srand)\nmay be used to ensure that sequences of random numbers are reproducible\nbetween different runs of a program.\n\nSee also\n[`Random.rand`](https://docs.ruby-lang.org/en/2.7.0/Random.html#method-c-rand)."},"sortText":"000243","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"rand${0}"}},{"label":"rand","kind":2,"detail":"Kernel#rand (overload.3)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(T::Range[Numeric], Numeric)).returns(Numeric)}\ndef rand (overload.3)(arg0=…); end\n```\n\n---\n\nIf called without an argument, or if `max.to_i.abs == 0`, rand returns a\npseudo-random floating point number between 0.0 and 1.0, including 0.0 and\nexcluding 1.0.\n\n```ruby\nrand        #=> 0.2725926052826416\n```\n\nWhen `max.abs` is greater than or equal to 1, `rand` returns a pseudo-random\ninteger greater than or equal to 0 and less than `max.to_i.abs`.\n\n```ruby\nrand(100)   #=> 12\n```\n\nWhen `max` is a [`Range`](https://docs.ruby-lang.org/en/2.7.0/Range.html),\n`rand` returns a random number where range.member?(number) == true.\n\nNegative or floating point values for `max` are allowed, but may give\nsurprising results.\n\n```ruby\nrand(-100) # => 87\nrand(-0.5) # => 0.8130921818028143\nrand(1.9)  # equivalent to rand(1), which is always 0\n```\n\n[`Kernel.srand`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-srand)\nmay be used to ensure that sequences of random numbers are reproducible\nbetween different runs of a program.\n\nSee also\n[`Random.rand`](https://docs.ruby-lang.org/en/2.7.0/Random.html#method-c-rand)."},"sortText":"000244","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"rand${0}"}},{"label":"readline","kind":2,"detail":"Kernel#readline","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(String)}\ndef readline(arg0=…, arg1=…); end\n```\n\n---\n\nEquivalent to Kernel::gets, except `readline` raises `EOFError` at end of\nfile."},"sortText":"000245","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"readline${0}"}},{"label":"readlines","kind":2,"detail":"Kernel#readlines","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(T::Array[String])}\ndef readlines(arg0=…, arg1=…); end\n```\n\n---\n\nReturns an array containing the lines returned by calling `Kernel.gets(sep)`\nuntil the end of file."},"sortText":"000246","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"readlines${0}"}},{"label":"remove_instance_variable","kind":2,"detail":"Kernel#remove_instance_variable","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(T.untyped)}\ndef remove_instance_variable(arg0); end\n```"},"sortText":"000247","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"remove_instance_variable${0}"}},{"label":"require","kind":2,"detail":"Kernel#require","documentation":{"kind":"markdown","value":"```ruby\nsig {params(path: String).returns(T::Boolean)}\ndef require(path); end\n```\n\n---\n\nLoads the given `name`, returning `true` if successful and `false` if the\nfeature is already loaded.\n\nIf the filename does not resolve to an absolute path, it will be searched\nfor in the directories listed in `$LOAD_PATH` (`$:`).\n\nIf the filename has the extension \".rb\", it is loaded as a source file; if\nthe extension is \".so\", \".o\", or \".dll\", or the default shared library\nextension on the current platform, Ruby loads the shared library as a Ruby\nextension. Otherwise, Ruby tries adding \".rb\", \".so\", and so on to the name\nuntil found. If the file named cannot be found, a\n[`LoadError`](https://docs.ruby-lang.org/en/2.6.0/LoadError.html) will be\nraised.\n\nFor Ruby extensions the filename given may use any shared library extension.\nFor example, on Linux the socket extension is \"socket.so\" and `require\n'socket.dll'` will load the socket extension.\n\nThe absolute path of the loaded file is added to `$LOADED_FEATURES` (`$\"`).\nA file will not be loaded again if its path already appears in `$\"`. For\nexample, `require 'a'; require './a'` will not load `a.rb` again.\n\n```ruby\nrequire \"my-library.rb\"\nrequire \"db-driver\"\n```\n\nAny constants or globals within the loaded source file will be available in\nthe calling program's global namespace. However, local variables will not be\npropagated to the loading environment.\n\nWhen RubyGems is required,\n[`#require`](https://docs.ruby-lang.org/en/2.6.0/Kernel.html#method-i-require)\nis replaced with our own which is capable of loading gems on demand.\n\nWhen you call `require 'x'`, this is what happens:\n*   If the file can be loaded from the existing Ruby loadpath, it is.\n*   Otherwise, installed gems are searched for a file that matches. If it's\n    found in gem 'y', that gem is activated (added to the loadpath).\n\n\nThe normal `require` functionality of returning false if that file has\nalready been loaded is preserved.\n\nAlso aliased as:\n[`gem_original_require`](https://docs.ruby-lang.org/en/2.6.0/Kernel.html#method-i-gem_original_require)"},"sortText":"000248","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"require${0}"}},{"label":"require_relative","kind":2,"detail":"Kernel#require_relative","documentation":{"kind":"markdown","value":"```ruby\nsig {params(feature: T.any(String, Pathname)).returns(T::Boolean)}\ndef require_relative(feature); end\n```\n\n---\n\nRuby tries to load the library named *string* relative to the requiring\nfile's path. If the file's path cannot be determined a\n[`LoadError`](https://docs.ruby-lang.org/en/2.7.0/LoadError.html) is raised.\nIf a file is loaded `true` is returned and false otherwise."},"sortText":"000249","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"require_relative${0}"}},{"label":"respond_to?","kind":2,"detail":"Kernel#respond_to?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    include_all: T.untyped\n  )\n  .returns(T::Boolean)\nend\ndef respond_to?(arg0, include_all=…); end\n```"},"sortText":"000250","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"respond_to?${0}"}},{"label":"select","kind":2,"detail":"Kernel#select","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    read_array: T.nilable(T::Array[IO]),\n    write_array: T.nilable(T::Array[IO]),\n    error_array: T.nilable(T::Array[IO]),\n    timeout: T.nilable(T.any(Integer, Float))\n  )\n  .returns(T.nilable(T::Array[T::Array[IO]]))\nend\ndef select(read_array, write_array=…, error_array=…, timeout=…); end\n```\n\n---\n\nCalls select(2) system call. It monitors given arrays of\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects, waits until one\nor more of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects are\nready for reading, are ready for writing, and have pending exceptions\nrespectively, and returns an array that contains arrays of those\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects. It will return\n`nil` if optional *timeout* value is given and no\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object is ready in\n*timeout* seconds.\n\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\npeeks the buffer of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html)\nobjects for testing readability. If the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) buffer is not empty,\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nimmediately notifies readability. This \"peek\" only happens for\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects. It does not\nhappen for IO-like objects such as\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\n\nThe best way to use\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis invoking it after nonblocking methods such as read\\_nonblock,\nwrite\\_nonblock, etc. The methods raise an exception which is extended by\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nor\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html).\nThe modules notify how the caller should wait with\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\nIf\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nis raised, the caller should wait for reading. If\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html)\nis raised, the caller should wait for writing.\n\nSo, blocking read (readpartial) can be emulated using read\\_nonblock and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nas follows:\n\n```ruby\nbegin\n  result = io_like.read_nonblock(maxlen)\nrescue IO::WaitReadable\n  IO.select([io_like])\n  retry\nrescue IO::WaitWritable\n  IO.select(nil, [io_like])\n  retry\nend\n```\n\nEspecially, the combination of nonblocking methods and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis preferred for [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) like\nobjects such as\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\nIt has to\\_io method to return underlying\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object.\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ncalls to\\_io to obtain the file descriptor to wait.\n\nThis means that readability notified by\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ndoesn't mean readability from\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\nobject.\n\nThe most likely situation is that\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\nbuffers some data.\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ndoesn't see the buffer. So\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ncan block when\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\ndoesn't block.\n\nHowever, several more complicated situations exist.\n\nSSL is a protocol which is sequence of records. The record consists of\nmultiple bytes. So, the remote side of SSL sends a partial record,\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nnotifies readability but\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\ncannot decrypt a byte and\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\nwill block.\n\nAlso, the remote side can request SSL renegotiation which forces the local\nSSL engine to write some data. This means\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\nmay invoke write system call and it can block. In such a situation,\n[`OpenSSL::SSL::SSLSocket#read_nonblock`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-read_nonblock)\nraises\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html)\ninstead of blocking. So, the caller should wait for ready for writability as\nabove example.\n\nThe combination of nonblocking methods and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis also useful for streams such as tty, pipe socket socket when multiple\nprocesses read from a stream.\n\nFinally, Linux kernel developers don't guarantee that readability of\nselect(2) means readability of following read(2) even for a single process.\nSee select(2) manual on GNU/Linux system.\n\nInvoking\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nbefore\n[`IO#readpartial`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-readpartial)\nworks well as usual. However it is not the best way to use\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\n\nThe writability notified by select(2) doesn't show how many bytes are\nwritable.\n[`IO#write`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-write)\nmethod blocks until given whole string is written. So, `IO#write(two or more\nbytes)` can block after writability is notified by\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\n[`IO#write_nonblock`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-write_nonblock)\nis required to avoid the blocking.\n\nBlocking write (write) can be emulated using write\\_nonblock and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nas follows:\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nshould also be rescued for SSL renegotiation in\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\n\n```ruby\nwhile 0 < string.bytesize\n  begin\n    written = io_like.write_nonblock(string)\n  rescue IO::WaitReadable\n    IO.select([io_like])\n    retry\n  rescue IO::WaitWritable\n    IO.select(nil, [io_like])\n    retry\n  end\n  string = string.byteslice(written..-1)\nend\n```\n\n### Parameters\nread\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait until ready for read\nwrite\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait until ready for write\nerror\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait for exceptions\ntimeout\n:   a numeric value in second\n\n\n### Example\n\n```ruby\nrp, wp = IO.pipe\nmesg = \"ping \"\n100.times {\n  # IO.select follows IO#read.  Not the best way to use IO.select.\n  rs, ws, = IO.select([rp], [wp])\n  if r = rs[0]\n    ret = r.read(5)\n    print ret\n    case ret\n    when /ping/\n      mesg = \"pong\\n\"\n    when /pong/\n      mesg = \"ping \"\n    end\n  end\n  if w = ws[0]\n    w.write(mesg)\n  end\n}\n```\n\n*produces:*\n\n```ruby\nping pong\nping pong\nping pong\n(snipped)\nping\n```"},"sortText":"000251","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"select${0}"}},{"label":"send","kind":2,"detail":"Kernel#send","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(String, Symbol), arg1: T.anything).returns(T.untyped)}\ndef send(arg0, *arg1); end\n```"},"sortText":"000252","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"send${0}"}},{"label":"send","kind":2,"detail":"Kernel#send (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    arg1: T.anything,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef send (overload.1)(arg0, *arg1, &blk); end\n```"},"sortText":"000253","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"send${0}"}},{"label":"set_trace_func","kind":2,"detail":"Kernel#set_trace_func","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.nilable(T.proc.params(arg0: String, arg1: String, arg2: Integer, arg3: T.nilable(Symbol), arg4: T.nilable(Binding), arg5: Object).returns(T.untyped))\n  )\n  .void\nend\ndef set_trace_func(arg0); end\n```\n\n---\n\nEstablishes _proc_ as the handler for tracing, or disables\ntracing if the parameter is +nil+.\n\n*Note:* this method is obsolete, please use TracePoint instead.\n\n_proc_ takes up to six parameters:\n\n*   an event name\n*   a filename\n*   a line number\n*   an object id\n*   a binding\n*   the name of a class\n\n_proc_ is invoked whenever an event occurs.\n\nEvents are:\n\n+c-call+:: call a C-language routine\n+c-return+:: return from a C-language routine\n+call+:: call a Ruby method\n+class+:: start a class or module definition\n+end+:: finish a class or module definition\n+line+:: execute code on a new line\n+raise+:: raise an exception\n+return+:: return from a Ruby method\n\nTracing is disabled within the context of _proc_.\n\n    class Test\n    def test\n      a = 1\n      b = 2\n    end\n    end\n\n    set_trace_func proc { |event, file, line, id, binding, classname|\n       printf \"%8s %s:%-2d %10s %8s\\n\", event, file, line, id, classname\n    }\n    t = Test.new\n    t.test\n\n      line prog.rb:11               false\n    c-call prog.rb:11        new    Class\n    c-call prog.rb:11 initialize   Object\n  c-return prog.rb:11 initialize   Object\n  c-return prog.rb:11        new    Class\n      line prog.rb:12               false\n      call prog.rb:2        test     Test\n      line prog.rb:3        test     Test\n      line prog.rb:4        test     Test\n    return prog.rb:4        test     Test"},"sortText":"000254","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"set_trace_func${0}"}},{"label":"set_trace_func","kind":2,"detail":"Kernel#set_trace_func (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: NilClass).returns(NilClass)}\ndef set_trace_func (overload.1)(arg0); end\n```\n\n---\n\nEstablishes _proc_ as the handler for tracing, or disables\ntracing if the parameter is +nil+.\n\n*Note:* this method is obsolete, please use TracePoint instead.\n\n_proc_ takes up to six parameters:\n\n*   an event name\n*   a filename\n*   a line number\n*   an object id\n*   a binding\n*   the name of a class\n\n_proc_ is invoked whenever an event occurs.\n\nEvents are:\n\n+c-call+:: call a C-language routine\n+c-return+:: return from a C-language routine\n+call+:: call a Ruby method\n+class+:: start a class or module definition\n+end+:: finish a class or module definition\n+line+:: execute code on a new line\n+raise+:: raise an exception\n+return+:: return from a Ruby method\n\nTracing is disabled within the context of _proc_.\n\n    class Test\n    def test\n      a = 1\n      b = 2\n    end\n    end\n\n    set_trace_func proc { |event, file, line, id, binding, classname|\n       printf \"%8s %s:%-2d %10s %8s\\n\", event, file, line, id, classname\n    }\n    t = Test.new\n    t.test\n\n      line prog.rb:11               false\n    c-call prog.rb:11        new    Class\n    c-call prog.rb:11 initialize   Object\n  c-return prog.rb:11 initialize   Object\n  c-return prog.rb:11        new    Class\n      line prog.rb:12               false\n      call prog.rb:2        test     Test\n      line prog.rb:3        test     Test\n      line prog.rb:4        test     Test\n    return prog.rb:4        test     Test"},"sortText":"000255","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"set_trace_func${0}"}},{"label":"singleton_method","kind":2,"detail":"Kernel#singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef singleton_method(arg0); end\n```"},"sortText":"000256","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"singleton_method${0}"}},{"label":"singleton_methods","kind":2,"detail":"Kernel#singleton_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef singleton_methods(all=…); end\n```"},"sortText":"000257","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"singleton_methods${0}"}},{"label":"sleep","kind":2,"detail":"Kernel#sleep","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef sleep; end\n```\n\n---\n\nSuspends the current thread for *duration* seconds (which may be any number,\nincluding a `Float` with fractional seconds). Returns the actual number of\nseconds slept (rounded), which may be less than that asked for if another\nthread calls\n[`Thread#run`](https://docs.ruby-lang.org/en/2.7.0/Thread.html#method-i-run).\nCalled without an argument, sleep() will sleep forever.\n\n```ruby\nTime.new    #=> 2008-03-08 19:56:19 +0900\nsleep 1.2   #=> 1\nTime.new    #=> 2008-03-08 19:56:20 +0900\nsleep 1.9   #=> 2\nTime.new    #=> 2008-03-08 19:56:22 +0900\n```"},"sortText":"000258","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"sleep${0}"}},{"label":"sleep","kind":2,"detail":"Kernel#sleep (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(duration: Numeric).returns(Integer)}\ndef sleep (overload.1)(duration); end\n```\n\n---\n\nSuspends the current thread for *duration* seconds (which may be any number,\nincluding a `Float` with fractional seconds). Returns the actual number of\nseconds slept (rounded), which may be less than that asked for if another\nthread calls\n[`Thread#run`](https://docs.ruby-lang.org/en/2.7.0/Thread.html#method-i-run).\nCalled without an argument, sleep() will sleep forever.\n\n```ruby\nTime.new    #=> 2008-03-08 19:56:19 +0900\nsleep 1.2   #=> 1\nTime.new    #=> 2008-03-08 19:56:20 +0900\nsleep 1.9   #=> 2\nTime.new    #=> 2008-03-08 19:56:22 +0900\n```"},"sortText":"000259","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"sleep${0}"}},{"label":"sprintf","kind":2,"detail":"Kernel#sprintf","documentation":{"kind":"markdown","value":"```ruby\nsig {params(format: String, args: BasicObject).returns(String)}\ndef sprintf(format, *args); end\n```\n\n---\n\nReturns the string resulting from applying *format\\_string* to any\nadditional arguments. Within the format string, any characters other than\nformat sequences are copied to the result.\n\nThe syntax of a format sequence is as follows.\n\n```\n%[flags][width][.precision]type\n```\n\nA format sequence consists of a percent sign, followed by optional flags,\nwidth, and precision indicators, then terminated with a field type\ncharacter. The field type controls how the corresponding `sprintf` argument\nis to be interpreted, while the flags modify that interpretation.\n\nThe field type characters are:\n\n```\nField |  Integer Format\n------+--------------------------------------------------------------\n  b   | Convert argument as a binary number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..1'.\n  B   | Equivalent to `b', but uses an uppercase 0B for prefix\n      | in the alternative format by #.\n  d   | Convert argument as a decimal number.\n  i   | Identical to `d'.\n  o   | Convert argument as an octal number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..7'.\n  u   | Identical to `d'.\n  x   | Convert argument as a hexadecimal number.\n      | Negative numbers will be displayed as a two's complement\n      | prefixed with `..f' (representing an infinite string of\n      | leading 'ff's).\n  X   | Equivalent to `x', but uses uppercase letters.\n\nField |  Float Format\n------+--------------------------------------------------------------\n  e   | Convert floating point argument into exponential notation\n      | with one digit before the decimal point as [-]d.dddddde[+-]dd.\n      | The precision specifies the number of digits after the decimal\n      | point (defaulting to six).\n  E   | Equivalent to `e', but uses an uppercase E to indicate\n      | the exponent.\n  f   | Convert floating point argument as [-]ddd.dddddd,\n      | where the precision specifies the number of digits after\n      | the decimal point.\n  g   | Convert a floating point number using exponential form\n      | if the exponent is less than -4 or greater than or\n      | equal to the precision, or in dd.dddd form otherwise.\n      | The precision specifies the number of significant digits.\n  G   | Equivalent to `g', but use an uppercase `E' in exponent form.\n  a   | Convert floating point argument as [-]0xh.hhhhp[+-]dd,\n      | which is consisted from optional sign, \"0x\", fraction part\n      | as hexadecimal, \"p\", and exponential part as decimal.\n  A   | Equivalent to `a', but use uppercase `X' and `P'.\n\nField |  Other Format\n------+--------------------------------------------------------------\n  c   | Argument is the numeric code for a single character or\n      | a single character string itself.\n  p   | The valuing of argument.inspect.\n  s   | Argument is a string to be substituted.  If the format\n      | sequence contains a precision, at most that many characters\n      | will be copied.\n  %   | A percent sign itself will be displayed.  No argument taken.\n```\n\nThe flags modifies the behavior of the formats. The flag characters are:\n\n```\nFlag     | Applies to    | Meaning\n---------+---------------+-----------------------------------------\nspace    | bBdiouxX      | Leave a space at the start of\n         | aAeEfgG       | non-negative numbers.\n         | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n         |               | a minus sign with absolute value for\n         |               | negative values.\n---------+---------------+-----------------------------------------\n(digit)$ | all           | Specifies the absolute argument number\n         |               | for this field.  Absolute and relative\n         |               | argument numbers cannot be mixed in a\n         |               | sprintf string.\n---------+---------------+-----------------------------------------\n #       | bBoxX         | Use an alternative format.\n         | aAeEfgG       | For the conversions `o', increase the precision\n         |               | until the first digit will be `0' if\n         |               | it is not formatted as complements.\n         |               | For the conversions `x', `X', `b' and `B'\n         |               | on non-zero, prefix the result with ``0x'',\n         |               | ``0X'', ``0b'' and ``0B'', respectively.\n         |               | For `a', `A', `e', `E', `f', `g', and 'G',\n         |               | force a decimal point to be added,\n         |               | even if no digits follow.\n         |               | For `g' and 'G', do not remove trailing zeros.\n---------+---------------+-----------------------------------------\n+        | bBdiouxX      | Add a leading plus sign to non-negative\n         | aAeEfgG       | numbers.\n         | (numeric fmt) | For `o', `x', `X', `b' and `B', use\n         |               | a minus sign with absolute value for\n         |               | negative values.\n---------+---------------+-----------------------------------------\n-        | all           | Left-justify the result of this conversion.\n---------+---------------+-----------------------------------------\n0 (zero) | bBdiouxX      | Pad with zeros, not spaces.\n         | aAeEfgG       | For `o', `x', `X', `b' and `B', radix-1\n         | (numeric fmt) | is used for negative numbers formatted as\n         |               | complements.\n---------+---------------+-----------------------------------------\n*        | all           | Use the next argument as the field width.\n         |               | If negative, left-justify the result. If the\n         |               | asterisk is followed by a number and a dollar\n         |               | sign, use the indicated argument as the width.\n```\n\nExamples of flags:\n\n```ruby\n# `+' and space flag specifies the sign of non-negative numbers.\nsprintf(\"%d\", 123)  #=> \"123\"\nsprintf(\"%+d\", 123) #=> \"+123\"\nsprintf(\"% d\", 123) #=> \" 123\"\n\n# `#' flag for `o' increases number of digits to show `0'.\n# `+' and space flag changes format of negative numbers.\nsprintf(\"%o\", 123)   #=> \"173\"\nsprintf(\"%#o\", 123)  #=> \"0173\"\nsprintf(\"%+o\", -123) #=> \"-173\"\nsprintf(\"%o\", -123)  #=> \"..7605\"\nsprintf(\"%#o\", -123) #=> \"..7605\"\n\n# `#' flag for `x' add a prefix `0x' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf(\"%x\", 123)   #=> \"7b\"\nsprintf(\"%#x\", 123)  #=> \"0x7b\"\nsprintf(\"%+x\", -123) #=> \"-7b\"\nsprintf(\"%x\", -123)  #=> \"..f85\"\nsprintf(\"%#x\", -123) #=> \"0x..f85\"\nsprintf(\"%#x\", 0)    #=> \"0\"\n\n# `#' for `X' uses the prefix `0X'.\nsprintf(\"%X\", 123)  #=> \"7B\"\nsprintf(\"%#X\", 123) #=> \"0X7B\"\n\n# `#' flag for `b' add a prefix `0b' for non-zero numbers.\n# `+' and space flag disables complements for negative numbers.\nsprintf(\"%b\", 123)   #=> \"1111011\"\nsprintf(\"%#b\", 123)  #=> \"0b1111011\"\nsprintf(\"%+b\", -123) #=> \"-1111011\"\nsprintf(\"%b\", -123)  #=> \"..10000101\"\nsprintf(\"%#b\", -123) #=> \"0b..10000101\"\nsprintf(\"%#b\", 0)    #=> \"0\"\n\n# `#' for `B' uses the prefix `0B'.\nsprintf(\"%B\", 123)  #=> \"1111011\"\nsprintf(\"%#B\", 123) #=> \"0B1111011\"\n\n# `#' for `e' forces to show the decimal point.\nsprintf(\"%.0e\", 1)  #=> \"1e+00\"\nsprintf(\"%#.0e\", 1) #=> \"1.e+00\"\n\n# `#' for `f' forces to show the decimal point.\nsprintf(\"%.0f\", 1234)  #=> \"1234\"\nsprintf(\"%#.0f\", 1234) #=> \"1234.\"\n\n# `#' for `g' forces to show the decimal point.\n# It also disables stripping lowest zeros.\nsprintf(\"%g\", 123.4)   #=> \"123.4\"\nsprintf(\"%#g\", 123.4)  #=> \"123.400\"\nsprintf(\"%g\", 123456)  #=> \"123456\"\nsprintf(\"%#g\", 123456) #=> \"123456.\"\n```\n\nThe field width is an optional integer, followed optionally by a period and\na precision. The width specifies the minimum number of characters that will\nbe written to the result for this field.\n\nExamples of width:\n\n```ruby\n# padding is done by spaces,       width=20\n# 0 or radix-1.             <------------------>\nsprintf(\"%20d\", 123)   #=> \"                 123\"\nsprintf(\"%+20d\", 123)  #=> \"                +123\"\nsprintf(\"%020d\", 123)  #=> \"00000000000000000123\"\nsprintf(\"%+020d\", 123) #=> \"+0000000000000000123\"\nsprintf(\"% 020d\", 123) #=> \" 0000000000000000123\"\nsprintf(\"%-20d\", 123)  #=> \"123                 \"\nsprintf(\"%-+20d\", 123) #=> \"+123                \"\nsprintf(\"%- 20d\", 123) #=> \" 123                \"\nsprintf(\"%020x\", -123) #=> \"..ffffffffffffffff85\"\n```\n\nFor numeric fields, the precision controls the number of decimal places\ndisplayed. For string fields, the precision determines the maximum number of\ncharacters to be copied from the string. (Thus, the format sequence\n`%10.10s` will always contribute exactly ten characters to the result.)\n\nExamples of precisions:\n\n```ruby\n# precision for `d', 'o', 'x' and 'b' is\n# minimum number of digits               <------>\nsprintf(\"%20.8d\", 123)  #=> \"            00000123\"\nsprintf(\"%20.8o\", 123)  #=> \"            00000173\"\nsprintf(\"%20.8x\", 123)  #=> \"            0000007b\"\nsprintf(\"%20.8b\", 123)  #=> \"            01111011\"\nsprintf(\"%20.8d\", -123) #=> \"           -00000123\"\nsprintf(\"%20.8o\", -123) #=> \"            ..777605\"\nsprintf(\"%20.8x\", -123) #=> \"            ..ffff85\"\nsprintf(\"%20.8b\", -11)  #=> \"            ..110101\"\n\n# \"0x\" and \"0b\" for `#x' and `#b' is not counted for\n# precision but \"0\" for `#o' is counted.  <------>\nsprintf(\"%#20.8d\", 123)  #=> \"            00000123\"\nsprintf(\"%#20.8o\", 123)  #=> \"            00000173\"\nsprintf(\"%#20.8x\", 123)  #=> \"          0x0000007b\"\nsprintf(\"%#20.8b\", 123)  #=> \"          0b01111011\"\nsprintf(\"%#20.8d\", -123) #=> \"           -00000123\"\nsprintf(\"%#20.8o\", -123) #=> \"            ..777605\"\nsprintf(\"%#20.8x\", -123) #=> \"          0x..ffff85\"\nsprintf(\"%#20.8b\", -11)  #=> \"          0b..110101\"\n\n# precision for `e' is number of\n# digits after the decimal point           <------>\nsprintf(\"%20.8e\", 1234.56789) #=> \"      1.23456789e+03\"\n\n# precision for `f' is number of\n# digits after the decimal point               <------>\nsprintf(\"%20.8f\", 1234.56789) #=> \"       1234.56789000\"\n\n# precision for `g' is number of\n# significant digits                          <------->\nsprintf(\"%20.8g\", 1234.56789) #=> \"           1234.5679\"\n\n#                                         <------->\nsprintf(\"%20.8g\", 123456789)  #=> \"       1.2345679e+08\"\n\n# precision for `s' is\n# maximum number of characters                    <------>\nsprintf(\"%20.8s\", \"string test\") #=> \"            string t\"\n```\n\nExamples:\n\n```ruby\nsprintf(\"%d %04x\", 123, 123)               #=> \"123 007b\"\nsprintf(\"%08b '%4s'\", 123, 123)            #=> \"01111011 ' 123'\"\nsprintf(\"%1$*2$s %2$d %1$s\", \"hello\", 8)   #=> \"   hello 8 hello\"\nsprintf(\"%1$*2$s %2$d\", \"hello\", -8)       #=> \"hello    -8\"\nsprintf(\"%+g:% g:%-g\", 1.23, 1.23, 1.23)   #=> \"+1.23: 1.23:1.23\"\nsprintf(\"%u\", -123)                        #=> \"-123\"\n```\n\nFor more complex formatting, Ruby supports a reference by name. %<name>s\nstyle uses format style, but %{name} style doesn't.\n\nExamples:\n\n```ruby\nsprintf(\"%<foo>d : %<bar>f\", { :foo => 1, :bar => 2 })\n  #=> 1 : 2.000000\nsprintf(\"%{foo}f\", { :foo => 1 })\n  # => \"1f\"\n```\n\n\nAlso aliased as:\n[`format`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-format)"},"sortText":"000260","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"sprintf${0}"}},{"label":"srand","kind":2,"detail":"Kernel#srand","documentation":{"kind":"markdown","value":"```ruby\nsig {params(number: Numeric).returns(Numeric)}\ndef srand(number=…); end\n```\n\n---\n\nSeeds the system pseudo-random number generator, with `number`. The previous\nseed value is returned.\n\nIf `number` is omitted, seeds the generator using a source of entropy\nprovided by the operating system, if available (/dev/urandom on Unix systems\nor the RSA cryptographic provider on Windows), which is then combined with\nthe time, the process id, and a sequence number.\n\nsrand may be used to ensure repeatable sequences of pseudo-random numbers\nbetween different runs of the program. By setting the seed to a known value,\nprograms can be made deterministic during testing.\n\n```ruby\nsrand 1234               # => 268519324636777531569100071560086917274\n[ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]\n[ rand(10), rand(1000) ] # => [4, 664]\nsrand 1234               # => 1234\n[ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]\n```"},"sortText":"000261","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"srand${0}"}},{"label":"syscall","kind":2,"detail":"Kernel#syscall","documentation":{"kind":"markdown","value":"```ruby\nsig {params(num: Integer, args: BasicObject).returns(T.untyped)}\ndef syscall(num, *args); end\n```\n\n---\n\nCalls the operating system function identified by *num* and returns the\nresult of the function or raises\n[`SystemCallError`](https://docs.ruby-lang.org/en/2.7.0/SystemCallError.html)\nif it failed.\n\nArguments for the function can follow *num*. They must be either `String`\nobjects or `Integer` objects. A `String` object is passed as a pointer to\nthe byte sequence. An `Integer` object is passed as an integer whose bit\nsize is the same as a pointer. Up to nine parameters may be passed.\n\nThe function identified by *num* is system dependent. On some Unix systems,\nthe numbers may be obtained from a header file called `syscall.h`.\n\n```ruby\nsyscall 4, 1, \"hello\\n\", 6   # '4' is write(2) on our box\n```\n\n*produces:*\n\n```ruby\nhello\n```\n\nCalling `syscall` on a platform which does not have any way to an arbitrary\nsystem function just fails with\n[`NotImplementedError`](https://docs.ruby-lang.org/en/2.7.0/NotImplementedError.html).\n\n**Note:** `syscall` is essentially unsafe and unportable. Feel free to shoot\nyour foot. The DL\n([`Fiddle`](https://docs.ruby-lang.org/en/2.7.0/Fiddle.html)) library is\npreferred for safer and a bit more portable programming."},"sortText":"000262","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"syscall${0}"}},{"label":"system","kind":2,"detail":"Kernel#system","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    env: T.any(String, [String, String], T::Hash[String, T.nilable(String)]),\n    argv0: T.any(String, [String, String]),\n    args: String,\n    options: T.untyped\n  )\n  .returns(T.nilable(T::Boolean))\nend\ndef system(env, argv0=…, *args, **options); end\n```\n\n---\n\nExecutes *command...* in a subshell. *command...* is one of following forms.\n\n`commandline`\n:   command line string which is passed to the standard shell\n`cmdname, arg1, ...`\n:   command name and one or more arguments (no shell)\n`[cmdname, argv0], arg1, ...`\n:   command name, `argv[0]` and zero or more arguments (no shell)\n\n\nsystem returns `true` if the command gives zero exit status, `false` for non\nzero exit status. Returns `nil` if command execution fails. An error status\nis available in `$?`.\n\nIf the `exception: true` argument is passed, the method raises an exception\ninstead of returning `false` or `nil`.\n\nThe arguments are processed in the same way as for\n[`Kernel#spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn).\n\nThe hash arguments, env and options, are same as\n[`exec`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-exec) and\n[`spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn).\nSee\n[`Kernel#spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn)\nfor details.\n\n```ruby\nsystem(\"echo *\")\nsystem(\"echo\", \"*\")\n```\n\n*produces:*\n\n```\nconfig.h main.rb\n*\n```\n\nError handling:\n\n```ruby\nsystem(\"cat nonexistent.txt\")\n# => false\nsystem(\"catt nonexistent.txt\")\n# => nil\n\nsystem(\"cat nonexistent.txt\", exception: true)\n# RuntimeError (Command failed with exit 1: cat)\nsystem(\"catt nonexistent.txt\", exception: true)\n# Errno::ENOENT (No such file or directory - catt)\n```\n\nSee\n[`Kernel#exec`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-exec)\nfor the standard shell."},"sortText":"000263","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"system${0}"}},{"label":"taint","kind":2,"detail":"Kernel#taint","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef taint; end\n```"},"sortText":"000264","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"taint${0}"}},{"label":"tainted?","kind":2,"detail":"Kernel#tainted?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef tainted?; end\n```"},"sortText":"000265","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"tainted?${0}"}},{"label":"tap","kind":2,"detail":"Kernel#tap","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.proc.params(arg0: T.untyped).void).returns(Integer)}\ndef tap(&blk); end\n```\n\n---\n\nYields self to the block, and then returns self. The primary purpose of this\nmethod is to \"tap into\" a method chain, in order to perform operations on\nintermediate results within the chain.\n\n```ruby\n(1..10)                  .tap {|x| puts \"original: #{x}\" }\n  .to_a                  .tap {|x| puts \"array:    #{x}\" }\n  .select {|x| x.even? } .tap {|x| puts \"evens:    #{x}\" }\n  .map {|x| x*x }        .tap {|x| puts \"squares:  #{x}\" }\n```"},"sortText":"000266","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"tap${0}"}},{"label":"test","kind":2,"detail":"Kernel#test","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    cmd: String,\n    file1: String,\n    file2: String\n  )\n  .returns(T.any(TrueClass, FalseClass, Time))\nend\ndef test(cmd, file1, file2=…); end\n```\n\n---\n\nUses the character `cmd` to perform various tests on `file1` (first table\nbelow) or on `file1` and `file2` (second table).\n\n[`File`](https://docs.ruby-lang.org/en/2.7.0/File.html) tests on a single\nfile:\n\n```\nCmd    Returns   Meaning\n\"A\"  | Time    | Last access time for file1\n\"b\"  | boolean | True if file1 is a block device\n\"c\"  | boolean | True if file1 is a character device\n\"C\"  | Time    | Last change time for file1\n\"d\"  | boolean | True if file1 exists and is a directory\n\"e\"  | boolean | True if file1 exists\n\"f\"  | boolean | True if file1 exists and is a regular file\n\"g\"  | boolean | True if file1 has the \\CF{setgid} bit\n     |         | set (false under NT)\n\"G\"  | boolean | True if file1 exists and has a group\n     |         | ownership equal to the caller's group\n\"k\"  | boolean | True if file1 exists and has the sticky bit set\n\"l\"  | boolean | True if file1 exists and is a symbolic link\n\"M\"  | Time    | Last modification time for file1\n\"o\"  | boolean | True if file1 exists and is owned by\n     |         | the caller's effective uid\n\"O\"  | boolean | True if file1 exists and is owned by\n     |         | the caller's real uid\n\"p\"  | boolean | True if file1 exists and is a fifo\n\"r\"  | boolean | True if file1 is readable by the effective\n     |         | uid/gid of the caller\n\"R\"  | boolean | True if file is readable by the real\n     |         | uid/gid of the caller\n\"s\"  | int/nil | If file1 has nonzero size, return the size,\n     |         | otherwise return nil\n\"S\"  | boolean | True if file1 exists and is a socket\n\"u\"  | boolean | True if file1 has the setuid bit set\n\"w\"  | boolean | True if file1 exists and is writable by\n     |         | the effective uid/gid\n\"W\"  | boolean | True if file1 exists and is writable by\n     |         | the real uid/gid\n\"x\"  | boolean | True if file1 exists and is executable by\n     |         | the effective uid/gid\n\"X\"  | boolean | True if file1 exists and is executable by\n     |         | the real uid/gid\n\"z\"  | boolean | True if file1 exists and has a zero length\n```\n\nTests that take two files:\n\n```\n\"-\"  | boolean | True if file1 and file2 are identical\n\"=\"  | boolean | True if the modification times of file1\n     |         | and file2 are equal\n\"<\"  | boolean | True if the modification time of file1\n     |         | is prior to that of file2\n\">\"  | boolean | True if the modification time of file1\n     |         | is after that of file2\n```"},"sortText":"000267","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"test${0}"}},{"label":"then","kind":2,"detail":"Kernel#then","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:X))\n  )\n  .returns(T.type_parameter(:X))\nend\ndef then(&blk); end\n```\n\n---\n\nYields self to the block and returns the result of the block.\n\n```ruby\n3.next.then {|x| x**x }.to_s             #=> \"256\"\n```\n\nGood usage for `then` is value piping in method chains:\n\n```ruby\nrequire 'open-uri'\nrequire 'json'\n\nconstruct_url(arguments).\n  then {|url| URI(url).read }.\n  then {|response| JSON.parse(response) }\n```\n\nWhen called without block, the method returns `Enumerator`, which can be\nused, for example, for conditional circuit-breaking:\n\n```ruby\n# meets condition, no-op\n1.then.detect(&:odd?)            # => 1\n# does not meet condition, drop value\n2.then.detect(&:odd?)            # => nil\n```"},"sortText":"000268","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"then${0}"}},{"label":"throw","kind":2,"detail":"Kernel#throw","documentation":{"kind":"markdown","value":"```ruby\nsig {params(tag: Object, obj: BasicObject).returns(T.noreturn)}\ndef throw(tag, obj=…); end\n```\n\n---\n\nTransfers control to the end of the active `catch` block waiting for *tag*.\nRaises `UncaughtThrowError` if there is no `catch` block for the *tag*. The\noptional second parameter supplies a return value for the `catch` block,\nwhich otherwise defaults to `nil`. For examples, see Kernel::catch."},"sortText":"000269","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"throw${0}"}},{"label":"to_enum","kind":2,"detail":"Kernel#to_enum","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef to_enum(method=…, *args); end\n```"},"sortText":"000270","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"to_enum${0}"}},{"label":"to_enum","kind":2,"detail":"Kernel#to_enum (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef to_enum (overload.1)(method=…, *args, &blk); end\n```"},"sortText":"000271","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"to_enum${0}"}},{"label":"trap","kind":2,"detail":"Kernel#trap","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    signal: T.any(Integer, String, Symbol),\n    command: BasicObject\n  )\n  .returns(T.any(String, Proc))\nend\ndef trap(signal, command=…); end\n```\n\n---\n\nSpecifies the handling of signals. The first parameter is a signal name (a\nstring such as \"SIGALRM\", \"SIGUSR1\", and so on) or a signal number. The\ncharacters \"SIG\" may be omitted from the signal name. The command or block\nspecifies code to be run when the signal is raised. If the command is the\nstring \"IGNORE\" or \"SIG\\_IGN\", the signal will be ignored. If the command is\n\"DEFAULT\" or \"SIG\\_DFL\", the Ruby's default handler will be invoked. If the\ncommand is \"EXIT\", the script will be terminated by the signal. If the\ncommand is \"SYSTEM\\_DEFAULT\", the operating system's default handler will be\ninvoked. Otherwise, the given command or block will be run. The special\nsignal name \"EXIT\" or signal number zero will be invoked just prior to\nprogram termination. trap returns the previous handler for the given signal.\n\n```ruby\nSignal.trap(0, proc { puts \"Terminating: #{$$}\" })\nSignal.trap(\"CLD\")  { puts \"Child died\" }\nfork && Process.wait\n```\n\nproduces:\n\n```\nTerminating: 27461\nChild died\nTerminating: 27460\n```"},"sortText":"000272","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"trap${0}"}},{"label":"trap","kind":2,"detail":"Kernel#trap (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    signal: T.any(Integer, String, Symbol),\n    blk: T.proc.params(arg0: Integer).returns(BasicObject)\n  )\n  .returns(T.any(String, Proc))\nend\ndef trap (overload.1)(signal, &blk); end\n```\n\n---\n\nSpecifies the handling of signals. The first parameter is a signal name (a\nstring such as \"SIGALRM\", \"SIGUSR1\", and so on) or a signal number. The\ncharacters \"SIG\" may be omitted from the signal name. The command or block\nspecifies code to be run when the signal is raised. If the command is the\nstring \"IGNORE\" or \"SIG\\_IGN\", the signal will be ignored. If the command is\n\"DEFAULT\" or \"SIG\\_DFL\", the Ruby's default handler will be invoked. If the\ncommand is \"EXIT\", the script will be terminated by the signal. If the\ncommand is \"SYSTEM\\_DEFAULT\", the operating system's default handler will be\ninvoked. Otherwise, the given command or block will be run. The special\nsignal name \"EXIT\" or signal number zero will be invoked just prior to\nprogram termination. trap returns the previous handler for the given signal.\n\n```ruby\nSignal.trap(0, proc { puts \"Terminating: #{$$}\" })\nSignal.trap(\"CLD\")  { puts \"Child died\" }\nfork && Process.wait\n```\n\nproduces:\n\n```\nTerminating: 27461\nChild died\nTerminating: 27460\n```"},"sortText":"000273","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"trap${0}"}},{"label":"trust","kind":2,"detail":"Kernel#trust","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef trust; end\n```"},"sortText":"000274","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"trust${0}"}},{"label":"undef","kind":2,"detail":"Kernel#undef","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg: BasicObject).void}\ndef undef(*arg); end\n```"},"sortText":"000275","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"undef${0}"}},{"label":"untaint","kind":2,"detail":"Kernel#untaint","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef untaint; end\n```"},"sortText":"000276","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"untaint${0}"}},{"label":"untrust","kind":2,"detail":"Kernel#untrust","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef untrust; end\n```"},"sortText":"000277","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"untrust${0}"}},{"label":"untrusted?","kind":2,"detail":"Kernel#untrusted?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef untrusted?; end\n```"},"sortText":"000278","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"untrusted?${0}"}},{"label":"warn","kind":2,"detail":"Kernel#warn","documentation":{"kind":"markdown","value":"```ruby\nsig {params(msg: String).returns(NilClass)}\ndef warn(*msg); end\n```\n\n---\n\nIf warnings have been disabled (for example with the `-W0` flag), does\nnothing. Otherwise, converts each of the messages to strings, appends a\nnewline character to the string if the string does not end in a newline, and\ncalls\n[`Warning.warn`](https://docs.ruby-lang.org/en/2.7.0/Warning.html#method-i-warn)\nwith the string.\n\n```\n  warn(\"warning 1\", \"warning 2\")\n\n<em>produces:</em>\n\n  warning 1\n  warning 2\n```\n\nIf the `uplevel` keyword argument is given, the string will be prepended\nwith information for the given caller frame in the same format used by the\n`rb_warn` C function.\n\n```\n  # In baz.rb\n  def foo\n    warn(\"invalid call to foo\", uplevel: 1)\n  end\n\n  def bar\n    foo\n  end\n\n  bar\n\n<em>produces:</em>\n\n  baz.rb:6: warning: invalid call to foo\n```\n\nIf `category` keyword argument is given, passes the category to\n`Warning.warn`. The category given must be be one of the following\ncategories:\n\n:deprecated\n:   Used for warning for deprecated functionality that may be removed in the\n    future.\n:experimental\n:   Used for experimental features that may change in future releases."},"sortText":"000279","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"warn${0}"}},{"label":"yield_self","kind":2,"detail":"Kernel#yield_self","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:X))\n  )\n  .returns(T.type_parameter(:X))\nend\ndef yield_self(&blk); end\n```\n\n---\n\nYields self to the block and returns the result of the block.\n\n```ruby\n\"my string\".yield_self {|s| s.upcase }   #=> \"MY STRING\"\n```\n\nGood usage for `then` is value piping in method chains:\n\n```ruby\nrequire 'open-uri'\nrequire 'json'\n\nconstruct_url(arguments).\n  then {|url| URI(url).read }.\n  then {|response| JSON.parse(response) }\n```"},"sortText":"000280","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"yield_self${0}"}},{"label":"!","kind":2,"detail":"BasicObject#!","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef !; end\n```\n\n---\n\nBoolean negate."},"sortText":"000281","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"!${0}"}},{"label":"!=","kind":2,"detail":"BasicObject#!=","documentation":{"kind":"markdown","value":"```ruby\nsig {params(other: BasicObject).returns(T::Boolean)}\ndef !=(other); end\n```\n\n---\n\nReturns true if two objects are not-equal, otherwise false."},"sortText":"000282","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"!=${0}"}},{"label":"__id__","kind":2,"detail":"BasicObject#__id__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef __id__; end\n```\n\n---\n\nReturns an integer identifier for `obj`.\n\nThe same number will be returned on all calls to `object_id` for a given\nobject, and no two active objects will share an id.\n\nNote: that some objects of builtin classes are reused for optimization. This\nis the case for immediate values and frozen string literals.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_id\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`object_id`.\n\nImmediate values are not passed by reference but are passed by value: `nil`,\n`true`, `false`, Fixnums, Symbols, and some Floats.\n\n```ruby\nObject.new.object_id  == Object.new.object_id  # => false\n(21 * 2).object_id    == (21 * 2).object_id    # => true\n\"hello\".object_id     == \"hello\".object_id     # => false\n\"hi\".freeze.object_id == \"hi\".freeze.object_id # => true\n```"},"sortText":"000283","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"__id__${0}"}},{"label":"__send__","kind":2,"detail":"BasicObject#__send__","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol, arg1: BasicObject).returns(T.untyped)}\ndef __send__(arg0, *arg1); end\n```\n\n---\n\nInvokes the method identified by *symbol*, passing it any arguments\nspecified. You can use `__send__` if the name `send` clashes with an\nexisting method in *obj*. When the method is identified by a string, the\nstring is converted to a symbol.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_send\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`send`.\n\n```ruby\nclass Klass\n  def hello(*args)\n    \"Hello \" + args.join(' ')\n  end\nend\nk = Klass.new\nk.send :hello, \"gentle\", \"readers\"   #=> \"Hello gentle readers\"\n```"},"sortText":"000284","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"__send__${0}"}},{"label":"instance_eval","kind":2,"detail":"BasicObject#instance_eval","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, filename: String, lineno: Integer).returns(T.untyped)}\ndef instance_eval(arg0=…, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver (*obj*). In order to set the context, the\nvariable `self` is set to *obj* while the code is executing, giving the code\naccess to *obj*'s instance variables and private methods.\n\nWhen `instance_eval` is given a block, *obj* is also passed in as the\nblock's only argument.\n\nWhen `instance_eval` is given a `String`, the optional second and third\nparameters supply a filename and starting line number that are used when\nreporting compilation errors.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\n  private\n  def the_secret\n    \"Ssssh! The secret is #{@secret}.\"\n  end\nend\nk = KlassWithSecret.new\nk.instance_eval { @secret }          #=> 99\nk.instance_eval { the_secret }       #=> \"Ssssh! The secret is 99.\"\nk.instance_eval {|obj| obj == self } #=> true\n```"},"sortText":"000285","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"instance_eval${0}"}},{"label":"instance_eval","kind":2,"detail":"BasicObject#instance_eval (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_eval (overload.1)(&blk); end\n```\n\n---\n\nEvaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver (*obj*). In order to set the context, the\nvariable `self` is set to *obj* while the code is executing, giving the code\naccess to *obj*'s instance variables and private methods.\n\nWhen `instance_eval` is given a block, *obj* is also passed in as the\nblock's only argument.\n\nWhen `instance_eval` is given a `String`, the optional second and third\nparameters supply a filename and starting line number that are used when\nreporting compilation errors.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\n  private\n  def the_secret\n    \"Ssssh! The secret is #{@secret}.\"\n  end\nend\nk = KlassWithSecret.new\nk.instance_eval { @secret }          #=> 99\nk.instance_eval { the_secret }       #=> \"Ssssh! The secret is 99.\"\nk.instance_eval {|obj| obj == self } #=> true\n```"},"sortText":"000286","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"instance_eval${0}"}},{"label":"instance_exec","kind":2,"detail":"BasicObject#instance_exec","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    args: T.type_parameter(:V),\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_exec(*args, &blk); end\n```\n\n---\n\nExecutes the given block within the context of the receiver (*obj*). In\norder to set the context, the variable `self` is set to *obj* while the code\nis executing, giving the code access to *obj*'s instance variables.\nArguments are passed as block parameters.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\nend\nk = KlassWithSecret.new\nk.instance_exec(5) {|x| @secret+x }   #=> 104\n```"},"sortText":"000287","insertTextFormat":2,"textEdit":{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"newText":"instance_exec${0}"}}]}}

[2023-08-10 22:57:11.462] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":103},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x: Integer).void}\n  def example(x)\n    if x.even\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:11.514] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":6,"character":13},"end":{"line":6,"character":13}},"context":{"diagnostics":[]}}}

[2023-08-10 22:57:11.559] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:11.559] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:11.559] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:11.559] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:11.560] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":46}}

[2023-08-10 22:57:11.561] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":46,"requestMethod":"textDocument/codeAction","error":{"code":-32800,"message":"Request was canceled"}}

[2023-08-10 22:57:11.566] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 57
[2023-08-10 22:57:11.567] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":13}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `even` does not exist on `Integer` (fix available)","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":5,"character":14},"end":{"line":5,"character":15}}},"message":"Got `Integer` originating from:"},{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":6,"character":9},"end":{"line":6,"character":13}}},"message":"Replace with `even?`"},{"location":{"uri":"sorbet:https://github.com/sorbet/sorbet/tree/master/rbi/core/integer.rbi","range":{"start":{"line":703,"character":2},"end":{"line":703,"character":13}}},"message":"Defined here"}]},{"range":{"start":{"line":9,"character":3},"end":{"line":10,"character":0}},"severity":1,"code":2001,"codeDescription":{"href":"https://srb.help/2001"},"message":"unexpected token \"end of file\"","relatedInformation":[]},{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":6}},"severity":1,"code":2003,"codeDescription":{"href":"https://srb.help/2003"},"message":"Hint: this \"if\" token might not be properly closed","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":8,"character":2},"end":{"line":8,"character":5}}},"message":"Matching `end` found here but is not indented as far"}]}]}}

[2023-08-10 22:57:11.760] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":104},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x: Integer).void}\n  def example(x)\n    if x.even?\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:11.826] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":47,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":6,"character":14},"end":{"line":6,"character":14}},"context":{"diagnostics":[]}}}

[2023-08-10 22:57:11.860] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:11.860] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:11.860] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:11.860] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:11.865] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 58
[2023-08-10 22:57:11.865] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":9,"character":3},"end":{"line":10,"character":0}},"severity":1,"code":2001,"codeDescription":{"href":"https://srb.help/2001"},"message":"unexpected token \"end of file\"","relatedInformation":[]},{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":6}},"severity":1,"code":2003,"codeDescription":{"href":"https://srb.help/2003"},"message":"Hint: this \"if\" token might not be properly closed","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":8,"character":2},"end":{"line":8,"character":5}}},"message":"Matching `end` found here but is not indented as far"}]}]}}

[2023-08-10 22:57:11.866] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:11.866] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:11.878] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":47,"requestMethod":"textDocument/codeAction","result":[]}

[2023-08-10 22:57:12.118] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":105},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x: Integer).void}\n  def example(x)\n    if x.even?\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:12.119] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":48,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":6,"character":14},"end":{"line":6,"character":14}},"context":{"diagnostics":[]}}}

[2023-08-10 22:57:12.218] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:12.218] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:12.218] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:12.218] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:12.225] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 59
[2023-08-10 22:57:12.225] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":9,"character":3},"end":{"line":10,"character":0}},"severity":1,"code":2001,"codeDescription":{"href":"https://srb.help/2001"},"message":"unexpected token \"end of file\"","relatedInformation":[]},{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":6}},"severity":1,"code":2003,"codeDescription":{"href":"https://srb.help/2003"},"message":"Hint: this \"if\" token might not be properly closed","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":8,"character":2},"end":{"line":8,"character":5}}},"message":"Matching `end` found here but is not indented as far"}]}]}}

[2023-08-10 22:57:12.227] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:12.227] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:12.236] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":48,"requestMethod":"textDocument/codeAction","result":[]}

[2023-08-10 22:57:12.673] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":106},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x: Integer).void}\n  def example(x)\n    if x.even?\n      \n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:12.768] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:12.768] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:12.768] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:12.768] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:12.775] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 60
[2023-08-10 22:57:12.775] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":10,"character":3},"end":{"line":11,"character":0}},"severity":1,"code":2001,"codeDescription":{"href":"https://srb.help/2001"},"message":"unexpected token \"end of file\"","relatedInformation":[]},{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":6}},"severity":1,"code":2003,"codeDescription":{"href":"https://srb.help/2003"},"message":"Hint: this \"if\" token might not be properly closed","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":9,"character":2},"end":{"line":9,"character":5}}},"message":"Matching `end` found here but is not indented as far"}]}]}}

[2023-08-10 22:57:12.883] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":107},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x: Integer).void}\n  def example(x)\n    if x.even?\n      e\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:12.884] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":49,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":7,"character":7},"context":{"triggerKind":1}}}

[2023-08-10 22:57:12.976] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:12.976] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:12.976] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:12.976] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:12.984] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 61
[2023-08-10 22:57:12.985] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[{"range":{"start":{"line":10,"character":3},"end":{"line":11,"character":0}},"severity":1,"code":2001,"codeDescription":{"href":"https://srb.help/2001"},"message":"unexpected token \"end of file\"","relatedInformation":[]},{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"severity":1,"code":7003,"codeDescription":{"href":"https://srb.help/7003"},"message":"Method `e` does not exist on `A`","relatedInformation":[]},{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":6}},"severity":1,"code":2003,"codeDescription":{"href":"https://srb.help/2003"},"message":"Hint: this \"if\" token might not be properly closed","relatedInformation":[{"location":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","range":{"start":{"line":9,"character":2},"end":{"line":9,"character":5}}},"message":"Matching `end` found here but is not indented as far"}]}]}}

[2023-08-10 22:57:13.032] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":49}}

[2023-08-10 22:57:13.034] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":49,"requestMethod":"textDocument/completion","result":{"isIncomplete":false,"items":[{"label":"else","kind":14,"detail":"(sorbet) Ruby keyword: else","documentation":"The unhandled condition in case, if and unless expressions.","sortText":"000000","insertTextFormat":1,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"else"}},{"label":"elsif","kind":15,"detail":"(sorbet) Snippet: elsif","documentation":{"kind":"markdown","value":"```ruby\nelsif ${1:expr}$0\n```\n\n---\n\nAn alternate condition for an if expression."},"sortText":"000001","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"elsif ${1:expr}$0"}},{"label":"end","kind":14,"detail":"(sorbet) Ruby keyword: end","documentation":"The end of a syntax block. Used by classes, modules, methods, exception handling and control expressions.","sortText":"000002","insertTextFormat":1,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"end"}},{"label":"ensure","kind":14,"detail":"(sorbet) Ruby keyword: ensure","documentation":"Starts a section of code that is always run when an exception is raised.","sortText":"000003","insertTextFormat":1,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"ensure"}},{"label":"enum","kind":15,"detail":"(sorbet) Snippet: enum","documentation":{"kind":"markdown","value":"```ruby\nclass ${1:EnumName} < T::Enum\n  enums do\n    $0\n  end\nend\n```\n\n---\n\nCreates an enum class"},"sortText":"000004","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"class ${1:EnumName} < T::Enum\n  enums do\n    $0\n  end\nend"}},{"label":"example","kind":2,"detail":"A#example","documentation":{"kind":"markdown","value":"```ruby\nsig {params(x: Integer).void}\ndef example(x); end\n```"},"sortText":"000005","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"example(${1:Integer})${0}"}},{"label":"singleton_class","kind":2,"detail":"Object#singleton_class","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.untyped)}\ndef singleton_class; end\n```"},"sortText":"000006","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"singleton_class${0}"}},{"label":"enum_for","kind":2,"detail":"Kernel#enum_for","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef enum_for(method=…, *args); end\n```"},"sortText":"000007","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"enum_for${0}"}},{"label":"enum_for","kind":2,"detail":"Kernel#enum_for (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef enum_for (overload.1)(method=…, *args, &blk); end\n```"},"sortText":"000008","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"enum_for${0}"}},{"label":"eql?","kind":2,"detail":"Kernel#eql?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(other: BasicObject).returns(T::Boolean)}\ndef eql?(other); end\n```"},"sortText":"000009","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"eql?(${1:BasicObject})${0}"}},{"label":"eval","kind":2,"detail":"Kernel#eval","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: String,\n    arg1: T.nilable(Binding),\n    filename: String,\n    lineno: Integer\n  )\n  .returns(T.untyped)\nend\ndef eval(arg0, arg1=…, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates the Ruby expression(s) in *string*. If *binding* is given, which\nmust be a [`Binding`](https://docs.ruby-lang.org/en/2.7.0/Binding.html)\nobject, the evaluation is performed in its context. If the optional\n*filename* and *lineno* parameters are present, they will be used when\nreporting syntax errors.\n\n```ruby\ndef get_binding(str)\n  return binding\nend\nstr = \"hello\"\neval \"str + ' Fred'\"                      #=> \"hello Fred\"\neval \"str + ' Fred'\", get_binding(\"bye\")  #=> \"bye Fred\"\n```"},"sortText":"000010","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"eval(${1:String})${0}"}},{"label":"exec","kind":2,"detail":"Kernel#exec","documentation":{"kind":"markdown","value":"```ruby\nsig {params(args: String).returns(T.noreturn)}\ndef exec(*args); end\n```\n\n---\n\nReplaces the current process by running the given external *command*, which\ncan take one of the following forms:\n\n`exec(commandline)`\n:   command line string which is passed to the standard shell\n`exec(cmdname, arg1, ...)`\n:   command name and one or more arguments (no shell)\n`exec([cmdname, argv0], arg1, ...)`\n:   command name, [argv](0) and zero or more arguments (no shell)\n\n\nIn the first form, the string is taken as a command line that is subject to\nshell expansion before being executed.\n\nThe standard shell always means `\"/bin/sh\"` on Unix-like systems, otherwise,\n`ENV[\"RUBYSHELL\"]` or `ENV[\"COMSPEC\"]` on Windows and similar. The command\nis passed as an argument to the `\"-c\"` switch to the shell, except in the\ncase of `COMSPEC`.\n\nIf the string from the first form (`exec(\"command\")`) follows these simple\nrules:\n\n*   no meta characters\n*   not starting with shell reserved word or special built-in\n*   Ruby invokes the command directly without shell\n\n\nYou can force shell invocation by adding \";\" to the string (because \";\" is a\nmeta character).\n\nNote that this behavior is observable by pid obtained (return value of\nspawn() and\n[`IO#pid`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-pid) for\n[`IO.popen`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-popen)) is\nthe pid of the invoked command, not shell.\n\nIn the second form (`exec(\"command1\", \"arg1\", ...)`), the first is taken as\na command name and the rest are passed as parameters to command with no\nshell expansion.\n\nIn the third form (`exec([\"command\", \"argv0\"], \"arg1\", ...)`), starting a\ntwo-element array at the beginning of the command, the first element is the\ncommand to be executed, and the second argument is used as the `argv[0]`\nvalue, which may show up in process listings.\n\nIn order to execute the command, one of the `exec(2)` system calls are used,\nso the running command may inherit some of the environment of the original\nprogram (including open file descriptors).\n\nThis behavior is modified by the given `env` and `options` parameters. See\n::spawn for details.\n\nIf the command fails to execute (typically Errno::ENOENT when it was not\nfound) a\n[`SystemCallError`](https://docs.ruby-lang.org/en/2.7.0/SystemCallError.html)\nexception is raised.\n\nThis method modifies process attributes according to given `options` before\n`exec(2)` system call. See ::spawn for more details about the given\n`options`.\n\nThe modified attributes may be retained when `exec(2)` system call fails.\n\nFor example, hard resource limits are not restorable.\n\nConsider to create a child process using ::spawn or\n[`Kernel#system`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-system)\nif this is not acceptable.\n\n```ruby\nexec \"echo *\"       # echoes list of files in current directory\n# never get here\n\nexec \"echo\", \"*\"    # echoes an asterisk\n# never get here\n```"},"sortText":"000011","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"exec${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef exit; end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000012","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"exit${0}"}},{"label":"exit","kind":2,"detail":"Kernel#exit (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit (overload.1)(status=…); end\n```\n\n---\n\nInitiates the termination of the Ruby script by raising the\n[`SystemExit`](https://docs.ruby-lang.org/en/2.7.0/SystemExit.html)\nexception. This exception may be caught. The optional parameter is used to\nreturn a status code to the invoking environment. `true` and `FALSE` of\n*status* means success and failure respectively. The interpretation of other\ninteger values are system dependent.\n\n```ruby\nbegin\n  exit\n  puts \"never get here\"\nrescue SystemExit\n  puts \"rescued a SystemExit exception\"\nend\nputs \"after begin block\"\n```\n\n*produces:*\n\n```\nrescued a SystemExit exception\nafter begin block\n```\n\nJust prior to termination, Ruby executes any `at_exit` functions (see\nKernel::at\\_exit) and runs any object finalizers (see\n[`ObjectSpace::define_finalizer`](https://docs.ruby-lang.org/en/2.7.0/ObjectSpace.html#method-c-define_finalizer)).\n\n```ruby\nat_exit { puts \"at_exit function\" }\nObjectSpace.define_finalizer(\"string\",  proc { puts \"in finalizer\" })\nexit\n```\n\n*produces:*\n\n```\nat_exit function\nin finalizer\n```"},"sortText":"000013","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"exit${0}"}},{"label":"exit!","kind":2,"detail":"Kernel#exit!","documentation":{"kind":"markdown","value":"```ruby\nsig {params(status: T.any(Integer, TrueClass, FalseClass)).returns(T.noreturn)}\ndef exit!(status=…); end\n```\n\n---\n\nExits the process immediately. No exit handlers are run. *status* is\nreturned to the underlying system as the exit status.\n\n```ruby\nProcess.exit!(true)\n```"},"sortText":"000014","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"exit!${0}"}},{"label":"extend","kind":2,"detail":"Kernel#extend","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Module).returns(A)}\ndef extend(*arg0); end\n```"},"sortText":"000015","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"extend${0}"}},{"label":"BigDecimal","kind":2,"detail":"Kernel#BigDecimal","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    initial: T.any(Integer, Float, Rational, BigDecimal, String),\n    digits: Integer,\n    exception: T::Boolean\n  )\n  .returns(BigDecimal)\nend\ndef BigDecimal(initial, digits=…, exception: …); end\n```\n\n---\n\n```\nReturns the \\BigDecimal converted from +value+\nwith a precision of +ndigits+ decimal digits.\n\nWhen +ndigits+ is less than the number of significant digits\nin the value, the result is rounded to that number of digits,\naccording to the current rounding mode; see BigDecimal.mode.\n```\n\nReturns `value` converted to a\n[`BigDecimal`](https://docs.ruby-lang.org/en/2.7.0/BigDecimal.html),\ndepending on the type of `value`:\n\n*   [`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html),\n    [`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html),\n    [`Rational`](https://docs.ruby-lang.org/en/2.7.0/Rational.html),\n    [`Complex`](https://docs.ruby-lang.org/en/2.7.0/Complex.html), or\n    BigDecimal: converted directly:\n\n```ruby\n# Integer, Complex, or BigDecimal value does not require ndigits; ignored if given.\nBigDecimal(2)                     # => 0.2e1\nBigDecimal(Complex(2, 0))         # => 0.2e1\nBigDecimal(BigDecimal(2))         # => 0.2e1\n# Float or Rational value requires ndigits.\nBigDecimal(2.0, 0)                # => 0.2e1\nBigDecimal(Rational(2, 1), 0)     # => 0.2e1\n```\n\n*   String: converted by parsing if it contains an integer or floating-point\n    literal; leading and trailing whitespace is ignored:\n\n```ruby\n# String does not require ndigits; ignored if given.\nBigDecimal('2')     # => 0.2e1\nBigDecimal('2.0')   # => 0.2e1\nBigDecimal('0.2e1') # => 0.2e1\nBigDecimal(' 2.0 ') # => 0.2e1\n```\n\n*   Other type that responds to method `:to_str`: first converted to a\n    string, then converted to a\n    [`BigDecimal`](https://docs.ruby-lang.org/en/2.7.0/BigDecimal.html), as\n    above.\n\n*   Other type:\n\n    *   Raises an exception if keyword argument `exception` is `true`.\n    *   Returns `nil` if keyword argument `exception` is `true`.\n\n\n\nRaises an exception if `value` evaluates to a\n[`Float`](https://docs.ruby-lang.org/en/2.7.0/Float.html) and `digits` is\nlarger than Float::DIG + 1."},"sortText":"000016","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"BigDecimal(${1:T.any(Integer, Float, Rational, BigDecimal, String)})${0}"}},{"label":"Complex","kind":2,"detail":"Kernel#Complex","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    x: T.any(Numeric, String),\n    y: T.any(Numeric, String),\n    exception: T::Boolean\n  )\n  .returns(Complex)\nend\ndef Complex(x, y=…, exception: …); end\n```\n\n---\n\nReturns x+i\\*y;\n\n```ruby\nComplex(1, 2)    #=> (1+2i)\nComplex('1+2i')  #=> (1+2i)\nComplex(nil)     #=> TypeError\nComplex(1, nil)  #=> TypeError\n\nComplex(1, nil, exception: false)  #=> nil\nComplex('1+2', exception: false)   #=> nil\n```\n\nSyntax of string form:\n\n```\nstring form = extra spaces , complex , extra spaces ;\ncomplex = real part | [ sign ] , imaginary part\n        | real part , sign , imaginary part\n        | rational , \"@\" , rational ;\nreal part = rational ;\nimaginary part = imaginary unit | unsigned rational , imaginary unit ;\nrational = [ sign ] , unsigned rational ;\nunsigned rational = numerator | numerator , \"/\" , denominator ;\nnumerator = integer part | fractional part | integer part , fractional part ;\ndenominator = digits ;\ninteger part = digits ;\nfractional part = \".\" , digits , [ ( \"e\" | \"E\" ) , [ sign ] , digits ] ;\nimaginary unit = \"i\" | \"I\" | \"j\" | \"J\" ;\nsign = \"-\" | \"+\" ;\ndigits = digit , { digit | \"_\" , digit };\ndigit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\nextra spaces = ? \\s* ? ;\n```\n\nSee\n[`String#to_c`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_c)."},"sortText":"000017","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"Complex(${1:T.any(Numeric, String)})${0}"}},{"label":"Integer","kind":2,"detail":"Kernel#Integer","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg: T.any(Numeric, String),\n    base: Integer,\n    exception: T::Boolean\n  )\n  .returns(Integer)\nend\ndef Integer(arg, base=…, exception: …); end\n```\n\n---\n\nConverts *arg* to an\n[`Integer`](https://docs.ruby-lang.org/en/2.7.0/Integer.html).\n[`Numeric`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html) types are\nconverted directly (with floating point numbers being truncated). *base* (0,\nor between 2 and 36) is a base for integer string representation. If *arg*\nis a [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html), when\n*base* is omitted or equals zero, radix indicators (`0`, `0b`, and `0x`) are\nhonored. In any case, strings should consist only of one or more digits,\nexcept for that a sign, one underscore between two digits, and\nleading/trailing spaces are optional. This behavior is different from that\nof\n[`String#to_i`](https://docs.ruby-lang.org/en/2.7.0/String.html#method-i-to_i).\nNon string values will be converted by first trying `to_int`, then `to_i`.\n\nPassing `nil` raises a\n[`TypeError`](https://docs.ruby-lang.org/en/2.7.0/TypeError.html), while\npassing a [`String`](https://docs.ruby-lang.org/en/2.7.0/String.html) that\ndoes not conform with numeric representation raises an\n[`ArgumentError`](https://docs.ruby-lang.org/en/2.7.0/ArgumentError.html).\nThis behavior can be altered by passing `exception: false`, in this case a\nnot convertible value will return `nil`.\n\n```ruby\nInteger(123.999)    #=> 123\nInteger(\"0x1a\")     #=> 26\nInteger(Time.new)   #=> 1204973019\nInteger(\"0930\", 10) #=> 930\nInteger(\"111\", 2)   #=> 7\nInteger(\" +1_0 \")   #=> 10\nInteger(nil)        #=> TypeError: can't convert nil into Integer\nInteger(\"x\")        #=> ArgumentError: invalid value for Integer(): \"x\"\n\nInteger(\"x\", exception: false)        #=> nil\n```"},"sortText":"000018","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"Integer(${1:T.any(Numeric, String)})${0}"}},{"label":"Pathname","kind":2,"detail":"Kernel#Pathname","documentation":{"kind":"markdown","value":"```ruby\nsig {params(path: T.any(String, Pathname)).returns(Pathname)}\ndef Pathname(path); end\n```\n\n---\n\nCreates a new\n[`Pathname`](https://docs.ruby-lang.org/en/2.7.0/Pathname.html) object from\nthe given string, `path`, and returns pathname object.\n\nIn order to use this constructor, you must first require the\n[`Pathname`](https://docs.ruby-lang.org/en/2.7.0/Pathname.html) standard\nlibrary extension.\n\n```ruby\nrequire 'pathname'\nPathname(\"/home/zzak\")\n#=> #<Pathname:/home/zzak>\n```\n\nSee also\n[`Pathname::new`](https://docs.ruby-lang.org/en/2.7.0/Pathname.html#method-c-new)\nfor more information."},"sortText":"000019","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"Pathname(${1:T.any(String, Pathname)})${0}"}},{"label":"__callee__","kind":2,"detail":"Kernel#__callee__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(Symbol))}\ndef __callee__; end\n```\n\n---\n\nReturns the called name of the current method as a\n[`Symbol`](https://docs.ruby-lang.org/en/2.7.0/Symbol.html). If called\noutside of a method, it returns `nil`."},"sortText":"000020","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"__callee__${0}"}},{"label":"__method__","kind":2,"detail":"Kernel#__method__","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.nilable(Symbol))}\ndef __method__; end\n```\n\n---\n\nReturns the name at the definition of the current method as a\n[`Symbol`](https://docs.ruby-lang.org/en/2.7.0/Symbol.html). If called\noutside of a method, it returns `nil`."},"sortText":"000021","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"__method__${0}"}},{"label":"at_exit","kind":2,"detail":"Kernel#at_exit","documentation":{"kind":"markdown","value":"```ruby\nsig {params(blk: T.proc.returns(BasicObject)).returns(Proc)}\ndef at_exit(&blk); end\n```\n\n---\n\nConverts *block* to a `Proc` object (and therefore binds it at the point of\ncall) and registers it for execution when the program exits. If multiple\nhandlers are registered, they are executed in reverse order of registration.\n\n```ruby\ndef do_at_exit(str1)\n  at_exit { print str1 }\nend\nat_exit { puts \"cruel world\" }\ndo_at_exit(\"goodbye \")\nexit\n```\n\n*produces:*\n\n```ruby\ngoodbye cruel world\n```"},"sortText":"000022","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"at_exit do\n  ${1}\nend${0}"}},{"label":"block_given?","kind":2,"detail":"Kernel#block_given?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef block_given?; end\n```\n\n---\n\nReturns `true` if `yield` would execute a block in the current context. The\n`iterator?` form is mildly deprecated.\n\n```ruby\ndef try\n  if block_given?\n    yield\n  else\n    \"no block\"\n  end\nend\ntry                  #=> \"no block\"\ntry { \"hello\" }      #=> \"hello\"\ntry do \"hello\" end   #=> \"hello\"\n```"},"sortText":"000023","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"block_given?${0}"}},{"label":"caller","kind":2,"detail":"Kernel#caller","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: Integer,\n    length: Integer\n  )\n  .returns(T.nilable(T::Array[String]))\nend\ndef caller(start_or_range=…, length=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing strings in the\nform `file:line` or `file:line: in `method'`.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.\n\n```ruby\ndef a(skip)\n  caller(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\nc(0)   #=> [\"prog:2:in `a'\", \"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:10:in `<main>'\"]\nc(1)   #=> [\"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:11:in `<main>'\"]\nc(2)   #=> [\"prog:8:in `c'\", \"prog:12:in `<main>'\"]\nc(3)   #=> [\"prog:13:in `<main>'\"]\nc(4)   #=> []\nc(5)   #=> nil\n```"},"sortText":"000024","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"caller${0}"}},{"label":"caller","kind":2,"detail":"Kernel#caller (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: T::Range[Integer]\n  )\n  .returns(T.nilable(T::Array[String]))\nend\ndef caller (overload.1)(start_or_range=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing strings in the\nform `file:line` or `file:line: in `method'`.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.\n\n```ruby\ndef a(skip)\n  caller(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\nc(0)   #=> [\"prog:2:in `a'\", \"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:10:in `<main>'\"]\nc(1)   #=> [\"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:11:in `<main>'\"]\nc(2)   #=> [\"prog:8:in `c'\", \"prog:12:in `<main>'\"]\nc(3)   #=> [\"prog:13:in `<main>'\"]\nc(4)   #=> []\nc(5)   #=> nil\n```"},"sortText":"000025","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"caller${0}"}},{"label":"caller","kind":2,"detail":"Kernel#caller (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[String])}\ndef caller (overload.2); end\n```\n\n---\n\nReturns the current execution stack---an array containing strings in the\nform `file:line` or `file:line: in `method'`.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range.\n\n```ruby\ndef a(skip)\n  caller(skip)\nend\ndef b(skip)\n  a(skip)\nend\ndef c(skip)\n  b(skip)\nend\nc(0)   #=> [\"prog:2:in `a'\", \"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:10:in `<main>'\"]\nc(1)   #=> [\"prog:5:in `b'\", \"prog:8:in `c'\", \"prog:11:in `<main>'\"]\nc(2)   #=> [\"prog:8:in `c'\", \"prog:12:in `<main>'\"]\nc(3)   #=> [\"prog:13:in `<main>'\"]\nc(4)   #=> []\nc(5)   #=> nil\n```"},"sortText":"000026","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"caller${0}"}},{"label":"caller_locations","kind":2,"detail":"Kernel#caller_locations","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: Integer,\n    length: Integer\n  )\n  .returns(T.nilable(T::Array[Thread::Backtrace::Location]))\nend\ndef caller_locations(start_or_range=…, length=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing backtrace location\nobjects.\n\nSee\n[`Thread::Backtrace::Location`](https://docs.ruby-lang.org/en/2.7.0/Thread/Backtrace/Location.html)\nfor more information.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range."},"sortText":"000027","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"caller_locations${0}"}},{"label":"caller_locations","kind":2,"detail":"Kernel#caller_locations (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    start_or_range: T::Range[Integer]\n  )\n  .returns(T.nilable(T::Array[Thread::Backtrace::Location]))\nend\ndef caller_locations (overload.1)(start_or_range=…); end\n```\n\n---\n\nReturns the current execution stack---an array containing backtrace location\nobjects.\n\nSee\n[`Thread::Backtrace::Location`](https://docs.ruby-lang.org/en/2.7.0/Thread/Backtrace/Location.html)\nfor more information.\n\nThe optional *start* parameter determines the number of initial stack\nentries to omit from the top of the stack.\n\nA second optional `length` parameter can be used to limit how many entries\nare returned from the stack.\n\nReturns `nil` if *start* is greater than the size of current execution\nstack.\n\nOptionally you can pass a range, which will return an array containing the\nentries within the specified range."},"sortText":"000028","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"caller_locations${0}"}},{"label":"clone","kind":2,"detail":"Kernel#clone","documentation":{"kind":"markdown","value":"```ruby\nsig {params(freeze: T.nilable(T::Boolean)).returns(A)}\ndef clone(freeze: …); end\n```\n\n---\n\nProduces a shallow copy of *obj*---the instance variables of *obj* are\ncopied, but not the objects they reference.\n[`clone`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-clone)\ncopies the frozen value state of *obj*, unless the `:freeze` keyword\nargument is given with a false or true value. See also the discussion under\n[`Object#dup`](https://docs.ruby-lang.org/en/2.7.0/Object.html#method-i-dup).\n\n```ruby\nclass Klass\n   attr_accessor :str\nend\ns1 = Klass.new      #=> #<Klass:0x401b3a38>\ns1.str = \"Hello\"    #=> \"Hello\"\ns2 = s1.clone       #=> #<Klass:0x401b3998 @str=\"Hello\">\ns2.str[1,4] = \"i\"   #=> \"i\"\ns1.inspect          #=> \"#<Klass:0x401b3a38 @str=\\\"Hi\\\">\"\ns2.inspect          #=> \"#<Klass:0x401b3998 @str=\\\"Hi\\\">\"\n```\n\nThis method may have class-specific behavior. If so, that behavior will be\ndocumented under the #`initialize_copy` method of the class."},"sortText":"000029","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"clone${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    symbol: T.any(Symbol, String),\n    method: T.any(Proc, Method, UnboundMethod)\n  )\n  .returns(Symbol)\nend\ndef define_singleton_method(symbol, method=…); end\n```"},"sortText":"000030","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"define_singleton_method(${1:T.any(Symbol, String)})${0}"}},{"label":"define_singleton_method","kind":2,"detail":"Kernel#define_singleton_method (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(symbol: T.any(Symbol, String), blk: T.untyped).returns(Symbol)}\ndef define_singleton_method (overload.1)(symbol, &blk); end\n```"},"sortText":"000031","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"define_singleton_method(${1:T.any(Symbol, String)})${0}"}},{"label":"freeze","kind":2,"detail":"Kernel#freeze","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(A)}\ndef freeze; end\n```"},"sortText":"000032","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"freeze${0}"}},{"label":"frozen?","kind":2,"detail":"Kernel#frozen?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef frozen?; end\n```\n\n---\n\nReturns the freeze status of *obj*.\n\n```ruby\na = [ \"a\", \"b\", \"c\" ]\na.freeze    #=> [\"a\", \"b\", \"c\"]\na.frozen?   #=> true\n```"},"sortText":"000033","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"frozen?${0}"}},{"label":"gem","kind":2,"detail":"Kernel#gem","documentation":{"kind":"markdown","value":"```ruby\nsig {params(dep: T.untyped, reqs: T.untyped).returns(T.untyped)}\ndef gem(dep, *reqs); end\n```\n\n---\n\nUse\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nto activate a specific version of `gem_name`.\n\n`requirements` is a list of version requirements that the specified gem must\nmatch, most commonly \"= example.version.number\". See\n[`Gem::Requirement`](https://docs.ruby-lang.org/en/2.7.0/Gem/Requirement.html)\nfor how to specify a version requirement.\n\nIf you will be activating the latest version of a gem, there is no need to\ncall\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem),\n[`Kernel#require`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-require)\nwill do the right thing for you.\n\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nreturns true if the gem was activated, otherwise false. If the gem could not\nbe found, didn't match the version requirements, or a different version was\nalready activated, an exception will be raised.\n\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nshould be called **before** any require statements (otherwise RubyGems may\nload a conflicting library version).\n\n[`Kernel#gem`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-gem)\nonly loads prerelease versions when prerelease `requirements` are given:\n\n```ruby\ngem 'rake', '>= 1.1.a', '< 2'\n```\n\nIn older RubyGems versions, the environment variable GEM\\_SKIP could be used\nto skip activation of specified gems, for example to test out changes that\nhaven't been installed yet. Now RubyGems defers to -I and the RUBYLIB\nenvironment variable to skip activation of a gem.\n\nExample:\n\n```\nGEM_SKIP=libA:libB ruby -I../libA -I../libB ./mycode.rb\n```"},"sortText":"000034","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"gem(${1})${0}"}},{"label":"gets","kind":2,"detail":"Kernel#gets","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(String)}\ndef gets(arg0=…, arg1=…); end\n```\n\n---\n\nReturns (and assigns to `$_`) the next line from the list of files in `ARGV`\n(or `$*`), or from standard input if no files are present on the command\nline. Returns `nil` at end of file. The optional argument specifies the\nrecord separator. The separator is included with the contents of each\nrecord. A separator of `nil` reads the entire contents, and a zero-length\nseparator reads the input one paragraph at a time, where paragraphs are\ndivided by two consecutive newlines. If the first argument is an integer, or\noptional second argument is given, the returning string would not be longer\nthan the given value in bytes. If multiple filenames are present in `ARGV`,\n`gets(nil)` will read the contents one file at a time.\n\n```ruby\nARGV << \"testfile\"\nprint while gets\n```\n\n*produces:*\n\n```ruby\nThis is line one\nThis is line two\nThis is line three\nAnd so on...\n```\n\nThe style of programming using `$_` as an implicit parameter is gradually\nlosing favor in the Ruby community."},"sortText":"000035","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"gets${0}"}},{"label":"global_variables","kind":2,"detail":"Kernel#global_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef global_variables; end\n```\n\n---\n\nReturns an array of the names of global variables. This includes special\nregexp global variables such as `$~` and `$+`, but does not include the\nnumbered regexp global variables (`$1`, `$2`, etc.).\n\n```ruby\nglobal_variables.grep /std/   #=> [:$stdin, :$stdout, :$stderr]\n```"},"sortText":"000036","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"global_variables${0}"}},{"label":"initialize_copy","kind":2,"detail":"Kernel#initialize_copy","documentation":{"kind":"markdown","value":"```ruby\nsig {params(object: A).returns(A)}\ndef initialize_copy(object); end\n```"},"sortText":"000037","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"initialize_copy(${1:A})${0}"}},{"label":"inspect","kind":2,"detail":"Kernel#inspect","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(String)}\ndef inspect; end\n```"},"sortText":"000038","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"inspect${0}"}},{"label":"instance_of?","kind":2,"detail":"Kernel#instance_of?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T::Class[T.anything]).returns(T::Boolean)}\ndef instance_of?(arg0); end\n```"},"sortText":"000039","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"instance_of?(${1:T::Class[T.anything]})${0}"}},{"label":"instance_variable_defined?","kind":2,"detail":"Kernel#instance_variable_defined?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T::Boolean)}\ndef instance_variable_defined?(arg0); end\n```"},"sortText":"000040","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"instance_variable_defined?(${1:T.any(Symbol, String)})${0}"}},{"label":"instance_variable_get","kind":2,"detail":"Kernel#instance_variable_get","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String)).returns(T.untyped)}\ndef instance_variable_get(arg0); end\n```"},"sortText":"000041","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"instance_variable_get(${1:T.any(Symbol, String)})${0}"}},{"label":"instance_variable_set","kind":2,"detail":"Kernel#instance_variable_set","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(Symbol, String), arg1: BasicObject).returns(T.untyped)}\ndef instance_variable_set(arg0, arg1); end\n```"},"sortText":"000042","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"instance_variable_set(${1:T.any(Symbol, String)}, ${2:BasicObject})${0}"}},{"label":"instance_variables","kind":2,"detail":"Kernel#instance_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef instance_variables; end\n```"},"sortText":"000043","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"instance_variables${0}"}},{"label":"iterator?","kind":2,"detail":"Kernel#iterator?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef iterator?; end\n```\n\n---\n\nDeprecated. Use block\\_given? instead."},"sortText":"000044","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"iterator?${0}"}},{"label":"itself","kind":2,"detail":"Kernel#itself","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(A)}\ndef itself; end\n```\n\n---\n\nReturns the receiver `obj`.\n\n```ruby\nobj = Object.new; obj.itself.object_id == o.object_id # => true\n```"},"sortText":"000045","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"itself${0}"}},{"label":"local_variables","kind":2,"detail":"Kernel#local_variables","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Array[Symbol])}\ndef local_variables; end\n```\n\n---\n\nReturns the names of the current local variables.\n\n```ruby\nfred = 1\nfor i in 1..10\n   # ...\nend\nlocal_variables   #=> [:fred, :i]\n```"},"sortText":"000046","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"local_variables${0}"}},{"label":"method","kind":2,"detail":"Kernel#method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef method(arg0); end\n```"},"sortText":"000047","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"method(${1:Symbol})${0}"}},{"label":"methods","kind":2,"detail":"Kernel#methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(regular: T::Boolean).returns(T::Array[Symbol])}\ndef methods(regular=…); end\n```"},"sortText":"000048","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"methods${0}"}},{"label":"object_id","kind":2,"detail":"Kernel#object_id","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(Integer)}\ndef object_id; end\n```\n\n---\n\nReturns an integer identifier for `obj`.\n\nThe same number will be returned on all calls to `object_id` for a given\nobject, and no two active objects will share an id.\n\nNote: that some objects of builtin classes are reused for optimization. This\nis the case for immediate values and frozen string literals.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_id\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`object_id`.\n\nImmediate values are not passed by reference but are passed by value: `nil`,\n`true`, `false`, Fixnums, Symbols, and some Floats.\n\n```ruby\nObject.new.object_id  == Object.new.object_id  # => false\n(21 * 2).object_id    == (21 * 2).object_id    # => true\n\"hello\".object_id     == \"hello\".object_id     # => false\n\"hi\".freeze.object_id == \"hi\".freeze.object_id # => true\n```"},"sortText":"000049","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"object_id${0}"}},{"label":"open","kind":2,"detail":"Kernel#open","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    path: String,\n    mode: T.any(Integer, String),\n    perm: T.nilable(Integer),\n    opt: T.nilable(T::Hash[Symbol, T.untyped])\n  )\n  .returns(T.nilable(IO))\nend\ndef open(path, mode=…, perm=…, opt=…); end\n```\n\n---\n\nCreates an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object\nconnected to the given stream, file, or subprocess.\n\nIf `path` does not start with a pipe character (`|`), treat it as the name\nof a file to open using the specified mode (defaulting to \"r\").\n\nThe `mode` is either a string or an integer. If it is an integer, it must be\nbitwise-or of open(2) flags, such as File::RDWR or File::EXCL. If it is a\nstring, it is either \"fmode\", \"fmode:ext\\_enc\", or\n\"fmode:ext\\_enc:int\\_enc\".\n\nSee the documentation of\n[`IO.new`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-new) for\nfull documentation of the `mode` string directives.\n\nIf a file is being created, its initial permissions may be set using the\n`perm` parameter. See\n[`File.new`](https://docs.ruby-lang.org/en/2.7.0/File.html#method-c-new) and\nthe open(2) and chmod(2) man pages for a description of permissions.\n\nIf a block is specified, it will be invoked with the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object as a parameter,\nand the [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) will be\nautomatically closed when the block terminates. The call returns the value\nof the block.\n\nIf `path` starts with a pipe character (`\"|\"`), a subprocess is created,\nconnected to the caller by a pair of pipes. The returned\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object may be used to\nwrite to the standard input and read from the standard output of this\nsubprocess.\n\nIf the command following the pipe is a single minus sign (`\"|-\"`), Ruby\nforks, and this subprocess is connected to the parent. If the command is not\n`\"-\"`, the subprocess runs the command. Note that the command may be\nprocessed by shell if it contains shell metacharacters.\n\nWhen the subprocess is Ruby (opened via `\"|-\"`), the `open` call returns\n`nil`. If a block is associated with the open call, that block will run\ntwice --- once in the parent and once in the child.\n\nThe block parameter will be an\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object in the parent and\n`nil` in the child. The parent's `IO` object will be connected to the\nchild's $stdin and $stdout. The subprocess will be terminated at the end of\nthe block.\n\n### Examples\n\nReading from \"testfile\":\n\n```ruby\nopen(\"testfile\") do |f|\n  print f.gets\nend\n```\n\nProduces:\n\n```ruby\nThis is line one\n```\n\nOpen a subprocess and read its output:\n\n```ruby\ncmd = open(\"|date\")\nprint cmd.gets\ncmd.close\n```\n\nProduces:\n\n```\nWed Apr  9 08:56:31 CDT 2003\n```\n\nOpen a subprocess running the same Ruby program:\n\n```ruby\nf = open(\"|-\", \"w+\")\nif f.nil?\n  puts \"in Child\"\n  exit\nelse\n  puts \"Got: #{f.gets}\"\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```\n\nOpen a subprocess using a block to receive the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object:\n\n```ruby\nopen \"|-\" do |f|\n  if f then\n    # parent process\n    puts \"Got: #{f.gets}\"\n  else\n    # child process\n    puts \"in Child\"\n  end\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```"},"sortText":"000050","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"open(${1:String})${0}"}},{"label":"open","kind":2,"detail":"Kernel#open (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    path: String,\n    mode: T.any(Integer, String),\n    perm: T.nilable(Integer),\n    opt: T.nilable(T::Hash[Symbol, T.untyped]),\n    blk: T.proc.params(arg0: IO).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef open (overload.1)(path, mode=…, perm=…, opt=…, &blk); end\n```\n\n---\n\nCreates an [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object\nconnected to the given stream, file, or subprocess.\n\nIf `path` does not start with a pipe character (`|`), treat it as the name\nof a file to open using the specified mode (defaulting to \"r\").\n\nThe `mode` is either a string or an integer. If it is an integer, it must be\nbitwise-or of open(2) flags, such as File::RDWR or File::EXCL. If it is a\nstring, it is either \"fmode\", \"fmode:ext\\_enc\", or\n\"fmode:ext\\_enc:int\\_enc\".\n\nSee the documentation of\n[`IO.new`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-new) for\nfull documentation of the `mode` string directives.\n\nIf a file is being created, its initial permissions may be set using the\n`perm` parameter. See\n[`File.new`](https://docs.ruby-lang.org/en/2.7.0/File.html#method-c-new) and\nthe open(2) and chmod(2) man pages for a description of permissions.\n\nIf a block is specified, it will be invoked with the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object as a parameter,\nand the [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) will be\nautomatically closed when the block terminates. The call returns the value\nof the block.\n\nIf `path` starts with a pipe character (`\"|\"`), a subprocess is created,\nconnected to the caller by a pair of pipes. The returned\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object may be used to\nwrite to the standard input and read from the standard output of this\nsubprocess.\n\nIf the command following the pipe is a single minus sign (`\"|-\"`), Ruby\nforks, and this subprocess is connected to the parent. If the command is not\n`\"-\"`, the subprocess runs the command. Note that the command may be\nprocessed by shell if it contains shell metacharacters.\n\nWhen the subprocess is Ruby (opened via `\"|-\"`), the `open` call returns\n`nil`. If a block is associated with the open call, that block will run\ntwice --- once in the parent and once in the child.\n\nThe block parameter will be an\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object in the parent and\n`nil` in the child. The parent's `IO` object will be connected to the\nchild's $stdin and $stdout. The subprocess will be terminated at the end of\nthe block.\n\n### Examples\n\nReading from \"testfile\":\n\n```ruby\nopen(\"testfile\") do |f|\n  print f.gets\nend\n```\n\nProduces:\n\n```ruby\nThis is line one\n```\n\nOpen a subprocess and read its output:\n\n```ruby\ncmd = open(\"|date\")\nprint cmd.gets\ncmd.close\n```\n\nProduces:\n\n```\nWed Apr  9 08:56:31 CDT 2003\n```\n\nOpen a subprocess running the same Ruby program:\n\n```ruby\nf = open(\"|-\", \"w+\")\nif f.nil?\n  puts \"in Child\"\n  exit\nelse\n  puts \"Got: #{f.gets}\"\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```\n\nOpen a subprocess using a block to receive the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object:\n\n```ruby\nopen \"|-\" do |f|\n  if f then\n    # parent process\n    puts \"Got: #{f.gets}\"\n  else\n    # child process\n    puts \"in Child\"\n  end\nend\n```\n\nProduces:\n\n```\nGot: in Child\n```"},"sortText":"000051","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"open(${1:String}) do |${2:IO}|\n  ${3}\nend${0}"}},{"label":"private_methods","kind":2,"detail":"Kernel#private_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef private_methods(all=…); end\n```"},"sortText":"000052","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"private_methods${0}"}},{"label":"protected_methods","kind":2,"detail":"Kernel#protected_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef protected_methods(all=…); end\n```"},"sortText":"000053","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"protected_methods${0}"}},{"label":"public_method","kind":2,"detail":"Kernel#public_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef public_method(arg0); end\n```"},"sortText":"000054","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"public_method(${1:Symbol})${0}"}},{"label":"public_methods","kind":2,"detail":"Kernel#public_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef public_methods(all=…); end\n```"},"sortText":"000055","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"public_methods${0}"}},{"label":"public_send","kind":2,"detail":"Kernel#public_send","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(Symbol, String),\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef public_send(arg0, *args, &blk); end\n```"},"sortText":"000056","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"public_send(${1:T.any(Symbol, String)})${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef raise; end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000057","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"raise${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Class[T.anything], Exception, String)\n  )\n  .returns(T.noreturn)\nend\ndef raise (overload.1)(arg0=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000058","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"raise${0}"}},{"label":"raise","kind":2,"detail":"Kernel#raise (overload.2)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(T::Class[T.anything], Exception),\n    arg1: T.untyped,\n    arg2: T.nilable(T::Array[String])\n  )\n  .returns(T.noreturn)\nend\ndef raise (overload.2)(arg0=…, arg1=…, arg2=…); end\n```\n\n---\n\nWith no arguments, raises the exception in `$!` or raises a\n[`RuntimeError`](https://docs.ruby-lang.org/en/2.7.0/RuntimeError.html) if\n`$!` is `nil`. With a single `String` argument, raises a `RuntimeError` with\nthe string as a message. Otherwise, the first parameter should be an\n`Exception` class (or another object that returns an `Exception` object when\nsent an `exception` message). The optional second parameter sets the message\nassociated with the exception (accessible via\n[`Exception#message`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-message)),\nand the third parameter is an array of callback information (accessible via\n[`Exception#backtrace`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-backtrace)).\nThe `cause` of the generated exception (accessible via\n[`Exception#cause`](https://docs.ruby-lang.org/en/2.7.0/Exception.html#method-i-cause))\nis automatically set to the \"current\" exception (`$!`), if any. An\nalternative value, either an `Exception` object or `nil`, can be specified\nvia the `:cause` argument.\n\nExceptions are caught by the `rescue` clause of `begin...end` blocks.\n\n```ruby\nraise \"Failed to create socket\"\nraise ArgumentError, \"No parameters\", caller\n```\n\n\nAlso aliased as:\n[`fail`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-fail)"},"sortText":"000059","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"raise${0}"}},{"label":"readline","kind":2,"detail":"Kernel#readline","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(String)}\ndef readline(arg0=…, arg1=…); end\n```\n\n---\n\nEquivalent to Kernel::gets, except `readline` raises `EOFError` at end of\nfile."},"sortText":"000060","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"readline${0}"}},{"label":"readlines","kind":2,"detail":"Kernel#readlines","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, arg1: Integer).returns(T::Array[String])}\ndef readlines(arg0=…, arg1=…); end\n```\n\n---\n\nReturns an array containing the lines returned by calling `Kernel.gets(sep)`\nuntil the end of file."},"sortText":"000061","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"readlines${0}"}},{"label":"remove_instance_variable","kind":2,"detail":"Kernel#remove_instance_variable","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(T.untyped)}\ndef remove_instance_variable(arg0); end\n```"},"sortText":"000062","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"remove_instance_variable(${1:Symbol})${0}"}},{"label":"require","kind":2,"detail":"Kernel#require","documentation":{"kind":"markdown","value":"```ruby\nsig {params(path: String).returns(T::Boolean)}\ndef require(path); end\n```\n\n---\n\nLoads the given `name`, returning `true` if successful and `false` if the\nfeature is already loaded.\n\nIf the filename does not resolve to an absolute path, it will be searched\nfor in the directories listed in `$LOAD_PATH` (`$:`).\n\nIf the filename has the extension \".rb\", it is loaded as a source file; if\nthe extension is \".so\", \".o\", or \".dll\", or the default shared library\nextension on the current platform, Ruby loads the shared library as a Ruby\nextension. Otherwise, Ruby tries adding \".rb\", \".so\", and so on to the name\nuntil found. If the file named cannot be found, a\n[`LoadError`](https://docs.ruby-lang.org/en/2.6.0/LoadError.html) will be\nraised.\n\nFor Ruby extensions the filename given may use any shared library extension.\nFor example, on Linux the socket extension is \"socket.so\" and `require\n'socket.dll'` will load the socket extension.\n\nThe absolute path of the loaded file is added to `$LOADED_FEATURES` (`$\"`).\nA file will not be loaded again if its path already appears in `$\"`. For\nexample, `require 'a'; require './a'` will not load `a.rb` again.\n\n```ruby\nrequire \"my-library.rb\"\nrequire \"db-driver\"\n```\n\nAny constants or globals within the loaded source file will be available in\nthe calling program's global namespace. However, local variables will not be\npropagated to the loading environment.\n\nWhen RubyGems is required,\n[`#require`](https://docs.ruby-lang.org/en/2.6.0/Kernel.html#method-i-require)\nis replaced with our own which is capable of loading gems on demand.\n\nWhen you call `require 'x'`, this is what happens:\n*   If the file can be loaded from the existing Ruby loadpath, it is.\n*   Otherwise, installed gems are searched for a file that matches. If it's\n    found in gem 'y', that gem is activated (added to the loadpath).\n\n\nThe normal `require` functionality of returning false if that file has\nalready been loaded is preserved.\n\nAlso aliased as:\n[`gem_original_require`](https://docs.ruby-lang.org/en/2.6.0/Kernel.html#method-i-gem_original_require)"},"sortText":"000063","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"require(${1:String})${0}"}},{"label":"require_relative","kind":2,"detail":"Kernel#require_relative","documentation":{"kind":"markdown","value":"```ruby\nsig {params(feature: T.any(String, Pathname)).returns(T::Boolean)}\ndef require_relative(feature); end\n```\n\n---\n\nRuby tries to load the library named *string* relative to the requiring\nfile's path. If the file's path cannot be determined a\n[`LoadError`](https://docs.ruby-lang.org/en/2.7.0/LoadError.html) is raised.\nIf a file is loaded `true` is returned and false otherwise."},"sortText":"000064","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"require_relative(${1:T.any(String, Pathname)})${0}"}},{"label":"respond_to?","kind":2,"detail":"Kernel#respond_to?","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    include_all: T.untyped\n  )\n  .returns(T::Boolean)\nend\ndef respond_to?(arg0, include_all=…); end\n```"},"sortText":"000065","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"respond_to?(${1:T.any(String, Symbol)})${0}"}},{"label":"select","kind":2,"detail":"Kernel#select","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    read_array: T.nilable(T::Array[IO]),\n    write_array: T.nilable(T::Array[IO]),\n    error_array: T.nilable(T::Array[IO]),\n    timeout: T.nilable(T.any(Integer, Float))\n  )\n  .returns(T.nilable(T::Array[T::Array[IO]]))\nend\ndef select(read_array, write_array=…, error_array=…, timeout=…); end\n```\n\n---\n\nCalls select(2) system call. It monitors given arrays of\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects, waits until one\nor more of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects are\nready for reading, are ready for writing, and have pending exceptions\nrespectively, and returns an array that contains arrays of those\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects. It will return\n`nil` if optional *timeout* value is given and no\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object is ready in\n*timeout* seconds.\n\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\npeeks the buffer of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html)\nobjects for testing readability. If the\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) buffer is not empty,\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nimmediately notifies readability. This \"peek\" only happens for\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects. It does not\nhappen for IO-like objects such as\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\n\nThe best way to use\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis invoking it after nonblocking methods such as read\\_nonblock,\nwrite\\_nonblock, etc. The methods raise an exception which is extended by\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nor\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html).\nThe modules notify how the caller should wait with\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\nIf\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nis raised, the caller should wait for reading. If\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html)\nis raised, the caller should wait for writing.\n\nSo, blocking read (readpartial) can be emulated using read\\_nonblock and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nas follows:\n\n```ruby\nbegin\n  result = io_like.read_nonblock(maxlen)\nrescue IO::WaitReadable\n  IO.select([io_like])\n  retry\nrescue IO::WaitWritable\n  IO.select(nil, [io_like])\n  retry\nend\n```\n\nEspecially, the combination of nonblocking methods and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis preferred for [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) like\nobjects such as\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\nIt has to\\_io method to return underlying\n[`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) object.\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ncalls to\\_io to obtain the file descriptor to wait.\n\nThis means that readability notified by\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ndoesn't mean readability from\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\nobject.\n\nThe most likely situation is that\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\nbuffers some data.\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ndoesn't see the buffer. So\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\ncan block when\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\ndoesn't block.\n\nHowever, several more complicated situations exist.\n\nSSL is a protocol which is sequence of records. The record consists of\nmultiple bytes. So, the remote side of SSL sends a partial record,\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nnotifies readability but\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html)\ncannot decrypt a byte and\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\nwill block.\n\nAlso, the remote side can request SSL renegotiation which forces the local\nSSL engine to write some data. This means\n[`OpenSSL::SSL::SSLSocket#readpartial`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-readpartial)\nmay invoke write system call and it can block. In such a situation,\n[`OpenSSL::SSL::SSLSocket#read_nonblock`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/Buffering.html#method-i-read_nonblock)\nraises\n[`IO::WaitWritable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitWritable.html)\ninstead of blocking. So, the caller should wait for ready for writability as\nabove example.\n\nThe combination of nonblocking methods and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nis also useful for streams such as tty, pipe socket socket when multiple\nprocesses read from a stream.\n\nFinally, Linux kernel developers don't guarantee that readability of\nselect(2) means readability of following read(2) even for a single process.\nSee select(2) manual on GNU/Linux system.\n\nInvoking\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nbefore\n[`IO#readpartial`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-readpartial)\nworks well as usual. However it is not the best way to use\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\n\nThe writability notified by select(2) doesn't show how many bytes are\nwritable.\n[`IO#write`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-write)\nmethod blocks until given whole string is written. So, `IO#write(two or more\nbytes)` can block after writability is notified by\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select).\n[`IO#write_nonblock`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-i-write_nonblock)\nis required to avoid the blocking.\n\nBlocking write (write) can be emulated using write\\_nonblock and\n[`IO.select`](https://docs.ruby-lang.org/en/2.7.0/IO.html#method-c-select)\nas follows:\n[`IO::WaitReadable`](https://docs.ruby-lang.org/en/2.7.0/IO/WaitReadable.html)\nshould also be rescued for SSL renegotiation in\n[`OpenSSL::SSL::SSLSocket`](https://docs.ruby-lang.org/en/2.7.0/OpenSSL/SSL/SSLSocket.html).\n\n```ruby\nwhile 0 < string.bytesize\n  begin\n    written = io_like.write_nonblock(string)\n  rescue IO::WaitReadable\n    IO.select([io_like])\n    retry\n  rescue IO::WaitWritable\n    IO.select(nil, [io_like])\n    retry\n  end\n  string = string.byteslice(written..-1)\nend\n```\n\n### Parameters\nread\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait until ready for read\nwrite\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait until ready for write\nerror\\_array\n:   an array of [`IO`](https://docs.ruby-lang.org/en/2.7.0/IO.html) objects\n    that wait for exceptions\ntimeout\n:   a numeric value in second\n\n\n### Example\n\n```ruby\nrp, wp = IO.pipe\nmesg = \"ping \"\n100.times {\n  # IO.select follows IO#read.  Not the best way to use IO.select.\n  rs, ws, = IO.select([rp], [wp])\n  if r = rs[0]\n    ret = r.read(5)\n    print ret\n    case ret\n    when /ping/\n      mesg = \"pong\\n\"\n    when /pong/\n      mesg = \"ping \"\n    end\n  end\n  if w = ws[0]\n    w.write(mesg)\n  end\n}\n```\n\n*produces:*\n\n```ruby\nping pong\nping pong\nping pong\n(snipped)\nping\n```"},"sortText":"000066","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"select(${1:T.nilable(T::Array[IO])})${0}"}},{"label":"send","kind":2,"detail":"Kernel#send","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: T.any(String, Symbol), arg1: T.anything).returns(T.untyped)}\ndef send(arg0, *arg1); end\n```"},"sortText":"000067","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"send(${1:T.any(String, Symbol)})${0}"}},{"label":"send","kind":2,"detail":"Kernel#send (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.any(String, Symbol),\n    arg1: T.anything,\n    blk: T.untyped\n  )\n  .returns(T.untyped)\nend\ndef send (overload.1)(arg0, *arg1, &blk); end\n```"},"sortText":"000068","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"send(${1:T.any(String, Symbol)})${0}"}},{"label":"set_trace_func","kind":2,"detail":"Kernel#set_trace_func","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    arg0: T.nilable(T.proc.params(arg0: String, arg1: String, arg2: Integer, arg3: T.nilable(Symbol), arg4: T.nilable(Binding), arg5: Object).returns(T.untyped))\n  )\n  .void\nend\ndef set_trace_func(arg0); end\n```\n\n---\n\nEstablishes _proc_ as the handler for tracing, or disables\ntracing if the parameter is +nil+.\n\n*Note:* this method is obsolete, please use TracePoint instead.\n\n_proc_ takes up to six parameters:\n\n*   an event name\n*   a filename\n*   a line number\n*   an object id\n*   a binding\n*   the name of a class\n\n_proc_ is invoked whenever an event occurs.\n\nEvents are:\n\n+c-call+:: call a C-language routine\n+c-return+:: return from a C-language routine\n+call+:: call a Ruby method\n+class+:: start a class or module definition\n+end+:: finish a class or module definition\n+line+:: execute code on a new line\n+raise+:: raise an exception\n+return+:: return from a Ruby method\n\nTracing is disabled within the context of _proc_.\n\n    class Test\n    def test\n      a = 1\n      b = 2\n    end\n    end\n\n    set_trace_func proc { |event, file, line, id, binding, classname|\n       printf \"%8s %s:%-2d %10s %8s\\n\", event, file, line, id, classname\n    }\n    t = Test.new\n    t.test\n\n      line prog.rb:11               false\n    c-call prog.rb:11        new    Class\n    c-call prog.rb:11 initialize   Object\n  c-return prog.rb:11 initialize   Object\n  c-return prog.rb:11        new    Class\n      line prog.rb:12               false\n      call prog.rb:2        test     Test\n      line prog.rb:3        test     Test\n      line prog.rb:4        test     Test\n    return prog.rb:4        test     Test"},"sortText":"000069","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"set_trace_func(${1:T.nilable(T.proc.params(arg0: String, arg1: String, arg2: Integer, arg3: T.nilable(Symbol), arg4: T.nilable(Binding), arg5: Object).returns(T.untyped))})${0}"}},{"label":"set_trace_func","kind":2,"detail":"Kernel#set_trace_func (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: NilClass).returns(NilClass)}\ndef set_trace_func (overload.1)(arg0); end\n```\n\n---\n\nEstablishes _proc_ as the handler for tracing, or disables\ntracing if the parameter is +nil+.\n\n*Note:* this method is obsolete, please use TracePoint instead.\n\n_proc_ takes up to six parameters:\n\n*   an event name\n*   a filename\n*   a line number\n*   an object id\n*   a binding\n*   the name of a class\n\n_proc_ is invoked whenever an event occurs.\n\nEvents are:\n\n+c-call+:: call a C-language routine\n+c-return+:: return from a C-language routine\n+call+:: call a Ruby method\n+class+:: start a class or module definition\n+end+:: finish a class or module definition\n+line+:: execute code on a new line\n+raise+:: raise an exception\n+return+:: return from a Ruby method\n\nTracing is disabled within the context of _proc_.\n\n    class Test\n    def test\n      a = 1\n      b = 2\n    end\n    end\n\n    set_trace_func proc { |event, file, line, id, binding, classname|\n       printf \"%8s %s:%-2d %10s %8s\\n\", event, file, line, id, classname\n    }\n    t = Test.new\n    t.test\n\n      line prog.rb:11               false\n    c-call prog.rb:11        new    Class\n    c-call prog.rb:11 initialize   Object\n  c-return prog.rb:11 initialize   Object\n  c-return prog.rb:11        new    Class\n      line prog.rb:12               false\n      call prog.rb:2        test     Test\n      line prog.rb:3        test     Test\n      line prog.rb:4        test     Test\n    return prog.rb:4        test     Test"},"sortText":"000070","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"set_trace_func(${1:NilClass})${0}"}},{"label":"singleton_method","kind":2,"detail":"Kernel#singleton_method","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol).returns(Method)}\ndef singleton_method(arg0); end\n```"},"sortText":"000071","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"singleton_method(${1:Symbol})${0}"}},{"label":"singleton_methods","kind":2,"detail":"Kernel#singleton_methods","documentation":{"kind":"markdown","value":"```ruby\nsig {params(all: T::Boolean).returns(T::Array[Symbol])}\ndef singleton_methods(all=…); end\n```"},"sortText":"000072","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"singleton_methods${0}"}},{"label":"sleep","kind":2,"detail":"Kernel#sleep","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T.noreturn)}\ndef sleep; end\n```\n\n---\n\nSuspends the current thread for *duration* seconds (which may be any number,\nincluding a `Float` with fractional seconds). Returns the actual number of\nseconds slept (rounded), which may be less than that asked for if another\nthread calls\n[`Thread#run`](https://docs.ruby-lang.org/en/2.7.0/Thread.html#method-i-run).\nCalled without an argument, sleep() will sleep forever.\n\n```ruby\nTime.new    #=> 2008-03-08 19:56:19 +0900\nsleep 1.2   #=> 1\nTime.new    #=> 2008-03-08 19:56:20 +0900\nsleep 1.9   #=> 2\nTime.new    #=> 2008-03-08 19:56:22 +0900\n```"},"sortText":"000073","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"sleep${0}"}},{"label":"sleep","kind":2,"detail":"Kernel#sleep (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig {params(duration: Numeric).returns(Integer)}\ndef sleep (overload.1)(duration); end\n```\n\n---\n\nSuspends the current thread for *duration* seconds (which may be any number,\nincluding a `Float` with fractional seconds). Returns the actual number of\nseconds slept (rounded), which may be less than that asked for if another\nthread calls\n[`Thread#run`](https://docs.ruby-lang.org/en/2.7.0/Thread.html#method-i-run).\nCalled without an argument, sleep() will sleep forever.\n\n```ruby\nTime.new    #=> 2008-03-08 19:56:19 +0900\nsleep 1.2   #=> 1\nTime.new    #=> 2008-03-08 19:56:20 +0900\nsleep 1.9   #=> 2\nTime.new    #=> 2008-03-08 19:56:22 +0900\n```"},"sortText":"000074","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"sleep(${1:Numeric})${0}"}},{"label":"system","kind":2,"detail":"Kernel#system","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    env: T.any(String, [String, String], T::Hash[String, T.nilable(String)]),\n    argv0: T.any(String, [String, String]),\n    args: String,\n    options: T.untyped\n  )\n  .returns(T.nilable(T::Boolean))\nend\ndef system(env, argv0=…, *args, **options); end\n```\n\n---\n\nExecutes *command...* in a subshell. *command...* is one of following forms.\n\n`commandline`\n:   command line string which is passed to the standard shell\n`cmdname, arg1, ...`\n:   command name and one or more arguments (no shell)\n`[cmdname, argv0], arg1, ...`\n:   command name, `argv[0]` and zero or more arguments (no shell)\n\n\nsystem returns `true` if the command gives zero exit status, `false` for non\nzero exit status. Returns `nil` if command execution fails. An error status\nis available in `$?`.\n\nIf the `exception: true` argument is passed, the method raises an exception\ninstead of returning `false` or `nil`.\n\nThe arguments are processed in the same way as for\n[`Kernel#spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn).\n\nThe hash arguments, env and options, are same as\n[`exec`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-exec) and\n[`spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn).\nSee\n[`Kernel#spawn`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-spawn)\nfor details.\n\n```ruby\nsystem(\"echo *\")\nsystem(\"echo\", \"*\")\n```\n\n*produces:*\n\n```\nconfig.h main.rb\n*\n```\n\nError handling:\n\n```ruby\nsystem(\"cat nonexistent.txt\")\n# => false\nsystem(\"catt nonexistent.txt\")\n# => nil\n\nsystem(\"cat nonexistent.txt\", exception: true)\n# RuntimeError (Command failed with exit 1: cat)\nsystem(\"catt nonexistent.txt\", exception: true)\n# Errno::ENOENT (No such file or directory - catt)\n```\n\nSee\n[`Kernel#exec`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html#method-i-exec)\nfor the standard shell."},"sortText":"000075","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"system(${1:T.any(String, [String, String], T::Hash[String, T.nilable(String)])})${0}"}},{"label":"tainted?","kind":2,"detail":"Kernel#tainted?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef tainted?; end\n```"},"sortText":"000076","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"tainted?${0}"}},{"label":"test","kind":2,"detail":"Kernel#test","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    cmd: String,\n    file1: String,\n    file2: String\n  )\n  .returns(T.any(TrueClass, FalseClass, Time))\nend\ndef test(cmd, file1, file2=…); end\n```\n\n---\n\nUses the character `cmd` to perform various tests on `file1` (first table\nbelow) or on `file1` and `file2` (second table).\n\n[`File`](https://docs.ruby-lang.org/en/2.7.0/File.html) tests on a single\nfile:\n\n```\nCmd    Returns   Meaning\n\"A\"  | Time    | Last access time for file1\n\"b\"  | boolean | True if file1 is a block device\n\"c\"  | boolean | True if file1 is a character device\n\"C\"  | Time    | Last change time for file1\n\"d\"  | boolean | True if file1 exists and is a directory\n\"e\"  | boolean | True if file1 exists\n\"f\"  | boolean | True if file1 exists and is a regular file\n\"g\"  | boolean | True if file1 has the \\CF{setgid} bit\n     |         | set (false under NT)\n\"G\"  | boolean | True if file1 exists and has a group\n     |         | ownership equal to the caller's group\n\"k\"  | boolean | True if file1 exists and has the sticky bit set\n\"l\"  | boolean | True if file1 exists and is a symbolic link\n\"M\"  | Time    | Last modification time for file1\n\"o\"  | boolean | True if file1 exists and is owned by\n     |         | the caller's effective uid\n\"O\"  | boolean | True if file1 exists and is owned by\n     |         | the caller's real uid\n\"p\"  | boolean | True if file1 exists and is a fifo\n\"r\"  | boolean | True if file1 is readable by the effective\n     |         | uid/gid of the caller\n\"R\"  | boolean | True if file is readable by the real\n     |         | uid/gid of the caller\n\"s\"  | int/nil | If file1 has nonzero size, return the size,\n     |         | otherwise return nil\n\"S\"  | boolean | True if file1 exists and is a socket\n\"u\"  | boolean | True if file1 has the setuid bit set\n\"w\"  | boolean | True if file1 exists and is writable by\n     |         | the effective uid/gid\n\"W\"  | boolean | True if file1 exists and is writable by\n     |         | the real uid/gid\n\"x\"  | boolean | True if file1 exists and is executable by\n     |         | the effective uid/gid\n\"X\"  | boolean | True if file1 exists and is executable by\n     |         | the real uid/gid\n\"z\"  | boolean | True if file1 exists and has a zero length\n```\n\nTests that take two files:\n\n```\n\"-\"  | boolean | True if file1 and file2 are identical\n\"=\"  | boolean | True if the modification times of file1\n     |         | and file2 are equal\n\"<\"  | boolean | True if the modification time of file1\n     |         | is prior to that of file2\n\">\"  | boolean | True if the modification time of file1\n     |         | is after that of file2\n```"},"sortText":"000077","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"test(${1:String}, ${2:String})${0}"}},{"label":"then","kind":2,"detail":"Kernel#then","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:X))\n  )\n  .returns(T.type_parameter(:X))\nend\ndef then(&blk); end\n```\n\n---\n\nYields self to the block and returns the result of the block.\n\n```ruby\n3.next.then {|x| x**x }.to_s             #=> \"256\"\n```\n\nGood usage for `then` is value piping in method chains:\n\n```ruby\nrequire 'open-uri'\nrequire 'json'\n\nconstruct_url(arguments).\n  then {|url| URI(url).read }.\n  then {|response| JSON.parse(response) }\n```\n\nWhen called without block, the method returns `Enumerator`, which can be\nused, for example, for conditional circuit-breaking:\n\n```ruby\n# meets condition, no-op\n1.then.detect(&:odd?)            # => 1\n# does not meet condition, drop value\n2.then.detect(&:odd?)            # => nil\n```"},"sortText":"000078","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"then do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"to_enum","kind":2,"detail":"Kernel#to_enum","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef to_enum(method=…, *args); end\n```"},"sortText":"000079","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"to_enum${0}"}},{"label":"to_enum","kind":2,"detail":"Kernel#to_enum (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    method: Symbol,\n    args: BasicObject,\n    blk: T.untyped\n  )\n  .returns(T::Enumerator[T.untyped])\nend\ndef to_enum (overload.1)(method=…, *args, &blk); end\n```"},"sortText":"000080","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"to_enum${0}"}},{"label":"undef","kind":2,"detail":"Kernel#undef","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg: BasicObject).void}\ndef undef(*arg); end\n```"},"sortText":"000081","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"undef${0}"}},{"label":"untrusted?","kind":2,"detail":"Kernel#untrusted?","documentation":{"kind":"markdown","value":"```ruby\nsig {returns(T::Boolean)}\ndef untrusted?; end\n```"},"sortText":"000082","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"untrusted?${0}"}},{"label":"yield_self","kind":2,"detail":"Kernel#yield_self","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:X))\n  )\n  .returns(T.type_parameter(:X))\nend\ndef yield_self(&blk); end\n```\n\n---\n\nYields self to the block and returns the result of the block.\n\n```ruby\n\"my string\".yield_self {|s| s.upcase }   #=> \"MY STRING\"\n```\n\nGood usage for `then` is value piping in method chains:\n\n```ruby\nrequire 'open-uri'\nrequire 'json'\n\nconstruct_url(arguments).\n  then {|url| URI(url).read }.\n  then {|response| JSON.parse(response) }\n```"},"sortText":"000083","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"yield_self do |${1:T.untyped}|\n  ${2}\nend${0}"}},{"label":"equal?","kind":2,"detail":"BasicObject#equal?","documentation":{"kind":"markdown","value":"```ruby\nsig {params(other: BasicObject).returns(T::Boolean)}\ndef equal?(other); end\n```\n\n---\n\nEquality --- At the\n[`Object`](https://docs.ruby-lang.org/en/2.7.0/Object.html) level, #==\nreturns `true` only if `obj` and `other` are the same object. Typically,\nthis method is overridden in descendant classes to provide class-specific\nmeaning.\n\nUnlike #==, the\n[`equal?`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html#method-i-equal-3F)\nmethod should never be overridden by subclasses as it is used to determine\nobject identity (that is, `a.equal?(b)` if and only if `a` is the same\nobject as `b`):\n\n```ruby\nobj = \"a\"\nother = obj.dup\n\nobj == other      #=> true\nobj.equal? other  #=> false\nobj.equal? obj    #=> true\n```\n\nThe eql? method returns `true` if `obj` and `other` refer to the same hash\nkey. This is used by [`Hash`](https://docs.ruby-lang.org/en/2.7.0/Hash.html)\nto test members for equality. For any pair of objects where eql? returns\n`true`, the hash value of both objects must be equal. So any subclass that\noverrides eql? should also override hash appropriately.\n\nFor objects of class\n[`Object`](https://docs.ruby-lang.org/en/2.7.0/Object.html), eql?  is\nsynonymous with #==. Subclasses normally continue this tradition by aliasing\neql? to their overridden #== method, but there are exceptions.\n[`Numeric`](https://docs.ruby-lang.org/en/2.7.0/Numeric.html) types, for\nexample, perform type conversion across #==, but not across eql?, so:\n\n```ruby\n1 == 1.0     #=> true\n1.eql? 1.0   #=> false\n```"},"sortText":"000084","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"equal?(${1:BasicObject})${0}"}},{"label":"__send__","kind":2,"detail":"BasicObject#__send__","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: Symbol, arg1: BasicObject).returns(T.untyped)}\ndef __send__(arg0, *arg1); end\n```\n\n---\n\nInvokes the method identified by *symbol*, passing it any arguments\nspecified. You can use `__send__` if the name `send` clashes with an\nexisting method in *obj*. When the method is identified by a string, the\nstring is converted to a symbol.\n\n[`BasicObject`](https://docs.ruby-lang.org/en/2.7.0/BasicObject.html)\nimplements +\\_\\_send\\_\\_+,\n[`Kernel`](https://docs.ruby-lang.org/en/2.7.0/Kernel.html) implements\n`send`.\n\n```ruby\nclass Klass\n  def hello(*args)\n    \"Hello \" + args.join(' ')\n  end\nend\nk = Klass.new\nk.send :hello, \"gentle\", \"readers\"   #=> \"Hello gentle readers\"\n```"},"sortText":"000085","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"__send__(${1:Symbol})${0}"}},{"label":"instance_eval","kind":2,"detail":"BasicObject#instance_eval","documentation":{"kind":"markdown","value":"```ruby\nsig {params(arg0: String, filename: String, lineno: Integer).returns(T.untyped)}\ndef instance_eval(arg0=…, filename=…, lineno=…); end\n```\n\n---\n\nEvaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver (*obj*). In order to set the context, the\nvariable `self` is set to *obj* while the code is executing, giving the code\naccess to *obj*'s instance variables and private methods.\n\nWhen `instance_eval` is given a block, *obj* is also passed in as the\nblock's only argument.\n\nWhen `instance_eval` is given a `String`, the optional second and third\nparameters supply a filename and starting line number that are used when\nreporting compilation errors.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\n  private\n  def the_secret\n    \"Ssssh! The secret is #{@secret}.\"\n  end\nend\nk = KlassWithSecret.new\nk.instance_eval { @secret }          #=> 99\nk.instance_eval { the_secret }       #=> \"Ssssh! The secret is 99.\"\nk.instance_eval {|obj| obj == self } #=> true\n```"},"sortText":"000086","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"instance_eval${0}"}},{"label":"instance_eval","kind":2,"detail":"BasicObject#instance_eval (overload.1)","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    blk: T.proc.returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_eval (overload.1)(&blk); end\n```\n\n---\n\nEvaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver (*obj*). In order to set the context, the\nvariable `self` is set to *obj* while the code is executing, giving the code\naccess to *obj*'s instance variables and private methods.\n\nWhen `instance_eval` is given a block, *obj* is also passed in as the\nblock's only argument.\n\nWhen `instance_eval` is given a `String`, the optional second and third\nparameters supply a filename and starting line number that are used when\nreporting compilation errors.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\n  private\n  def the_secret\n    \"Ssssh! The secret is #{@secret}.\"\n  end\nend\nk = KlassWithSecret.new\nk.instance_eval { @secret }          #=> 99\nk.instance_eval { the_secret }       #=> \"Ssssh! The secret is 99.\"\nk.instance_eval {|obj| obj == self } #=> true\n```"},"sortText":"000087","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"instance_eval do\n  ${1}\nend${0}"}},{"label":"instance_exec","kind":2,"detail":"BasicObject#instance_exec","documentation":{"kind":"markdown","value":"```ruby\nsig do\n  params(\n    args: T.type_parameter(:V),\n    blk: T.proc.params(arg0: T.untyped).returns(T.type_parameter(:U))\n  )\n  .returns(T.type_parameter(:U))\nend\ndef instance_exec(*args, &blk); end\n```\n\n---\n\nExecutes the given block within the context of the receiver (*obj*). In\norder to set the context, the variable `self` is set to *obj* while the code\nis executing, giving the code access to *obj*'s instance variables.\nArguments are passed as block parameters.\n\n```ruby\nclass KlassWithSecret\n  def initialize\n    @secret = 99\n  end\nend\nk = KlassWithSecret.new\nk.instance_exec(5) {|x| @secret+x }   #=> 104\n```"},"sortText":"000088","insertTextFormat":2,"textEdit":{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"newText":"instance_exec do |${1:T.untyped}|\n  ${2}\nend${0}"}}]}}

[2023-08-10 22:57:13.232] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":109},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x: Integer).void}\n  def example(x)\n    if x.even?\n    end\n    puts(x)\n  end\nend\n"}]}}

[2023-08-10 22:57:13.282] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":50,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":7,"character":7},"end":{"line":7,"character":7}},"context":{"diagnostics":[{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"message":"Method `e` does not exist on `A`","code":7003,"codeDescription":{"href":"https://srb.help/7003"},"severity":1,"relatedInformation":[]}]}}}

[2023-08-10 22:57:13.341] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:13.341] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:13.341] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:13.341] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:13.347] [consoleAndFile] [debug] [ErrorReporter] Sending diagnostics for file file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb, epoch 62
[2023-08-10 22:57:13.347] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","diagnostics":[]}}

[2023-08-10 22:57:13.348] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:13.348] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:13.357] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":50,"requestMethod":"textDocument/codeAction","result":[]}

[2023-08-10 22:57:13.600] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":51,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":7,"character":7},"end":{"line":7,"character":7}},"context":{"diagnostics":[]}}}

[2023-08-10 22:57:13.601] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:13.601] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:13.616] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":51,"requestMethod":"textDocument/codeAction","result":[]}

[2023-08-10 22:57:16.529] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":52,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":8,"character":0},"end":{"line":9,"character":0}},"context":{"diagnostics":[]}}}

[2023-08-10 22:57:16.529] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:16.529] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:16.542] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":52,"requestMethod":"textDocument/codeAction","result":[]}

[2023-08-10 22:57:16.945] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":110},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x: Integer).void}\n  def example(x)\n    if x.even?\n    end\n  end\nend\n"}]}}

[2023-08-10 22:57:17.041] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:17.041] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:17.041] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:17.041] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:17.312] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":53,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":6,"character":14},"end":{"line":6,"character":14}},"context":{"diagnostics":[]}}}

[2023-08-10 22:57:17.313] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:17.313] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:17.323] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":53}}

[2023-08-10 22:57:17.326] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":53,"requestMethod":"textDocument/codeAction","result":[]}

[2023-08-10 22:57:17.523] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":111},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x: Integer).void}\n  def example(x)\n    if x.even?\n      \n    end\n  end\nend\n"}]}}

[2023-08-10 22:57:17.624] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:17.624] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:17.625] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:17.625] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:17.742] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":113},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x: Integer).void}\n  def example(x)\n    if x.even?\n      puts(x)\n\n    end\n  end\nend\n"}]}}

[2023-08-10 22:57:17.839] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:17.839] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:17.839] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:17.839] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:18.320] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb","version":114},"contentChanges":[{"text":"# typed: strict\n\nclass A\n  extend T::Sig\n  sig {params(x: Integer).void}\n  def example(x)\n    if x.even?\n      puts(x)\n    end\n  end\nend\n"}]}}

[2023-08-10 22:57:18.370] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":54,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"range":{"start":{"line":7,"character":13},"end":{"line":7,"character":13}},"context":{"diagnostics":[]}}}

[2023-08-10 22:57:18.417] [consoleAndFile] [debug] Trying to see if fast path is available after 1 file changes
[2023-08-10 22:57:18.417] [consoleAndFile] [debug] Taking fast path
[2023-08-10 22:57:18.417] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:18.417] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:18.422] [consoleAndFile] [debug] Added 0 files that were not part of the edit to the update set
[2023-08-10 22:57:18.422] [consoleAndFile] [debug] Running fast path over num_files=1
[2023-08-10 22:57:18.435] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":54,"requestMethod":"textDocument/codeAction","result":[]}

[2023-08-10 22:57:18.808] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":55,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":7,"character":8}}}

[2023-08-10 22:57:18.817] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":55,"requestMethod":"textDocument/hover","result":{"contents":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BasicObject).returns(NilClass)}\ndef puts(*arg0); end\n```\n\n---\n\nEquivalent to\n\n```\n$stdout.puts(obj, ...)\n```"}}}

[2023-08-10 22:57:20.225] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":56,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":7,"character":10}}}

[2023-08-10 22:57:20.234] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":56,"requestMethod":"textDocument/hover","result":{"contents":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BasicObject).returns(NilClass)}\ndef puts(*arg0); end\n```\n\n---\n\nEquivalent to\n\n```\n$stdout.puts(obj, ...)\n```"}}}

[2023-08-10 22:57:20.624] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":57,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":7,"character":12}}}

[2023-08-10 22:57:20.631] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":57,"requestMethod":"textDocument/hover","result":{"contents":{"kind":"markdown","value":"```ruby\nInteger\n```"}}}

[2023-08-10 22:57:20.973] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":58,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":7,"character":11}}}

[2023-08-10 22:57:20.987] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":58,"requestMethod":"textDocument/hover","result":{"contents":{"kind":"markdown","value":"```ruby\nInteger\n```"}}}

[2023-08-10 22:57:21.508] [consoleAndFile] [debug] Read: {"jsonrpc":"2.0","id":59,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jez/stripe/sorbet/test/sandbox/vscode/example.rb"},"position":{"line":7,"character":13}}}

[2023-08-10 22:57:21.517] [consoleAndFile] [debug] Write: {"jsonrpc":"2.0","id":59,"requestMethod":"textDocument/hover","result":{"contents":{"kind":"markdown","value":"```ruby\nsig {params(arg0: BasicObject).returns(NilClass)}\ndef puts(*arg0); end\n```\n\n---\n\nEquivalent to\n\n```\n$stdout.puts(obj, ...)\n```"}}}

